

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Sep 09 17:32:40 2025

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	text23,global,reloc=2,class=CODE,delta=1
    32                           	psect	text24,global,reloc=2,class=CODE,delta=1
    33                           	psect	text25,global,reloc=2,class=CODE,delta=1
    34                           	psect	text26,global,reloc=2,class=CODE,delta=1
    35                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    36                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    37  0000                     
    38                           	psect	mediumconst
    39  00FEF8                     __pmediumconst:
    40                           	opt stack 0
    41  00FEF8  00                 	db	0
    42  00FEF9                     _dpowers:
    43                           	opt stack 0
    44  00FEF9  0001               	dw	1
    45  00FEFB  0000               	dw	0
    46  00FEFD  000A               	dw	10
    47  00FEFF  0000               	dw	0
    48  00FF01  0064               	dw	100
    49  00FF03  0000               	dw	0
    50  00FF05  03E8               	dw	1000
    51  00FF07  0000               	dw	0
    52  00FF09  2710               	dw	10000
    53  00FF0B  0000               	dw	0
    54  00FF0D  86A0               	dw	34464
    55  00FF0F  0001               	dw	1
    56  00FF11  4240               	dw	16960
    57  00FF13  000F               	dw	15
    58  00FF15  9680               	dw	38528
    59  00FF17  0098               	dw	152
    60  00FF19  E100               	dw	57600
    61  00FF1B  05F5               	dw	1525
    62  00FF1D  CA00               	dw	51712
    63  00FF1F  3B9A               	dw	15258
    64  00FF21                     __end_of_dpowers:
    65                           	opt stack 0
    66  00FF21                     __npowers_:
    67                           	opt stack 0
    68  00FF21  00                 	db	0
    69  00FF22  80                 	db	128
    70  00FF23  3F                 	db	63
    71  00FF24  CD                 	db	205
    72  00FF25  CC                 	db	204
    73  00FF26  3D                 	db	61
    74  00FF27  D7                 	db	215
    75  00FF28  23                 	db	35
    76  00FF29  3C                 	db	60
    77  00FF2A  12                 	db	18
    78  00FF2B  83                 	db	131
    79  00FF2C  3A                 	db	58
    80  00FF2D  B7                 	db	183
    81  00FF2E  D1                 	db	209
    82  00FF2F  38                 	db	56
    83  00FF30  C6                 	db	198
    84  00FF31  27                 	db	39
    85  00FF32  37                 	db	55
    86  00FF33  38                 	db	56
    87  00FF34  86                 	db	134
    88  00FF35  35                 	db	53
    89  00FF36  C0                 	db	192
    90  00FF37  D6                 	db	214
    91  00FF38  33                 	db	51
    92  00FF39  CC                 	db	204
    93  00FF3A  2B                 	db	43
    94  00FF3B  32                 	db	50
    95  00FF3C  70                 	db	112
    96  00FF3D  89                 	db	137
    97  00FF3E  30                 	db	48
    98  00FF3F  E7                 	db	231
    99  00FF40  DB                 	db	219
   100  00FF41  2E                 	db	46
   101  00FF42  E5                 	db	229
   102  00FF43  3C                 	db	60
   103  00FF44  1E                 	db	30
   104  00FF45  42                 	db	66
   105  00FF46  A2                 	db	162
   106  00FF47  0D                 	db	13
   107  00FF48                     __end_of__npowers_:
   108                           	opt stack 0
   109  00FF48                     __powers_:
   110                           	opt stack 0
   111  00FF48  00                 	db	0
   112  00FF49  80                 	db	128
   113  00FF4A  3F                 	db	63
   114  00FF4B  00                 	db	0
   115  00FF4C  20                 	db	32
   116  00FF4D  41                 	db	65
   117  00FF4E  00                 	db	0
   118  00FF4F  C8                 	db	200
   119  00FF50  42                 	db	66
   120  00FF51  00                 	db	0
   121  00FF52  7A                 	db	122
   122  00FF53  44                 	db	68
   123  00FF54  40                 	db	64
   124  00FF55  1C                 	db	28
   125  00FF56  46                 	db	70
   126  00FF57  50                 	db	80
   127  00FF58  C3                 	db	195
   128  00FF59  47                 	db	71
   129  00FF5A  24                 	db	36
   130  00FF5B  74                 	db	116
   131  00FF5C  49                 	db	73
   132  00FF5D  97                 	db	151
   133  00FF5E  18                 	db	24
   134  00FF5F  4B                 	db	75
   135  00FF60  BC                 	db	188
   136  00FF61  BE                 	db	190
   137  00FF62  4C                 	db	76
   138  00FF63  6B                 	db	107
   139  00FF64  6E                 	db	110
   140  00FF65  4E                 	db	78
   141  00FF66  03                 	db	3
   142  00FF67  15                 	db	21
   143  00FF68  50                 	db	80
   144  00FF69  79                 	db	121
   145  00FF6A  AD                 	db	173
   146  00FF6B  60                 	db	96
   147  00FF6C  F3                 	db	243
   148  00FF6D  49                 	db	73
   149  00FF6E  71                 	db	113
   150  00FF6F                     __end_of__powers_:
   151                           	opt stack 0
   152  0000                     _ADCON0	set	4034
   153  0000                     _ADCON0bits	set	4034
   154  0000                     _ADCON1	set	4033
   155  0000                     _ADCON2	set	4032
   156  0000                     _ADRESH	set	4036
   157  0000                     _ADRESL	set	4035
   158  0000                     _OSCCON	set	4051
   159  0000                     _PIE1bits	set	3997
   160  0000                     _PIR1bits	set	3998
   161  0000                     _RCSTA	set	4011
   162  0000                     _RCSTAbits	set	4011
   163  0000                     _SPBRG	set	4015
   164  0000                     _SPBRGH	set	4016
   165  0000                     _TRISCbits	set	3988
   166  0000                     _TXREG	set	4013
   167  0000                     _TXSTA	set	4012
   168  0000                     _TXSTAbits	set	4012
   169  0000                     _TRMT	set	32097
   170  00FF6F                     STR_6:
   171  00FF6F  52                 	db	82	;'R'
   172  00FF70  65                 	db	101	;'e'
   173  00FF71  66                 	db	102	;'f'
   174  00FF72  65                 	db	101	;'e'
   175  00FF73  72                 	db	114	;'r'
   176  00FF74  65                 	db	101	;'e'
   177  00FF75  6E                 	db	110	;'n'
   178  00FF76  63                 	db	99	;'c'
   179  00FF77  65                 	db	101	;'e'
   180  00FF78  20                 	db	32
   181  00FF79  76                 	db	118	;'v'
   182  00FF7A  6F                 	db	111	;'o'
   183  00FF7B  6C                 	db	108	;'l'
   184  00FF7C  74                 	db	116	;'t'
   185  00FF7D  61                 	db	97	;'a'
   186  00FF7E  67                 	db	103	;'g'
   187  00FF7F  65                 	db	101	;'e'
   188  00FF80  20                 	db	32
   189  00FF81  61                 	db	97	;'a'
   190  00FF82  74                 	db	116	;'t'
   191  00FF83  20                 	db	32
   192  00FF84  41                 	db	65	;'A'
   193  00FF85  4E                 	db	78	;'N'
   194  00FF86  33                 	db	51	;'3'
   195  00FF87  20                 	db	32
   196  00FF88  69                 	db	105	;'i'
   197  00FF89  73                 	db	115	;'s'
   198  00FF8A  20                 	db	32
   199  00FF8B  25                 	db	37
   200  00FF8C  66                 	db	102	;'f'
   201  00FF8D  0D                 	db	13
   202  00FF8E  0A                 	db	10
   203  00FF8F  0A                 	db	10
   204  00FF90  00                 	db	0
   205  00FF91                     STR_1:
   206  00FF91  54                 	db	84	;'T'
   207  00FF92  65                 	db	101	;'e'
   208  00FF93  73                 	db	115	;'s'
   209  00FF94  74                 	db	116	;'t'
   210  00FF95  69                 	db	105	;'i'
   211  00FF96  6E                 	db	110	;'n'
   212  00FF97  67                 	db	103	;'g'
   213  00FF98  20                 	db	32
   214  00FF99  41                 	db	65	;'A'
   215  00FF9A  2F                 	db	47
   216  00FF9B  44                 	db	68	;'D'
   217  00FF9C  20                 	db	32
   218  00FF9D  43                 	db	67	;'C'
   219  00FF9E  6F                 	db	111	;'o'
   220  00FF9F  6E                 	db	110	;'n'
   221  00FFA0  6E                 	db	110	;'n'
   222  00FFA1  65                 	db	101	;'e'
   223  00FFA2  63                 	db	99	;'c'
   224  00FFA3  74                 	db	116	;'t'
   225  00FFA4  69                 	db	105	;'i'
   226  00FFA5  6F                 	db	111	;'o'
   227  00FFA6  6E                 	db	110	;'n'
   228  00FFA7  73                 	db	115	;'s'
   229  00FFA8  20                 	db	32
   230  00FFA9  2E                 	db	46
   231  00FFAA  2E                 	db	46
   232  00FFAB  2E                 	db	46
   233  00FFAC  00                 	db	0
   234  00FFAD                     STR_5:
   235  00FFAD  56                 	db	86	;'V'
   236  00FFAE  6F                 	db	111	;'o'
   237  00FFAF  6C                 	db	108	;'l'
   238  00FFB0  74                 	db	116	;'t'
   239  00FFB1  20                 	db	32
   240  00FFB2  61                 	db	97	;'a'
   241  00FFB3  74                 	db	116	;'t'
   242  00FFB4  20                 	db	32
   243  00FFB5  41                 	db	65	;'A'
   244  00FFB6  4E                 	db	78	;'N'
   245  00FFB7  34                 	db	52	;'4'
   246  00FFB8  20                 	db	32
   247  00FFB9  69                 	db	105	;'i'
   248  00FFBA  73                 	db	115	;'s'
   249  00FFBB  20                 	db	32
   250  00FFBC  25                 	db	37
   251  00FFBD  66                 	db	102	;'f'
   252  00FFBE  0D                 	db	13
   253  00FFBF  0A                 	db	10
   254  00FFC0  0A                 	db	10
   255  00FFC1  00                 	db	0
   256  00FFC2                     STR_2:
   257  00FFC2  56                 	db	86	;'V'
   258  00FFC3  6F                 	db	111	;'o'
   259  00FFC4  6C                 	db	108	;'l'
   260  00FFC5  74                 	db	116	;'t'
   261  00FFC6  20                 	db	32
   262  00FFC7  61                 	db	97	;'a'
   263  00FFC8  74                 	db	116	;'t'
   264  00FFC9  20                 	db	32
   265  00FFCA  41                 	db	65	;'A'
   266  00FFCB  4E                 	db	78	;'N'
   267  00FFCC  30                 	db	48	;'0'
   268  00FFCD  20                 	db	32
   269  00FFCE  69                 	db	105	;'i'
   270  00FFCF  73                 	db	115	;'s'
   271  00FFD0  20                 	db	32
   272  00FFD1  25                 	db	37
   273  00FFD2  66                 	db	102	;'f'
   274  00FFD3  0D                 	db	13
   275  00FFD4  0A                 	db	10
   276  00FFD5  00                 	db	0
   277  00FFD6                     STR_3:
   278  00FFD6  56                 	db	86	;'V'
   279  00FFD7  6F                 	db	111	;'o'
   280  00FFD8  6C                 	db	108	;'l'
   281  00FFD9  74                 	db	116	;'t'
   282  00FFDA  20                 	db	32
   283  00FFDB  61                 	db	97	;'a'
   284  00FFDC  74                 	db	116	;'t'
   285  00FFDD  20                 	db	32
   286  00FFDE  41                 	db	65	;'A'
   287  00FFDF  4E                 	db	78	;'N'
   288  00FFE0  31                 	db	49	;'1'
   289  00FFE1  20                 	db	32
   290  00FFE2  69                 	db	105	;'i'
   291  00FFE3  73                 	db	115	;'s'
   292  00FFE4  20                 	db	32
   293  00FFE5  25                 	db	37
   294  00FFE6  66                 	db	102	;'f'
   295  00FFE7  0D                 	db	13
   296  00FFE8  0A                 	db	10
   297  00FFE9  00                 	db	0
   298  00FFEA                     STR_4:
   299  00FFEA  56                 	db	86	;'V'
   300  00FFEB  6F                 	db	111	;'o'
   301  00FFEC  6C                 	db	108	;'l'
   302  00FFED  74                 	db	116	;'t'
   303  00FFEE  20                 	db	32
   304  00FFEF  61                 	db	97	;'a'
   305  00FFF0  74                 	db	116	;'t'
   306  00FFF1  20                 	db	32
   307  00FFF2  41                 	db	65	;'A'
   308  00FFF3  4E                 	db	78	;'N'
   309  00FFF4  32                 	db	50	;'2'
   310  00FFF5  20                 	db	32
   311  00FFF6  69                 	db	105	;'i'
   312  00FFF7  73                 	db	115	;'s'
   313  00FFF8  20                 	db	32
   314  00FFF9  25                 	db	37
   315  00FFFA  66                 	db	102	;'f'
   316  00FFFB  0D                 	db	13
   317  00FFFC  0A                 	db	10
   318  00FFFD  00                 	db	0
   319                           
   320                           ; #config settings
   321  00FFFE  00                 	db	0	; dummy byte at the end
   322  0000                     
   323                           	psect	cinit
   324  00E540                     __pcinit:
   325                           	opt stack 0
   326  00E540                     start_initialization:
   327                           	opt stack 0
   328  00E540                     __initialization:
   329                           	opt stack 0
   330  00E540                     end_of_initialization:
   331                           	opt stack 0
   332  00E540                     __end_of__initialization:
   333                           	opt stack 0
   334  00E540  0E00               	movlw	low (__Lmediumconst shr (0+16))
   335  00E542  6EF8               	movwf	tblptru,c
   336  00E544  0100               	movlb	0
   337  00E546  EF75  F076         	goto	_main	;jump to C main() function
   338                           tblptru	equ	0xFF8
   339                           
   340                           	psect	cstackCOMRAM
   341  000001                     __pcstackCOMRAM:
   342                           	opt stack 0
   343  000001                     ?_Get_Full_ADC:
   344                           	opt stack 0
   345  000001                     ?___awmod:
   346                           	opt stack 0
   347  000001                     ?___ftpack:
   348                           	opt stack 0
   349  000001                     ?___ftneg:
   350                           	opt stack 0
   351  000001                     ?__tdiv_to_l_:
   352                           	opt stack 0
   353  000001                     ?__div_to_l_:
   354                           	opt stack 0
   355  000001                     ?___lldiv:
   356                           	opt stack 0
   357  000001                     ?___llmod:
   358                           	opt stack 0
   359  000001                     putch@c:
   360                           	opt stack 0
   361  000001                     OpenUSART@spbrg:
   362                           	opt stack 0
   363  000001                     ___awmod@dividend:
   364                           	opt stack 0
   365  000001                     __div_to_l_@f1:
   366                           	opt stack 0
   367  000001                     ___ftpack@arg:
   368                           	opt stack 0
   369  000001                     __tdiv_to_l_@f1:
   370                           	opt stack 0
   371  000001                     ___ftge@ff1:
   372                           	opt stack 0
   373  000001                     ___ftneg@f1:
   374                           	opt stack 0
   375  000001                     ___lldiv@dividend:
   376                           	opt stack 0
   377  000001                     ___llmod@dividend:
   378                           	opt stack 0
   379                           
   380                           ; 4 bytes @ 0x0
   381  000001                     	ds	2
   382  000003                     ??_Get_Full_ADC:
   383  000003                     OpenUSART@config:
   384                           	opt stack 0
   385  000003                     ___awmod@divisor:
   386                           	opt stack 0
   387                           
   388                           ; 2 bytes @ 0x2
   389  000003                     	ds	1
   390  000004                     ___ftpack@exp:
   391                           	opt stack 0
   392  000004                     __div_to_l_@f2:
   393                           	opt stack 0
   394  000004                     __tdiv_to_l_@f2:
   395                           	opt stack 0
   396  000004                     ___ftge@ff2:
   397                           	opt stack 0
   398                           
   399                           ; 3 bytes @ 0x3
   400  000004                     	ds	1
   401  000005                     ___awmod@counter:
   402                           	opt stack 0
   403  000005                     ___ftpack@sign:
   404                           	opt stack 0
   405  000005                     Get_Full_ADC@result:
   406                           	opt stack 0
   407  000005                     ___lldiv@divisor:
   408                           	opt stack 0
   409  000005                     ___llmod@divisor:
   410                           	opt stack 0
   411                           
   412                           ; 4 bytes @ 0x4
   413  000005                     	ds	1
   414  000006                     ??___ftpack:
   415  000006                     ___awmod@sign:
   416                           	opt stack 0
   417                           
   418                           ; 1 bytes @ 0x5
   419  000006                     	ds	1
   420  000007                     ??__tdiv_to_l_:
   421  000007                     ??___ftge:
   422  000007                     ?___awdiv:
   423                           	opt stack 0
   424  000007                     ___awdiv@dividend:
   425                           	opt stack 0
   426  000007                     __div_to_l_@quot:
   427                           	opt stack 0
   428                           
   429                           ; 4 bytes @ 0x6
   430  000007                     	ds	2
   431  000009                     ?___awtoft:
   432                           	opt stack 0
   433  000009                     ?___lltoft:
   434                           	opt stack 0
   435  000009                     ___llmod@counter:
   436                           	opt stack 0
   437  000009                     ___awdiv@divisor:
   438                           	opt stack 0
   439  000009                     ___awtoft@c:
   440                           	opt stack 0
   441  000009                     ___lldiv@quotient:
   442                           	opt stack 0
   443  000009                     ___lltoft@c:
   444                           	opt stack 0
   445                           
   446                           ; 4 bytes @ 0x8
   447  000009                     	ds	1
   448  00000A                     __tdiv_to_l_@quot:
   449                           	opt stack 0
   450                           
   451                           ; 4 bytes @ 0x9
   452  00000A                     	ds	1
   453  00000B                     ___awdiv@counter:
   454                           	opt stack 0
   455  00000B                     __div_to_l_@cntr:
   456                           	opt stack 0
   457                           
   458                           ; 1 bytes @ 0xA
   459  00000B                     	ds	1
   460  00000C                     ___awdiv@sign:
   461                           	opt stack 0
   462  00000C                     ___awtoft@sign:
   463                           	opt stack 0
   464  00000C                     __div_to_l_@exp1:
   465                           	opt stack 0
   466                           
   467                           ; 1 bytes @ 0xB
   468  00000C                     	ds	1
   469  00000D                     ??___lltoft:
   470  00000D                     ?___ftdiv:
   471                           	opt stack 0
   472  00000D                     ___lldiv@counter:
   473                           	opt stack 0
   474  00000D                     ___awdiv@quotient:
   475                           	opt stack 0
   476  00000D                     ___ftdiv@f1:
   477                           	opt stack 0
   478                           
   479                           ; 3 bytes @ 0xC
   480  00000D                     	ds	1
   481  00000E                     __tdiv_to_l_@cntr:
   482                           	opt stack 0
   483                           
   484                           ; 1 bytes @ 0xD
   485  00000E                     	ds	1
   486  00000F                     ?___wmul:
   487                           	opt stack 0
   488  00000F                     __tdiv_to_l_@exp1:
   489                           	opt stack 0
   490  00000F                     ___wmul@multiplier:
   491                           	opt stack 0
   492                           
   493                           ; 2 bytes @ 0xE
   494  00000F                     	ds	1
   495  000010                     ___ftdiv@f2:
   496                           	opt stack 0
   497                           
   498                           ; 3 bytes @ 0xF
   499  000010                     	ds	1
   500  000011                     ___lltoft@exp:
   501                           	opt stack 0
   502  000011                     ___wmul@multiplicand:
   503                           	opt stack 0
   504                           
   505                           ; 2 bytes @ 0x10
   506  000011                     	ds	2
   507  000013                     ??___ftdiv:
   508  000013                     ___wmul@product:
   509                           	opt stack 0
   510                           
   511                           ; 2 bytes @ 0x12
   512  000013                     	ds	3
   513  000016                     ___ftdiv@cntr:
   514                           	opt stack 0
   515                           
   516                           ; 1 bytes @ 0x15
   517  000016                     	ds	1
   518  000017                     ___ftdiv@f3:
   519                           	opt stack 0
   520                           
   521                           ; 3 bytes @ 0x16
   522  000017                     	ds	3
   523  00001A                     ___ftdiv@exp:
   524                           	opt stack 0
   525                           
   526                           ; 1 bytes @ 0x19
   527  00001A                     	ds	1
   528  00001B                     ___ftdiv@sign:
   529                           	opt stack 0
   530                           
   531                           ; 1 bytes @ 0x1A
   532  00001B                     	ds	1
   533  00001C                     ?___ftmul:
   534                           	opt stack 0
   535  00001C                     ___ftmul@f1:
   536                           	opt stack 0
   537                           
   538                           ; 3 bytes @ 0x1B
   539  00001C                     	ds	3
   540  00001F                     ___ftmul@f2:
   541                           	opt stack 0
   542                           
   543                           ; 3 bytes @ 0x1E
   544  00001F                     	ds	3
   545  000022                     ??___ftmul:
   546                           
   547                           ; 0 bytes @ 0x21
   548  000022                     	ds	3
   549  000025                     ___ftmul@exp:
   550                           	opt stack 0
   551                           
   552                           ; 1 bytes @ 0x24
   553  000025                     	ds	1
   554  000026                     ___ftmul@f3_as_product:
   555                           	opt stack 0
   556                           
   557                           ; 3 bytes @ 0x25
   558  000026                     	ds	3
   559  000029                     ___ftmul@cntr:
   560                           	opt stack 0
   561                           
   562                           ; 1 bytes @ 0x28
   563  000029                     	ds	1
   564  00002A                     ___ftmul@sign:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x29
   568  00002A                     	ds	1
   569  00002B                     ?_Read_Ch_Volt:
   570                           	opt stack 0
   571  00002B                     ?_fround:
   572                           	opt stack 0
   573  00002B                     ?_scale:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x2A
   577  00002B                     	ds	3
   578  00002E                     Read_Ch_Volt@Volt:
   579                           	opt stack 0
   580  00002E                     _fround$1008:
   581                           	opt stack 0
   582  00002E                     _scale$1009:
   583                           	opt stack 0
   584                           
   585                           ; 3 bytes @ 0x2D
   586  00002E                     	ds	3
   587  000031                     scale@scl:
   588                           	opt stack 0
   589  000031                     Read_Ch_Volt@ADC_Result:
   590                           	opt stack 0
   591  000031                     _fround$1007:
   592                           	opt stack 0
   593                           
   594                           ; 3 bytes @ 0x30
   595  000031                     	ds	1
   596  000032                     ?___fttol:
   597                           	opt stack 0
   598  000032                     ___fttol@f1:
   599                           	opt stack 0
   600                           
   601                           ; 3 bytes @ 0x31
   602  000032                     	ds	1
   603  000033                     Read_Ch_Volt@ch_num:
   604                           	opt stack 0
   605                           
   606                           ; 1 bytes @ 0x32
   607  000033                     	ds	1
   608  000034                     fround@prec:
   609                           	opt stack 0
   610                           
   611                           ; 1 bytes @ 0x33
   612  000034                     	ds	1
   613  000035                     ?___ftadd:
   614                           	opt stack 0
   615  000035                     ___ftadd@f1:
   616                           	opt stack 0
   617                           
   618                           ; 3 bytes @ 0x34
   619  000035                     	ds	1
   620  000036                     ??___fttol:
   621                           
   622                           ; 0 bytes @ 0x35
   623  000036                     	ds	2
   624  000038                     ___ftadd@f2:
   625                           	opt stack 0
   626                           
   627                           ; 3 bytes @ 0x37
   628  000038                     	ds	3
   629  00003B                     ??___ftadd:
   630  00003B                     ___fttol@sign1:
   631                           	opt stack 0
   632                           
   633                           ; 1 bytes @ 0x3A
   634  00003B                     	ds	1
   635  00003C                     ___fttol@lval:
   636                           	opt stack 0
   637                           
   638                           ; 4 bytes @ 0x3B
   639  00003C                     	ds	2
   640  00003E                     ___ftadd@sign:
   641                           	opt stack 0
   642                           
   643                           ; 1 bytes @ 0x3D
   644  00003E                     	ds	1
   645  00003F                     ___ftadd@exp2:
   646                           	opt stack 0
   647                           
   648                           ; 1 bytes @ 0x3E
   649  00003F                     	ds	1
   650  000040                     ___ftadd@exp1:
   651                           	opt stack 0
   652  000040                     ___fttol@exp1:
   653                           	opt stack 0
   654                           
   655                           ; 1 bytes @ 0x3F
   656  000040                     	ds	1
   657  000041                     ?___ftsub:
   658                           	opt stack 0
   659  000041                     ___ftsub@f1:
   660                           	opt stack 0
   661                           
   662                           ; 3 bytes @ 0x40
   663  000041                     	ds	3
   664  000044                     ___ftsub@f2:
   665                           	opt stack 0
   666                           
   667                           ; 3 bytes @ 0x43
   668  000044                     	ds	3
   669  000047                     ?_printf:
   670                           	opt stack 0
   671  000047                     printf@f:
   672                           	opt stack 0
   673                           
   674                           ; 2 bytes @ 0x46
   675  000047                     	ds	5
   676  00004C                     ??_printf:
   677                           
   678                           ; 0 bytes @ 0x4B
   679  00004C                     	ds	6
   680  000052                     _printf$1010:
   681                           	opt stack 0
   682                           
   683                           ; 3 bytes @ 0x51
   684  000052                     	ds	3
   685  000055                     printf@ap:
   686                           	opt stack 0
   687                           
   688                           ; 2 bytes @ 0x54
   689  000055                     	ds	2
   690  000057                     printf@flag:
   691                           	opt stack 0
   692                           
   693                           ; 2 bytes @ 0x56
   694  000057                     	ds	2
   695  000059                     printf@prec:
   696                           	opt stack 0
   697                           
   698                           ; 2 bytes @ 0x58
   699  000059                     	ds	2
   700  00005B                     printf@val:
   701                           	opt stack 0
   702                           
   703                           ; 4 bytes @ 0x5A
   704  00005B                     	ds	4
   705  00005F                     printf@exp:
   706                           	opt stack 0
   707                           
   708                           ; 2 bytes @ 0x5E
   709  00005F                     	ds	2
   710  000061                     printf@tmpval:
   711                           	opt stack 0
   712                           
   713                           ; 4 bytes @ 0x60
   714  000061                     	ds	4
   715  000065                     printf@fval:
   716                           	opt stack 0
   717                           
   718                           ; 3 bytes @ 0x64
   719  000065                     	ds	3
   720  000068                     printf@c:
   721                           	opt stack 0
   722                           
   723                           ; 1 bytes @ 0x67
   724  000068                     	ds	1
   725  000069                     main@Volt:
   726                           	opt stack 0
   727                           
   728                           ; 3 bytes @ 0x68
   729  000069                     	ds	3
   730                           tblptru	equ	0xFF8
   731                           
   732 ;;
   733 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   734 ;;
   735 ;; *************** function _main *****************
   736 ;; Defined at:
   737 ;;		line 52 in file "lab1p3.c"
   738 ;; Parameters:    Size  Location     Type
   739 ;;		None
   740 ;; Auto vars:     Size  Location     Type
   741 ;;  Volt            3  104[COMRAM] float 
   742 ;; Return value:  Size  Location     Type
   743 ;;		None               void
   744 ;; Registers used:
   745 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   746 ;; Tracked objects:
   747 ;;		On entry : 0/0
   748 ;;		On exit  : 0/0
   749 ;;		Unchanged: 0/0
   750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   751 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   752 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   754 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   755 ;;Total ram usage:        3 bytes
   756 ;; Hardware stack levels required when called:    4
   757 ;; This function calls:
   758 ;;		_Init_ADC
   759 ;;		_Init_UART
   760 ;;		_Read_Ch_Volt
   761 ;;		_printf
   762 ;; This function is called by:
   763 ;;		Startup code after reset
   764 ;; This function uses a non-reentrant model
   765 ;;
   766                           
   767                           	psect	text0
   768  00ECEA                     __ptext0:
   769                           	opt stack 0
   770  00ECEA                     _main:
   771                           	opt stack 27
   772                           
   773                           ;lab1p3.c: 54: float Volt;
   774                           ;lab1p3.c: 55: Init_UART();
   775                           
   776                           ;incstack = 0
   777  00ECEA  ECB3  F072         	call	_Init_UART	;wreg free
   778                           
   779                           ;lab1p3.c: 56: Init_ADC();
   780  00ECEE  ECA5  F072         	call	_Init_ADC	;wreg free
   781  00ECF2  D000               	goto	l2489
   782  00ECF4                     l2489:
   783                           
   784                           ;lab1p3.c: 58: {
   785                           ;lab1p3.c: 59: printf ("Testing A/D Connections ...");
   786  00ECF4  0E91               	movlw	low STR_1
   787  00ECF6  6E47               	movwf	printf@f,c
   788  00ECF8  0EFF               	movlw	high STR_1
   789  00ECFA  6E48               	movwf	printf@f+1,c
   790  00ECFC  EC69  F07C         	call	_printf	;wreg free
   791                           
   792                           ;lab1p3.c: 60: Volt = Read_Ch_Volt( 0);
   793  00ED00  0E00               	movlw	0
   794  00ED02  ECD6  F073         	call	_Read_Ch_Volt
   795  00ED06  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   796  00ED0A  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   797  00ED0E  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   798                           
   799                           ;lab1p3.c: 61: printf ("Volt at AN0 is %f\r\n", Volt);
   800  00ED12  0EC2               	movlw	low STR_2
   801  00ED14  6E47               	movwf	printf@f,c
   802  00ED16  0EFF               	movlw	high STR_2
   803  00ED18  6E48               	movwf	printf@f+1,c
   804  00ED1A  C069  F049         	movff	main@Volt,?_printf+2
   805  00ED1E  C06A  F04A         	movff	main@Volt+1,?_printf+3
   806  00ED22  C06B  F04B         	movff	main@Volt+2,?_printf+4
   807  00ED26  EC69  F07C         	call	_printf	;wreg free
   808                           
   809                           ;lab1p3.c: 62: Volt = Read_Ch_Volt( 1);
   810  00ED2A  0E01               	movlw	1
   811  00ED2C  ECD6  F073         	call	_Read_Ch_Volt
   812  00ED30  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   813  00ED34  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   814  00ED38  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   815                           
   816                           ;lab1p3.c: 63: printf ("Volt at AN1 is %f\r\n", Volt);
   817  00ED3C  0ED6               	movlw	low STR_3
   818  00ED3E  6E47               	movwf	printf@f,c
   819  00ED40  0EFF               	movlw	high STR_3
   820  00ED42  6E48               	movwf	printf@f+1,c
   821  00ED44  C069  F049         	movff	main@Volt,?_printf+2
   822  00ED48  C06A  F04A         	movff	main@Volt+1,?_printf+3
   823  00ED4C  C06B  F04B         	movff	main@Volt+2,?_printf+4
   824  00ED50  EC69  F07C         	call	_printf	;wreg free
   825                           
   826                           ;lab1p3.c: 64: Volt = Read_Ch_Volt( 2);
   827  00ED54  0E02               	movlw	2
   828  00ED56  ECD6  F073         	call	_Read_Ch_Volt
   829  00ED5A  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   830  00ED5E  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   831  00ED62  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   832                           
   833                           ;lab1p3.c: 65: printf ("Volt at AN2 is %f\r\n", Volt);
   834  00ED66  0EEA               	movlw	low STR_4
   835  00ED68  6E47               	movwf	printf@f,c
   836  00ED6A  0EFF               	movlw	high STR_4
   837  00ED6C  6E48               	movwf	printf@f+1,c
   838  00ED6E  C069  F049         	movff	main@Volt,?_printf+2
   839  00ED72  C06A  F04A         	movff	main@Volt+1,?_printf+3
   840  00ED76  C06B  F04B         	movff	main@Volt+2,?_printf+4
   841  00ED7A  EC69  F07C         	call	_printf	;wreg free
   842                           
   843                           ;lab1p3.c: 66: Volt = Read_Ch_Volt( 4);
   844  00ED7E  0E04               	movlw	4
   845  00ED80  ECD6  F073         	call	_Read_Ch_Volt
   846  00ED84  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   847  00ED88  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   848  00ED8C  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   849                           
   850                           ;lab1p3.c: 67: printf ("Volt at AN4 is %f\r\n\n", Volt);
   851  00ED90  0EAD               	movlw	low STR_5
   852  00ED92  6E47               	movwf	printf@f,c
   853  00ED94  0EFF               	movlw	high STR_5
   854  00ED96  6E48               	movwf	printf@f+1,c
   855  00ED98  C069  F049         	movff	main@Volt,?_printf+2
   856  00ED9C  C06A  F04A         	movff	main@Volt+1,?_printf+3
   857  00EDA0  C06B  F04B         	movff	main@Volt+2,?_printf+4
   858  00EDA4  EC69  F07C         	call	_printf	;wreg free
   859                           
   860                           ;lab1p3.c: 68: Volt = Read_Ch_Volt( 3);
   861  00EDA8  0E03               	movlw	3
   862  00EDAA  ECD6  F073         	call	_Read_Ch_Volt
   863  00EDAE  C02B  F069         	movff	?_Read_Ch_Volt,main@Volt
   864  00EDB2  C02C  F06A         	movff	?_Read_Ch_Volt+1,main@Volt+1
   865  00EDB6  C02D  F06B         	movff	?_Read_Ch_Volt+2,main@Volt+2
   866                           
   867                           ;lab1p3.c: 69: printf ("Reference voltage at AN3 is %f\r\n\n", Volt);
   868  00EDBA  0E6F               	movlw	low STR_6
   869  00EDBC  6E47               	movwf	printf@f,c
   870  00EDBE  0EFF               	movlw	high STR_6
   871  00EDC0  6E48               	movwf	printf@f+1,c
   872  00EDC2  C069  F049         	movff	main@Volt,?_printf+2
   873  00EDC6  C06A  F04A         	movff	main@Volt+1,?_printf+3
   874  00EDCA  C06B  F04B         	movff	main@Volt+2,?_printf+4
   875  00EDCE  EC69  F07C         	call	_printf	;wreg free
   876  00EDD2  D790               	goto	l2489
   877  00EDD4  EF00  F000         	goto	start
   878  00EDD8                     __end_of_main:
   879                           	opt stack 0
   880                           tblptru	equ	0xFF8
   881                           
   882 ;; *************** function _printf *****************
   883 ;; Defined at:
   884 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
   885 ;; Parameters:    Size  Location     Type
   886 ;;  f               2   70[COMRAM] PTR const unsigned char 
   887 ;;		 -> STR_6(34), STR_5(21), STR_4(20), STR_3(20), 
   888 ;;		 -> STR_2(20), STR_1(28), 
   889 ;; Auto vars:     Size  Location     Type
   890 ;;  tmpval          4   96[COMRAM] struct .
   891 ;;  val             4   90[COMRAM] unsigned long 
   892 ;;  fval            3  100[COMRAM] unsigned long 
   893 ;;  cp              3    0        PTR const unsigned char 
   894 ;;  exp             2   94[COMRAM] int 
   895 ;;  prec            2   88[COMRAM] int 
   896 ;;  flag            2   86[COMRAM] unsigned short 
   897 ;;  ap              2   84[COMRAM] PTR void [1]
   898 ;;		 -> ?_printf(2), 
   899 ;;  len             2    0        unsigned int 
   900 ;;  width           2    0        int 
   901 ;;  c               1  103[COMRAM] char 
   902 ;;  d               1    0        unsigned char 
   903 ;; Return value:  Size  Location     Type
   904 ;;                  2   70[COMRAM] int 
   905 ;; Registers used:
   906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   907 ;; Tracked objects:
   908 ;;		On entry : 0/0
   909 ;;		On exit  : 0/0
   910 ;;		Unchanged: 0/0
   911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   912 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   913 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   914 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   915 ;;      Totals:        34       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   916 ;;Total ram usage:       34 bytes
   917 ;; Hardware stack levels used:    1
   918 ;; Hardware stack levels required when called:    3
   919 ;; This function calls:
   920 ;;		___awdiv
   921 ;;		___ftadd
   922 ;;		___ftge
   923 ;;		___ftmul
   924 ;;		___ftneg
   925 ;;		___ftsub
   926 ;;		___fttol
   927 ;;		___lldiv
   928 ;;		___llmod
   929 ;;		___lltoft
   930 ;;		___wmul
   931 ;;		__div_to_l_
   932 ;;		__tdiv_to_l_
   933 ;;		_fround
   934 ;;		_putch
   935 ;;		_scale
   936 ;; This function is called by:
   937 ;;		_main
   938 ;; This function uses a non-reentrant model
   939 ;;
   940                           
   941                           	psect	text1
   942  00F8D2                     __ptext1:
   943                           	opt stack 0
   944  00F8D2                     _printf:
   945                           	opt stack 27
   946                           
   947                           ;doprnt.c: 466: va_list ap;
   948                           ;doprnt.c: 499: signed char c;
   949                           ;doprnt.c: 501: int width;
   950                           ;doprnt.c: 504: int prec;
   951                           ;doprnt.c: 508: unsigned short flag;
   952                           ;doprnt.c: 515: char d;
   953                           ;doprnt.c: 516: double fval;
   954                           ;doprnt.c: 517: int exp;
   955                           ;doprnt.c: 523: union {
   956                           ;doprnt.c: 524: unsigned long vd;
   957                           ;doprnt.c: 525: double integ;
   958                           ;doprnt.c: 526: } tmpval;
   959                           ;doprnt.c: 528: unsigned long val;
   960                           ;doprnt.c: 529: unsigned len;
   961                           ;doprnt.c: 530: const char * cp;
   962                           ;doprnt.c: 533: *ap = __va_start();
   963                           
   964                           ;incstack = 0
   965  00F8D2  0E49               	movlw	low (?_printf+2)
   966  00F8D4  6E55               	movwf	printf@ap,c
   967  00F8D6  0E00               	movlw	high (?_printf+2)
   968  00F8D8  6E56               	movwf	printf@ap+1,c
   969                           
   970                           ;doprnt.c: 536: while(c = *f++) {
   971  00F8DA  D2FF               	goto	l2485
   972  00F8DC                     l2337:
   973                           
   974                           ;doprnt.c: 538: if(c != '%')
   975  00F8DC  0E25               	movlw	37
   976  00F8DE  1868               	xorwf	printf@c,w,c
   977  00F8E0  B4D8               	btfsc	status,2,c
   978  00F8E2  D004               	goto	l2341
   979                           
   980                           ;doprnt.c: 540: {
   981                           ;doprnt.c: 541: (putch(c) );
   982  00F8E4  5068               	movf	printf@c,w,c
   983  00F8E6  ECAC  F072         	call	_putch
   984                           
   985                           ;doprnt.c: 542: continue;
   986  00F8EA  D2F7               	goto	l2485
   987  00F8EC                     l2341:
   988                           
   989                           ;doprnt.c: 543: }
   990                           ;doprnt.c: 548: flag = 0;
   991  00F8EC  0E00               	movlw	0
   992  00F8EE  6E58               	movwf	printf@flag+1,c
   993  00F8F0  0E00               	movlw	0
   994  00F8F2  6E57               	movwf	printf@flag,c
   995                           
   996                           ;doprnt.c: 635: switch(c = *f++) {
   997  00F8F4  D005               	goto	l2347
   998                           
   999                           ;doprnt.c: 638: goto alldone;
  1000                           
  1001                           ;doprnt.c: 637: case 0:
  1002  00F8F6  D2FF               	goto	l132
  1003  00F8F8                     l2343:
  1004                           
  1005                           ;doprnt.c: 663: flag |= 0x400;
  1006  00F8F8  8458               	bsf	printf@flag+1,2,c
  1007                           
  1008                           ;doprnt.c: 664: break;
  1009  00F8FA  D013               	goto	l2349
  1010                           
  1011                           ;doprnt.c: 813: continue;
  1012                           
  1013                           ;doprnt.c: 802: default:
  1014  00F8FC  D2EE               	goto	l2485
  1015                           
  1016                           ;doprnt.c: 822: }
  1017  00F8FE  D011               	goto	l2349
  1018  00F900                     l2347:
  1019  00F900  C047  FFF6         	movff	printf@f,tblptrl
  1020  00F904  C048  FFF7         	movff	printf@f+1,tblptrh
  1021  00F908  4A47               	infsnz	printf@f,f,c
  1022  00F90A  2A48               	incf	printf@f+1,f,c
  1023  00F90C                     	if	0	;tblptru may be non-zero
  1024  00F90C                     	endif
  1025  00F90C                     	if	0	;tblptru may be non-zero
  1026  00F90C                     	endif
  1027  00F90C  0008               	tblrd		*
  1028  00F90E  CFF5 F068          	movff	tablat,printf@c
  1029  00F912  5068               	movf	printf@c,w,c
  1030                           
  1031                           ; Switch size 1, requested type "space"
  1032                           ; Number of cases is 2, Range of values is 0 to 102
  1033                           ; switch strategies available:
  1034                           ; Name         Instructions Cycles
  1035                           ; simple_byte            7     4 (average)
  1036                           ;	Chosen strategy is simple_byte
  1037  00F914  0A00               	xorlw	0	; case 0
  1038  00F916  B4D8               	btfsc	status,2,c
  1039  00F918  D2EE               	goto	l132
  1040  00F91A  0A66               	xorlw	102	; case 102
  1041  00F91C  B4D8               	btfsc	status,2,c
  1042  00F91E  D7EC               	goto	l2343
  1043  00F920  D2DC               	goto	l2485
  1044  00F922                     l2349:
  1045                           
  1046                           ;doprnt.c: 825: if(flag & (0x700)) {
  1047  00F922  0E07               	movlw	7
  1048  00F924  1458               	andwf	printf@flag+1,w,c
  1049  00F926  B4D8               	btfsc	status,2,c
  1050  00F928  D2CA               	goto	l2481
  1051                           
  1052                           ;doprnt.c: 829: prec = 6;
  1053  00F92A  0E00               	movlw	0
  1054  00F92C  6E5A               	movwf	printf@prec+1,c
  1055  00F92E  0E06               	movlw	6
  1056  00F930  6E59               	movwf	printf@prec,c
  1057                           
  1058                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1059  00F932  C055  FFD9         	movff	printf@ap,fsr2l
  1060  00F936  C056  FFDA         	movff	printf@ap+1,fsr2h
  1061  00F93A  CFDE F065          	movff	postinc2,printf@fval
  1062  00F93E  CFDE F066          	movff	postinc2,printf@fval+1
  1063  00F942  CFDD F067          	movff	postdec2,printf@fval+2
  1064  00F946  0E03               	movlw	3
  1065  00F948  2655               	addwf	printf@ap,f,c
  1066  00F94A  0E00               	movlw	0
  1067  00F94C  2256               	addwfc	printf@ap+1,f,c
  1068                           
  1069                           ;doprnt.c: 831: if(fval < 0.0) {
  1070  00F94E  AE67               	btfss	printf@fval+2,7,c
  1071  00F950  D011               	goto	l2363
  1072                           
  1073                           ;doprnt.c: 832: fval = -fval;
  1074  00F952  C065  F001         	movff	printf@fval,___ftneg@f1
  1075  00F956  C066  F002         	movff	printf@fval+1,___ftneg@f1+1
  1076  00F95A  C067  F003         	movff	printf@fval+2,___ftneg@f1+2
  1077  00F95E  ECBD  F072         	call	___ftneg	;wreg free
  1078  00F962  C001  F065         	movff	?___ftneg,printf@fval
  1079  00F966  C002  F066         	movff	?___ftneg+1,printf@fval+1
  1080  00F96A  C003  F067         	movff	?___ftneg+2,printf@fval+2
  1081                           
  1082                           ;doprnt.c: 833: flag |= 0x03;
  1083  00F96E  0E03               	movlw	3
  1084  00F970  1257               	iorwf	printf@flag,f,c
  1085  00F972  D000               	goto	l2363
  1086  00F974                     l2363:
  1087                           
  1088                           ;doprnt.c: 834: }
  1089                           ;doprnt.c: 835: exp = 0;
  1090  00F974  0E00               	movlw	0
  1091  00F976  6E60               	movwf	printf@exp+1,c
  1092  00F978  0E00               	movlw	0
  1093  00F97A  6E5F               	movwf	printf@exp,c
  1094                           
  1095                           ;doprnt.c: 836: if( fval!=0) {
  1096  00F97C  5065               	movf	printf@fval,w,c
  1097  00F97E  1066               	iorwf	printf@fval+1,w,c
  1098  00F980  1067               	iorwf	printf@fval+2,w,c
  1099  00F982  B4D8               	btfsc	status,2,c
  1100  00F984  D085               	goto	l2391
  1101                           
  1102                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1103  00F986  0E82               	movlw	130
  1104  00F988  6E4C               	movwf	??_printf& (0+255),c
  1105  00F98A  0EFF               	movlw	255
  1106  00F98C  6E4D               	movwf	(??_printf+1)& (0+255),c
  1107  00F98E  C065  F04E         	movff	printf@fval,??_printf+2
  1108  00F992  C066  F04F         	movff	printf@fval+1,??_printf+3
  1109  00F996  C067  F050         	movff	printf@fval+2,??_printf+4
  1110  00F99A  C068  F051         	movff	printf@fval+3,??_printf+5
  1111  00F99E  0E10               	movlw	16
  1112  00F9A0  D005               	goto	u2470
  1113  00F9A2                     u2475:
  1114  00F9A2  90D8               	bcf	status,0,c
  1115  00F9A4  3251               	rrcf	??_printf+5,f,c
  1116  00F9A6  3250               	rrcf	??_printf+4,f,c
  1117  00F9A8  324F               	rrcf	??_printf+3,f,c
  1118  00F9AA  324E               	rrcf	??_printf+2,f,c
  1119  00F9AC                     u2470:
  1120  00F9AC  2EE8               	decfsz	wreg,f,c
  1121  00F9AE  D7F9               	goto	u2475
  1122  00F9B0  504E               	movf	??_printf+2,w,c
  1123  00F9B2  244C               	addwf	??_printf,w,c
  1124  00F9B4  6E5F               	movwf	printf@exp,c
  1125  00F9B6  0E00               	movlw	0
  1126  00F9B8  204D               	addwfc	??_printf+1,w,c
  1127  00F9BA  6E60               	movwf	printf@exp+1,c
  1128                           
  1129                           ;doprnt.c: 838: exp--;
  1130  00F9BC  065F               	decf	printf@exp,f,c
  1131  00F9BE  A0D8               	btfss	status,0,c
  1132  00F9C0  0660               	decf	printf@exp+1,f,c
  1133                           
  1134                           ;doprnt.c: 839: exp *= 3;
  1135  00F9C2  C05F  F00F         	movff	printf@exp,___wmul@multiplier
  1136  00F9C6  C060  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1137  00F9CA  0E00               	movlw	0
  1138  00F9CC  6E12               	movwf	___wmul@multiplicand+1,c
  1139  00F9CE  0E03               	movlw	3
  1140  00F9D0  6E11               	movwf	___wmul@multiplicand,c
  1141  00F9D2  ECE2  F072         	call	___wmul	;wreg free
  1142  00F9D6  C00F  F05F         	movff	?___wmul,printf@exp
  1143  00F9DA  C010  F060         	movff	?___wmul+1,printf@exp+1
  1144                           
  1145                           ;doprnt.c: 840: exp /= 10;
  1146  00F9DE  C05F  F007         	movff	printf@exp,___awdiv@dividend
  1147  00F9E2  C060  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1148  00F9E6  0E00               	movlw	0
  1149  00F9E8  6E0A               	movwf	___awdiv@divisor+1,c
  1150  00F9EA  0E0A               	movlw	10
  1151  00F9EC  6E09               	movwf	___awdiv@divisor,c
  1152  00F9EE  ECE3  F074         	call	___awdiv	;wreg free
  1153  00F9F2  C007  F05F         	movff	?___awdiv,printf@exp
  1154  00F9F6  C008  F060         	movff	?___awdiv+1,printf@exp+1
  1155                           
  1156                           ;doprnt.c: 841: if(exp < 0)
  1157  00F9FA  AE60               	btfss	printf@exp+1,7,c
  1158  00F9FC  D004               	goto	l2379
  1159                           
  1160                           ;doprnt.c: 842: exp--;
  1161  00F9FE  065F               	decf	printf@exp,f,c
  1162  00FA00  A0D8               	btfss	status,0,c
  1163  00FA02  0660               	decf	printf@exp+1,f,c
  1164  00FA04  D000               	goto	l2379
  1165  00FA06                     l2379:
  1166                           
  1167                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1168  00FA06  505F               	movf	printf@exp,w,c
  1169  00FA08  0800               	sublw	0
  1170  00FA0A  EC79  F07A         	call	_scale
  1171  00FA0E  C02B  F061         	movff	?_scale,printf@tmpval
  1172  00FA12  C02C  F062         	movff	?_scale+1,printf@tmpval+1
  1173  00FA16  C02D  F063         	movff	?_scale+2,printf@tmpval+2
  1174                           
  1175                           ;doprnt.c: 847: tmpval.integ *= fval;
  1176  00FA1A  C061  F01C         	movff	printf@tmpval,___ftmul@f1
  1177  00FA1E  C062  F01D         	movff	printf@tmpval+1,___ftmul@f1+1
  1178  00FA22  C063  F01E         	movff	printf@tmpval+2,___ftmul@f1+2
  1179  00FA26  C065  F01F         	movff	printf@fval,___ftmul@f2
  1180  00FA2A  C066  F020         	movff	printf@fval+1,___ftmul@f2+1
  1181  00FA2E  C067  F021         	movff	printf@fval+2,___ftmul@f2+2
  1182  00FA32  ECEC  F076         	call	___ftmul	;wreg free
  1183  00FA36  C01C  F061         	movff	?___ftmul,printf@tmpval
  1184  00FA3A  C01D  F062         	movff	?___ftmul+1,printf@tmpval+1
  1185  00FA3E  C01E  F063         	movff	?___ftmul+2,printf@tmpval+2
  1186                           
  1187                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1188  00FA42  C061  F001         	movff	printf@tmpval,___ftge@ff1
  1189  00FA46  C062  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1190  00FA4A  C063  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1191  00FA4E  0E00               	movlw	0
  1192  00FA50  6E04               	movwf	___ftge@ff2,c
  1193  00FA52  0E80               	movlw	128
  1194  00FA54  6E05               	movwf	___ftge@ff2+1,c
  1195  00FA56  0E3F               	movlw	63
  1196  00FA58  6E06               	movwf	___ftge@ff2+2,c
  1197  00FA5A  EC98  F074         	call	___ftge	;wreg free
  1198  00FA5E  B0D8               	btfsc	status,0,c
  1199  00FA60  D004               	goto	l2387
  1200                           
  1201                           ;doprnt.c: 849: exp--;
  1202  00FA62  065F               	decf	printf@exp,f,c
  1203  00FA64  A0D8               	btfss	status,0,c
  1204  00FA66  0660               	decf	printf@exp+1,f,c
  1205  00FA68  D013               	goto	l2391
  1206  00FA6A                     l2387:
  1207                           
  1208                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1209  00FA6A  C061  F001         	movff	printf@tmpval,___ftge@ff1
  1210  00FA6E  C062  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1211  00FA72  C063  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1212  00FA76  0E00               	movlw	0
  1213  00FA78  6E04               	movwf	___ftge@ff2,c
  1214  00FA7A  0E20               	movlw	32
  1215  00FA7C  6E05               	movwf	___ftge@ff2+1,c
  1216  00FA7E  0E41               	movlw	65
  1217  00FA80  6E06               	movwf	___ftge@ff2+2,c
  1218  00FA82  EC98  F074         	call	___ftge	;wreg free
  1219  00FA86  A0D8               	btfss	status,0,c
  1220  00FA88  D003               	goto	l2391
  1221                           
  1222                           ;doprnt.c: 851: exp++;
  1223  00FA8A  4A5F               	infsnz	printf@exp,f,c
  1224  00FA8C  2A60               	incf	printf@exp+1,f,c
  1225  00FA8E  D000               	goto	l2391
  1226  00FA90                     l2391:
  1227                           
  1228                           ;doprnt.c: 852: }
  1229                           ;doprnt.c: 1112: if(prec <= 12)
  1230  00FA90  BE5A               	btfsc	printf@prec+1,7,c
  1231  00FA92  D006               	goto	l2393
  1232  00FA94  505A               	movf	printf@prec+1,w,c
  1233  00FA96  E11C               	bnz	l2395
  1234  00FA98  0E0D               	movlw	13
  1235  00FA9A  5C59               	subwf	printf@prec,w,c
  1236  00FA9C  B0D8               	btfsc	status,0,c
  1237  00FA9E  D018               	goto	l2395
  1238  00FAA0                     l2393:
  1239                           
  1240                           ;doprnt.c: 1113: fval += fround(prec);
  1241  00FAA0  C065  F035         	movff	printf@fval,___ftadd@f1
  1242  00FAA4  C066  F036         	movff	printf@fval+1,___ftadd@f1+1
  1243  00FAA8  C067  F037         	movff	printf@fval+2,___ftadd@f1+2
  1244  00FAAC  5059               	movf	printf@prec,w,c
  1245  00FAAE  EC57  F079         	call	_fround
  1246  00FAB2  C02B  F038         	movff	?_fround,___ftadd@f2
  1247  00FAB6  C02C  F039         	movff	?_fround+1,___ftadd@f2+1
  1248  00FABA  C02D  F03A         	movff	?_fround+2,___ftadd@f2+2
  1249  00FABE  EC75  F078         	call	___ftadd	;wreg free
  1250  00FAC2  C035  F065         	movff	?___ftadd,printf@fval
  1251  00FAC6  C036  F066         	movff	?___ftadd+1,printf@fval+1
  1252  00FACA  C037  F067         	movff	?___ftadd+2,printf@fval+2
  1253  00FACE  D000               	goto	l2395
  1254  00FAD0                     l2395:
  1255                           
  1256                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1257  00FAD0  BE60               	btfsc	printf@exp+1,7,c
  1258  00FAD2  D006               	goto	l2397
  1259  00FAD4  5060               	movf	printf@exp+1,w,c
  1260  00FAD6  E120               	bnz	l2403
  1261  00FAD8  0E0A               	movlw	10
  1262  00FADA  5C5F               	subwf	printf@exp,w,c
  1263  00FADC  B0D8               	btfsc	status,0,c
  1264  00FADE  D01C               	goto	l2403
  1265  00FAE0                     l2397:
  1266  00FAE0  5065               	movf	printf@fval,w,c
  1267  00FAE2  1066               	iorwf	printf@fval+1,w,c
  1268  00FAE4  1067               	iorwf	printf@fval+2,w,c
  1269  00FAE6  B4D8               	btfsc	status,2,c
  1270  00FAE8  D06D               	goto	l2417
  1271  00FAEA  C065  F032         	movff	printf@fval,___fttol@f1
  1272  00FAEE  C066  F033         	movff	printf@fval+1,___fttol@f1+1
  1273  00FAF2  C067  F034         	movff	printf@fval+2,___fttol@f1+2
  1274  00FAF6  EC02  F076         	call	___fttol	;wreg free
  1275  00FAFA  5032               	movf	?___fttol,w,c
  1276  00FAFC  1033               	iorwf	?___fttol+1,w,c
  1277  00FAFE  1034               	iorwf	?___fttol+2,w,c
  1278  00FB00  1035               	iorwf	?___fttol+3,w,c
  1279  00FB02  B4D8               	btfsc	status,2,c
  1280  00FB04  BE60               	btfsc	printf@exp+1,7,c
  1281  00FB06  D05E               	goto	l2417
  1282  00FB08  5060               	movf	printf@exp+1,w,c
  1283  00FB0A  E106               	bnz	l2403
  1284  00FB0C  0E02               	movlw	2
  1285  00FB0E  5C5F               	subwf	printf@exp,w,c
  1286  00FB10  B0D8               	btfsc	status,0,c
  1287  00FB12  D002               	goto	l2403
  1288  00FB14  D057               	goto	l2417
  1289  00FB16  D000               	goto	l2403
  1290  00FB18                     l2403:
  1291                           
  1292                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1293  00FB18  C061  F001         	movff	printf@tmpval,___ftge@ff1
  1294  00FB1C  C062  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1295  00FB20  C063  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1296  00FB24  0E70               	movlw	112
  1297  00FB26  6E04               	movwf	___ftge@ff2,c
  1298  00FB28  0E89               	movlw	137
  1299  00FB2A  6E05               	movwf	___ftge@ff2+1,c
  1300  00FB2C  0E40               	movlw	64
  1301  00FB2E  6E06               	movwf	___ftge@ff2+2,c
  1302  00FB30  EC98  F074         	call	___ftge	;wreg free
  1303  00FB34  B0D8               	btfsc	status,0,c
  1304  00FB36  D002               	goto	l2407
  1305                           
  1306                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1307  00FB38  0EF7               	movlw	247
  1308  00FB3A  D001               	goto	L1
  1309  00FB3C                     l2407:
  1310                           
  1311                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1312  00FB3C  0EF8               	movlw	248
  1313  00FB3E                     L1:
  1314  00FB3E  265F               	addwf	printf@exp,f,c
  1315  00FB40  0EFF               	movlw	255
  1316  00FB42  2260               	addwfc	printf@exp+1,f,c
  1317  00FB44  D000               	goto	l2409
  1318  00FB46                     l2409:
  1319                           
  1320                           ;doprnt.c: 1124: }
  1321                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1322  00FB46  505F               	movf	printf@exp,w,c
  1323  00FB48  EC79  F07A         	call	_scale
  1324  00FB4C  C02B  F061         	movff	?_scale,printf@tmpval
  1325  00FB50  C02C  F062         	movff	?_scale+1,printf@tmpval+1
  1326  00FB54  C02D  F063         	movff	?_scale+2,printf@tmpval+2
  1327                           
  1328                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1329  00FB58  D017               	goto	l2413
  1330  00FB5A  C065  F001         	movff	printf@fval,__div_to_l_@f1
  1331  00FB5E  C066  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  1332  00FB62  C067  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  1333  00FB66  C061  F004         	movff	printf@tmpval,__div_to_l_@f2
  1334  00FB6A  C062  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  1335  00FB6E  C063  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  1336  00FB72  EC68  F077         	call	__div_to_l_	;wreg free
  1337  00FB76  C001  F05B         	movff	?__div_to_l_,printf@val
  1338  00FB7A  C002  F05C         	movff	?__div_to_l_+1,printf@val+1
  1339  00FB7E  C003  F05D         	movff	?__div_to_l_+2,printf@val+2
  1340  00FB82  C004  F05E         	movff	?__div_to_l_+3,printf@val+3
  1341  00FB86  D017               	goto	l2415
  1342  00FB88                     l2413:
  1343  00FB88  C065  F001         	movff	printf@fval,__tdiv_to_l_@f1
  1344  00FB8C  C066  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  1345  00FB90  C067  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  1346  00FB94  C061  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  1347  00FB98  C062  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  1348  00FB9C  C063  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  1349  00FBA0  ECED  F077         	call	__tdiv_to_l_	;wreg free
  1350  00FBA4  C001  F05B         	movff	?__tdiv_to_l_,printf@val
  1351  00FBA8  C002  F05C         	movff	?__tdiv_to_l_+1,printf@val+1
  1352  00FBAC  C003  F05D         	movff	?__tdiv_to_l_+2,printf@val+2
  1353  00FBB0  C004  F05E         	movff	?__tdiv_to_l_+3,printf@val+3
  1354  00FBB4  D000               	goto	l2415
  1355  00FBB6                     l2415:
  1356                           
  1357                           ;doprnt.c: 1129: fval = 0.0;
  1358  00FBB6  0E00               	movlw	0
  1359  00FBB8  6E65               	movwf	printf@fval,c
  1360  00FBBA  0E00               	movlw	0
  1361  00FBBC  6E66               	movwf	printf@fval+1,c
  1362  00FBBE  0E00               	movlw	0
  1363  00FBC0  6E67               	movwf	printf@fval+2,c
  1364                           
  1365                           ;doprnt.c: 1130: } else {
  1366  00FBC2  D033               	goto	l2421
  1367  00FBC4                     l2417:
  1368                           
  1369                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1370  00FBC4  C065  F032         	movff	printf@fval,___fttol@f1
  1371  00FBC8  C066  F033         	movff	printf@fval+1,___fttol@f1+1
  1372  00FBCC  C067  F034         	movff	printf@fval+2,___fttol@f1+2
  1373  00FBD0  EC02  F076         	call	___fttol	;wreg free
  1374  00FBD4  C032  F05B         	movff	?___fttol,printf@val
  1375  00FBD8  C033  F05C         	movff	?___fttol+1,printf@val+1
  1376  00FBDC  C034  F05D         	movff	?___fttol+2,printf@val+2
  1377  00FBE0  C035  F05E         	movff	?___fttol+3,printf@val+3
  1378                           
  1379                           ;doprnt.c: 1132: fval -= (double)val;
  1380  00FBE4  C065  F041         	movff	printf@fval,___ftsub@f1
  1381  00FBE8  C066  F042         	movff	printf@fval+1,___ftsub@f1+1
  1382  00FBEC  C067  F043         	movff	printf@fval+2,___ftsub@f1+2
  1383  00FBF0  C05B  F009         	movff	printf@val,___lltoft@c
  1384  00FBF4  C05C  F00A         	movff	printf@val+1,___lltoft@c+1
  1385  00FBF8  C05D  F00B         	movff	printf@val+2,___lltoft@c+2
  1386  00FBFC  C05E  F00C         	movff	printf@val+3,___lltoft@c+3
  1387  00FC00  EC36  F073         	call	___lltoft	;wreg free
  1388  00FC04  C009  F044         	movff	?___lltoft,___ftsub@f2
  1389  00FC08  C00A  F045         	movff	?___lltoft+1,___ftsub@f2+1
  1390  00FC0C  C00B  F046         	movff	?___lltoft+2,___ftsub@f2+2
  1391  00FC10  EC14  F073         	call	___ftsub	;wreg free
  1392  00FC14  C041  F065         	movff	?___ftsub,printf@fval
  1393  00FC18  C042  F066         	movff	?___ftsub+1,printf@fval+1
  1394  00FC1C  C043  F067         	movff	?___ftsub+2,printf@fval+2
  1395                           
  1396                           ;doprnt.c: 1133: exp = 0;
  1397  00FC20  0E00               	movlw	0
  1398  00FC22  6E60               	movwf	printf@exp+1,c
  1399  00FC24  0E00               	movlw	0
  1400  00FC26  6E5F               	movwf	printf@exp,c
  1401  00FC28  D000               	goto	l2421
  1402  00FC2A                     l2421:
  1403                           
  1404                           ;doprnt.c: 1134: }
  1405                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1406  00FC2A  0E01               	movlw	1
  1407  00FC2C  6E68               	movwf	printf@c,c
  1408  00FC2E                     l2423:
  1409  00FC2E  0E0A               	movlw	10
  1410  00FC30  1868               	xorwf	printf@c,w,c
  1411  00FC32  B4D8               	btfsc	status,2,c
  1412  00FC34  D01C               	goto	l2435
  1413  00FC36  D001               	goto	l2427
  1414  00FC38  D01A               	goto	l2435
  1415  00FC3A                     l2427:
  1416                           
  1417                           ;doprnt.c: 1137: if(val < dpowers[c])
  1418  00FC3A  5068               	movf	printf@c,w,c
  1419  00FC3C  0D04               	mullw	4
  1420  00FC3E  0EF9               	movlw	low _dpowers
  1421  00FC40  24F3               	addwf	prodl,w,c
  1422  00FC42  6EF6               	movwf	tblptrl,c
  1423  00FC44  0EFE               	movlw	high _dpowers
  1424  00FC46  20F4               	addwfc	prodh,w,c
  1425  00FC48  6EF7               	movwf	tblptrh,c
  1426  00FC4A                     	if	0	;There are less than 3 active tblptr bytes
  1427  00FC4A                     	endif
  1428  00FC4A  0009               	tblrd		*+
  1429  00FC4C  50F5               	movf	tablat,w,c
  1430  00FC4E  5C5B               	subwf	printf@val,w,c
  1431  00FC50  0009               	tblrd		*+
  1432  00FC52  50F5               	movf	tablat,w,c
  1433  00FC54  585C               	subwfb	printf@val+1,w,c
  1434  00FC56  0009               	tblrd		*+
  1435  00FC58  50F5               	movf	tablat,w,c
  1436  00FC5A  585D               	subwfb	printf@val+2,w,c
  1437  00FC5C  0009               	tblrd		*+
  1438  00FC5E  50F5               	movf	tablat,w,c
  1439  00FC60  585E               	subwfb	printf@val+3,w,c
  1440  00FC62  A0D8               	btfss	status,0,c
  1441  00FC64  D004               	goto	l2435
  1442  00FC66  D001               	goto	l2431
  1443                           
  1444                           ;doprnt.c: 1138: break;
  1445  00FC68  D002               	goto	l2435
  1446  00FC6A                     l2431:
  1447  00FC6A  2A68               	incf	printf@c,f,c
  1448  00FC6C  D7E0               	goto	l2423
  1449  00FC6E                     l2435:
  1450                           
  1451                           ;doprnt.c: 1175: {
  1452                           ;doprnt.c: 1188: if(flag & 0x03)
  1453  00FC6E  0E03               	movlw	3
  1454  00FC70  1457               	andwf	printf@flag,w,c
  1455  00FC72  6E4C               	movwf	??_printf& (0+255),c
  1456  00FC74  0E00               	movlw	0
  1457  00FC76  1458               	andwf	printf@flag+1,w,c
  1458  00FC78  6E4D               	movwf	(??_printf+1)& (0+255),c
  1459  00FC7A  504C               	movf	??_printf,w,c
  1460  00FC7C  104D               	iorwf	??_printf+1,w,c
  1461  00FC7E  B4D8               	btfsc	status,2,c
  1462  00FC80  D049               	goto	l2445
  1463                           
  1464                           ;doprnt.c: 1190: (putch('-') );
  1465  00FC82  0E2D               	movlw	45
  1466  00FC84  ECAC  F072         	call	_putch
  1467                           
  1468                           ;doprnt.c: 1195: }
  1469                           ;doprnt.c: 1196: while(c--) {
  1470  00FC88  D045               	goto	l2445
  1471  00FC8A                     l2439:
  1472                           
  1473                           ;doprnt.c: 1200: {
  1474                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1475  00FC8A  C05B  F001         	movff	printf@val,___lldiv@dividend
  1476  00FC8E  C05C  F002         	movff	printf@val+1,___lldiv@dividend+1
  1477  00FC92  C05D  F003         	movff	printf@val+2,___lldiv@dividend+2
  1478  00FC96  C05E  F004         	movff	printf@val+3,___lldiv@dividend+3
  1479  00FC9A  5068               	movf	printf@c,w,c
  1480  00FC9C  0D04               	mullw	4
  1481  00FC9E  0EF9               	movlw	low _dpowers
  1482  00FCA0  24F3               	addwf	prodl,w,c
  1483  00FCA2  6EF6               	movwf	tblptrl,c
  1484  00FCA4  0EFE               	movlw	high _dpowers
  1485  00FCA6  20F4               	addwfc	prodh,w,c
  1486  00FCA8  6EF7               	movwf	tblptrh,c
  1487  00FCAA                     	if	0	;There are less than 3 active tblptr bytes
  1488  00FCAA                     	endif
  1489  00FCAA  0009               	tblrd		*+
  1490  00FCAC  CFF5 F005          	movff	tablat,___lldiv@divisor
  1491  00FCB0  0009               	tblrd		*+
  1492  00FCB2  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1493  00FCB6  0009               	tblrd		*+
  1494  00FCB8  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1495  00FCBC  000A               	tblrd		*-
  1496  00FCBE  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1497  00FCC2  EC52  F074         	call	___lldiv	;wreg free
  1498  00FCC6  C001  F061         	movff	?___lldiv,printf@tmpval
  1499  00FCCA  C002  F062         	movff	?___lldiv+1,printf@tmpval+1
  1500  00FCCE  C003  F063         	movff	?___lldiv+2,printf@tmpval+2
  1501  00FCD2  C004  F064         	movff	?___lldiv+3,printf@tmpval+3
  1502                           
  1503                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1504  00FCD6  C061  F001         	movff	printf@tmpval,___llmod@dividend
  1505  00FCDA  C062  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1506  00FCDE  C063  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1507  00FCE2  C064  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1508  00FCE6  0E0A               	movlw	10
  1509  00FCE8  6E05               	movwf	___llmod@divisor,c
  1510  00FCEA  0E00               	movlw	0
  1511  00FCEC  6E06               	movwf	___llmod@divisor+1,c
  1512  00FCEE  0E00               	movlw	0
  1513  00FCF0  6E07               	movwf	___llmod@divisor+2,c
  1514  00FCF2  0E00               	movlw	0
  1515  00FCF4  6E08               	movwf	___llmod@divisor+3,c
  1516  00FCF6  EC9E  F073         	call	___llmod	;wreg free
  1517  00FCFA  C001  F061         	movff	?___llmod,printf@tmpval
  1518  00FCFE  C002  F062         	movff	?___llmod+1,printf@tmpval+1
  1519  00FD02  C003  F063         	movff	?___llmod+2,printf@tmpval+2
  1520  00FD06  C004  F064         	movff	?___llmod+3,printf@tmpval+3
  1521                           
  1522                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  1523  00FD0A  5061               	movf	printf@tmpval,w,c
  1524  00FD0C  0F30               	addlw	48
  1525  00FD0E  ECAC  F072         	call	_putch
  1526  00FD12  D000               	goto	l2445
  1527  00FD14                     l2445:
  1528  00FD14  0668               	decf	printf@c,f,c
  1529  00FD16  2868               	incf	printf@c,w,c
  1530  00FD18  B4D8               	btfsc	status,2,c
  1531  00FD1A  D009               	goto	l2451
  1532  00FD1C  D7B6               	goto	l2439
  1533                           
  1534                           ;doprnt.c: 1204: }
  1535                           ;doprnt.c: 1206: }
  1536                           ;doprnt.c: 1207: while(exp > 0) {
  1537  00FD1E  D007               	goto	l2451
  1538  00FD20                     l2447:
  1539                           
  1540                           ;doprnt.c: 1208: (putch('0') );
  1541  00FD20  0E30               	movlw	48
  1542  00FD22  ECAC  F072         	call	_putch
  1543                           
  1544                           ;doprnt.c: 1209: exp--;
  1545  00FD26  065F               	decf	printf@exp,f,c
  1546  00FD28  A0D8               	btfss	status,0,c
  1547  00FD2A  0660               	decf	printf@exp+1,f,c
  1548  00FD2C  D000               	goto	l2451
  1549  00FD2E                     l2451:
  1550  00FD2E  BE60               	btfsc	printf@exp+1,7,c
  1551  00FD30  D005               	goto	l2453
  1552  00FD32  5060               	movf	printf@exp+1,w,c
  1553  00FD34  E1F5               	bnz	l2447
  1554  00FD36  045F               	decf	printf@exp,w,c
  1555  00FD38  B0D8               	btfsc	status,0,c
  1556  00FD3A  D7F2               	goto	l2447
  1557  00FD3C                     l2453:
  1558                           
  1559                           ;doprnt.c: 1210: }
  1560                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1561  00FD3C  BE5A               	btfsc	printf@prec+1,7,c
  1562  00FD3E  D009               	goto	l121
  1563  00FD40  505A               	movf	printf@prec+1,w,c
  1564  00FD42  E104               	bnz	u2630
  1565  00FD44  0E09               	movlw	9
  1566  00FD46  5C59               	subwf	printf@prec,w,c
  1567  00FD48  A0D8               	btfss	status,0,c
  1568  00FD4A  D003               	goto	l121
  1569  00FD4C                     u2630:
  1570                           
  1571                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1572  00FD4C  0E08               	movlw	8
  1573  00FD4E  6E68               	movwf	printf@c,c
  1574  00FD50  D003               	goto	l2457
  1575  00FD52                     l121:
  1576                           
  1577                           ;doprnt.c: 1213: else
  1578                           ;doprnt.c: 1214: c = prec;
  1579  00FD52  C059  F068         	movff	printf@prec,printf@c
  1580  00FD56  D000               	goto	l2457
  1581  00FD58                     l2457:
  1582                           
  1583                           ;doprnt.c: 1215: prec -= c;
  1584  00FD58  5068               	movf	printf@c,w,c
  1585  00FD5A  5E59               	subwf	printf@prec,f,c
  1586  00FD5C  0E00               	movlw	0
  1587  00FD5E  BE68               	btfsc	printf@c,7,c
  1588  00FD60  0EFF               	movlw	255
  1589  00FD62  5A5A               	subwfb	printf@prec+1,f,c
  1590                           
  1591                           ;doprnt.c: 1219: if(c)
  1592  00FD64  5068               	movf	printf@c,w,c
  1593  00FD66  B4D8               	btfsc	status,2,c
  1594  00FD68  D004               	goto	l2463
  1595                           
  1596                           ;doprnt.c: 1221: (putch('.') );
  1597  00FD6A  0E2E               	movlw	46
  1598  00FD6C  ECAC  F072         	call	_putch
  1599  00FD70  D000               	goto	l2463
  1600  00FD72                     l2463:
  1601                           
  1602                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1603  00FD72  5068               	movf	printf@c,w,c
  1604  00FD74  EC79  F07A         	call	_scale
  1605  00FD78  C02B  F052         	movff	?_scale,_printf$1010
  1606  00FD7C  C02C  F053         	movff	?_scale+1,_printf$1010+1
  1607  00FD80  C02D  F054         	movff	?_scale+2,_printf$1010+2
  1608                           
  1609                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1610  00FD84  C065  F01F         	movff	printf@fval,___ftmul@f2
  1611  00FD88  C066  F020         	movff	printf@fval+1,___ftmul@f2+1
  1612  00FD8C  C067  F021         	movff	printf@fval+2,___ftmul@f2+2
  1613  00FD90  C052  F01C         	movff	_printf$1010,___ftmul@f1
  1614  00FD94  C053  F01D         	movff	_printf$1010+1,___ftmul@f1+1
  1615  00FD98  C054  F01E         	movff	_printf$1010+2,___ftmul@f1+2
  1616  00FD9C  ECEC  F076         	call	___ftmul	;wreg free
  1617  00FDA0  C01C  F032         	movff	?___ftmul,___fttol@f1
  1618  00FDA4  C01D  F033         	movff	?___ftmul+1,___fttol@f1+1
  1619  00FDA8  C01E  F034         	movff	?___ftmul+2,___fttol@f1+2
  1620  00FDAC  EC02  F076         	call	___fttol	;wreg free
  1621  00FDB0  C032  F05B         	movff	?___fttol,printf@val
  1622  00FDB4  C033  F05C         	movff	?___fttol+1,printf@val+1
  1623  00FDB8  C034  F05D         	movff	?___fttol+2,printf@val+2
  1624  00FDBC  C035  F05E         	movff	?___fttol+3,printf@val+3
  1625                           
  1626                           ;doprnt.c: 1228: while(c--) {
  1627  00FDC0  D06B               	goto	l2473
  1628  00FDC2                     l2467:
  1629                           
  1630                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1631  00FDC2  C05B  F001         	movff	printf@val,___lldiv@dividend
  1632  00FDC6  C05C  F002         	movff	printf@val+1,___lldiv@dividend+1
  1633  00FDCA  C05D  F003         	movff	printf@val+2,___lldiv@dividend+2
  1634  00FDCE  C05E  F004         	movff	printf@val+3,___lldiv@dividend+3
  1635  00FDD2  5068               	movf	printf@c,w,c
  1636  00FDD4  0D04               	mullw	4
  1637  00FDD6  0EF9               	movlw	low _dpowers
  1638  00FDD8  24F3               	addwf	prodl,w,c
  1639  00FDDA  6EF6               	movwf	tblptrl,c
  1640  00FDDC  0EFE               	movlw	high _dpowers
  1641  00FDDE  20F4               	addwfc	prodh,w,c
  1642  00FDE0  6EF7               	movwf	tblptrh,c
  1643  00FDE2                     	if	0	;There are less than 3 active tblptr bytes
  1644  00FDE2                     	endif
  1645  00FDE2  0009               	tblrd		*+
  1646  00FDE4  CFF5 F005          	movff	tablat,___lldiv@divisor
  1647  00FDE8  0009               	tblrd		*+
  1648  00FDEA  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1649  00FDEE  0009               	tblrd		*+
  1650  00FDF0  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1651  00FDF4  000A               	tblrd		*-
  1652  00FDF6  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1653  00FDFA  EC52  F074         	call	___lldiv	;wreg free
  1654  00FDFE  C001  F061         	movff	?___lldiv,printf@tmpval
  1655  00FE02  C002  F062         	movff	?___lldiv+1,printf@tmpval+1
  1656  00FE06  C003  F063         	movff	?___lldiv+2,printf@tmpval+2
  1657  00FE0A  C004  F064         	movff	?___lldiv+3,printf@tmpval+3
  1658                           
  1659                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1660  00FE0E  C061  F001         	movff	printf@tmpval,___llmod@dividend
  1661  00FE12  C062  F002         	movff	printf@tmpval+1,___llmod@dividend+1
  1662  00FE16  C063  F003         	movff	printf@tmpval+2,___llmod@dividend+2
  1663  00FE1A  C064  F004         	movff	printf@tmpval+3,___llmod@dividend+3
  1664  00FE1E  0E0A               	movlw	10
  1665  00FE20  6E05               	movwf	___llmod@divisor,c
  1666  00FE22  0E00               	movlw	0
  1667  00FE24  6E06               	movwf	___llmod@divisor+1,c
  1668  00FE26  0E00               	movlw	0
  1669  00FE28  6E07               	movwf	___llmod@divisor+2,c
  1670  00FE2A  0E00               	movlw	0
  1671  00FE2C  6E08               	movwf	___llmod@divisor+3,c
  1672  00FE2E  EC9E  F073         	call	___llmod	;wreg free
  1673  00FE32  C001  F061         	movff	?___llmod,printf@tmpval
  1674  00FE36  C002  F062         	movff	?___llmod+1,printf@tmpval+1
  1675  00FE3A  C003  F063         	movff	?___llmod+2,printf@tmpval+2
  1676  00FE3E  C004  F064         	movff	?___llmod+3,printf@tmpval+3
  1677                           
  1678                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  1679  00FE42  5061               	movf	printf@tmpval,w,c
  1680  00FE44  0F30               	addlw	48
  1681  00FE46  ECAC  F072         	call	_putch
  1682                           
  1683                           ;doprnt.c: 1232: val %= dpowers[c];
  1684  00FE4A  C05B  F001         	movff	printf@val,___llmod@dividend
  1685  00FE4E  C05C  F002         	movff	printf@val+1,___llmod@dividend+1
  1686  00FE52  C05D  F003         	movff	printf@val+2,___llmod@dividend+2
  1687  00FE56  C05E  F004         	movff	printf@val+3,___llmod@dividend+3
  1688  00FE5A  5068               	movf	printf@c,w,c
  1689  00FE5C  0D04               	mullw	4
  1690  00FE5E  0EF9               	movlw	low _dpowers
  1691  00FE60  24F3               	addwf	prodl,w,c
  1692  00FE62  6EF6               	movwf	tblptrl,c
  1693  00FE64  0EFE               	movlw	high _dpowers
  1694  00FE66  20F4               	addwfc	prodh,w,c
  1695  00FE68  6EF7               	movwf	tblptrh,c
  1696  00FE6A                     	if	0	;There are less than 3 active tblptr bytes
  1697  00FE6A                     	endif
  1698  00FE6A  0009               	tblrd		*+
  1699  00FE6C  CFF5 F005          	movff	tablat,___llmod@divisor
  1700  00FE70  0009               	tblrd		*+
  1701  00FE72  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1702  00FE76  0009               	tblrd		*+
  1703  00FE78  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1704  00FE7C  000A               	tblrd		*-
  1705  00FE7E  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1706  00FE82  EC9E  F073         	call	___llmod	;wreg free
  1707  00FE86  C001  F05B         	movff	?___llmod,printf@val
  1708  00FE8A  C002  F05C         	movff	?___llmod+1,printf@val+1
  1709  00FE8E  C003  F05D         	movff	?___llmod+2,printf@val+2
  1710  00FE92  C004  F05E         	movff	?___llmod+3,printf@val+3
  1711  00FE96  D000               	goto	l2473
  1712  00FE98                     l2473:
  1713  00FE98  0668               	decf	printf@c,f,c
  1714  00FE9A  2868               	incf	printf@c,w,c
  1715  00FE9C  B4D8               	btfsc	status,2,c
  1716  00FE9E  D009               	goto	l2479
  1717  00FEA0  D790               	goto	l2467
  1718                           
  1719                           ;doprnt.c: 1233: }
  1720                           ;doprnt.c: 1235: while(prec) {
  1721  00FEA2  D007               	goto	l2479
  1722  00FEA4                     l2475:
  1723                           
  1724                           ;doprnt.c: 1236: (putch('0') );
  1725  00FEA4  0E30               	movlw	48
  1726  00FEA6  ECAC  F072         	call	_putch
  1727                           
  1728                           ;doprnt.c: 1237: prec--;
  1729  00FEAA  0659               	decf	printf@prec,f,c
  1730  00FEAC  A0D8               	btfss	status,0,c
  1731  00FEAE  065A               	decf	printf@prec+1,f,c
  1732  00FEB0  D000               	goto	l2479
  1733  00FEB2                     l2479:
  1734  00FEB2  5059               	movf	printf@prec,w,c
  1735  00FEB4  105A               	iorwf	printf@prec+1,w,c
  1736  00FEB6  B4D8               	btfsc	status,2,c
  1737  00FEB8  D010               	goto	l2485
  1738  00FEBA  D7F4               	goto	l2475
  1739                           
  1740                           ;doprnt.c: 1238: }
  1741                           ;doprnt.c: 1245: continue;
  1742  00FEBC  D00E               	goto	l2485
  1743  00FEBE                     l2481:
  1744                           
  1745                           ;doprnt.c: 1246: }
  1746                           ;doprnt.c: 1422: {
  1747                           ;doprnt.c: 1438: if(flag & 0x03)
  1748  00FEBE  0E03               	movlw	3
  1749  00FEC0  1457               	andwf	printf@flag,w,c
  1750  00FEC2  6E4C               	movwf	??_printf& (0+255),c
  1751  00FEC4  0E00               	movlw	0
  1752  00FEC6  1458               	andwf	printf@flag+1,w,c
  1753  00FEC8  6E4D               	movwf	(??_printf+1)& (0+255),c
  1754  00FECA  504C               	movf	??_printf,w,c
  1755  00FECC  104D               	iorwf	??_printf+1,w,c
  1756  00FECE  B4D8               	btfsc	status,2,c
  1757  00FED0  D004               	goto	l2485
  1758                           
  1759                           ;doprnt.c: 1439: (putch('-') );
  1760  00FED2  0E2D               	movlw	45
  1761  00FED4  ECAC  F072         	call	_putch
  1762  00FED8  D000               	goto	l2485
  1763  00FEDA                     l2485:
  1764  00FEDA  C047  FFF6         	movff	printf@f,tblptrl
  1765  00FEDE  C048  FFF7         	movff	printf@f+1,tblptrh
  1766  00FEE2  4A47               	infsnz	printf@f,f,c
  1767  00FEE4  2A48               	incf	printf@f+1,f,c
  1768  00FEE6                     	if	0	;tblptru may be non-zero
  1769  00FEE6                     	endif
  1770  00FEE6                     	if	0	;tblptru may be non-zero
  1771  00FEE6                     	endif
  1772  00FEE6  0008               	tblrd		*
  1773  00FEE8  CFF5 F068          	movff	tablat,printf@c
  1774  00FEEC  5068               	movf	printf@c,w,c
  1775  00FEEE  B4D8               	btfsc	status,2,c
  1776  00FEF0  D002               	goto	l132
  1777  00FEF2  D4F4               	goto	l2337
  1778  00FEF4  D000               	goto	l132
  1779  00FEF6                     l132:
  1780  00FEF6  0012               	return		;funcret
  1781  00FEF8                     __end_of_printf:
  1782                           	opt stack 0
  1783                           tblptru	equ	0xFF8
  1784                           tblptrh	equ	0xFF7
  1785                           tblptrl	equ	0xFF6
  1786                           tablat	equ	0xFF5
  1787                           prodh	equ	0xFF4
  1788                           prodl	equ	0xFF3
  1789                           wreg	equ	0xFE8
  1790                           postinc2	equ	0xFDE
  1791                           postdec2	equ	0xFDD
  1792                           fsr2h	equ	0xFDA
  1793                           fsr2l	equ	0xFD9
  1794                           status	equ	0xFD8
  1795                           
  1796 ;; *************** function _scale *****************
  1797 ;; Defined at:
  1798 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1799 ;; Parameters:    Size  Location     Type
  1800 ;;  scl             1    wreg     char 
  1801 ;; Auto vars:     Size  Location     Type
  1802 ;;  scl             1   48[COMRAM] char 
  1803 ;; Return value:  Size  Location     Type
  1804 ;;                  3   42[COMRAM] char 
  1805 ;; Registers used:
  1806 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1807 ;; Tracked objects:
  1808 ;;		On entry : 0/0
  1809 ;;		On exit  : 0/0
  1810 ;;		Unchanged: 0/0
  1811 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1812 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1813 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1814 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1815 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1816 ;;Total ram usage:        7 bytes
  1817 ;; Hardware stack levels used:    1
  1818 ;; Hardware stack levels required when called:    2
  1819 ;; This function calls:
  1820 ;;		___awdiv
  1821 ;;		___awmod
  1822 ;;		___ftmul
  1823 ;;		___wmul
  1824 ;; This function is called by:
  1825 ;;		_printf
  1826 ;; This function uses a non-reentrant model
  1827 ;;
  1828                           
  1829                           	psect	text2
  1830  00F4F2                     __ptext2:
  1831                           	opt stack 0
  1832  00F4F2                     _scale:
  1833                           	opt stack 27
  1834                           
  1835                           ;incstack = 0
  1836                           ;scale@scl stored from wreg
  1837  00F4F2  6E31               	movwf	scale@scl,c
  1838                           
  1839                           ;doprnt.c: 428: if(scl < 0) {
  1840  00F4F4  AE31               	btfss	scale@scl,7,c
  1841  00F4F6  D0EF               	goto	l2005
  1842                           
  1843                           ;doprnt.c: 429: scl = -scl;
  1844  00F4F8  6C31               	negf	scale@scl,c
  1845                           
  1846                           ;doprnt.c: 430: if(scl>=110)
  1847  00F4FA  5031               	movf	scale@scl,w,c
  1848  00F4FC  0A80               	xorlw	128
  1849  00F4FE  0F12               	addlw	-238
  1850  00F500  A0D8               	btfss	status,0,c
  1851  00F502  D08D               	goto	l1995
  1852                           
  1853                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1854  00F504  0E00               	movlw	0
  1855  00F506  6E12               	movwf	___wmul@multiplicand+1,c
  1856  00F508  0E03               	movlw	3
  1857  00F50A  6E11               	movwf	___wmul@multiplicand,c
  1858  00F50C  0E00               	movlw	0
  1859  00F50E  6E0A               	movwf	___awdiv@divisor+1,c
  1860  00F510  0E0A               	movlw	10
  1861  00F512  6E09               	movwf	___awdiv@divisor,c
  1862  00F514  0E00               	movlw	0
  1863  00F516  6E04               	movwf	___awmod@divisor+1,c
  1864  00F518  0E64               	movlw	100
  1865  00F51A  6E03               	movwf	___awmod@divisor,c
  1866  00F51C  5031               	movf	scale@scl,w,c
  1867  00F51E  6E01               	movwf	___awmod@dividend,c
  1868  00F520  6A02               	clrf	___awmod@dividend+1,c
  1869  00F522  BE01               	btfsc	___awmod@dividend,7,c
  1870  00F524  0602               	decf	___awmod@dividend+1,f,c
  1871  00F526  EC11  F074         	call	___awmod	;wreg free
  1872  00F52A  C001  F007         	movff	?___awmod,___awdiv@dividend
  1873  00F52E  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  1874  00F532  ECE3  F074         	call	___awdiv	;wreg free
  1875  00F536  0E09               	movlw	9
  1876  00F538  2407               	addwf	?___awdiv,w,c
  1877  00F53A  6E0F               	movwf	___wmul@multiplier,c
  1878  00F53C  0E00               	movlw	0
  1879  00F53E  2008               	addwfc	?___awdiv+1,w,c
  1880  00F540  6E10               	movwf	___wmul@multiplier+1,c
  1881  00F542  ECE2  F072         	call	___wmul	;wreg free
  1882  00F546  0E21               	movlw	low __npowers_
  1883  00F548  240F               	addwf	?___wmul,w,c
  1884  00F54A  6EF6               	movwf	tblptrl,c
  1885  00F54C  0EFF               	movlw	high __npowers_
  1886  00F54E  2010               	addwfc	?___wmul+1,w,c
  1887  00F550  6EF7               	movwf	tblptrh,c
  1888  00F552                     	if	0	;There are less than 3 active tblptr bytes
  1889  00F552                     	endif
  1890  00F552  0009               	tblrd		*+
  1891  00F554  CFF5 F01F          	movff	tablat,___ftmul@f2
  1892  00F558  0009               	tblrd		*+
  1893  00F55A  CFF5 F020          	movff	tablat,___ftmul@f2+1
  1894  00F55E  000A               	tblrd		*-
  1895  00F560  CFF5 F021          	movff	tablat,___ftmul@f2+2
  1896  00F564  0E00               	movlw	0
  1897  00F566  6E0A               	movwf	___awdiv@divisor+1,c
  1898  00F568  0E64               	movlw	100
  1899  00F56A  6E09               	movwf	___awdiv@divisor,c
  1900  00F56C  5031               	movf	scale@scl,w,c
  1901  00F56E  6E07               	movwf	___awdiv@dividend,c
  1902  00F570  6A08               	clrf	___awdiv@dividend+1,c
  1903  00F572  BE07               	btfsc	___awdiv@dividend,7,c
  1904  00F574  0608               	decf	___awdiv@dividend+1,f,c
  1905  00F576  ECE3  F074         	call	___awdiv	;wreg free
  1906  00F57A  0E12               	movlw	18
  1907  00F57C  2407               	addwf	?___awdiv,w,c
  1908  00F57E  6E0F               	movwf	___wmul@multiplier,c
  1909  00F580  0E00               	movlw	0
  1910  00F582  2008               	addwfc	?___awdiv+1,w,c
  1911  00F584  6E10               	movwf	___wmul@multiplier+1,c
  1912  00F586  0E00               	movlw	0
  1913  00F588  6E12               	movwf	___wmul@multiplicand+1,c
  1914  00F58A  0E03               	movlw	3
  1915  00F58C  6E11               	movwf	___wmul@multiplicand,c
  1916  00F58E  ECE2  F072         	call	___wmul	;wreg free
  1917  00F592  0E21               	movlw	low __npowers_
  1918  00F594  240F               	addwf	?___wmul,w,c
  1919  00F596  6EF6               	movwf	tblptrl,c
  1920  00F598  0EFF               	movlw	high __npowers_
  1921  00F59A  2010               	addwfc	?___wmul+1,w,c
  1922  00F59C  6EF7               	movwf	tblptrh,c
  1923  00F59E                     	if	0	;There are less than 3 active tblptr bytes
  1924  00F59E                     	endif
  1925  00F59E  0009               	tblrd		*+
  1926  00F5A0  CFF5 F01C          	movff	tablat,___ftmul@f1
  1927  00F5A4  0009               	tblrd		*+
  1928  00F5A6  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  1929  00F5AA  000A               	tblrd		*-
  1930  00F5AC  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  1931  00F5B0  ECEC  F076         	call	___ftmul	;wreg free
  1932  00F5B4  C01C  F02E         	movff	?___ftmul,_scale$1009
  1933  00F5B8  C01D  F02F         	movff	?___ftmul+1,_scale$1009+1
  1934  00F5BC  C01E  F030         	movff	?___ftmul+2,_scale$1009+2
  1935                           
  1936                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  1937  00F5C0  C02E  F01C         	movff	_scale$1009,___ftmul@f1
  1938  00F5C4  C02F  F01D         	movff	_scale$1009+1,___ftmul@f1+1
  1939  00F5C8  C030  F01E         	movff	_scale$1009+2,___ftmul@f1+2
  1940  00F5CC  0E00               	movlw	0
  1941  00F5CE  6E12               	movwf	___wmul@multiplicand+1,c
  1942  00F5D0  0E03               	movlw	3
  1943  00F5D2  6E11               	movwf	___wmul@multiplicand,c
  1944  00F5D4  0E00               	movlw	0
  1945  00F5D6  6E04               	movwf	___awmod@divisor+1,c
  1946  00F5D8  0E0A               	movlw	10
  1947  00F5DA  6E03               	movwf	___awmod@divisor,c
  1948  00F5DC  5031               	movf	scale@scl,w,c
  1949  00F5DE  6E01               	movwf	___awmod@dividend,c
  1950  00F5E0  6A02               	clrf	___awmod@dividend+1,c
  1951  00F5E2  BE01               	btfsc	___awmod@dividend,7,c
  1952  00F5E4  0602               	decf	___awmod@dividend+1,f,c
  1953  00F5E6  EC11  F074         	call	___awmod	;wreg free
  1954  00F5EA  C001  F00F         	movff	?___awmod,___wmul@multiplier
  1955  00F5EE  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  1956  00F5F2  ECE2  F072         	call	___wmul	;wreg free
  1957  00F5F6  0E21               	movlw	low __npowers_
  1958  00F5F8  240F               	addwf	?___wmul,w,c
  1959  00F5FA  6EF6               	movwf	tblptrl,c
  1960  00F5FC  0EFF               	movlw	high __npowers_
  1961  00F5FE  2010               	addwfc	?___wmul+1,w,c
  1962  00F600  6EF7               	movwf	tblptrh,c
  1963  00F602                     	if	0	;There are less than 3 active tblptr bytes
  1964  00F602                     	endif
  1965  00F602  0009               	tblrd		*+
  1966  00F604  CFF5 F01F          	movff	tablat,___ftmul@f2
  1967  00F608  0009               	tblrd		*+
  1968  00F60A  CFF5 F020          	movff	tablat,___ftmul@f2+1
  1969  00F60E  000A               	tblrd		*-
  1970  00F610  CFF5 F021          	movff	tablat,___ftmul@f2+2
  1971  00F614  ECEC  F076         	call	___ftmul	;wreg free
  1972  00F618  D141               	goto	L5
  1973  00F61A  D15A               	goto	l76
  1974  00F61C  D054               	goto	l2001
  1975  00F61E                     l1995:
  1976                           
  1977                           ;doprnt.c: 432: else if(scl > 10)
  1978  00F61E  5031               	movf	scale@scl,w,c
  1979  00F620  0A80               	xorlw	128
  1980  00F622  0F75               	addlw	-139
  1981  00F624  A0D8               	btfss	status,0,c
  1982  00F626  D04F               	goto	l2001
  1983                           
  1984                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  1985  00F628  0E00               	movlw	0
  1986  00F62A  6E0A               	movwf	___awdiv@divisor+1,c
  1987  00F62C  0E0A               	movlw	10
  1988  00F62E  6E09               	movwf	___awdiv@divisor,c
  1989  00F630  5031               	movf	scale@scl,w,c
  1990  00F632  6E07               	movwf	___awdiv@dividend,c
  1991  00F634  6A08               	clrf	___awdiv@dividend+1,c
  1992  00F636  BE07               	btfsc	___awdiv@dividend,7,c
  1993  00F638  0608               	decf	___awdiv@dividend+1,f,c
  1994  00F63A  ECE3  F074         	call	___awdiv	;wreg free
  1995  00F63E  0E09               	movlw	9
  1996  00F640  2407               	addwf	?___awdiv,w,c
  1997  00F642  6E0F               	movwf	___wmul@multiplier,c
  1998  00F644  0E00               	movlw	0
  1999  00F646  2008               	addwfc	?___awdiv+1,w,c
  2000  00F648  6E10               	movwf	___wmul@multiplier+1,c
  2001  00F64A  0E00               	movlw	0
  2002  00F64C  6E12               	movwf	___wmul@multiplicand+1,c
  2003  00F64E  0E03               	movlw	3
  2004  00F650  6E11               	movwf	___wmul@multiplicand,c
  2005  00F652  ECE2  F072         	call	___wmul	;wreg free
  2006  00F656  0E21               	movlw	low __npowers_
  2007  00F658  240F               	addwf	?___wmul,w,c
  2008  00F65A  6EF6               	movwf	tblptrl,c
  2009  00F65C  0EFF               	movlw	high __npowers_
  2010  00F65E  2010               	addwfc	?___wmul+1,w,c
  2011  00F660  6EF7               	movwf	tblptrh,c
  2012  00F662                     	if	0	;There are less than 3 active tblptr bytes
  2013  00F662                     	endif
  2014  00F662  0009               	tblrd		*+
  2015  00F664  CFF5 F01C          	movff	tablat,___ftmul@f1
  2016  00F668  0009               	tblrd		*+
  2017  00F66A  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2018  00F66E  000A               	tblrd		*-
  2019  00F670  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2020  00F674  0E00               	movlw	0
  2021  00F676  6E12               	movwf	___wmul@multiplicand+1,c
  2022  00F678  0E03               	movlw	3
  2023  00F67A  6E11               	movwf	___wmul@multiplicand,c
  2024  00F67C  0E00               	movlw	0
  2025  00F67E  6E04               	movwf	___awmod@divisor+1,c
  2026  00F680  0E0A               	movlw	10
  2027  00F682  6E03               	movwf	___awmod@divisor,c
  2028  00F684  5031               	movf	scale@scl,w,c
  2029  00F686  6E01               	movwf	___awmod@dividend,c
  2030  00F688  6A02               	clrf	___awmod@dividend+1,c
  2031  00F68A  BE01               	btfsc	___awmod@dividend,7,c
  2032  00F68C  0602               	decf	___awmod@dividend+1,f,c
  2033  00F68E  EC11  F074         	call	___awmod	;wreg free
  2034  00F692  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2035  00F696  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2036  00F69A  ECE2  F072         	call	___wmul	;wreg free
  2037  00F69E  0E21               	movlw	low __npowers_
  2038  00F6A0  240F               	addwf	?___wmul,w,c
  2039  00F6A2  6EF6               	movwf	tblptrl,c
  2040  00F6A4  0EFF               	movlw	high __npowers_
  2041  00F6A6  2010               	addwfc	?___wmul+1,w,c
  2042  00F6A8  6EF7               	movwf	tblptrh,c
  2043  00F6AA                     	if	0	;There are less than 3 active tblptr bytes
  2044  00F6AA                     	endif
  2045  00F6AA  0009               	tblrd		*+
  2046  00F6AC  CFF5 F01F          	movff	tablat,___ftmul@f2
  2047  00F6B0  0009               	tblrd		*+
  2048  00F6B2  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2049  00F6B6  000A               	tblrd		*-
  2050  00F6B8  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2051  00F6BC  ECEC  F076         	call	___ftmul	;wreg free
  2052  00F6C0  D0ED               	goto	L5
  2053  00F6C2  D106               	goto	l76
  2054  00F6C4  D000               	goto	l2001
  2055  00F6C6                     l2001:
  2056                           
  2057                           ;doprnt.c: 434: return _npowers_[scl];
  2058  00F6C6  5031               	movf	scale@scl,w,c
  2059  00F6C8  0D03               	mullw	3
  2060  00F6CA  0E21               	movlw	low __npowers_
  2061  00F6CC  24F3               	addwf	prodl,w,c
  2062  00F6CE  6EF6               	movwf	tblptrl,c
  2063  00F6D0  0EFF               	movlw	high __npowers_
  2064  00F6D2  D0F2               	goto	L4
  2065  00F6D4  D0FD               	goto	l76
  2066  00F6D6                     l2005:
  2067                           
  2068                           ;doprnt.c: 435: }
  2069                           ;doprnt.c: 436: if(scl>=110)
  2070  00F6D6  5031               	movf	scale@scl,w,c
  2071  00F6D8  0A80               	xorlw	128
  2072  00F6DA  0F12               	addlw	-238
  2073  00F6DC  A0D8               	btfss	status,0,c
  2074  00F6DE  D08D               	goto	l2013
  2075                           
  2076                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2077  00F6E0  0E00               	movlw	0
  2078  00F6E2  6E12               	movwf	___wmul@multiplicand+1,c
  2079  00F6E4  0E03               	movlw	3
  2080  00F6E6  6E11               	movwf	___wmul@multiplicand,c
  2081  00F6E8  0E00               	movlw	0
  2082  00F6EA  6E0A               	movwf	___awdiv@divisor+1,c
  2083  00F6EC  0E0A               	movlw	10
  2084  00F6EE  6E09               	movwf	___awdiv@divisor,c
  2085  00F6F0  0E00               	movlw	0
  2086  00F6F2  6E04               	movwf	___awmod@divisor+1,c
  2087  00F6F4  0E64               	movlw	100
  2088  00F6F6  6E03               	movwf	___awmod@divisor,c
  2089  00F6F8  5031               	movf	scale@scl,w,c
  2090  00F6FA  6E01               	movwf	___awmod@dividend,c
  2091  00F6FC  6A02               	clrf	___awmod@dividend+1,c
  2092  00F6FE  BE01               	btfsc	___awmod@dividend,7,c
  2093  00F700  0602               	decf	___awmod@dividend+1,f,c
  2094  00F702  EC11  F074         	call	___awmod	;wreg free
  2095  00F706  C001  F007         	movff	?___awmod,___awdiv@dividend
  2096  00F70A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2097  00F70E  ECE3  F074         	call	___awdiv	;wreg free
  2098  00F712  0E09               	movlw	9
  2099  00F714  2407               	addwf	?___awdiv,w,c
  2100  00F716  6E0F               	movwf	___wmul@multiplier,c
  2101  00F718  0E00               	movlw	0
  2102  00F71A  2008               	addwfc	?___awdiv+1,w,c
  2103  00F71C  6E10               	movwf	___wmul@multiplier+1,c
  2104  00F71E  ECE2  F072         	call	___wmul	;wreg free
  2105  00F722  0E48               	movlw	low __powers_
  2106  00F724  240F               	addwf	?___wmul,w,c
  2107  00F726  6EF6               	movwf	tblptrl,c
  2108  00F728  0EFF               	movlw	high __powers_
  2109  00F72A  2010               	addwfc	?___wmul+1,w,c
  2110  00F72C  6EF7               	movwf	tblptrh,c
  2111  00F72E                     	if	0	;There are less than 3 active tblptr bytes
  2112  00F72E                     	endif
  2113  00F72E  0009               	tblrd		*+
  2114  00F730  CFF5 F01F          	movff	tablat,___ftmul@f2
  2115  00F734  0009               	tblrd		*+
  2116  00F736  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2117  00F73A  000A               	tblrd		*-
  2118  00F73C  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2119  00F740  0E00               	movlw	0
  2120  00F742  6E0A               	movwf	___awdiv@divisor+1,c
  2121  00F744  0E64               	movlw	100
  2122  00F746  6E09               	movwf	___awdiv@divisor,c
  2123  00F748  5031               	movf	scale@scl,w,c
  2124  00F74A  6E07               	movwf	___awdiv@dividend,c
  2125  00F74C  6A08               	clrf	___awdiv@dividend+1,c
  2126  00F74E  BE07               	btfsc	___awdiv@dividend,7,c
  2127  00F750  0608               	decf	___awdiv@dividend+1,f,c
  2128  00F752  ECE3  F074         	call	___awdiv	;wreg free
  2129  00F756  0E12               	movlw	18
  2130  00F758  2407               	addwf	?___awdiv,w,c
  2131  00F75A  6E0F               	movwf	___wmul@multiplier,c
  2132  00F75C  0E00               	movlw	0
  2133  00F75E  2008               	addwfc	?___awdiv+1,w,c
  2134  00F760  6E10               	movwf	___wmul@multiplier+1,c
  2135  00F762  0E00               	movlw	0
  2136  00F764  6E12               	movwf	___wmul@multiplicand+1,c
  2137  00F766  0E03               	movlw	3
  2138  00F768  6E11               	movwf	___wmul@multiplicand,c
  2139  00F76A  ECE2  F072         	call	___wmul	;wreg free
  2140  00F76E  0E48               	movlw	low __powers_
  2141  00F770  240F               	addwf	?___wmul,w,c
  2142  00F772  6EF6               	movwf	tblptrl,c
  2143  00F774  0EFF               	movlw	high __powers_
  2144  00F776  2010               	addwfc	?___wmul+1,w,c
  2145  00F778  6EF7               	movwf	tblptrh,c
  2146  00F77A                     	if	0	;There are less than 3 active tblptr bytes
  2147  00F77A                     	endif
  2148  00F77A  0009               	tblrd		*+
  2149  00F77C  CFF5 F01C          	movff	tablat,___ftmul@f1
  2150  00F780  0009               	tblrd		*+
  2151  00F782  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2152  00F786  000A               	tblrd		*-
  2153  00F788  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2154  00F78C  ECEC  F076         	call	___ftmul	;wreg free
  2155  00F790  C01C  F02E         	movff	?___ftmul,_scale$1009
  2156  00F794  C01D  F02F         	movff	?___ftmul+1,_scale$1009+1
  2157  00F798  C01E  F030         	movff	?___ftmul+2,_scale$1009+2
  2158                           
  2159                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2160  00F79C  C02E  F01C         	movff	_scale$1009,___ftmul@f1
  2161  00F7A0  C02F  F01D         	movff	_scale$1009+1,___ftmul@f1+1
  2162  00F7A4  C030  F01E         	movff	_scale$1009+2,___ftmul@f1+2
  2163  00F7A8  0E00               	movlw	0
  2164  00F7AA  6E12               	movwf	___wmul@multiplicand+1,c
  2165  00F7AC  0E03               	movlw	3
  2166  00F7AE  6E11               	movwf	___wmul@multiplicand,c
  2167  00F7B0  0E00               	movlw	0
  2168  00F7B2  6E04               	movwf	___awmod@divisor+1,c
  2169  00F7B4  0E0A               	movlw	10
  2170  00F7B6  6E03               	movwf	___awmod@divisor,c
  2171  00F7B8  5031               	movf	scale@scl,w,c
  2172  00F7BA  6E01               	movwf	___awmod@dividend,c
  2173  00F7BC  6A02               	clrf	___awmod@dividend+1,c
  2174  00F7BE  BE01               	btfsc	___awmod@dividend,7,c
  2175  00F7C0  0602               	decf	___awmod@dividend+1,f,c
  2176  00F7C2  EC11  F074         	call	___awmod	;wreg free
  2177  00F7C6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2178  00F7CA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2179  00F7CE  ECE2  F072         	call	___wmul	;wreg free
  2180  00F7D2  0E48               	movlw	low __powers_
  2181  00F7D4  240F               	addwf	?___wmul,w,c
  2182  00F7D6  6EF6               	movwf	tblptrl,c
  2183  00F7D8  0EFF               	movlw	high __powers_
  2184  00F7DA  2010               	addwfc	?___wmul+1,w,c
  2185  00F7DC  6EF7               	movwf	tblptrh,c
  2186  00F7DE                     	if	0	;There are less than 3 active tblptr bytes
  2187  00F7DE                     	endif
  2188  00F7DE  0009               	tblrd		*+
  2189  00F7E0  CFF5 F01F          	movff	tablat,___ftmul@f2
  2190  00F7E4  0009               	tblrd		*+
  2191  00F7E6  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2192  00F7EA  000A               	tblrd		*-
  2193  00F7EC  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2194  00F7F0  ECEC  F076         	call	___ftmul	;wreg free
  2195  00F7F4  D053               	goto	L5
  2196  00F7F6  D06C               	goto	l76
  2197  00F7F8  D059               	goto	l2019
  2198  00F7FA                     l2013:
  2199                           
  2200                           ;doprnt.c: 438: else if(scl > 10)
  2201  00F7FA  5031               	movf	scale@scl,w,c
  2202  00F7FC  0A80               	xorlw	128
  2203  00F7FE  0F75               	addlw	-139
  2204  00F800  A0D8               	btfss	status,0,c
  2205  00F802  D054               	goto	l2019
  2206                           
  2207                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2208  00F804  0E00               	movlw	0
  2209  00F806  6E0A               	movwf	___awdiv@divisor+1,c
  2210  00F808  0E0A               	movlw	10
  2211  00F80A  6E09               	movwf	___awdiv@divisor,c
  2212  00F80C  5031               	movf	scale@scl,w,c
  2213  00F80E  6E07               	movwf	___awdiv@dividend,c
  2214  00F810  6A08               	clrf	___awdiv@dividend+1,c
  2215  00F812  BE07               	btfsc	___awdiv@dividend,7,c
  2216  00F814  0608               	decf	___awdiv@dividend+1,f,c
  2217  00F816  ECE3  F074         	call	___awdiv	;wreg free
  2218  00F81A  0E09               	movlw	9
  2219  00F81C  2407               	addwf	?___awdiv,w,c
  2220  00F81E  6E0F               	movwf	___wmul@multiplier,c
  2221  00F820  0E00               	movlw	0
  2222  00F822  2008               	addwfc	?___awdiv+1,w,c
  2223  00F824  6E10               	movwf	___wmul@multiplier+1,c
  2224  00F826  0E00               	movlw	0
  2225  00F828  6E12               	movwf	___wmul@multiplicand+1,c
  2226  00F82A  0E03               	movlw	3
  2227  00F82C  6E11               	movwf	___wmul@multiplicand,c
  2228  00F82E  ECE2  F072         	call	___wmul	;wreg free
  2229  00F832  0E48               	movlw	low __powers_
  2230  00F834  240F               	addwf	?___wmul,w,c
  2231  00F836  6EF6               	movwf	tblptrl,c
  2232  00F838  0EFF               	movlw	high __powers_
  2233  00F83A  2010               	addwfc	?___wmul+1,w,c
  2234  00F83C  6EF7               	movwf	tblptrh,c
  2235  00F83E                     	if	0	;There are less than 3 active tblptr bytes
  2236  00F83E                     	endif
  2237  00F83E  0009               	tblrd		*+
  2238  00F840  CFF5 F01C          	movff	tablat,___ftmul@f1
  2239  00F844  0009               	tblrd		*+
  2240  00F846  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2241  00F84A  000A               	tblrd		*-
  2242  00F84C  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2243  00F850  0E00               	movlw	0
  2244  00F852  6E12               	movwf	___wmul@multiplicand+1,c
  2245  00F854  0E03               	movlw	3
  2246  00F856  6E11               	movwf	___wmul@multiplicand,c
  2247  00F858  0E00               	movlw	0
  2248  00F85A  6E04               	movwf	___awmod@divisor+1,c
  2249  00F85C  0E0A               	movlw	10
  2250  00F85E  6E03               	movwf	___awmod@divisor,c
  2251  00F860  5031               	movf	scale@scl,w,c
  2252  00F862  6E01               	movwf	___awmod@dividend,c
  2253  00F864  6A02               	clrf	___awmod@dividend+1,c
  2254  00F866  BE01               	btfsc	___awmod@dividend,7,c
  2255  00F868  0602               	decf	___awmod@dividend+1,f,c
  2256  00F86A  EC11  F074         	call	___awmod	;wreg free
  2257  00F86E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2258  00F872  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2259  00F876  ECE2  F072         	call	___wmul	;wreg free
  2260  00F87A  0E48               	movlw	low __powers_
  2261  00F87C  240F               	addwf	?___wmul,w,c
  2262  00F87E  6EF6               	movwf	tblptrl,c
  2263  00F880  0EFF               	movlw	high __powers_
  2264  00F882  2010               	addwfc	?___wmul+1,w,c
  2265  00F884  6EF7               	movwf	tblptrh,c
  2266  00F886                     	if	0	;There are less than 3 active tblptr bytes
  2267  00F886                     	endif
  2268  00F886  0009               	tblrd		*+
  2269  00F888  CFF5 F01F          	movff	tablat,___ftmul@f2
  2270  00F88C  0009               	tblrd		*+
  2271  00F88E  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2272  00F892  000A               	tblrd		*-
  2273  00F894  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2274  00F898  ECEC  F076         	call	___ftmul	;wreg free
  2275  00F89C                     L5:
  2276  00F89C  C01C  F02B         	movff	?___ftmul,?_scale
  2277  00F8A0  C01D  F02C         	movff	?___ftmul+1,?_scale+1
  2278  00F8A4  C01E  F02D         	movff	?___ftmul+2,?_scale+2
  2279  00F8A8  D013               	goto	l76
  2280  00F8AA  D000               	goto	l2019
  2281  00F8AC                     l2019:
  2282                           
  2283                           ;doprnt.c: 440: return _powers_[scl];
  2284  00F8AC  5031               	movf	scale@scl,w,c
  2285  00F8AE  0D03               	mullw	3
  2286  00F8B0  0E48               	movlw	low __powers_
  2287  00F8B2  24F3               	addwf	prodl,w,c
  2288  00F8B4  6EF6               	movwf	tblptrl,c
  2289  00F8B6  0EFF               	movlw	high __powers_
  2290  00F8B8                     L4:
  2291  00F8B8  20F4               	addwfc	prodh,w,c
  2292  00F8BA  6EF7               	movwf	tblptrh,c
  2293  00F8BC                     	if	0	;There are less than 3 active tblptr bytes
  2294  00F8BC                     	endif
  2295  00F8BC  0009               	tblrd		*+
  2296  00F8BE  CFF5 F02B          	movff	tablat,?_scale
  2297  00F8C2  0009               	tblrd		*+
  2298  00F8C4  CFF5 F02C          	movff	tablat,?_scale+1
  2299  00F8C8  000A               	tblrd		*-
  2300  00F8CA  CFF5 F02D          	movff	tablat,?_scale+2
  2301  00F8CE  D000               	goto	l76
  2302  00F8D0                     l76:
  2303  00F8D0  0012               	return		;funcret
  2304  00F8D2                     __end_of_scale:
  2305                           	opt stack 0
  2306                           tblptru	equ	0xFF8
  2307                           tblptrh	equ	0xFF7
  2308                           tblptrl	equ	0xFF6
  2309                           tablat	equ	0xFF5
  2310                           prodh	equ	0xFF4
  2311                           prodl	equ	0xFF3
  2312                           wreg	equ	0xFE8
  2313                           postinc2	equ	0xFDE
  2314                           postdec2	equ	0xFDD
  2315                           fsr2h	equ	0xFDA
  2316                           fsr2l	equ	0xFD9
  2317                           status	equ	0xFD8
  2318                           
  2319 ;; *************** function _putch *****************
  2320 ;; Defined at:
  2321 ;;		line 24 in file "lab1p3.c"
  2322 ;; Parameters:    Size  Location     Type
  2323 ;;  c               1    wreg     unsigned char 
  2324 ;; Auto vars:     Size  Location     Type
  2325 ;;  c               1    0[COMRAM] unsigned char 
  2326 ;; Return value:  Size  Location     Type
  2327 ;;		None               void
  2328 ;; Registers used:
  2329 ;;		wreg
  2330 ;; Tracked objects:
  2331 ;;		On entry : 0/0
  2332 ;;		On exit  : 0/0
  2333 ;;		Unchanged: 0/0
  2334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2336 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2338 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2339 ;;Total ram usage:        1 bytes
  2340 ;; Hardware stack levels used:    1
  2341 ;; This function calls:
  2342 ;;		Nothing
  2343 ;; This function is called by:
  2344 ;;		_printf
  2345 ;; This function uses a non-reentrant model
  2346 ;;
  2347                           
  2348                           	psect	text3
  2349  00E558                     __ptext3:
  2350                           	opt stack 0
  2351  00E558                     _putch:
  2352                           	opt stack 29
  2353                           
  2354                           ;incstack = 0
  2355                           ;putch@c stored from wreg
  2356  00E558  6E01               	movwf	putch@c,c
  2357                           
  2358                           ;lab1p3.c: 27: while (!TRMT);
  2359  00E55A  D000               	goto	l28
  2360  00E55C                     l28:
  2361  00E55C  A2AC               	btfss	4012,1,c	;volatile
  2362  00E55E  D7FE               	goto	l28
  2363                           
  2364                           ;lab1p3.c: 28: TXREG = c;
  2365  00E560  C001  FFAD         	movff	putch@c,4013	;volatile
  2366  00E564  0012               	return		;funcret
  2367  00E566                     __end_of_putch:
  2368                           	opt stack 0
  2369                           tblptru	equ	0xFF8
  2370                           tblptrh	equ	0xFF7
  2371                           tblptrl	equ	0xFF6
  2372                           tablat	equ	0xFF5
  2373                           prodh	equ	0xFF4
  2374                           prodl	equ	0xFF3
  2375                           wreg	equ	0xFE8
  2376                           postinc2	equ	0xFDE
  2377                           postdec2	equ	0xFDD
  2378                           fsr2h	equ	0xFDA
  2379                           fsr2l	equ	0xFD9
  2380                           status	equ	0xFD8
  2381                           
  2382 ;; *************** function _fround *****************
  2383 ;; Defined at:
  2384 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2385 ;; Parameters:    Size  Location     Type
  2386 ;;  prec            1    wreg     unsigned char 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;  prec            1   51[COMRAM] unsigned char 
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  3   42[COMRAM] unsigned char 
  2391 ;; Registers used:
  2392 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2398 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;Total ram usage:       10 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    2
  2405 ;; This function calls:
  2406 ;;		___awdiv
  2407 ;;		___awmod
  2408 ;;		___ftmul
  2409 ;;		___wmul
  2410 ;; This function is called by:
  2411 ;;		_printf
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text4
  2416  00F2AE                     __ptext4:
  2417                           	opt stack 0
  2418  00F2AE                     _fround:
  2419                           	opt stack 27
  2420                           
  2421                           ;incstack = 0
  2422                           ;fround@prec stored from wreg
  2423  00F2AE  6E34               	movwf	fround@prec,c
  2424                           
  2425                           ;doprnt.c: 413: if(prec>=110)
  2426  00F2B0  0E6D               	movlw	109
  2427  00F2B2  6434               	cpfsgt	fround@prec,c
  2428  00F2B4  D09B               	goto	l1973
  2429                           
  2430                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2431  00F2B6  0E00               	movlw	0
  2432  00F2B8  6E12               	movwf	___wmul@multiplicand+1,c
  2433  00F2BA  0E03               	movlw	3
  2434  00F2BC  6E11               	movwf	___wmul@multiplicand,c
  2435  00F2BE  0E00               	movlw	0
  2436  00F2C0  6E0A               	movwf	___awdiv@divisor+1,c
  2437  00F2C2  0E0A               	movlw	10
  2438  00F2C4  6E09               	movwf	___awdiv@divisor,c
  2439  00F2C6  0E00               	movlw	0
  2440  00F2C8  6E04               	movwf	___awmod@divisor+1,c
  2441  00F2CA  0E64               	movlw	100
  2442  00F2CC  6E03               	movwf	___awmod@divisor,c
  2443  00F2CE  C034  F001         	movff	fround@prec,___awmod@dividend
  2444  00F2D2  6A02               	clrf	___awmod@dividend+1,c
  2445  00F2D4  EC11  F074         	call	___awmod	;wreg free
  2446  00F2D8  C001  F007         	movff	?___awmod,___awdiv@dividend
  2447  00F2DC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2448  00F2E0  ECE3  F074         	call	___awdiv	;wreg free
  2449  00F2E4  0E09               	movlw	9
  2450  00F2E6  2407               	addwf	?___awdiv,w,c
  2451  00F2E8  6E0F               	movwf	___wmul@multiplier,c
  2452  00F2EA  0E00               	movlw	0
  2453  00F2EC  2008               	addwfc	?___awdiv+1,w,c
  2454  00F2EE  6E10               	movwf	___wmul@multiplier+1,c
  2455  00F2F0  ECE2  F072         	call	___wmul	;wreg free
  2456  00F2F4  0E21               	movlw	low __npowers_
  2457  00F2F6  240F               	addwf	?___wmul,w,c
  2458  00F2F8  6EF6               	movwf	tblptrl,c
  2459  00F2FA  0EFF               	movlw	high __npowers_
  2460  00F2FC  2010               	addwfc	?___wmul+1,w,c
  2461  00F2FE  6EF7               	movwf	tblptrh,c
  2462  00F300                     	if	0	;There are less than 3 active tblptr bytes
  2463  00F300                     	endif
  2464  00F300  0009               	tblrd		*+
  2465  00F302  CFF5 F01F          	movff	tablat,___ftmul@f2
  2466  00F306  0009               	tblrd		*+
  2467  00F308  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2468  00F30C  000A               	tblrd		*-
  2469  00F30E  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2470  00F312  0E00               	movlw	0
  2471  00F314  6E0A               	movwf	___awdiv@divisor+1,c
  2472  00F316  0E64               	movlw	100
  2473  00F318  6E09               	movwf	___awdiv@divisor,c
  2474  00F31A  C034  F007         	movff	fround@prec,___awdiv@dividend
  2475  00F31E  6A08               	clrf	___awdiv@dividend+1,c
  2476  00F320  ECE3  F074         	call	___awdiv	;wreg free
  2477  00F324  0E12               	movlw	18
  2478  00F326  2407               	addwf	?___awdiv,w,c
  2479  00F328  6E0F               	movwf	___wmul@multiplier,c
  2480  00F32A  0E00               	movlw	0
  2481  00F32C  2008               	addwfc	?___awdiv+1,w,c
  2482  00F32E  6E10               	movwf	___wmul@multiplier+1,c
  2483  00F330  0E00               	movlw	0
  2484  00F332  6E12               	movwf	___wmul@multiplicand+1,c
  2485  00F334  0E03               	movlw	3
  2486  00F336  6E11               	movwf	___wmul@multiplicand,c
  2487  00F338  ECE2  F072         	call	___wmul	;wreg free
  2488  00F33C  0E21               	movlw	low __npowers_
  2489  00F33E  240F               	addwf	?___wmul,w,c
  2490  00F340  6EF6               	movwf	tblptrl,c
  2491  00F342  0EFF               	movlw	high __npowers_
  2492  00F344  2010               	addwfc	?___wmul+1,w,c
  2493  00F346  6EF7               	movwf	tblptrh,c
  2494  00F348                     	if	0	;There are less than 3 active tblptr bytes
  2495  00F348                     	endif
  2496  00F348  0009               	tblrd		*+
  2497  00F34A  CFF5 F01C          	movff	tablat,___ftmul@f1
  2498  00F34E  0009               	tblrd		*+
  2499  00F350  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2500  00F354  000A               	tblrd		*-
  2501  00F356  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2502  00F35A  ECEC  F076         	call	___ftmul	;wreg free
  2503  00F35E  C01C  F031         	movff	?___ftmul,_fround$1007
  2504  00F362  C01D  F032         	movff	?___ftmul+1,_fround$1007+1
  2505  00F366  C01E  F033         	movff	?___ftmul+2,_fround$1007+2
  2506                           
  2507                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2508  00F36A  0E00               	movlw	0
  2509  00F36C  6E12               	movwf	___wmul@multiplicand+1,c
  2510  00F36E  0E03               	movlw	3
  2511  00F370  6E11               	movwf	___wmul@multiplicand,c
  2512  00F372  0E00               	movlw	0
  2513  00F374  6E04               	movwf	___awmod@divisor+1,c
  2514  00F376  0E0A               	movlw	10
  2515  00F378  6E03               	movwf	___awmod@divisor,c
  2516  00F37A  C034  F001         	movff	fround@prec,___awmod@dividend
  2517  00F37E  6A02               	clrf	___awmod@dividend+1,c
  2518  00F380  EC11  F074         	call	___awmod	;wreg free
  2519  00F384  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2520  00F388  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2521  00F38C  ECE2  F072         	call	___wmul	;wreg free
  2522  00F390  0E21               	movlw	low __npowers_
  2523  00F392  240F               	addwf	?___wmul,w,c
  2524  00F394  6EF6               	movwf	tblptrl,c
  2525  00F396  0EFF               	movlw	high __npowers_
  2526  00F398  2010               	addwfc	?___wmul+1,w,c
  2527  00F39A  6EF7               	movwf	tblptrh,c
  2528  00F39C                     	if	0	;There are less than 3 active tblptr bytes
  2529  00F39C                     	endif
  2530  00F39C  0009               	tblrd		*+
  2531  00F39E  CFF5 F01F          	movff	tablat,___ftmul@f2
  2532  00F3A2  0009               	tblrd		*+
  2533  00F3A4  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2534  00F3A8  000A               	tblrd		*-
  2535  00F3AA  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2536  00F3AE  C031  F01C         	movff	_fround$1007,___ftmul@f1
  2537  00F3B2  C032  F01D         	movff	_fround$1007+1,___ftmul@f1+1
  2538  00F3B6  C033  F01E         	movff	_fround$1007+2,___ftmul@f1+2
  2539  00F3BA  ECEC  F076         	call	___ftmul	;wreg free
  2540  00F3BE  C01C  F02E         	movff	?___ftmul,_fround$1008
  2541  00F3C2  C01D  F02F         	movff	?___ftmul+1,_fround$1008+1
  2542  00F3C6  C01E  F030         	movff	?___ftmul+2,_fround$1008+2
  2543                           
  2544                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2545  00F3CA  C02E  F01C         	movff	_fround$1008,___ftmul@f1
  2546  00F3CE  C02F  F01D         	movff	_fround$1008+1,___ftmul@f1+1
  2547  00F3D2  C030  F01E         	movff	_fround$1008+2,___ftmul@f1+2
  2548  00F3D6  0E00               	movlw	0
  2549  00F3D8  6E1F               	movwf	___ftmul@f2,c
  2550  00F3DA  0E00               	movlw	0
  2551  00F3DC  6E20               	movwf	___ftmul@f2+1,c
  2552  00F3DE  0E3F               	movlw	63
  2553  00F3E0  6E21               	movwf	___ftmul@f2+2,c
  2554  00F3E2  ECEC  F076         	call	___ftmul	;wreg free
  2555  00F3E6  D07D               	goto	L7
  2556  00F3E8  D083               	goto	l69
  2557  00F3EA  D062               	goto	l1981
  2558  00F3EC                     l1973:
  2559                           
  2560                           ;doprnt.c: 415: else if(prec > 10)
  2561  00F3EC  0E0A               	movlw	10
  2562  00F3EE  6434               	cpfsgt	fround@prec,c
  2563  00F3F0  D05F               	goto	l1981
  2564                           
  2565                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2566  00F3F2  0E00               	movlw	0
  2567  00F3F4  6E12               	movwf	___wmul@multiplicand+1,c
  2568  00F3F6  0E03               	movlw	3
  2569  00F3F8  6E11               	movwf	___wmul@multiplicand,c
  2570  00F3FA  0E00               	movlw	0
  2571  00F3FC  6E04               	movwf	___awmod@divisor+1,c
  2572  00F3FE  0E0A               	movlw	10
  2573  00F400  6E03               	movwf	___awmod@divisor,c
  2574  00F402  C034  F001         	movff	fround@prec,___awmod@dividend
  2575  00F406  6A02               	clrf	___awmod@dividend+1,c
  2576  00F408  EC11  F074         	call	___awmod	;wreg free
  2577  00F40C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2578  00F410  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2579  00F414  ECE2  F072         	call	___wmul	;wreg free
  2580  00F418  0E21               	movlw	low __npowers_
  2581  00F41A  240F               	addwf	?___wmul,w,c
  2582  00F41C  6EF6               	movwf	tblptrl,c
  2583  00F41E  0EFF               	movlw	high __npowers_
  2584  00F420  2010               	addwfc	?___wmul+1,w,c
  2585  00F422  6EF7               	movwf	tblptrh,c
  2586  00F424                     	if	0	;There are less than 3 active tblptr bytes
  2587  00F424                     	endif
  2588  00F424  0009               	tblrd		*+
  2589  00F426  CFF5 F01F          	movff	tablat,___ftmul@f2
  2590  00F42A  0009               	tblrd		*+
  2591  00F42C  CFF5 F020          	movff	tablat,___ftmul@f2+1
  2592  00F430  000A               	tblrd		*-
  2593  00F432  CFF5 F021          	movff	tablat,___ftmul@f2+2
  2594  00F436  0E00               	movlw	0
  2595  00F438  6E0A               	movwf	___awdiv@divisor+1,c
  2596  00F43A  0E0A               	movlw	10
  2597  00F43C  6E09               	movwf	___awdiv@divisor,c
  2598  00F43E  C034  F007         	movff	fround@prec,___awdiv@dividend
  2599  00F442  6A08               	clrf	___awdiv@dividend+1,c
  2600  00F444  ECE3  F074         	call	___awdiv	;wreg free
  2601  00F448  0E09               	movlw	9
  2602  00F44A  2407               	addwf	?___awdiv,w,c
  2603  00F44C  6E0F               	movwf	___wmul@multiplier,c
  2604  00F44E  0E00               	movlw	0
  2605  00F450  2008               	addwfc	?___awdiv+1,w,c
  2606  00F452  6E10               	movwf	___wmul@multiplier+1,c
  2607  00F454  0E00               	movlw	0
  2608  00F456  6E12               	movwf	___wmul@multiplicand+1,c
  2609  00F458  0E03               	movlw	3
  2610  00F45A  6E11               	movwf	___wmul@multiplicand,c
  2611  00F45C  ECE2  F072         	call	___wmul	;wreg free
  2612  00F460  0E21               	movlw	low __npowers_
  2613  00F462  240F               	addwf	?___wmul,w,c
  2614  00F464  6EF6               	movwf	tblptrl,c
  2615  00F466  0EFF               	movlw	high __npowers_
  2616  00F468  2010               	addwfc	?___wmul+1,w,c
  2617  00F46A  6EF7               	movwf	tblptrh,c
  2618  00F46C                     	if	0	;There are less than 3 active tblptr bytes
  2619  00F46C                     	endif
  2620  00F46C  0009               	tblrd		*+
  2621  00F46E  CFF5 F01C          	movff	tablat,___ftmul@f1
  2622  00F472  0009               	tblrd		*+
  2623  00F474  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2624  00F478  000A               	tblrd		*-
  2625  00F47A  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2626  00F47E  ECEC  F076         	call	___ftmul	;wreg free
  2627  00F482  C01C  F031         	movff	?___ftmul,_fround$1007
  2628  00F486  C01D  F032         	movff	?___ftmul+1,_fround$1007+1
  2629  00F48A  C01E  F033         	movff	?___ftmul+2,_fround$1007+2
  2630                           
  2631                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2632  00F48E  C031  F01C         	movff	_fround$1007,___ftmul@f1
  2633  00F492  C032  F01D         	movff	_fround$1007+1,___ftmul@f1+1
  2634  00F496  C033  F01E         	movff	_fround$1007+2,___ftmul@f1+2
  2635  00F49A  0E00               	movlw	0
  2636  00F49C  6E1F               	movwf	___ftmul@f2,c
  2637  00F49E  0E00               	movlw	0
  2638  00F4A0  6E20               	movwf	___ftmul@f2+1,c
  2639  00F4A2  0E3F               	movlw	63
  2640  00F4A4  6E21               	movwf	___ftmul@f2+2,c
  2641  00F4A6  ECEC  F076         	call	___ftmul	;wreg free
  2642  00F4AA  D01B               	goto	L7
  2643  00F4AC  D021               	goto	l69
  2644  00F4AE  D000               	goto	l1981
  2645  00F4B0                     l1981:
  2646                           
  2647                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2648  00F4B0  5034               	movf	fround@prec,w,c
  2649  00F4B2  0D03               	mullw	3
  2650  00F4B4  0E21               	movlw	low __npowers_
  2651  00F4B6  24F3               	addwf	prodl,w,c
  2652  00F4B8  6EF6               	movwf	tblptrl,c
  2653  00F4BA  0EFF               	movlw	high __npowers_
  2654  00F4BC  20F4               	addwfc	prodh,w,c
  2655  00F4BE  6EF7               	movwf	tblptrh,c
  2656  00F4C0                     	if	0	;There are less than 3 active tblptr bytes
  2657  00F4C0                     	endif
  2658  00F4C0  0009               	tblrd		*+
  2659  00F4C2  CFF5 F01C          	movff	tablat,___ftmul@f1
  2660  00F4C6  0009               	tblrd		*+
  2661  00F4C8  CFF5 F01D          	movff	tablat,___ftmul@f1+1
  2662  00F4CC  000A               	tblrd		*-
  2663  00F4CE  CFF5 F01E          	movff	tablat,___ftmul@f1+2
  2664  00F4D2  0E00               	movlw	0
  2665  00F4D4  6E1F               	movwf	___ftmul@f2,c
  2666  00F4D6  0E00               	movlw	0
  2667  00F4D8  6E20               	movwf	___ftmul@f2+1,c
  2668  00F4DA  0E3F               	movlw	63
  2669  00F4DC  6E21               	movwf	___ftmul@f2+2,c
  2670  00F4DE  ECEC  F076         	call	___ftmul	;wreg free
  2671  00F4E2                     L7:
  2672  00F4E2  C01C  F02B         	movff	?___ftmul,?_fround
  2673  00F4E6  C01D  F02C         	movff	?___ftmul+1,?_fround+1
  2674  00F4EA  C01E  F02D         	movff	?___ftmul+2,?_fround+2
  2675  00F4EE  D000               	goto	l69
  2676  00F4F0                     l69:
  2677  00F4F0  0012               	return		;funcret
  2678  00F4F2                     __end_of_fround:
  2679                           	opt stack 0
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           prodh	equ	0xFF4
  2685                           prodl	equ	0xFF3
  2686                           wreg	equ	0xFE8
  2687                           postinc2	equ	0xFDE
  2688                           postdec2	equ	0xFDD
  2689                           fsr2h	equ	0xFDA
  2690                           fsr2l	equ	0xFD9
  2691                           status	equ	0xFD8
  2692                           
  2693 ;; *************** function ___wmul *****************
  2694 ;; Defined at:
  2695 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;  multiplier      2   14[COMRAM] unsigned int 
  2698 ;;  multiplicand    2   16[COMRAM] unsigned int 
  2699 ;; Auto vars:     Size  Location     Type
  2700 ;;  product         2   18[COMRAM] unsigned int 
  2701 ;; Return value:  Size  Location     Type
  2702 ;;                  2   14[COMRAM] unsigned int 
  2703 ;; Registers used:
  2704 ;;		wreg, status,2, status,0, prodl, prodh
  2705 ;; Tracked objects:
  2706 ;;		On entry : 0/0
  2707 ;;		On exit  : 0/0
  2708 ;;		Unchanged: 0/0
  2709 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2710 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2714 ;;Total ram usage:        6 bytes
  2715 ;; Hardware stack levels used:    1
  2716 ;; This function calls:
  2717 ;;		Nothing
  2718 ;; This function is called by:
  2719 ;;		_fround
  2720 ;;		_scale
  2721 ;;		_printf
  2722 ;; This function uses a non-reentrant model
  2723 ;;
  2724                           
  2725                           	psect	text5
  2726  00E5C4                     __ptext5:
  2727                           	opt stack 0
  2728  00E5C4                     ___wmul:
  2729                           	opt stack 28
  2730                           
  2731                           ;incstack = 0
  2732  00E5C4  500F               	movf	___wmul@multiplier,w,c
  2733  00E5C6  0211               	mulwf	___wmul@multiplicand,c
  2734  00E5C8  CFF3 F013          	movff	prodl,___wmul@product
  2735  00E5CC  CFF4 F014          	movff	prodh,___wmul@product+1
  2736  00E5D0  500F               	movf	___wmul@multiplier,w,c
  2737  00E5D2  0212               	mulwf	___wmul@multiplicand+1,c
  2738  00E5D4  50F3               	movf	prodl,w,c
  2739  00E5D6  2614               	addwf	___wmul@product+1,f,c
  2740  00E5D8  5010               	movf	___wmul@multiplier+1,w,c
  2741  00E5DA  0211               	mulwf	___wmul@multiplicand,c
  2742  00E5DC  50F3               	movf	prodl,w,c
  2743  00E5DE  2614               	addwf	___wmul@product+1,f,c
  2744  00E5E0  C013  F00F         	movff	___wmul@product,?___wmul
  2745  00E5E4  C014  F010         	movff	___wmul@product+1,?___wmul+1
  2746  00E5E8  D000               	goto	l168
  2747  00E5EA                     l168:
  2748  00E5EA  0012               	return		;funcret
  2749  00E5EC                     __end_of___wmul:
  2750                           	opt stack 0
  2751                           tblptru	equ	0xFF8
  2752                           tblptrh	equ	0xFF7
  2753                           tblptrl	equ	0xFF6
  2754                           tablat	equ	0xFF5
  2755                           prodh	equ	0xFF4
  2756                           prodl	equ	0xFF3
  2757                           wreg	equ	0xFE8
  2758                           postinc2	equ	0xFDE
  2759                           postdec2	equ	0xFDD
  2760                           fsr2h	equ	0xFDA
  2761                           fsr2l	equ	0xFD9
  2762                           status	equ	0xFD8
  2763                           
  2764 ;; *************** function ___awmod *****************
  2765 ;; Defined at:
  2766 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  2767 ;; Parameters:    Size  Location     Type
  2768 ;;  dividend        2    0[COMRAM] int 
  2769 ;;  divisor         2    2[COMRAM] int 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  sign            1    5[COMRAM] unsigned char 
  2772 ;;  counter         1    4[COMRAM] unsigned char 
  2773 ;; Return value:  Size  Location     Type
  2774 ;;                  2    0[COMRAM] int 
  2775 ;; Registers used:
  2776 ;;		wreg, status,2, status,0
  2777 ;; Tracked objects:
  2778 ;;		On entry : 0/0
  2779 ;;		On exit  : 0/0
  2780 ;;		Unchanged: 0/0
  2781 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2782 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2783 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2784 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2785 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2786 ;;Total ram usage:        6 bytes
  2787 ;; Hardware stack levels used:    1
  2788 ;; This function calls:
  2789 ;;		Nothing
  2790 ;; This function is called by:
  2791 ;;		_fround
  2792 ;;		_scale
  2793 ;; This function uses a non-reentrant model
  2794 ;;
  2795                           
  2796                           	psect	text6
  2797  00E822                     __ptext6:
  2798                           	opt stack 0
  2799  00E822                     ___awmod:
  2800                           	opt stack 28
  2801                           
  2802                           ;incstack = 0
  2803  00E822  0E00               	movlw	0
  2804  00E824  6E06               	movwf	___awmod@sign,c
  2805  00E826  AE02               	btfss	___awmod@dividend+1,7,c
  2806  00E828  D007               	goto	l1873
  2807  00E82A  6C01               	negf	___awmod@dividend,c
  2808  00E82C  1E02               	comf	___awmod@dividend+1,f,c
  2809  00E82E  B0D8               	btfsc	status,0,c
  2810  00E830  2A02               	incf	___awmod@dividend+1,f,c
  2811  00E832  0E01               	movlw	1
  2812  00E834  6E06               	movwf	___awmod@sign,c
  2813  00E836  D000               	goto	l1873
  2814  00E838                     l1873:
  2815  00E838  AE04               	btfss	___awmod@divisor+1,7,c
  2816  00E83A  D005               	goto	l1877
  2817  00E83C  6C03               	negf	___awmod@divisor,c
  2818  00E83E  1E04               	comf	___awmod@divisor+1,f,c
  2819  00E840  B0D8               	btfsc	status,0,c
  2820  00E842  2A04               	incf	___awmod@divisor+1,f,c
  2821  00E844  D000               	goto	l1877
  2822  00E846                     l1877:
  2823  00E846  5003               	movf	___awmod@divisor,w,c
  2824  00E848  1004               	iorwf	___awmod@divisor+1,w,c
  2825  00E84A  B4D8               	btfsc	status,2,c
  2826  00E84C  D01D               	goto	l1893
  2827  00E84E  0E01               	movlw	1
  2828  00E850  6E05               	movwf	___awmod@counter,c
  2829  00E852  D005               	goto	l1883
  2830  00E854                     l1881:
  2831  00E854  90D8               	bcf	status,0,c
  2832  00E856  3603               	rlcf	___awmod@divisor,f,c
  2833  00E858  3604               	rlcf	___awmod@divisor+1,f,c
  2834  00E85A  2A05               	incf	___awmod@counter,f,c
  2835  00E85C  D000               	goto	l1883
  2836  00E85E                     l1883:
  2837  00E85E  BE04               	btfsc	___awmod@divisor+1,7,c
  2838  00E860  D002               	goto	l1885
  2839  00E862  D7F8               	goto	l1881
  2840  00E864  D000               	goto	l1885
  2841  00E866                     l1885:
  2842  00E866  5003               	movf	___awmod@divisor,w,c
  2843  00E868  5C01               	subwf	___awmod@dividend,w,c
  2844  00E86A  5004               	movf	___awmod@divisor+1,w,c
  2845  00E86C  5802               	subwfb	___awmod@dividend+1,w,c
  2846  00E86E  A0D8               	btfss	status,0,c
  2847  00E870  D005               	goto	l1889
  2848  00E872  5003               	movf	___awmod@divisor,w,c
  2849  00E874  5E01               	subwf	___awmod@dividend,f,c
  2850  00E876  5004               	movf	___awmod@divisor+1,w,c
  2851  00E878  5A02               	subwfb	___awmod@dividend+1,f,c
  2852  00E87A  D000               	goto	l1889
  2853  00E87C                     l1889:
  2854  00E87C  90D8               	bcf	status,0,c
  2855  00E87E  3204               	rrcf	___awmod@divisor+1,f,c
  2856  00E880  3203               	rrcf	___awmod@divisor,f,c
  2857  00E882  2E05               	decfsz	___awmod@counter,f,c
  2858  00E884  D7F0               	goto	l1885
  2859  00E886  D000               	goto	l1893
  2860  00E888                     l1893:
  2861  00E888  5006               	movf	___awmod@sign,w,c
  2862  00E88A  B4D8               	btfsc	status,2,c
  2863  00E88C  D005               	goto	l1897
  2864  00E88E  6C01               	negf	___awmod@dividend,c
  2865  00E890  1E02               	comf	___awmod@dividend+1,f,c
  2866  00E892  B0D8               	btfsc	status,0,c
  2867  00E894  2A02               	incf	___awmod@dividend+1,f,c
  2868  00E896  D000               	goto	l1897
  2869  00E898                     l1897:
  2870  00E898  C001  F001         	movff	___awmod@dividend,?___awmod
  2871  00E89C  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2872  00E8A0  D000               	goto	l374
  2873  00E8A2                     l374:
  2874  00E8A2  0012               	return		;funcret
  2875  00E8A4                     __end_of___awmod:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           prodh	equ	0xFF4
  2882                           prodl	equ	0xFF3
  2883                           wreg	equ	0xFE8
  2884                           postinc2	equ	0xFDE
  2885                           postdec2	equ	0xFDD
  2886                           fsr2h	equ	0xFDA
  2887                           fsr2l	equ	0xFD9
  2888                           status	equ	0xFD8
  2889                           
  2890 ;; *************** function ___awdiv *****************
  2891 ;; Defined at:
  2892 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2893 ;; Parameters:    Size  Location     Type
  2894 ;;  dividend        2    6[COMRAM] int 
  2895 ;;  divisor         2    8[COMRAM] int 
  2896 ;; Auto vars:     Size  Location     Type
  2897 ;;  quotient        2   12[COMRAM] int 
  2898 ;;  sign            1   11[COMRAM] unsigned char 
  2899 ;;  counter         1   10[COMRAM] unsigned char 
  2900 ;; Return value:  Size  Location     Type
  2901 ;;                  2    6[COMRAM] int 
  2902 ;; Registers used:
  2903 ;;		wreg, status,2, status,0
  2904 ;; Tracked objects:
  2905 ;;		On entry : 0/0
  2906 ;;		On exit  : 0/0
  2907 ;;		Unchanged: 0/0
  2908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2909 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2910 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2912 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;Total ram usage:        8 bytes
  2914 ;; Hardware stack levels used:    1
  2915 ;; This function calls:
  2916 ;;		Nothing
  2917 ;; This function is called by:
  2918 ;;		_fround
  2919 ;;		_scale
  2920 ;;		_printf
  2921 ;; This function uses a non-reentrant model
  2922 ;;
  2923                           
  2924                           	psect	text7
  2925  00E9C6                     __ptext7:
  2926                           	opt stack 0
  2927  00E9C6                     ___awdiv:
  2928                           	opt stack 28
  2929                           
  2930                           ;incstack = 0
  2931  00E9C6  0E00               	movlw	0
  2932  00E9C8  6E0C               	movwf	___awdiv@sign,c
  2933  00E9CA  AE0A               	btfss	___awdiv@divisor+1,7,c
  2934  00E9CC  D007               	goto	l1829
  2935  00E9CE  6C09               	negf	___awdiv@divisor,c
  2936  00E9D0  1E0A               	comf	___awdiv@divisor+1,f,c
  2937  00E9D2  B0D8               	btfsc	status,0,c
  2938  00E9D4  2A0A               	incf	___awdiv@divisor+1,f,c
  2939  00E9D6  0E01               	movlw	1
  2940  00E9D8  6E0C               	movwf	___awdiv@sign,c
  2941  00E9DA  D000               	goto	l1829
  2942  00E9DC                     l1829:
  2943  00E9DC  AE08               	btfss	___awdiv@dividend+1,7,c
  2944  00E9DE  D007               	goto	l1835
  2945  00E9E0  6C07               	negf	___awdiv@dividend,c
  2946  00E9E2  1E08               	comf	___awdiv@dividend+1,f,c
  2947  00E9E4  B0D8               	btfsc	status,0,c
  2948  00E9E6  2A08               	incf	___awdiv@dividend+1,f,c
  2949  00E9E8  0E01               	movlw	1
  2950  00E9EA  1A0C               	xorwf	___awdiv@sign,f,c
  2951  00E9EC  D000               	goto	l1835
  2952  00E9EE                     l1835:
  2953  00E9EE  0E00               	movlw	0
  2954  00E9F0  6E0E               	movwf	___awdiv@quotient+1,c
  2955  00E9F2  0E00               	movlw	0
  2956  00E9F4  6E0D               	movwf	___awdiv@quotient,c
  2957  00E9F6  5009               	movf	___awdiv@divisor,w,c
  2958  00E9F8  100A               	iorwf	___awdiv@divisor+1,w,c
  2959  00E9FA  B4D8               	btfsc	status,2,c
  2960  00E9FC  D021               	goto	l1857
  2961  00E9FE  0E01               	movlw	1
  2962  00EA00  6E0B               	movwf	___awdiv@counter,c
  2963  00EA02  D005               	goto	l1843
  2964  00EA04                     l1841:
  2965  00EA04  90D8               	bcf	status,0,c
  2966  00EA06  3609               	rlcf	___awdiv@divisor,f,c
  2967  00EA08  360A               	rlcf	___awdiv@divisor+1,f,c
  2968  00EA0A  2A0B               	incf	___awdiv@counter,f,c
  2969  00EA0C  D000               	goto	l1843
  2970  00EA0E                     l1843:
  2971  00EA0E  BE0A               	btfsc	___awdiv@divisor+1,7,c
  2972  00EA10  D002               	goto	l1845
  2973  00EA12  D7F8               	goto	l1841
  2974  00EA14  D000               	goto	l1845
  2975  00EA16                     l1845:
  2976  00EA16  90D8               	bcf	status,0,c
  2977  00EA18  360D               	rlcf	___awdiv@quotient,f,c
  2978  00EA1A  360E               	rlcf	___awdiv@quotient+1,f,c
  2979  00EA1C  5009               	movf	___awdiv@divisor,w,c
  2980  00EA1E  5C07               	subwf	___awdiv@dividend,w,c
  2981  00EA20  500A               	movf	___awdiv@divisor+1,w,c
  2982  00EA22  5808               	subwfb	___awdiv@dividend+1,w,c
  2983  00EA24  A0D8               	btfss	status,0,c
  2984  00EA26  D006               	goto	l1853
  2985  00EA28  5009               	movf	___awdiv@divisor,w,c
  2986  00EA2A  5E07               	subwf	___awdiv@dividend,f,c
  2987  00EA2C  500A               	movf	___awdiv@divisor+1,w,c
  2988  00EA2E  5A08               	subwfb	___awdiv@dividend+1,f,c
  2989  00EA30  800D               	bsf	___awdiv@quotient,0,c
  2990  00EA32  D000               	goto	l1853
  2991  00EA34                     l1853:
  2992  00EA34  90D8               	bcf	status,0,c
  2993  00EA36  320A               	rrcf	___awdiv@divisor+1,f,c
  2994  00EA38  3209               	rrcf	___awdiv@divisor,f,c
  2995  00EA3A  2E0B               	decfsz	___awdiv@counter,f,c
  2996  00EA3C  D7EC               	goto	l1845
  2997  00EA3E  D000               	goto	l1857
  2998  00EA40                     l1857:
  2999  00EA40  500C               	movf	___awdiv@sign,w,c
  3000  00EA42  B4D8               	btfsc	status,2,c
  3001  00EA44  D005               	goto	l1861
  3002  00EA46  6C0D               	negf	___awdiv@quotient,c
  3003  00EA48  1E0E               	comf	___awdiv@quotient+1,f,c
  3004  00EA4A  B0D8               	btfsc	status,0,c
  3005  00EA4C  2A0E               	incf	___awdiv@quotient+1,f,c
  3006  00EA4E  D000               	goto	l1861
  3007  00EA50                     l1861:
  3008  00EA50  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  3009  00EA54  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  3010  00EA58  D000               	goto	l361
  3011  00EA5A                     l361:
  3012  00EA5A  0012               	return		;funcret
  3013  00EA5C                     __end_of___awdiv:
  3014                           	opt stack 0
  3015                           tblptru	equ	0xFF8
  3016                           tblptrh	equ	0xFF7
  3017                           tblptrl	equ	0xFF6
  3018                           tablat	equ	0xFF5
  3019                           prodh	equ	0xFF4
  3020                           prodl	equ	0xFF3
  3021                           wreg	equ	0xFE8
  3022                           postinc2	equ	0xFDE
  3023                           postdec2	equ	0xFDD
  3024                           fsr2h	equ	0xFDA
  3025                           fsr2l	equ	0xFD9
  3026                           status	equ	0xFD8
  3027                           
  3028 ;; *************** function __tdiv_to_l_ *****************
  3029 ;; Defined at:
  3030 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3031 ;; Parameters:    Size  Location     Type
  3032 ;;  f1              3    0[COMRAM] float 
  3033 ;;  f2              3    3[COMRAM] float 
  3034 ;; Auto vars:     Size  Location     Type
  3035 ;;  quot            4    9[COMRAM] unsigned long 
  3036 ;;  exp1            1   14[COMRAM] unsigned char 
  3037 ;;  cntr            1   13[COMRAM] unsigned char 
  3038 ;; Return value:  Size  Location     Type
  3039 ;;                  4    0[COMRAM] unsigned long 
  3040 ;; Registers used:
  3041 ;;		wreg, status,2, status,0
  3042 ;; Tracked objects:
  3043 ;;		On entry : 0/0
  3044 ;;		On exit  : 0/0
  3045 ;;		Unchanged: 0/0
  3046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3047 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3048 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3049 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;Total ram usage:       15 bytes
  3052 ;; Hardware stack levels used:    1
  3053 ;; This function calls:
  3054 ;;		Nothing
  3055 ;; This function is called by:
  3056 ;;		_printf
  3057 ;; This function uses a non-reentrant model
  3058 ;;
  3059                           
  3060                           	psect	text8
  3061  00EFDA                     __ptext8:
  3062                           	opt stack 0
  3063  00EFDA                     __tdiv_to_l_:
  3064                           	opt stack 29
  3065                           
  3066                           ;incstack = 0
  3067  00EFDA  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3068  00EFDE  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3069  00EFE0  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3070  00EFE2  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3071  00EFE4  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3072  00EFE6  E301               	bnc	u2011
  3073  00EFE8  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3074  00EFEA                     u2011:
  3075  00EFEA  5007               	movf	??__tdiv_to_l_,w,c
  3076  00EFEC  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3077  00EFEE  500F               	movf	__tdiv_to_l_@exp1,w,c
  3078  00EFF0  A4D8               	btfss	status,2,c
  3079  00EFF2  D002               	goto	l2029
  3080  00EFF4  D05D               	goto	l2071
  3081  00EFF6  D078               	goto	l573
  3082  00EFF8                     l2029:
  3083  00EFF8  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3084  00EFFC  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3085  00EFFE  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3086  00F000  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3087  00F002  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3088  00F004  E301               	bnc	u2031
  3089  00F006  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3090  00F008                     u2031:
  3091  00F008  5007               	movf	??__tdiv_to_l_,w,c
  3092  00F00A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3093  00F00C  500E               	movf	__tdiv_to_l_@cntr,w,c
  3094  00F00E  A4D8               	btfss	status,2,c
  3095  00F010  D002               	goto	l2035
  3096  00F012  D04E               	goto	l2071
  3097  00F014  D069               	goto	l573
  3098  00F016                     l2035:
  3099  00F016  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3100  00F018  0EFF               	movlw	255
  3101  00F01A  1601               	andwf	__tdiv_to_l_@f1,f,c
  3102  00F01C  0EFF               	movlw	255
  3103  00F01E  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  3104  00F020  0E00               	movlw	0
  3105  00F022  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  3106  00F024  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3107  00F026  0EFF               	movlw	255
  3108  00F028  1604               	andwf	__tdiv_to_l_@f2,f,c
  3109  00F02A  0EFF               	movlw	255
  3110  00F02C  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  3111  00F02E  0E00               	movlw	0
  3112  00F030  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  3113  00F032  0E00               	movlw	0
  3114  00F034  6E0A               	movwf	__tdiv_to_l_@quot,c
  3115  00F036  0E00               	movlw	0
  3116  00F038  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  3117  00F03A  0E00               	movlw	0
  3118  00F03C  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  3119  00F03E  0E00               	movlw	0
  3120  00F040  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  3121  00F042  0E7F               	movlw	127
  3122  00F044  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3123  00F046  500E               	movf	__tdiv_to_l_@cntr,w,c
  3124  00F048  0F98               	addlw	152
  3125  00F04A  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3126  00F04C  0E18               	movlw	24
  3127  00F04E  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3128  00F050                     l575:
  3129  00F050  90D8               	bcf	status,0,c
  3130  00F052  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3131  00F054  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3132  00F056  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3133  00F058  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3134  00F05A  5004               	movf	__tdiv_to_l_@f2,w,c
  3135  00F05C  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3136  00F05E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3137  00F060  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3138  00F062  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3139  00F064  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3140  00F066  A0D8               	btfss	status,0,c
  3141  00F068  D007               	goto	l576
  3142  00F06A  5004               	movf	__tdiv_to_l_@f2,w,c
  3143  00F06C  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3144  00F06E  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3145  00F070  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3146  00F072  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3147  00F074  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3148  00F076  800A               	bsf	__tdiv_to_l_@quot,0,c
  3149  00F078                     l576:
  3150  00F078  90D8               	bcf	status,0,c
  3151  00F07A  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3152  00F07C  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3153  00F07E  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3154  00F080  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3155  00F082  D7E6               	goto	l575
  3156  00F084  D000               	goto	l2057
  3157  00F086                     l2057:
  3158  00F086  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3159  00F088  D010               	goto	l2069
  3160  00F08A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3161  00F08C  0A80               	xorlw	128
  3162  00F08E  0F97               	addlw	151
  3163  00F090  B0D8               	btfsc	status,0,c
  3164  00F092  D003               	goto	l2065
  3165  00F094  D00D               	goto	l2071
  3166  00F096  D028               	goto	l573
  3167  00F098  D000               	goto	l2065
  3168  00F09A                     l2065:
  3169  00F09A  90D8               	bcf	status,0,c
  3170  00F09C  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3171  00F09E  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3172  00F0A0  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3173  00F0A2  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3174  00F0A4  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3175  00F0A6  D7F9               	goto	l2065
  3176  00F0A8  D017               	goto	l582
  3177  00F0AA                     l2069:
  3178  00F0AA  0E17               	movlw	23
  3179  00F0AC  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3180  00F0AE  D011               	goto	l2077
  3181  00F0B0                     l2071:
  3182  00F0B0  0E00               	movlw	0
  3183  00F0B2  6E01               	movwf	?__tdiv_to_l_,c
  3184  00F0B4  0E00               	movlw	0
  3185  00F0B6  6E02               	movwf	?__tdiv_to_l_+1,c
  3186  00F0B8  0E00               	movlw	0
  3187  00F0BA  6E03               	movwf	?__tdiv_to_l_+2,c
  3188  00F0BC  0E00               	movlw	0
  3189  00F0BE  6E04               	movwf	?__tdiv_to_l_+3,c
  3190  00F0C0  D013               	goto	l573
  3191  00F0C2  D007               	goto	l2077
  3192  00F0C4                     l2075:
  3193  00F0C4  90D8               	bcf	status,0,c
  3194  00F0C6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3195  00F0C8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3196  00F0CA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3197  00F0CC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3198  00F0CE  060F               	decf	__tdiv_to_l_@exp1,f,c
  3199  00F0D0  D000               	goto	l2077
  3200  00F0D2                     l2077:
  3201  00F0D2  500F               	movf	__tdiv_to_l_@exp1,w,c
  3202  00F0D4  A4D8               	btfss	status,2,c
  3203  00F0D6  D7F6               	goto	l2075
  3204  00F0D8                     l582:
  3205  00F0D8  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3206  00F0DC  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3207  00F0E0  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3208  00F0E4  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3209  00F0E8                     l573:
  3210  00F0E8  0012               	return		;funcret
  3211  00F0EA                     __end_of__tdiv_to_l_:
  3212                           	opt stack 0
  3213                           tblptru	equ	0xFF8
  3214                           tblptrh	equ	0xFF7
  3215                           tblptrl	equ	0xFF6
  3216                           tablat	equ	0xFF5
  3217                           prodh	equ	0xFF4
  3218                           prodl	equ	0xFF3
  3219                           wreg	equ	0xFE8
  3220                           postinc2	equ	0xFDE
  3221                           postdec2	equ	0xFDD
  3222                           fsr2h	equ	0xFDA
  3223                           fsr2l	equ	0xFD9
  3224                           status	equ	0xFD8
  3225                           
  3226 ;; *************** function __div_to_l_ *****************
  3227 ;; Defined at:
  3228 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3229 ;; Parameters:    Size  Location     Type
  3230 ;;  f1              3    0[COMRAM] unsigned long 
  3231 ;;  f2              3    3[COMRAM] unsigned long 
  3232 ;; Auto vars:     Size  Location     Type
  3233 ;;  quot            4    6[COMRAM] unsigned long 
  3234 ;;  exp1            1   11[COMRAM] unsigned char 
  3235 ;;  cntr            1   10[COMRAM] unsigned char 
  3236 ;; Return value:  Size  Location     Type
  3237 ;;                  4    0[COMRAM] unsigned long 
  3238 ;; Registers used:
  3239 ;;		wreg, status,2, status,0
  3240 ;; Tracked objects:
  3241 ;;		On entry : 0/0
  3242 ;;		On exit  : 0/0
  3243 ;;		Unchanged: 0/0
  3244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3245 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3246 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;Total ram usage:       12 bytes
  3250 ;; Hardware stack levels used:    1
  3251 ;; This function calls:
  3252 ;;		Nothing
  3253 ;; This function is called by:
  3254 ;;		_printf
  3255 ;; This function uses a non-reentrant model
  3256 ;;
  3257                           
  3258                           	psect	text9
  3259  00EED0                     __ptext9:
  3260                           	opt stack 0
  3261  00EED0                     __div_to_l_:
  3262                           	opt stack 29
  3263                           
  3264                           ;incstack = 0
  3265  00EED0  3403               	rlcf	__div_to_l_@f1+2,w,c
  3266  00EED2  3404               	rlcf	__div_to_l_@f1+3,w,c
  3267  00EED4  6E0C               	movwf	__div_to_l_@exp1,c
  3268  00EED6  500C               	movf	__div_to_l_@exp1,w,c
  3269  00EED8  A4D8               	btfss	status,2,c
  3270  00EEDA  D002               	goto	l2085
  3271  00EEDC  D061               	goto	l2131
  3272  00EEDE  D07C               	goto	l452
  3273  00EEE0                     l2085:
  3274  00EEE0  3406               	rlcf	__div_to_l_@f2+2,w,c
  3275  00EEE2  3407               	rlcf	__div_to_l_@f2+3,w,c
  3276  00EEE4  6E0B               	movwf	__div_to_l_@cntr,c
  3277  00EEE6  500B               	movf	__div_to_l_@cntr,w,c
  3278  00EEE8  A4D8               	btfss	status,2,c
  3279  00EEEA  D002               	goto	l2091
  3280  00EEEC  D059               	goto	l2131
  3281  00EEEE  D074               	goto	l452
  3282  00EEF0                     l2091:
  3283  00EEF0  8E03               	bsf	__div_to_l_@f1+2,7,c
  3284  00EEF2  0EFF               	movlw	255
  3285  00EEF4  1601               	andwf	__div_to_l_@f1,f,c
  3286  00EEF6  0EFF               	movlw	255
  3287  00EEF8  1602               	andwf	__div_to_l_@f1+1,f,c
  3288  00EEFA  0EFF               	movlw	255
  3289  00EEFC  1603               	andwf	__div_to_l_@f1+2,f,c
  3290  00EEFE  0E00               	movlw	0
  3291  00EF00  1604               	andwf	__div_to_l_@f1+3,f,c
  3292  00EF02  8E06               	bsf	__div_to_l_@f2+2,7,c
  3293  00EF04  0EFF               	movlw	255
  3294  00EF06  1604               	andwf	__div_to_l_@f2,f,c
  3295  00EF08  0EFF               	movlw	255
  3296  00EF0A  1605               	andwf	__div_to_l_@f2+1,f,c
  3297  00EF0C  0EFF               	movlw	255
  3298  00EF0E  1606               	andwf	__div_to_l_@f2+2,f,c
  3299  00EF10  0E00               	movlw	0
  3300  00EF12  1607               	andwf	__div_to_l_@f2+3,f,c
  3301  00EF14  0E00               	movlw	0
  3302  00EF16  6E07               	movwf	__div_to_l_@quot,c
  3303  00EF18  0E00               	movlw	0
  3304  00EF1A  6E08               	movwf	__div_to_l_@quot+1,c
  3305  00EF1C  0E00               	movlw	0
  3306  00EF1E  6E09               	movwf	__div_to_l_@quot+2,c
  3307  00EF20  0E00               	movlw	0
  3308  00EF22  6E0A               	movwf	__div_to_l_@quot+3,c
  3309  00EF24  0E7F               	movlw	127
  3310  00EF26  5E0C               	subwf	__div_to_l_@exp1,f,c
  3311  00EF28  500B               	movf	__div_to_l_@cntr,w,c
  3312  00EF2A  0FA0               	addlw	160
  3313  00EF2C  5E0C               	subwf	__div_to_l_@exp1,f,c
  3314  00EF2E  0E20               	movlw	32
  3315  00EF30  6E0B               	movwf	__div_to_l_@cntr,c
  3316  00EF32  D000               	goto	l2105
  3317  00EF34                     l2105:
  3318  00EF34  90D8               	bcf	status,0,c
  3319  00EF36  3607               	rlcf	__div_to_l_@quot,f,c
  3320  00EF38  3608               	rlcf	__div_to_l_@quot+1,f,c
  3321  00EF3A  3609               	rlcf	__div_to_l_@quot+2,f,c
  3322  00EF3C  360A               	rlcf	__div_to_l_@quot+3,f,c
  3323  00EF3E  5004               	movf	__div_to_l_@f2,w,c
  3324  00EF40  5C01               	subwf	__div_to_l_@f1,w,c
  3325  00EF42  5005               	movf	__div_to_l_@f2+1,w,c
  3326  00EF44  5802               	subwfb	__div_to_l_@f1+1,w,c
  3327  00EF46  5006               	movf	__div_to_l_@f2+2,w,c
  3328  00EF48  5803               	subwfb	__div_to_l_@f1+2,w,c
  3329  00EF4A  5007               	movf	__div_to_l_@f2+3,w,c
  3330  00EF4C  5804               	subwfb	__div_to_l_@f1+3,w,c
  3331  00EF4E  A0D8               	btfss	status,0,c
  3332  00EF50  D00A               	goto	l2113
  3333  00EF52  5004               	movf	__div_to_l_@f2,w,c
  3334  00EF54  5E01               	subwf	__div_to_l_@f1,f,c
  3335  00EF56  5005               	movf	__div_to_l_@f2+1,w,c
  3336  00EF58  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3337  00EF5A  5006               	movf	__div_to_l_@f2+2,w,c
  3338  00EF5C  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3339  00EF5E  5007               	movf	__div_to_l_@f2+3,w,c
  3340  00EF60  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3341  00EF62  8007               	bsf	__div_to_l_@quot,0,c
  3342  00EF64  D000               	goto	l2113
  3343  00EF66                     l2113:
  3344  00EF66  90D8               	bcf	status,0,c
  3345  00EF68  3601               	rlcf	__div_to_l_@f1,f,c
  3346  00EF6A  3602               	rlcf	__div_to_l_@f1+1,f,c
  3347  00EF6C  3603               	rlcf	__div_to_l_@f1+2,f,c
  3348  00EF6E  3604               	rlcf	__div_to_l_@f1+3,f,c
  3349  00EF70  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3350  00EF72  D7E0               	goto	l2105
  3351  00EF74  D000               	goto	l2117
  3352  00EF76                     l2117:
  3353  00EF76  AE0C               	btfss	__div_to_l_@exp1,7,c
  3354  00EF78  D010               	goto	l2129
  3355  00EF7A  500C               	movf	__div_to_l_@exp1,w,c
  3356  00EF7C  0A80               	xorlw	128
  3357  00EF7E  0F9F               	addlw	159
  3358  00EF80  B0D8               	btfsc	status,0,c
  3359  00EF82  D003               	goto	l2125
  3360  00EF84  D00D               	goto	l2131
  3361  00EF86  D028               	goto	l452
  3362  00EF88  D000               	goto	l2125
  3363  00EF8A                     l2125:
  3364  00EF8A  90D8               	bcf	status,0,c
  3365  00EF8C  320A               	rrcf	__div_to_l_@quot+3,f,c
  3366  00EF8E  3209               	rrcf	__div_to_l_@quot+2,f,c
  3367  00EF90  3208               	rrcf	__div_to_l_@quot+1,f,c
  3368  00EF92  3207               	rrcf	__div_to_l_@quot,f,c
  3369  00EF94  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3370  00EF96  D7F9               	goto	l2125
  3371  00EF98  D017               	goto	l461
  3372  00EF9A                     l2129:
  3373  00EF9A  0E1F               	movlw	31
  3374  00EF9C  640C               	cpfsgt	__div_to_l_@exp1,c
  3375  00EF9E  D011               	goto	l2137
  3376  00EFA0                     l2131:
  3377  00EFA0  0E00               	movlw	0
  3378  00EFA2  6E01               	movwf	?__div_to_l_,c
  3379  00EFA4  0E00               	movlw	0
  3380  00EFA6  6E02               	movwf	?__div_to_l_+1,c
  3381  00EFA8  0E00               	movlw	0
  3382  00EFAA  6E03               	movwf	?__div_to_l_+2,c
  3383  00EFAC  0E00               	movlw	0
  3384  00EFAE  6E04               	movwf	?__div_to_l_+3,c
  3385  00EFB0  D013               	goto	l452
  3386  00EFB2  D007               	goto	l2137
  3387  00EFB4                     l2135:
  3388  00EFB4  90D8               	bcf	status,0,c
  3389  00EFB6  3607               	rlcf	__div_to_l_@quot,f,c
  3390  00EFB8  3608               	rlcf	__div_to_l_@quot+1,f,c
  3391  00EFBA  3609               	rlcf	__div_to_l_@quot+2,f,c
  3392  00EFBC  360A               	rlcf	__div_to_l_@quot+3,f,c
  3393  00EFBE  060C               	decf	__div_to_l_@exp1,f,c
  3394  00EFC0  D000               	goto	l2137
  3395  00EFC2                     l2137:
  3396  00EFC2  500C               	movf	__div_to_l_@exp1,w,c
  3397  00EFC4  A4D8               	btfss	status,2,c
  3398  00EFC6  D7F6               	goto	l2135
  3399  00EFC8                     l461:
  3400  00EFC8  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3401  00EFCC  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3402  00EFD0  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3403  00EFD4  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3404  00EFD8                     l452:
  3405  00EFD8  0012               	return		;funcret
  3406  00EFDA                     __end_of__div_to_l_:
  3407                           	opt stack 0
  3408                           tblptru	equ	0xFF8
  3409                           tblptrh	equ	0xFF7
  3410                           tblptrl	equ	0xFF6
  3411                           tablat	equ	0xFF5
  3412                           prodh	equ	0xFF4
  3413                           prodl	equ	0xFF3
  3414                           wreg	equ	0xFE8
  3415                           postinc2	equ	0xFDE
  3416                           postdec2	equ	0xFDD
  3417                           fsr2h	equ	0xFDA
  3418                           fsr2l	equ	0xFD9
  3419                           status	equ	0xFD8
  3420                           
  3421 ;; *************** function ___lltoft *****************
  3422 ;; Defined at:
  3423 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  3424 ;; Parameters:    Size  Location     Type
  3425 ;;  c               4    8[COMRAM] unsigned long 
  3426 ;; Auto vars:     Size  Location     Type
  3427 ;;  exp             1   16[COMRAM] unsigned char 
  3428 ;; Return value:  Size  Location     Type
  3429 ;;                  3    8[COMRAM] float 
  3430 ;; Registers used:
  3431 ;;		wreg, status,2, status,0, cstack
  3432 ;; Tracked objects:
  3433 ;;		On entry : 0/0
  3434 ;;		On exit  : 0/0
  3435 ;;		Unchanged: 0/0
  3436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3437 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3438 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3439 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;Total ram usage:        9 bytes
  3442 ;; Hardware stack levels used:    1
  3443 ;; Hardware stack levels required when called:    1
  3444 ;; This function calls:
  3445 ;;		___ftpack
  3446 ;; This function is called by:
  3447 ;;		_printf
  3448 ;; This function uses a non-reentrant model
  3449 ;;
  3450                           
  3451                           	psect	text10
  3452  00E66C                     __ptext10:
  3453                           	opt stack 0
  3454  00E66C                     ___lltoft:
  3455                           	opt stack 28
  3456                           
  3457                           ;incstack = 0
  3458  00E66C  0E8E               	movlw	142
  3459  00E66E  6E11               	movwf	___lltoft@exp,c
  3460  00E670  D007               	goto	l2315
  3461  00E672                     l2313:
  3462  00E672  90D8               	bcf	status,0,c
  3463  00E674  320C               	rrcf	___lltoft@c+3,f,c
  3464  00E676  320B               	rrcf	___lltoft@c+2,f,c
  3465  00E678  320A               	rrcf	___lltoft@c+1,f,c
  3466  00E67A  3209               	rrcf	___lltoft@c,f,c
  3467  00E67C  2A11               	incf	___lltoft@exp,f,c
  3468  00E67E  D000               	goto	l2315
  3469  00E680                     l2315:
  3470  00E680  0E00               	movlw	0
  3471  00E682  1409               	andwf	___lltoft@c,w,c
  3472  00E684  6E0D               	movwf	??___lltoft& (0+255),c
  3473  00E686  0E00               	movlw	0
  3474  00E688  140A               	andwf	___lltoft@c+1,w,c
  3475  00E68A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  3476  00E68C  0E00               	movlw	0
  3477  00E68E  140B               	andwf	___lltoft@c+2,w,c
  3478  00E690  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  3479  00E692  0EFF               	movlw	255
  3480  00E694  140C               	andwf	___lltoft@c+3,w,c
  3481  00E696  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3482  00E698  500D               	movf	??___lltoft,w,c
  3483  00E69A  100E               	iorwf	??___lltoft+1,w,c
  3484  00E69C  100F               	iorwf	??___lltoft+2,w,c
  3485  00E69E  1010               	iorwf	??___lltoft+3,w,c
  3486  00E6A0  A4D8               	btfss	status,2,c
  3487  00E6A2  D7E7               	goto	l2313
  3488  00E6A4  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3489  00E6A8  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3490  00E6AC  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3491  00E6B0  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3492  00E6B4  0E00               	movlw	0
  3493  00E6B6  6E05               	movwf	___ftpack@sign,c
  3494  00E6B8  EC2E  F075         	call	___ftpack	;wreg free
  3495  00E6BC  C001  F009         	movff	?___ftpack,?___lltoft
  3496  00E6C0  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3497  00E6C4  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3498  00E6C8  D000               	goto	l687
  3499  00E6CA                     l687:
  3500  00E6CA  0012               	return		;funcret
  3501  00E6CC                     __end_of___lltoft:
  3502                           	opt stack 0
  3503                           tblptru	equ	0xFF8
  3504                           tblptrh	equ	0xFF7
  3505                           tblptrl	equ	0xFF6
  3506                           tablat	equ	0xFF5
  3507                           prodh	equ	0xFF4
  3508                           prodl	equ	0xFF3
  3509                           wreg	equ	0xFE8
  3510                           postinc2	equ	0xFDE
  3511                           postdec2	equ	0xFDD
  3512                           fsr2h	equ	0xFDA
  3513                           fsr2l	equ	0xFD9
  3514                           status	equ	0xFD8
  3515                           
  3516 ;; *************** function ___llmod *****************
  3517 ;; Defined at:
  3518 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  3519 ;; Parameters:    Size  Location     Type
  3520 ;;  dividend        4    0[COMRAM] unsigned long 
  3521 ;;  divisor         4    4[COMRAM] unsigned long 
  3522 ;; Auto vars:     Size  Location     Type
  3523 ;;  counter         1    8[COMRAM] unsigned char 
  3524 ;; Return value:  Size  Location     Type
  3525 ;;                  4    0[COMRAM] unsigned long 
  3526 ;; Registers used:
  3527 ;;		wreg, status,2, status,0
  3528 ;; Tracked objects:
  3529 ;;		On entry : 0/0
  3530 ;;		On exit  : 0/0
  3531 ;;		Unchanged: 0/0
  3532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3533 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3534 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3536 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3537 ;;Total ram usage:        9 bytes
  3538 ;; Hardware stack levels used:    1
  3539 ;; This function calls:
  3540 ;;		Nothing
  3541 ;; This function is called by:
  3542 ;;		_printf
  3543 ;; This function uses a non-reentrant model
  3544 ;;
  3545                           
  3546                           	psect	text11
  3547  00E73C                     __ptext11:
  3548                           	opt stack 0
  3549  00E73C                     ___llmod:
  3550                           	opt stack 29
  3551                           
  3552                           ;incstack = 0
  3553  00E73C  5005               	movf	___llmod@divisor,w,c
  3554  00E73E  1006               	iorwf	___llmod@divisor+1,w,c
  3555  00E740  1007               	iorwf	___llmod@divisor+2,w,c
  3556  00E742  1008               	iorwf	___llmod@divisor+3,w,c
  3557  00E744  B4D8               	btfsc	status,2,c
  3558  00E746  D029               	goto	l667
  3559  00E748  0E01               	movlw	1
  3560  00E74A  6E09               	movwf	___llmod@counter,c
  3561  00E74C  D007               	goto	l2301
  3562  00E74E                     l2299:
  3563  00E74E  90D8               	bcf	status,0,c
  3564  00E750  3605               	rlcf	___llmod@divisor,f,c
  3565  00E752  3606               	rlcf	___llmod@divisor+1,f,c
  3566  00E754  3607               	rlcf	___llmod@divisor+2,f,c
  3567  00E756  3608               	rlcf	___llmod@divisor+3,f,c
  3568  00E758  2A09               	incf	___llmod@counter,f,c
  3569  00E75A  D000               	goto	l2301
  3570  00E75C                     l2301:
  3571  00E75C  BE08               	btfsc	___llmod@divisor+3,7,c
  3572  00E75E  D002               	goto	l2303
  3573  00E760  D7F6               	goto	l2299
  3574  00E762  D000               	goto	l2303
  3575  00E764                     l2303:
  3576  00E764  5005               	movf	___llmod@divisor,w,c
  3577  00E766  5C01               	subwf	___llmod@dividend,w,c
  3578  00E768  5006               	movf	___llmod@divisor+1,w,c
  3579  00E76A  5802               	subwfb	___llmod@dividend+1,w,c
  3580  00E76C  5007               	movf	___llmod@divisor+2,w,c
  3581  00E76E  5803               	subwfb	___llmod@dividend+2,w,c
  3582  00E770  5008               	movf	___llmod@divisor+3,w,c
  3583  00E772  5804               	subwfb	___llmod@dividend+3,w,c
  3584  00E774  A0D8               	btfss	status,0,c
  3585  00E776  D009               	goto	l2307
  3586  00E778  5005               	movf	___llmod@divisor,w,c
  3587  00E77A  5E01               	subwf	___llmod@dividend,f,c
  3588  00E77C  5006               	movf	___llmod@divisor+1,w,c
  3589  00E77E  5A02               	subwfb	___llmod@dividend+1,f,c
  3590  00E780  5007               	movf	___llmod@divisor+2,w,c
  3591  00E782  5A03               	subwfb	___llmod@dividend+2,f,c
  3592  00E784  5008               	movf	___llmod@divisor+3,w,c
  3593  00E786  5A04               	subwfb	___llmod@dividend+3,f,c
  3594  00E788  D000               	goto	l2307
  3595  00E78A                     l2307:
  3596  00E78A  90D8               	bcf	status,0,c
  3597  00E78C  3208               	rrcf	___llmod@divisor+3,f,c
  3598  00E78E  3207               	rrcf	___llmod@divisor+2,f,c
  3599  00E790  3206               	rrcf	___llmod@divisor+1,f,c
  3600  00E792  3205               	rrcf	___llmod@divisor,f,c
  3601  00E794  2E09               	decfsz	___llmod@counter,f,c
  3602  00E796  D7E6               	goto	l2303
  3603  00E798  D000               	goto	l667
  3604  00E79A                     l667:
  3605  00E79A  C001  F001         	movff	___llmod@dividend,?___llmod
  3606  00E79E  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3607  00E7A2  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3608  00E7A6  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3609  00E7AA  0012               	return		;funcret
  3610  00E7AC                     __end_of___llmod:
  3611                           	opt stack 0
  3612                           tblptru	equ	0xFF8
  3613                           tblptrh	equ	0xFF7
  3614                           tblptrl	equ	0xFF6
  3615                           tablat	equ	0xFF5
  3616                           prodh	equ	0xFF4
  3617                           prodl	equ	0xFF3
  3618                           wreg	equ	0xFE8
  3619                           postinc2	equ	0xFDE
  3620                           postdec2	equ	0xFDD
  3621                           fsr2h	equ	0xFDA
  3622                           fsr2l	equ	0xFD9
  3623                           status	equ	0xFD8
  3624                           
  3625 ;; *************** function ___lldiv *****************
  3626 ;; Defined at:
  3627 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3628 ;; Parameters:    Size  Location     Type
  3629 ;;  dividend        4    0[COMRAM] unsigned long 
  3630 ;;  divisor         4    4[COMRAM] unsigned long 
  3631 ;; Auto vars:     Size  Location     Type
  3632 ;;  quotient        4    8[COMRAM] unsigned long 
  3633 ;;  counter         1   12[COMRAM] unsigned char 
  3634 ;; Return value:  Size  Location     Type
  3635 ;;                  4    0[COMRAM] unsigned long 
  3636 ;; Registers used:
  3637 ;;		wreg, status,2, status,0
  3638 ;; Tracked objects:
  3639 ;;		On entry : 0/0
  3640 ;;		On exit  : 0/0
  3641 ;;		Unchanged: 0/0
  3642 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3643 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3644 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3645 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3646 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;Total ram usage:       13 bytes
  3648 ;; Hardware stack levels used:    1
  3649 ;; This function calls:
  3650 ;;		Nothing
  3651 ;; This function is called by:
  3652 ;;		_printf
  3653 ;; This function uses a non-reentrant model
  3654 ;;
  3655                           
  3656                           	psect	text12
  3657  00E8A4                     __ptext12:
  3658                           	opt stack 0
  3659  00E8A4                     ___lldiv:
  3660                           	opt stack 29
  3661                           
  3662                           ;incstack = 0
  3663  00E8A4  0E00               	movlw	0
  3664  00E8A6  6E09               	movwf	___lldiv@quotient,c
  3665  00E8A8  0E00               	movlw	0
  3666  00E8AA  6E0A               	movwf	___lldiv@quotient+1,c
  3667  00E8AC  0E00               	movlw	0
  3668  00E8AE  6E0B               	movwf	___lldiv@quotient+2,c
  3669  00E8B0  0E00               	movlw	0
  3670  00E8B2  6E0C               	movwf	___lldiv@quotient+3,c
  3671  00E8B4  5005               	movf	___lldiv@divisor,w,c
  3672  00E8B6  1006               	iorwf	___lldiv@divisor+1,w,c
  3673  00E8B8  1007               	iorwf	___lldiv@divisor+2,w,c
  3674  00E8BA  1008               	iorwf	___lldiv@divisor+3,w,c
  3675  00E8BC  B4D8               	btfsc	status,2,c
  3676  00E8BE  D02F               	goto	l657
  3677  00E8C0  0E01               	movlw	1
  3678  00E8C2  6E0D               	movwf	___lldiv@counter,c
  3679  00E8C4  D007               	goto	l2281
  3680  00E8C6                     l2279:
  3681  00E8C6  90D8               	bcf	status,0,c
  3682  00E8C8  3605               	rlcf	___lldiv@divisor,f,c
  3683  00E8CA  3606               	rlcf	___lldiv@divisor+1,f,c
  3684  00E8CC  3607               	rlcf	___lldiv@divisor+2,f,c
  3685  00E8CE  3608               	rlcf	___lldiv@divisor+3,f,c
  3686  00E8D0  2A0D               	incf	___lldiv@counter,f,c
  3687  00E8D2  D000               	goto	l2281
  3688  00E8D4                     l2281:
  3689  00E8D4  BE08               	btfsc	___lldiv@divisor+3,7,c
  3690  00E8D6  D002               	goto	l2283
  3691  00E8D8  D7F6               	goto	l2279
  3692  00E8DA  D000               	goto	l2283
  3693  00E8DC                     l2283:
  3694  00E8DC  90D8               	bcf	status,0,c
  3695  00E8DE  3609               	rlcf	___lldiv@quotient,f,c
  3696  00E8E0  360A               	rlcf	___lldiv@quotient+1,f,c
  3697  00E8E2  360B               	rlcf	___lldiv@quotient+2,f,c
  3698  00E8E4  360C               	rlcf	___lldiv@quotient+3,f,c
  3699  00E8E6  5005               	movf	___lldiv@divisor,w,c
  3700  00E8E8  5C01               	subwf	___lldiv@dividend,w,c
  3701  00E8EA  5006               	movf	___lldiv@divisor+1,w,c
  3702  00E8EC  5802               	subwfb	___lldiv@dividend+1,w,c
  3703  00E8EE  5007               	movf	___lldiv@divisor+2,w,c
  3704  00E8F0  5803               	subwfb	___lldiv@dividend+2,w,c
  3705  00E8F2  5008               	movf	___lldiv@divisor+3,w,c
  3706  00E8F4  5804               	subwfb	___lldiv@dividend+3,w,c
  3707  00E8F6  A0D8               	btfss	status,0,c
  3708  00E8F8  D00A               	goto	l2291
  3709  00E8FA  5005               	movf	___lldiv@divisor,w,c
  3710  00E8FC  5E01               	subwf	___lldiv@dividend,f,c
  3711  00E8FE  5006               	movf	___lldiv@divisor+1,w,c
  3712  00E900  5A02               	subwfb	___lldiv@dividend+1,f,c
  3713  00E902  5007               	movf	___lldiv@divisor+2,w,c
  3714  00E904  5A03               	subwfb	___lldiv@dividend+2,f,c
  3715  00E906  5008               	movf	___lldiv@divisor+3,w,c
  3716  00E908  5A04               	subwfb	___lldiv@dividend+3,f,c
  3717  00E90A  8009               	bsf	___lldiv@quotient,0,c
  3718  00E90C  D000               	goto	l2291
  3719  00E90E                     l2291:
  3720  00E90E  90D8               	bcf	status,0,c
  3721  00E910  3208               	rrcf	___lldiv@divisor+3,f,c
  3722  00E912  3207               	rrcf	___lldiv@divisor+2,f,c
  3723  00E914  3206               	rrcf	___lldiv@divisor+1,f,c
  3724  00E916  3205               	rrcf	___lldiv@divisor,f,c
  3725  00E918  2E0D               	decfsz	___lldiv@counter,f,c
  3726  00E91A  D7E0               	goto	l2283
  3727  00E91C  D000               	goto	l657
  3728  00E91E                     l657:
  3729  00E91E  C009  F001         	movff	___lldiv@quotient,?___lldiv
  3730  00E922  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  3731  00E926  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  3732  00E92A  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  3733  00E92E  0012               	return		;funcret
  3734  00E930                     __end_of___lldiv:
  3735                           	opt stack 0
  3736                           tblptru	equ	0xFF8
  3737                           tblptrh	equ	0xFF7
  3738                           tblptrl	equ	0xFF6
  3739                           tablat	equ	0xFF5
  3740                           prodh	equ	0xFF4
  3741                           prodl	equ	0xFF3
  3742                           wreg	equ	0xFE8
  3743                           postinc2	equ	0xFDE
  3744                           postdec2	equ	0xFDD
  3745                           fsr2h	equ	0xFDA
  3746                           fsr2l	equ	0xFD9
  3747                           status	equ	0xFD8
  3748                           
  3749 ;; *************** function ___fttol *****************
  3750 ;; Defined at:
  3751 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;  f1              3   49[COMRAM] float 
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;  lval            4   59[COMRAM] unsigned long 
  3756 ;;  exp1            1   63[COMRAM] unsigned char 
  3757 ;;  sign1           1   58[COMRAM] unsigned char 
  3758 ;; Return value:  Size  Location     Type
  3759 ;;                  4   49[COMRAM] long 
  3760 ;; Registers used:
  3761 ;;		wreg, status,2, status,0
  3762 ;; Tracked objects:
  3763 ;;		On entry : 0/0
  3764 ;;		On exit  : 0/0
  3765 ;;		Unchanged: 0/0
  3766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3767 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3768 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3769 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3770 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3771 ;;Total ram usage:       15 bytes
  3772 ;; Hardware stack levels used:    1
  3773 ;; This function calls:
  3774 ;;		Nothing
  3775 ;; This function is called by:
  3776 ;;		_printf
  3777 ;; This function uses a non-reentrant model
  3778 ;;
  3779                           
  3780                           	psect	text13
  3781  00EC04                     __ptext13:
  3782                           	opt stack 0
  3783  00EC04                     ___fttol:
  3784                           	opt stack 29
  3785                           
  3786                           ;incstack = 0
  3787  00EC04  C034  F036         	movff	___fttol@f1+2,??___fttol
  3788  00EC08  6A37               	clrf	(??___fttol+1)& (0+255),c
  3789  00EC0A  6A38               	clrf	(??___fttol+2)& (0+255),c
  3790  00EC0C  3433               	rlcf	___fttol@f1+1,w,c
  3791  00EC0E  3636               	rlcf	??___fttol& (0+255),f,c
  3792  00EC10  E301               	bnc	u2281
  3793  00EC12  8037               	bsf	(??___fttol+1)& (0+255),0,c
  3794  00EC14                     u2281:
  3795  00EC14  5036               	movf	??___fttol,w,c
  3796  00EC16  6E40               	movwf	___fttol@exp1,c
  3797  00EC18  5040               	movf	___fttol@exp1,w,c
  3798  00EC1A  A4D8               	btfss	status,2,c
  3799  00EC1C  D002               	goto	l2233
  3800  00EC1E  D039               	goto	l2257
  3801  00EC20  D063               	goto	l618
  3802  00EC22                     l2233:
  3803  00EC22  0E17               	movlw	23
  3804  00EC24  6E36               	movwf	??___fttol& (0+255),c
  3805  00EC26  C032  F037         	movff	___fttol@f1,??___fttol+1
  3806  00EC2A  C033  F038         	movff	___fttol@f1+1,??___fttol+2
  3807  00EC2E  C034  F039         	movff	___fttol@f1+2,??___fttol+3
  3808  00EC32  2836               	incf	??___fttol,w,c
  3809  00EC34  6E3A               	movwf	(??___fttol+4)& (0+255),c
  3810  00EC36  D004               	goto	u2300
  3811  00EC38                     u2305:
  3812  00EC38  90D8               	bcf	status,0,c
  3813  00EC3A  3239               	rrcf	??___fttol+3,f,c
  3814  00EC3C  3238               	rrcf	??___fttol+2,f,c
  3815  00EC3E  3237               	rrcf	??___fttol+1,f,c
  3816  00EC40                     u2300:
  3817  00EC40  2E3A               	decfsz	(??___fttol+4)& (0+255),f,c
  3818  00EC42  D7FA               	goto	u2305
  3819  00EC44  5037               	movf	??___fttol+1,w,c
  3820  00EC46  6E3B               	movwf	___fttol@sign1,c
  3821  00EC48  8E33               	bsf	___fttol@f1+1,7,c
  3822  00EC4A  0EFF               	movlw	255
  3823  00EC4C  1632               	andwf	___fttol@f1,f,c
  3824  00EC4E  0EFF               	movlw	255
  3825  00EC50  1633               	andwf	___fttol@f1+1,f,c
  3826  00EC52  0E00               	movlw	0
  3827  00EC54  1634               	andwf	___fttol@f1+2,f,c
  3828  00EC56  5032               	movf	___fttol@f1,w,c
  3829  00EC58  6E3C               	movwf	___fttol@lval,c
  3830  00EC5A  5033               	movf	___fttol@f1+1,w,c
  3831  00EC5C  6E3D               	movwf	___fttol@lval+1,c
  3832  00EC5E  5034               	movf	___fttol@f1+2,w,c
  3833  00EC60  6E3E               	movwf	___fttol@lval+2,c
  3834  00EC62  6A3F               	clrf	___fttol@lval+3,c
  3835  00EC64  0E8E               	movlw	142
  3836  00EC66  5E40               	subwf	___fttol@exp1,f,c
  3837  00EC68  AE40               	btfss	___fttol@exp1,7,c
  3838  00EC6A  D010               	goto	l2255
  3839  00EC6C  5040               	movf	___fttol@exp1,w,c
  3840  00EC6E  0A80               	xorlw	128
  3841  00EC70  0F8F               	addlw	143
  3842  00EC72  B0D8               	btfsc	status,0,c
  3843  00EC74  D003               	goto	l2251
  3844  00EC76  D00D               	goto	l2257
  3845  00EC78  D037               	goto	l618
  3846  00EC7A  D000               	goto	l2251
  3847  00EC7C                     l2251:
  3848  00EC7C  90D8               	bcf	status,0,c
  3849  00EC7E  323F               	rrcf	___fttol@lval+3,f,c
  3850  00EC80  323E               	rrcf	___fttol@lval+2,f,c
  3851  00EC82  323D               	rrcf	___fttol@lval+1,f,c
  3852  00EC84  323C               	rrcf	___fttol@lval,f,c
  3853  00EC86  3E40               	incfsz	___fttol@exp1,f,c
  3854  00EC88  D7F9               	goto	l2251
  3855  00EC8A  D019               	goto	l2265
  3856  00EC8C                     l2255:
  3857  00EC8C  0E17               	movlw	23
  3858  00EC8E  6440               	cpfsgt	___fttol@exp1,c
  3859  00EC90  D011               	goto	l2263
  3860  00EC92                     l2257:
  3861  00EC92  0E00               	movlw	0
  3862  00EC94  6E32               	movwf	?___fttol,c
  3863  00EC96  0E00               	movlw	0
  3864  00EC98  6E33               	movwf	?___fttol+1,c
  3865  00EC9A  0E00               	movlw	0
  3866  00EC9C  6E34               	movwf	?___fttol+2,c
  3867  00EC9E  0E00               	movlw	0
  3868  00ECA0  6E35               	movwf	?___fttol+3,c
  3869  00ECA2  D022               	goto	l618
  3870  00ECA4  D007               	goto	l2263
  3871  00ECA6                     l2261:
  3872  00ECA6  90D8               	bcf	status,0,c
  3873  00ECA8  363C               	rlcf	___fttol@lval,f,c
  3874  00ECAA  363D               	rlcf	___fttol@lval+1,f,c
  3875  00ECAC  363E               	rlcf	___fttol@lval+2,f,c
  3876  00ECAE  363F               	rlcf	___fttol@lval+3,f,c
  3877  00ECB0  0640               	decf	___fttol@exp1,f,c
  3878  00ECB2  D000               	goto	l2263
  3879  00ECB4                     l2263:
  3880  00ECB4  5040               	movf	___fttol@exp1,w,c
  3881  00ECB6  B4D8               	btfsc	status,2,c
  3882  00ECB8  D002               	goto	l2265
  3883  00ECBA  D7F5               	goto	l2261
  3884  00ECBC  D000               	goto	l2265
  3885  00ECBE                     l2265:
  3886  00ECBE  503B               	movf	___fttol@sign1,w,c
  3887  00ECC0  B4D8               	btfsc	status,2,c
  3888  00ECC2  D009               	goto	l2269
  3889  00ECC4  1E3F               	comf	___fttol@lval+3,f,c
  3890  00ECC6  1E3E               	comf	___fttol@lval+2,f,c
  3891  00ECC8  1E3D               	comf	___fttol@lval+1,f,c
  3892  00ECCA  6C3C               	negf	___fttol@lval,c
  3893  00ECCC  0E00               	movlw	0
  3894  00ECCE  223D               	addwfc	___fttol@lval+1,f,c
  3895  00ECD0  223E               	addwfc	___fttol@lval+2,f,c
  3896  00ECD2  223F               	addwfc	___fttol@lval+3,f,c
  3897  00ECD4  D000               	goto	l2269
  3898  00ECD6                     l2269:
  3899  00ECD6  C03C  F032         	movff	___fttol@lval,?___fttol
  3900  00ECDA  C03D  F033         	movff	___fttol@lval+1,?___fttol+1
  3901  00ECDE  C03E  F034         	movff	___fttol@lval+2,?___fttol+2
  3902  00ECE2  C03F  F035         	movff	___fttol@lval+3,?___fttol+3
  3903  00ECE6  D000               	goto	l618
  3904  00ECE8                     l618:
  3905  00ECE8  0012               	return		;funcret
  3906  00ECEA                     __end_of___fttol:
  3907                           	opt stack 0
  3908                           tblptru	equ	0xFF8
  3909                           tblptrh	equ	0xFF7
  3910                           tblptrl	equ	0xFF6
  3911                           tablat	equ	0xFF5
  3912                           prodh	equ	0xFF4
  3913                           prodl	equ	0xFF3
  3914                           wreg	equ	0xFE8
  3915                           postinc2	equ	0xFDE
  3916                           postdec2	equ	0xFDD
  3917                           fsr2h	equ	0xFDA
  3918                           fsr2l	equ	0xFD9
  3919                           status	equ	0xFD8
  3920                           
  3921 ;; *************** function ___ftsub *****************
  3922 ;; Defined at:
  3923 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  3924 ;; Parameters:    Size  Location     Type
  3925 ;;  f1              3   64[COMRAM] float 
  3926 ;;  f2              3   67[COMRAM] float 
  3927 ;; Auto vars:     Size  Location     Type
  3928 ;;		None
  3929 ;; Return value:  Size  Location     Type
  3930 ;;                  3   64[COMRAM] float 
  3931 ;; Registers used:
  3932 ;;		wreg, status,2, status,0, cstack
  3933 ;; Tracked objects:
  3934 ;;		On entry : 0/0
  3935 ;;		On exit  : 0/0
  3936 ;;		Unchanged: 0/0
  3937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3938 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3941 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3942 ;;Total ram usage:        6 bytes
  3943 ;; Hardware stack levels used:    1
  3944 ;; Hardware stack levels required when called:    2
  3945 ;; This function calls:
  3946 ;;		___ftadd
  3947 ;; This function is called by:
  3948 ;;		_printf
  3949 ;; This function uses a non-reentrant model
  3950 ;;
  3951                           
  3952                           	psect	text14
  3953  00E628                     __ptext14:
  3954                           	opt stack 0
  3955  00E628                     ___ftsub:
  3956                           	opt stack 27
  3957                           
  3958                           ;incstack = 0
  3959  00E628  5044               	movf	___ftsub@f2,w,c
  3960  00E62A  1045               	iorwf	___ftsub@f2+1,w,c
  3961  00E62C  1046               	iorwf	___ftsub@f2+2,w,c
  3962  00E62E  B4D8               	btfsc	status,2,c
  3963  00E630  D007               	goto	l2189
  3964  00E632  0E00               	movlw	0
  3965  00E634  1A44               	xorwf	___ftsub@f2,f,c
  3966  00E636  0E00               	movlw	0
  3967  00E638  1A45               	xorwf	___ftsub@f2+1,f,c
  3968  00E63A  0E80               	movlw	128
  3969  00E63C  1A46               	xorwf	___ftsub@f2+2,f,c
  3970  00E63E  D000               	goto	l2189
  3971  00E640                     l2189:
  3972  00E640  C041  F035         	movff	___ftsub@f1,___ftadd@f1
  3973  00E644  C042  F036         	movff	___ftsub@f1+1,___ftadd@f1+1
  3974  00E648  C043  F037         	movff	___ftsub@f1+2,___ftadd@f1+2
  3975  00E64C  C044  F038         	movff	___ftsub@f2,___ftadd@f2
  3976  00E650  C045  F039         	movff	___ftsub@f2+1,___ftadd@f2+1
  3977  00E654  C046  F03A         	movff	___ftsub@f2+2,___ftadd@f2+2
  3978  00E658  EC75  F078         	call	___ftadd	;wreg free
  3979  00E65C  C035  F041         	movff	?___ftadd,?___ftsub
  3980  00E660  C036  F042         	movff	?___ftadd+1,?___ftsub+1
  3981  00E664  C037  F043         	movff	?___ftadd+2,?___ftsub+2
  3982  00E668  D000               	goto	l614
  3983  00E66A                     l614:
  3984  00E66A  0012               	return		;funcret
  3985  00E66C                     __end_of___ftsub:
  3986                           	opt stack 0
  3987                           tblptru	equ	0xFF8
  3988                           tblptrh	equ	0xFF7
  3989                           tblptrl	equ	0xFF6
  3990                           tablat	equ	0xFF5
  3991                           prodh	equ	0xFF4
  3992                           prodl	equ	0xFF3
  3993                           wreg	equ	0xFE8
  3994                           postinc2	equ	0xFDE
  3995                           postdec2	equ	0xFDD
  3996                           fsr2h	equ	0xFDA
  3997                           fsr2l	equ	0xFD9
  3998                           status	equ	0xFD8
  3999                           
  4000 ;; *************** function ___ftadd *****************
  4001 ;; Defined at:
  4002 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4003 ;; Parameters:    Size  Location     Type
  4004 ;;  f1              3   52[COMRAM] float 
  4005 ;;  f2              3   55[COMRAM] float 
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;  exp1            1   63[COMRAM] unsigned char 
  4008 ;;  exp2            1   62[COMRAM] unsigned char 
  4009 ;;  sign            1   61[COMRAM] unsigned char 
  4010 ;; Return value:  Size  Location     Type
  4011 ;;                  3   52[COMRAM] float 
  4012 ;; Registers used:
  4013 ;;		wreg, status,2, status,0, cstack
  4014 ;; Tracked objects:
  4015 ;;		On entry : 0/0
  4016 ;;		On exit  : 0/0
  4017 ;;		Unchanged: 0/0
  4018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4019 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;Total ram usage:       12 bytes
  4024 ;; Hardware stack levels used:    1
  4025 ;; Hardware stack levels required when called:    1
  4026 ;; This function calls:
  4027 ;;		___ftpack
  4028 ;; This function is called by:
  4029 ;;		_printf
  4030 ;;		___ftsub
  4031 ;; This function uses a non-reentrant model
  4032 ;;
  4033                           
  4034                           	psect	text15
  4035  00F0EA                     __ptext15:
  4036                           	opt stack 0
  4037  00F0EA                     ___ftadd:
  4038                           	opt stack 27
  4039                           
  4040                           ;incstack = 0
  4041  00F0EA  C037  F03B         	movff	___ftadd@f1+2,??___ftadd
  4042  00F0EE  6A3C               	clrf	(??___ftadd+1)& (0+255),c
  4043  00F0F0  6A3D               	clrf	(??___ftadd+2)& (0+255),c
  4044  00F0F2  3436               	rlcf	___ftadd@f1+1,w,c
  4045  00F0F4  363B               	rlcf	??___ftadd& (0+255),f,c
  4046  00F0F6  E301               	bnc	u1431
  4047  00F0F8  803C               	bsf	(??___ftadd+1)& (0+255),0,c
  4048  00F0FA                     u1431:
  4049  00F0FA  503B               	movf	??___ftadd,w,c
  4050  00F0FC  6E40               	movwf	___ftadd@exp1,c
  4051  00F0FE  C03A  F03B         	movff	___ftadd@f2+2,??___ftadd
  4052  00F102  6A3C               	clrf	(??___ftadd+1)& (0+255),c
  4053  00F104  6A3D               	clrf	(??___ftadd+2)& (0+255),c
  4054  00F106  3439               	rlcf	___ftadd@f2+1,w,c
  4055  00F108  363B               	rlcf	??___ftadd& (0+255),f,c
  4056  00F10A  E301               	bnc	u1441
  4057  00F10C  803C               	bsf	(??___ftadd+1)& (0+255),0,c
  4058  00F10E                     u1441:
  4059  00F10E  503B               	movf	??___ftadd,w,c
  4060  00F110  6E3F               	movwf	___ftadd@exp2,c
  4061  00F112  5040               	movf	___ftadd@exp1,w,c
  4062  00F114  B4D8               	btfsc	status,2,c
  4063  00F116  D00B               	goto	l533
  4064  00F118  503F               	movf	___ftadd@exp2,w,c
  4065  00F11A  5C40               	subwf	___ftadd@exp1,w,c
  4066  00F11C  B0D8               	btfsc	status,0,c
  4067  00F11E  D00E               	goto	l1711
  4068  00F120  5040               	movf	___ftadd@exp1,w,c
  4069  00F122  0800               	sublw	0
  4070  00F124  243F               	addwf	___ftadd@exp2,w,c
  4071  00F126  6E3B               	movwf	??___ftadd& (0+255),c
  4072  00F128  0E18               	movlw	24
  4073  00F12A  643B               	cpfsgt	??___ftadd,c
  4074  00F12C  D007               	goto	l1711
  4075  00F12E                     l533:
  4076  00F12E  C038  F035         	movff	___ftadd@f2,?___ftadd
  4077  00F132  C039  F036         	movff	___ftadd@f2+1,?___ftadd+1
  4078  00F136  C03A  F037         	movff	___ftadd@f2+2,?___ftadd+2
  4079  00F13A  D0B8               	goto	l534
  4080  00F13C                     l1711:
  4081  00F13C  503F               	movf	___ftadd@exp2,w,c
  4082  00F13E  B4D8               	btfsc	status,2,c
  4083  00F140  D00B               	goto	l537
  4084  00F142  5040               	movf	___ftadd@exp1,w,c
  4085  00F144  5C3F               	subwf	___ftadd@exp2,w,c
  4086  00F146  B0D8               	btfsc	status,0,c
  4087  00F148  D00E               	goto	l1717
  4088  00F14A  503F               	movf	___ftadd@exp2,w,c
  4089  00F14C  0800               	sublw	0
  4090  00F14E  2440               	addwf	___ftadd@exp1,w,c
  4091  00F150  6E3B               	movwf	??___ftadd& (0+255),c
  4092  00F152  0E18               	movlw	24
  4093  00F154  643B               	cpfsgt	??___ftadd,c
  4094  00F156  D007               	goto	l1717
  4095  00F158                     l537:
  4096  00F158  C035  F035         	movff	___ftadd@f1,?___ftadd
  4097  00F15C  C036  F036         	movff	___ftadd@f1+1,?___ftadd+1
  4098  00F160  C037  F037         	movff	___ftadd@f1+2,?___ftadd+2
  4099  00F164  D0A3               	goto	l534
  4100  00F166                     l1717:
  4101  00F166  0E06               	movlw	6
  4102  00F168  6E3E               	movwf	___ftadd@sign,c
  4103  00F16A  AE37               	btfss	___ftadd@f1+2,7,c
  4104  00F16C  D002               	goto	l1723
  4105  00F16E  8E3E               	bsf	___ftadd@sign,7,c
  4106  00F170  D000               	goto	l1723
  4107  00F172                     l1723:
  4108  00F172  BE3A               	btfsc	___ftadd@f2+2,7,c
  4109  00F174  8C3E               	bsf	___ftadd@sign,6,c
  4110  00F176  8E36               	bsf	___ftadd@f1+1,7,c
  4111  00F178  0EFF               	movlw	255
  4112  00F17A  1635               	andwf	___ftadd@f1,f,c
  4113  00F17C  0EFF               	movlw	255
  4114  00F17E  1636               	andwf	___ftadd@f1+1,f,c
  4115  00F180  0E00               	movlw	0
  4116  00F182  1637               	andwf	___ftadd@f1+2,f,c
  4117  00F184  8E39               	bsf	___ftadd@f2+1,7,c
  4118  00F186  0EFF               	movlw	255
  4119  00F188  1638               	andwf	___ftadd@f2,f,c
  4120  00F18A  0EFF               	movlw	255
  4121  00F18C  1639               	andwf	___ftadd@f2+1,f,c
  4122  00F18E  0E00               	movlw	0
  4123  00F190  163A               	andwf	___ftadd@f2+2,f,c
  4124  00F192  503F               	movf	___ftadd@exp2,w,c
  4125  00F194  5C40               	subwf	___ftadd@exp1,w,c
  4126  00F196  B0D8               	btfsc	status,0,c
  4127  00F198  D01E               	goto	l1743
  4128  00F19A                     l1733:
  4129  00F19A  90D8               	bcf	status,0,c
  4130  00F19C  3638               	rlcf	___ftadd@f2,f,c
  4131  00F19E  3639               	rlcf	___ftadd@f2+1,f,c
  4132  00F1A0  363A               	rlcf	___ftadd@f2+2,f,c
  4133  00F1A2  063F               	decf	___ftadd@exp2,f,c
  4134  00F1A4  5040               	movf	___ftadd@exp1,w,c
  4135  00F1A6  183F               	xorwf	___ftadd@exp2,w,c
  4136  00F1A8  B4D8               	btfsc	status,2,c
  4137  00F1AA  D00F               	goto	l1741
  4138  00F1AC  063E               	decf	___ftadd@sign,f,c
  4139  00F1AE  C03E  F03B         	movff	___ftadd@sign,??___ftadd
  4140  00F1B2  0E07               	movlw	7
  4141  00F1B4  163B               	andwf	??___ftadd,f,c
  4142  00F1B6  B4D8               	btfsc	status,2,c
  4143  00F1B8  D008               	goto	l1741
  4144  00F1BA  D7EF               	goto	l1733
  4145  00F1BC  D006               	goto	l1741
  4146  00F1BE                     l1739:
  4147  00F1BE  90D8               	bcf	status,0,c
  4148  00F1C0  3237               	rrcf	___ftadd@f1+2,f,c
  4149  00F1C2  3236               	rrcf	___ftadd@f1+1,f,c
  4150  00F1C4  3235               	rrcf	___ftadd@f1,f,c
  4151  00F1C6  2A40               	incf	___ftadd@exp1,f,c
  4152  00F1C8  D000               	goto	l1741
  4153  00F1CA                     l1741:
  4154  00F1CA  503F               	movf	___ftadd@exp2,w,c
  4155  00F1CC  1840               	xorwf	___ftadd@exp1,w,c
  4156  00F1CE  B4D8               	btfsc	status,2,c
  4157  00F1D0  D024               	goto	l548
  4158  00F1D2  D7F5               	goto	l1739
  4159  00F1D4  D022               	goto	l548
  4160  00F1D6                     l1743:
  4161  00F1D6  5040               	movf	___ftadd@exp1,w,c
  4162  00F1D8  5C3F               	subwf	___ftadd@exp2,w,c
  4163  00F1DA  B0D8               	btfsc	status,0,c
  4164  00F1DC  D01E               	goto	l548
  4165  00F1DE                     l1745:
  4166  00F1DE  90D8               	bcf	status,0,c
  4167  00F1E0  3635               	rlcf	___ftadd@f1,f,c
  4168  00F1E2  3636               	rlcf	___ftadd@f1+1,f,c
  4169  00F1E4  3637               	rlcf	___ftadd@f1+2,f,c
  4170  00F1E6  0640               	decf	___ftadd@exp1,f,c
  4171  00F1E8  5040               	movf	___ftadd@exp1,w,c
  4172  00F1EA  183F               	xorwf	___ftadd@exp2,w,c
  4173  00F1EC  B4D8               	btfsc	status,2,c
  4174  00F1EE  D00F               	goto	l1753
  4175  00F1F0  063E               	decf	___ftadd@sign,f,c
  4176  00F1F2  C03E  F03B         	movff	___ftadd@sign,??___ftadd
  4177  00F1F6  0E07               	movlw	7
  4178  00F1F8  163B               	andwf	??___ftadd,f,c
  4179  00F1FA  B4D8               	btfsc	status,2,c
  4180  00F1FC  D008               	goto	l1753
  4181  00F1FE  D7EF               	goto	l1745
  4182  00F200  D006               	goto	l1753
  4183  00F202                     l1751:
  4184  00F202  90D8               	bcf	status,0,c
  4185  00F204  323A               	rrcf	___ftadd@f2+2,f,c
  4186  00F206  3239               	rrcf	___ftadd@f2+1,f,c
  4187  00F208  3238               	rrcf	___ftadd@f2,f,c
  4188  00F20A  2A3F               	incf	___ftadd@exp2,f,c
  4189  00F20C  D000               	goto	l1753
  4190  00F20E                     l1753:
  4191  00F20E  503F               	movf	___ftadd@exp2,w,c
  4192  00F210  1840               	xorwf	___ftadd@exp1,w,c
  4193  00F212  B4D8               	btfsc	status,2,c
  4194  00F214  D002               	goto	l548
  4195  00F216  D7F5               	goto	l1751
  4196  00F218  D000               	goto	l548
  4197  00F21A                     l548:
  4198  00F21A  AE3E               	btfss	___ftadd@sign,7,c
  4199  00F21C  D00C               	goto	l557
  4200  00F21E  0EFF               	movlw	255
  4201  00F220  1A35               	xorwf	___ftadd@f1,f,c
  4202  00F222  0EFF               	movlw	255
  4203  00F224  1A36               	xorwf	___ftadd@f1+1,f,c
  4204  00F226  0EFF               	movlw	255
  4205  00F228  1A37               	xorwf	___ftadd@f1+2,f,c
  4206  00F22A  0E01               	movlw	1
  4207  00F22C  2635               	addwf	___ftadd@f1,f,c
  4208  00F22E  0E00               	movlw	0
  4209  00F230  2236               	addwfc	___ftadd@f1+1,f,c
  4210  00F232  0E00               	movlw	0
  4211  00F234  2237               	addwfc	___ftadd@f1+2,f,c
  4212  00F236                     l557:
  4213  00F236  AC3E               	btfss	___ftadd@sign,6,c
  4214  00F238  D00D               	goto	l1759
  4215  00F23A  0EFF               	movlw	255
  4216  00F23C  1A38               	xorwf	___ftadd@f2,f,c
  4217  00F23E  0EFF               	movlw	255
  4218  00F240  1A39               	xorwf	___ftadd@f2+1,f,c
  4219  00F242  0EFF               	movlw	255
  4220  00F244  1A3A               	xorwf	___ftadd@f2+2,f,c
  4221  00F246  0E01               	movlw	1
  4222  00F248  2638               	addwf	___ftadd@f2,f,c
  4223  00F24A  0E00               	movlw	0
  4224  00F24C  2239               	addwfc	___ftadd@f2+1,f,c
  4225  00F24E  0E00               	movlw	0
  4226  00F250  223A               	addwfc	___ftadd@f2+2,f,c
  4227  00F252  D000               	goto	l1759
  4228  00F254                     l1759:
  4229  00F254  0E00               	movlw	0
  4230  00F256  6E3E               	movwf	___ftadd@sign,c
  4231  00F258  5035               	movf	___ftadd@f1,w,c
  4232  00F25A  2638               	addwf	___ftadd@f2,f,c
  4233  00F25C  5036               	movf	___ftadd@f1+1,w,c
  4234  00F25E  2239               	addwfc	___ftadd@f2+1,f,c
  4235  00F260  5037               	movf	___ftadd@f1+2,w,c
  4236  00F262  223A               	addwfc	___ftadd@f2+2,f,c
  4237  00F264  AE3A               	btfss	___ftadd@f2+2,7,c
  4238  00F266  D00F               	goto	l1769
  4239  00F268  0EFF               	movlw	255
  4240  00F26A  1A38               	xorwf	___ftadd@f2,f,c
  4241  00F26C  0EFF               	movlw	255
  4242  00F26E  1A39               	xorwf	___ftadd@f2+1,f,c
  4243  00F270  0EFF               	movlw	255
  4244  00F272  1A3A               	xorwf	___ftadd@f2+2,f,c
  4245  00F274  0E01               	movlw	1
  4246  00F276  2638               	addwf	___ftadd@f2,f,c
  4247  00F278  0E00               	movlw	0
  4248  00F27A  2239               	addwfc	___ftadd@f2+1,f,c
  4249  00F27C  0E00               	movlw	0
  4250  00F27E  223A               	addwfc	___ftadd@f2+2,f,c
  4251  00F280  0E01               	movlw	1
  4252  00F282  6E3E               	movwf	___ftadd@sign,c
  4253  00F284  D000               	goto	l1769
  4254  00F286                     l1769:
  4255  00F286  C038  F001         	movff	___ftadd@f2,___ftpack@arg
  4256  00F28A  C039  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4257  00F28E  C03A  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4258  00F292  C040  F004         	movff	___ftadd@exp1,___ftpack@exp
  4259  00F296  C03E  F005         	movff	___ftadd@sign,___ftpack@sign
  4260  00F29A  EC2E  F075         	call	___ftpack	;wreg free
  4261  00F29E  C001  F035         	movff	?___ftpack,?___ftadd
  4262  00F2A2  C002  F036         	movff	?___ftpack+1,?___ftadd+1
  4263  00F2A6  C003  F037         	movff	?___ftpack+2,?___ftadd+2
  4264  00F2AA  D000               	goto	l534
  4265  00F2AC                     l534:
  4266  00F2AC  0012               	return		;funcret
  4267  00F2AE                     __end_of___ftadd:
  4268                           	opt stack 0
  4269                           tblptru	equ	0xFF8
  4270                           tblptrh	equ	0xFF7
  4271                           tblptrl	equ	0xFF6
  4272                           tablat	equ	0xFF5
  4273                           prodh	equ	0xFF4
  4274                           prodl	equ	0xFF3
  4275                           wreg	equ	0xFE8
  4276                           postinc2	equ	0xFDE
  4277                           postdec2	equ	0xFDD
  4278                           fsr2h	equ	0xFDA
  4279                           fsr2l	equ	0xFD9
  4280                           status	equ	0xFD8
  4281                           
  4282 ;; *************** function ___ftneg *****************
  4283 ;; Defined at:
  4284 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4285 ;; Parameters:    Size  Location     Type
  4286 ;;  f1              3    0[COMRAM] float 
  4287 ;; Auto vars:     Size  Location     Type
  4288 ;;		None
  4289 ;; Return value:  Size  Location     Type
  4290 ;;                  3    0[COMRAM] float 
  4291 ;; Registers used:
  4292 ;;		wreg, status,2, status,0
  4293 ;; Tracked objects:
  4294 ;;		On entry : 0/0
  4295 ;;		On exit  : 0/0
  4296 ;;		Unchanged: 0/0
  4297 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4298 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4299 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;Total ram usage:        3 bytes
  4303 ;; Hardware stack levels used:    1
  4304 ;; This function calls:
  4305 ;;		Nothing
  4306 ;; This function is called by:
  4307 ;;		_printf
  4308 ;; This function uses a non-reentrant model
  4309 ;;
  4310                           
  4311                           	psect	text16
  4312  00E57A                     __ptext16:
  4313                           	opt stack 0
  4314  00E57A                     ___ftneg:
  4315                           	opt stack 29
  4316                           
  4317                           ;incstack = 0
  4318  00E57A  5001               	movf	___ftneg@f1,w,c
  4319  00E57C  1002               	iorwf	___ftneg@f1+1,w,c
  4320  00E57E  1003               	iorwf	___ftneg@f1+2,w,c
  4321  00E580  B4D8               	btfsc	status,2,c
  4322  00E582  D006               	goto	l607
  4323  00E584  0E00               	movlw	0
  4324  00E586  1A01               	xorwf	___ftneg@f1,f,c
  4325  00E588  0E00               	movlw	0
  4326  00E58A  1A02               	xorwf	___ftneg@f1+1,f,c
  4327  00E58C  0E80               	movlw	128
  4328  00E58E  1A03               	xorwf	___ftneg@f1+2,f,c
  4329  00E590                     l607:
  4330  00E590  C001  F001         	movff	___ftneg@f1,?___ftneg
  4331  00E594  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4332  00E598  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4333  00E59C  0012               	return		;funcret
  4334  00E59E                     __end_of___ftneg:
  4335                           	opt stack 0
  4336                           tblptru	equ	0xFF8
  4337                           tblptrh	equ	0xFF7
  4338                           tblptrl	equ	0xFF6
  4339                           tablat	equ	0xFF5
  4340                           prodh	equ	0xFF4
  4341                           prodl	equ	0xFF3
  4342                           wreg	equ	0xFE8
  4343                           postinc2	equ	0xFDE
  4344                           postdec2	equ	0xFDD
  4345                           fsr2h	equ	0xFDA
  4346                           fsr2l	equ	0xFD9
  4347                           status	equ	0xFD8
  4348                           
  4349 ;; *************** function ___ftge *****************
  4350 ;; Defined at:
  4351 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  4352 ;; Parameters:    Size  Location     Type
  4353 ;;  ff1             3    0[COMRAM] float 
  4354 ;;  ff2             3    3[COMRAM] float 
  4355 ;; Auto vars:     Size  Location     Type
  4356 ;;		None
  4357 ;; Return value:  Size  Location     Type
  4358 ;;		None               void
  4359 ;; Registers used:
  4360 ;;		wreg, status,2, status,0
  4361 ;; Tracked objects:
  4362 ;;		On entry : 0/0
  4363 ;;		On exit  : 0/0
  4364 ;;		Unchanged: 0/0
  4365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4366 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4369 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4370 ;;Total ram usage:        9 bytes
  4371 ;; Hardware stack levels used:    1
  4372 ;; This function calls:
  4373 ;;		Nothing
  4374 ;; This function is called by:
  4375 ;;		_printf
  4376 ;; This function uses a non-reentrant model
  4377 ;;
  4378                           
  4379                           	psect	text17
  4380  00E930                     __ptext17:
  4381                           	opt stack 0
  4382  00E930                     ___ftge:
  4383                           	opt stack 29
  4384                           
  4385                           ;incstack = 0
  4386  00E930  AE03               	btfss	___ftge@ff1+2,7,c
  4387  00E932  D017               	goto	l2209
  4388  00E934  C001  F007         	movff	___ftge@ff1,??___ftge
  4389  00E938  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  4390  00E93C  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  4391  00E940  1E07               	comf	??___ftge,f,c
  4392  00E942  1E08               	comf	??___ftge+1,f,c
  4393  00E944  1E09               	comf	??___ftge+2,f,c
  4394  00E946  2A07               	incf	??___ftge,f,c
  4395  00E948  0E00               	movlw	0
  4396  00E94A  2208               	addwfc	??___ftge+1,f,c
  4397  00E94C  2209               	addwfc	??___ftge+2,f,c
  4398  00E94E  0E00               	movlw	0
  4399  00E950  2407               	addwf	??___ftge,w,c
  4400  00E952  6E01               	movwf	___ftge@ff1,c
  4401  00E954  0E00               	movlw	0
  4402  00E956  2008               	addwfc	??___ftge+1,w,c
  4403  00E958  6E02               	movwf	___ftge@ff1+1,c
  4404  00E95A  0E80               	movlw	128
  4405  00E95C  2009               	addwfc	??___ftge+2,w,c
  4406  00E95E  6E03               	movwf	___ftge@ff1+2,c
  4407  00E960  D000               	goto	l2209
  4408  00E962                     l2209:
  4409  00E962  AE06               	btfss	___ftge@ff2+2,7,c
  4410  00E964  D017               	goto	l2213
  4411  00E966  C004  F007         	movff	___ftge@ff2,??___ftge
  4412  00E96A  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  4413  00E96E  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  4414  00E972  1E07               	comf	??___ftge,f,c
  4415  00E974  1E08               	comf	??___ftge+1,f,c
  4416  00E976  1E09               	comf	??___ftge+2,f,c
  4417  00E978  2A07               	incf	??___ftge,f,c
  4418  00E97A  0E00               	movlw	0
  4419  00E97C  2208               	addwfc	??___ftge+1,f,c
  4420  00E97E  2209               	addwfc	??___ftge+2,f,c
  4421  00E980  0E00               	movlw	0
  4422  00E982  2407               	addwf	??___ftge,w,c
  4423  00E984  6E04               	movwf	___ftge@ff2,c
  4424  00E986  0E00               	movlw	0
  4425  00E988  2008               	addwfc	??___ftge+1,w,c
  4426  00E98A  6E05               	movwf	___ftge@ff2+1,c
  4427  00E98C  0E80               	movlw	128
  4428  00E98E  2009               	addwfc	??___ftge+2,w,c
  4429  00E990  6E06               	movwf	___ftge@ff2+2,c
  4430  00E992  D000               	goto	l2213
  4431  00E994                     l2213:
  4432  00E994  0E00               	movlw	0
  4433  00E996  1A01               	xorwf	___ftge@ff1,f,c
  4434  00E998  0E00               	movlw	0
  4435  00E99A  1A02               	xorwf	___ftge@ff1+1,f,c
  4436  00E99C  0E80               	movlw	128
  4437  00E99E  1A03               	xorwf	___ftge@ff1+2,f,c
  4438  00E9A0  0E00               	movlw	0
  4439  00E9A2  1A04               	xorwf	___ftge@ff2,f,c
  4440  00E9A4  0E00               	movlw	0
  4441  00E9A6  1A05               	xorwf	___ftge@ff2+1,f,c
  4442  00E9A8  0E80               	movlw	128
  4443  00E9AA  1A06               	xorwf	___ftge@ff2+2,f,c
  4444  00E9AC  5004               	movf	___ftge@ff2,w,c
  4445  00E9AE  5C01               	subwf	___ftge@ff1,w,c
  4446  00E9B0  5005               	movf	___ftge@ff2+1,w,c
  4447  00E9B2  5802               	subwfb	___ftge@ff1+1,w,c
  4448  00E9B4  5006               	movf	___ftge@ff2+2,w,c
  4449  00E9B6  5803               	subwfb	___ftge@ff1+2,w,c
  4450  00E9B8  B0D8               	btfsc	status,0,c
  4451  00E9BA  D002               	goto	l2219
  4452  00E9BC  90D8               	bcf	status,0,c
  4453  00E9BE  D002               	goto	l591
  4454  00E9C0                     l2219:
  4455  00E9C0  80D8               	bsf	status,0,c
  4456  00E9C2  D000               	goto	l591
  4457  00E9C4                     l591:
  4458  00E9C4  0012               	return		;funcret
  4459  00E9C6                     __end_of___ftge:
  4460                           	opt stack 0
  4461                           tblptru	equ	0xFF8
  4462                           tblptrh	equ	0xFF7
  4463                           tblptrl	equ	0xFF6
  4464                           tablat	equ	0xFF5
  4465                           prodh	equ	0xFF4
  4466                           prodl	equ	0xFF3
  4467                           wreg	equ	0xFE8
  4468                           postinc2	equ	0xFDE
  4469                           postdec2	equ	0xFDD
  4470                           fsr2h	equ	0xFDA
  4471                           fsr2l	equ	0xFD9
  4472                           status	equ	0xFD8
  4473                           
  4474 ;; *************** function _Read_Ch_Volt *****************
  4475 ;; Defined at:
  4476 ;;		line 44 in file "lab1p3.c"
  4477 ;; Parameters:    Size  Location     Type
  4478 ;;  ch_num          1    wreg     unsigned char 
  4479 ;; Auto vars:     Size  Location     Type
  4480 ;;  ch_num          1   50[COMRAM] unsigned char 
  4481 ;;  Volt            3   45[COMRAM] float 
  4482 ;;  ADC_Result      2   48[COMRAM] int 
  4483 ;; Return value:  Size  Location     Type
  4484 ;;                  3   42[COMRAM] float 
  4485 ;; Registers used:
  4486 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4487 ;; Tracked objects:
  4488 ;;		On entry : 0/0
  4489 ;;		On exit  : 0/0
  4490 ;;		Unchanged: 0/0
  4491 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4492 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4493 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4494 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4495 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4496 ;;Total ram usage:        9 bytes
  4497 ;; Hardware stack levels used:    1
  4498 ;; Hardware stack levels required when called:    2
  4499 ;; This function calls:
  4500 ;;		_Get_Full_ADC
  4501 ;;		___awtoft
  4502 ;;		___ftdiv
  4503 ;;		___ftmul
  4504 ;; This function is called by:
  4505 ;;		_main
  4506 ;; This function uses a non-reentrant model
  4507 ;;
  4508                           
  4509                           	psect	text18
  4510  00E7AC                     __ptext18:
  4511                           	opt stack 0
  4512  00E7AC                     _Read_Ch_Volt:
  4513                           	opt stack 28
  4514                           
  4515                           ;incstack = 0
  4516                           ;Read_Ch_Volt@ch_num stored from wreg
  4517  00E7AC  6E33               	movwf	Read_Ch_Volt@ch_num,c
  4518                           
  4519                           ;lab1p3.c: 46: ADCON0 = ch_num * 0x4 + 1;
  4520  00E7AE  5033               	movf	Read_Ch_Volt@ch_num,w,c
  4521  00E7B0  0D04               	mullw	4
  4522  00E7B2  28F3               	incf	prodl,w,c
  4523  00E7B4  6EC2               	movwf	4034,c	;volatile
  4524                           
  4525                           ;lab1p3.c: 47: int ADC_Result = Get_Full_ADC();
  4526  00E7B6  ECCF  F072         	call	_Get_Full_ADC	;wreg free
  4527  00E7BA  C001  F031         	movff	?_Get_Full_ADC,Read_Ch_Volt@ADC_Result
  4528  00E7BE  C002  F032         	movff	?_Get_Full_ADC+1,Read_Ch_Volt@ADC_Result+1
  4529                           
  4530                           ;lab1p3.c: 48: float Volt = ADC_Result / 1024.0 * 5.0;
  4531  00E7C2  0E00               	movlw	0
  4532  00E7C4  6E10               	movwf	___ftdiv@f2,c
  4533  00E7C6  0E80               	movlw	128
  4534  00E7C8  6E11               	movwf	___ftdiv@f2+1,c
  4535  00E7CA  0E44               	movlw	68
  4536  00E7CC  6E12               	movwf	___ftdiv@f2+2,c
  4537  00E7CE  C031  F009         	movff	Read_Ch_Volt@ADC_Result,___awtoft@c
  4538  00E7D2  C032  F00A         	movff	Read_Ch_Volt@ADC_Result+1,___awtoft@c+1
  4539  00E7D6  ECF6  F072         	call	___awtoft	;wreg free
  4540  00E7DA  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  4541  00E7DE  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  4542  00E7E2  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  4543  00E7E6  EC91  F075         	call	___ftdiv	;wreg free
  4544  00E7EA  C00D  F01C         	movff	?___ftdiv,___ftmul@f1
  4545  00E7EE  C00E  F01D         	movff	?___ftdiv+1,___ftmul@f1+1
  4546  00E7F2  C00F  F01E         	movff	?___ftdiv+2,___ftmul@f1+2
  4547  00E7F6  0E00               	movlw	0
  4548  00E7F8  6E1F               	movwf	___ftmul@f2,c
  4549  00E7FA  0EA0               	movlw	160
  4550  00E7FC  6E20               	movwf	___ftmul@f2+1,c
  4551  00E7FE  0E40               	movlw	64
  4552  00E800  6E21               	movwf	___ftmul@f2+2,c
  4553  00E802  ECEC  F076         	call	___ftmul	;wreg free
  4554  00E806  C01C  F02E         	movff	?___ftmul,Read_Ch_Volt@Volt
  4555  00E80A  C01D  F02F         	movff	?___ftmul+1,Read_Ch_Volt@Volt+1
  4556  00E80E  C01E  F030         	movff	?___ftmul+2,Read_Ch_Volt@Volt+2
  4557                           
  4558                           ;lab1p3.c: 49: return (Volt);
  4559  00E812  C02E  F02B         	movff	Read_Ch_Volt@Volt,?_Read_Ch_Volt
  4560  00E816  C02F  F02C         	movff	Read_Ch_Volt@Volt+1,?_Read_Ch_Volt+1
  4561  00E81A  C030  F02D         	movff	Read_Ch_Volt@Volt+2,?_Read_Ch_Volt+2
  4562  00E81E  D000               	goto	l43
  4563  00E820                     l43:
  4564  00E820  0012               	return		;funcret
  4565  00E822                     __end_of_Read_Ch_Volt:
  4566                           	opt stack 0
  4567                           tblptru	equ	0xFF8
  4568                           tblptrh	equ	0xFF7
  4569                           tblptrl	equ	0xFF6
  4570                           tablat	equ	0xFF5
  4571                           prodh	equ	0xFF4
  4572                           prodl	equ	0xFF3
  4573                           wreg	equ	0xFE8
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           fsr2h	equ	0xFDA
  4577                           fsr2l	equ	0xFD9
  4578                           status	equ	0xFD8
  4579                           
  4580 ;; *************** function ___ftmul *****************
  4581 ;; Defined at:
  4582 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  4583 ;; Parameters:    Size  Location     Type
  4584 ;;  f1              3   27[COMRAM] float 
  4585 ;;  f2              3   30[COMRAM] float 
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  f3_as_produc    3   37[COMRAM] unsigned um
  4588 ;;  sign            1   41[COMRAM] unsigned char 
  4589 ;;  cntr            1   40[COMRAM] unsigned char 
  4590 ;;  exp             1   36[COMRAM] unsigned char 
  4591 ;; Return value:  Size  Location     Type
  4592 ;;                  3   27[COMRAM] float 
  4593 ;; Registers used:
  4594 ;;		wreg, status,2, status,0, cstack
  4595 ;; Tracked objects:
  4596 ;;		On entry : 0/0
  4597 ;;		On exit  : 0/0
  4598 ;;		Unchanged: 0/0
  4599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4600 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;Total ram usage:       15 bytes
  4605 ;; Hardware stack levels used:    1
  4606 ;; Hardware stack levels required when called:    1
  4607 ;; This function calls:
  4608 ;;		___ftpack
  4609 ;; This function is called by:
  4610 ;;		_Read_Ch_Volt
  4611 ;;		_fround
  4612 ;;		_scale
  4613 ;;		_printf
  4614 ;; This function uses a non-reentrant model
  4615 ;;
  4616                           
  4617                           	psect	text19
  4618  00EDD8                     __ptext19:
  4619                           	opt stack 0
  4620  00EDD8                     ___ftmul:
  4621                           	opt stack 27
  4622                           
  4623                           ;incstack = 0
  4624  00EDD8  C01E  F022         	movff	___ftmul@f1+2,??___ftmul
  4625  00EDDC  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4626  00EDDE  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4627  00EDE0  341D               	rlcf	___ftmul@f1+1,w,c
  4628  00EDE2  3622               	rlcf	??___ftmul& (0+255),f,c
  4629  00EDE4  E301               	bnc	u1641
  4630  00EDE6  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4631  00EDE8                     u1641:
  4632  00EDE8  5022               	movf	??___ftmul,w,c
  4633  00EDEA  6E25               	movwf	___ftmul@exp,c
  4634  00EDEC  5025               	movf	___ftmul@exp,w,c
  4635  00EDEE  A4D8               	btfss	status,2,c
  4636  00EDF0  D002               	goto	l1779
  4637  00EDF2  D00E               	goto	l1781
  4638  00EDF4  D06C               	goto	l597
  4639  00EDF6                     l1779:
  4640  00EDF6  C021  F022         	movff	___ftmul@f2+2,??___ftmul
  4641  00EDFA  6A23               	clrf	(??___ftmul+1)& (0+255),c
  4642  00EDFC  6A24               	clrf	(??___ftmul+2)& (0+255),c
  4643  00EDFE  3420               	rlcf	___ftmul@f2+1,w,c
  4644  00EE00  3622               	rlcf	??___ftmul& (0+255),f,c
  4645  00EE02  E301               	bnc	u1661
  4646  00EE04  8023               	bsf	(??___ftmul+1)& (0+255),0,c
  4647  00EE06                     u1661:
  4648  00EE06  5022               	movf	??___ftmul,w,c
  4649  00EE08  6E2A               	movwf	___ftmul@sign,c
  4650  00EE0A  502A               	movf	___ftmul@sign,w,c
  4651  00EE0C  A4D8               	btfss	status,2,c
  4652  00EE0E  D007               	goto	l1785
  4653  00EE10                     l1781:
  4654  00EE10  0E00               	movlw	0
  4655  00EE12  6E1C               	movwf	?___ftmul,c
  4656  00EE14  0E00               	movlw	0
  4657  00EE16  6E1D               	movwf	?___ftmul+1,c
  4658  00EE18  0E00               	movlw	0
  4659  00EE1A  6E1E               	movwf	?___ftmul+2,c
  4660  00EE1C  D058               	goto	l597
  4661  00EE1E                     l1785:
  4662  00EE1E  502A               	movf	___ftmul@sign,w,c
  4663  00EE20  0F7B               	addlw	123
  4664  00EE22  2625               	addwf	___ftmul@exp,f,c
  4665  00EE24  C01E  F02A         	movff	___ftmul@f1+2,___ftmul@sign
  4666  00EE28  5021               	movf	___ftmul@f2+2,w,c
  4667  00EE2A  1A2A               	xorwf	___ftmul@sign,f,c
  4668  00EE2C  0E80               	movlw	128
  4669  00EE2E  162A               	andwf	___ftmul@sign,f,c
  4670  00EE30  8E1D               	bsf	___ftmul@f1+1,7,c
  4671  00EE32  8E20               	bsf	___ftmul@f2+1,7,c
  4672  00EE34  0EFF               	movlw	255
  4673  00EE36  161F               	andwf	___ftmul@f2,f,c
  4674  00EE38  0EFF               	movlw	255
  4675  00EE3A  1620               	andwf	___ftmul@f2+1,f,c
  4676  00EE3C  0E00               	movlw	0
  4677  00EE3E  1621               	andwf	___ftmul@f2+2,f,c
  4678  00EE40  0E00               	movlw	0
  4679  00EE42  6E26               	movwf	___ftmul@f3_as_product,c
  4680  00EE44  0E00               	movlw	0
  4681  00EE46  6E27               	movwf	___ftmul@f3_as_product+1,c
  4682  00EE48  0E00               	movlw	0
  4683  00EE4A  6E28               	movwf	___ftmul@f3_as_product+2,c
  4684  00EE4C  0E07               	movlw	7
  4685  00EE4E  6E29               	movwf	___ftmul@cntr,c
  4686  00EE50  D000               	goto	l1799
  4687  00EE52                     l1799:
  4688  00EE52  A01C               	btfss	___ftmul@f1,0,c
  4689  00EE54  D007               	goto	l1803
  4690  00EE56  501F               	movf	___ftmul@f2,w,c
  4691  00EE58  2626               	addwf	___ftmul@f3_as_product,f,c
  4692  00EE5A  5020               	movf	___ftmul@f2+1,w,c
  4693  00EE5C  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4694  00EE5E  5021               	movf	___ftmul@f2+2,w,c
  4695  00EE60  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4696  00EE62  D000               	goto	l1803
  4697  00EE64                     l1803:
  4698  00EE64  90D8               	bcf	status,0,c
  4699  00EE66  321E               	rrcf	___ftmul@f1+2,f,c
  4700  00EE68  321D               	rrcf	___ftmul@f1+1,f,c
  4701  00EE6A  321C               	rrcf	___ftmul@f1,f,c
  4702  00EE6C  90D8               	bcf	status,0,c
  4703  00EE6E  361F               	rlcf	___ftmul@f2,f,c
  4704  00EE70  3620               	rlcf	___ftmul@f2+1,f,c
  4705  00EE72  3621               	rlcf	___ftmul@f2+2,f,c
  4706  00EE74  2E29               	decfsz	___ftmul@cntr,f,c
  4707  00EE76  D7ED               	goto	l1799
  4708  00EE78  D000               	goto	l1807
  4709  00EE7A                     l1807:
  4710  00EE7A  0E09               	movlw	9
  4711  00EE7C  6E29               	movwf	___ftmul@cntr,c
  4712  00EE7E  D000               	goto	l1809
  4713  00EE80                     l1809:
  4714  00EE80  A01C               	btfss	___ftmul@f1,0,c
  4715  00EE82  D007               	goto	l1813
  4716  00EE84  501F               	movf	___ftmul@f2,w,c
  4717  00EE86  2626               	addwf	___ftmul@f3_as_product,f,c
  4718  00EE88  5020               	movf	___ftmul@f2+1,w,c
  4719  00EE8A  2227               	addwfc	___ftmul@f3_as_product+1,f,c
  4720  00EE8C  5021               	movf	___ftmul@f2+2,w,c
  4721  00EE8E  2228               	addwfc	___ftmul@f3_as_product+2,f,c
  4722  00EE90  D000               	goto	l1813
  4723  00EE92                     l1813:
  4724  00EE92  90D8               	bcf	status,0,c
  4725  00EE94  321E               	rrcf	___ftmul@f1+2,f,c
  4726  00EE96  321D               	rrcf	___ftmul@f1+1,f,c
  4727  00EE98  321C               	rrcf	___ftmul@f1,f,c
  4728  00EE9A  90D8               	bcf	status,0,c
  4729  00EE9C  3228               	rrcf	___ftmul@f3_as_product+2,f,c
  4730  00EE9E  3227               	rrcf	___ftmul@f3_as_product+1,f,c
  4731  00EEA0  3226               	rrcf	___ftmul@f3_as_product,f,c
  4732  00EEA2  2E29               	decfsz	___ftmul@cntr,f,c
  4733  00EEA4  D7ED               	goto	l1809
  4734  00EEA6  D000               	goto	l1817
  4735  00EEA8                     l1817:
  4736  00EEA8  C026  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  4737  00EEAC  C027  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  4738  00EEB0  C028  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  4739  00EEB4  C025  F004         	movff	___ftmul@exp,___ftpack@exp
  4740  00EEB8  C02A  F005         	movff	___ftmul@sign,___ftpack@sign
  4741  00EEBC  EC2E  F075         	call	___ftpack	;wreg free
  4742  00EEC0  C001  F01C         	movff	?___ftpack,?___ftmul
  4743  00EEC4  C002  F01D         	movff	?___ftpack+1,?___ftmul+1
  4744  00EEC8  C003  F01E         	movff	?___ftpack+2,?___ftmul+2
  4745  00EECC  D000               	goto	l597
  4746  00EECE                     l597:
  4747  00EECE  0012               	return		;funcret
  4748  00EED0                     __end_of___ftmul:
  4749                           	opt stack 0
  4750                           tblptru	equ	0xFF8
  4751                           tblptrh	equ	0xFF7
  4752                           tblptrl	equ	0xFF6
  4753                           tablat	equ	0xFF5
  4754                           prodh	equ	0xFF4
  4755                           prodl	equ	0xFF3
  4756                           wreg	equ	0xFE8
  4757                           postinc2	equ	0xFDE
  4758                           postdec2	equ	0xFDD
  4759                           fsr2h	equ	0xFDA
  4760                           fsr2l	equ	0xFD9
  4761                           status	equ	0xFD8
  4762                           
  4763 ;; *************** function ___ftdiv *****************
  4764 ;; Defined at:
  4765 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  4766 ;; Parameters:    Size  Location     Type
  4767 ;;  f1              3   12[COMRAM] float 
  4768 ;;  f2              3   15[COMRAM] float 
  4769 ;; Auto vars:     Size  Location     Type
  4770 ;;  f3              3   22[COMRAM] float 
  4771 ;;  sign            1   26[COMRAM] unsigned char 
  4772 ;;  exp             1   25[COMRAM] unsigned char 
  4773 ;;  cntr            1   21[COMRAM] unsigned char 
  4774 ;; Return value:  Size  Location     Type
  4775 ;;                  3   12[COMRAM] float 
  4776 ;; Registers used:
  4777 ;;		wreg, status,2, status,0, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4783 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4787 ;;Total ram usage:       15 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    1
  4790 ;; This function calls:
  4791 ;;		___ftpack
  4792 ;; This function is called by:
  4793 ;;		_Read_Ch_Volt
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text20
  4798  00EB22                     __ptext20:
  4799                           	opt stack 0
  4800  00EB22                     ___ftdiv:
  4801                           	opt stack 28
  4802                           
  4803                           ;incstack = 0
  4804  00EB22  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  4805  00EB26  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  4806  00EB28  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  4807  00EB2A  340E               	rlcf	___ftdiv@f1+1,w,c
  4808  00EB2C  3613               	rlcf	??___ftdiv& (0+255),f,c
  4809  00EB2E  E301               	bnc	u2171
  4810  00EB30  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  4811  00EB32                     u2171:
  4812  00EB32  5013               	movf	??___ftdiv,w,c
  4813  00EB34  6E1A               	movwf	___ftdiv@exp,c
  4814  00EB36  501A               	movf	___ftdiv@exp,w,c
  4815  00EB38  A4D8               	btfss	status,2,c
  4816  00EB3A  D002               	goto	l2145
  4817  00EB3C  D00E               	goto	l2147
  4818  00EB3E  D061               	goto	l565
  4819  00EB40                     l2145:
  4820  00EB40  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  4821  00EB44  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  4822  00EB46  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  4823  00EB48  3411               	rlcf	___ftdiv@f2+1,w,c
  4824  00EB4A  3613               	rlcf	??___ftdiv& (0+255),f,c
  4825  00EB4C  E301               	bnc	u2191
  4826  00EB4E  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  4827  00EB50                     u2191:
  4828  00EB50  5013               	movf	??___ftdiv,w,c
  4829  00EB52  6E1B               	movwf	___ftdiv@sign,c
  4830  00EB54  501B               	movf	___ftdiv@sign,w,c
  4831  00EB56  A4D8               	btfss	status,2,c
  4832  00EB58  D007               	goto	l2151
  4833  00EB5A                     l2147:
  4834  00EB5A  0E00               	movlw	0
  4835  00EB5C  6E0D               	movwf	?___ftdiv,c
  4836  00EB5E  0E00               	movlw	0
  4837  00EB60  6E0E               	movwf	?___ftdiv+1,c
  4838  00EB62  0E00               	movlw	0
  4839  00EB64  6E0F               	movwf	?___ftdiv+2,c
  4840  00EB66  D04D               	goto	l565
  4841  00EB68                     l2151:
  4842  00EB68  0E00               	movlw	0
  4843  00EB6A  6E17               	movwf	___ftdiv@f3,c
  4844  00EB6C  0E00               	movlw	0
  4845  00EB6E  6E18               	movwf	___ftdiv@f3+1,c
  4846  00EB70  0E00               	movlw	0
  4847  00EB72  6E19               	movwf	___ftdiv@f3+2,c
  4848  00EB74  501B               	movf	___ftdiv@sign,w,c
  4849  00EB76  0F89               	addlw	137
  4850  00EB78  5E1A               	subwf	___ftdiv@exp,f,c
  4851  00EB7A  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  4852  00EB7E  5012               	movf	___ftdiv@f2+2,w,c
  4853  00EB80  1A1B               	xorwf	___ftdiv@sign,f,c
  4854  00EB82  0E80               	movlw	128
  4855  00EB84  161B               	andwf	___ftdiv@sign,f,c
  4856  00EB86  8E0E               	bsf	___ftdiv@f1+1,7,c
  4857  00EB88  0EFF               	movlw	255
  4858  00EB8A  160D               	andwf	___ftdiv@f1,f,c
  4859  00EB8C  0EFF               	movlw	255
  4860  00EB8E  160E               	andwf	___ftdiv@f1+1,f,c
  4861  00EB90  0E00               	movlw	0
  4862  00EB92  160F               	andwf	___ftdiv@f1+2,f,c
  4863  00EB94  8E11               	bsf	___ftdiv@f2+1,7,c
  4864  00EB96  0EFF               	movlw	255
  4865  00EB98  1610               	andwf	___ftdiv@f2,f,c
  4866  00EB9A  0EFF               	movlw	255
  4867  00EB9C  1611               	andwf	___ftdiv@f2+1,f,c
  4868  00EB9E  0E00               	movlw	0
  4869  00EBA0  1612               	andwf	___ftdiv@f2+2,f,c
  4870  00EBA2  0E18               	movlw	24
  4871  00EBA4  6E16               	movwf	___ftdiv@cntr,c
  4872  00EBA6  D000               	goto	l2171
  4873  00EBA8                     l2171:
  4874  00EBA8  90D8               	bcf	status,0,c
  4875  00EBAA  3617               	rlcf	___ftdiv@f3,f,c
  4876  00EBAC  3618               	rlcf	___ftdiv@f3+1,f,c
  4877  00EBAE  3619               	rlcf	___ftdiv@f3+2,f,c
  4878  00EBB0  5010               	movf	___ftdiv@f2,w,c
  4879  00EBB2  5C0D               	subwf	___ftdiv@f1,w,c
  4880  00EBB4  5011               	movf	___ftdiv@f2+1,w,c
  4881  00EBB6  580E               	subwfb	___ftdiv@f1+1,w,c
  4882  00EBB8  5012               	movf	___ftdiv@f2+2,w,c
  4883  00EBBA  580F               	subwfb	___ftdiv@f1+2,w,c
  4884  00EBBC  A0D8               	btfss	status,0,c
  4885  00EBBE  D007               	goto	l568
  4886  00EBC0  5010               	movf	___ftdiv@f2,w,c
  4887  00EBC2  5E0D               	subwf	___ftdiv@f1,f,c
  4888  00EBC4  5011               	movf	___ftdiv@f2+1,w,c
  4889  00EBC6  5A0E               	subwfb	___ftdiv@f1+1,f,c
  4890  00EBC8  5012               	movf	___ftdiv@f2+2,w,c
  4891  00EBCA  5A0F               	subwfb	___ftdiv@f1+2,f,c
  4892  00EBCC  8017               	bsf	___ftdiv@f3,0,c
  4893  00EBCE                     l568:
  4894  00EBCE  90D8               	bcf	status,0,c
  4895  00EBD0  360D               	rlcf	___ftdiv@f1,f,c
  4896  00EBD2  360E               	rlcf	___ftdiv@f1+1,f,c
  4897  00EBD4  360F               	rlcf	___ftdiv@f1+2,f,c
  4898  00EBD6  2E16               	decfsz	___ftdiv@cntr,f,c
  4899  00EBD8  D7E7               	goto	l2171
  4900  00EBDA  D000               	goto	l2181
  4901  00EBDC                     l2181:
  4902  00EBDC  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  4903  00EBE0  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  4904  00EBE4  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  4905  00EBE8  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  4906  00EBEC  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  4907  00EBF0  EC2E  F075         	call	___ftpack	;wreg free
  4908  00EBF4  C001  F00D         	movff	?___ftpack,?___ftdiv
  4909  00EBF8  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  4910  00EBFC  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  4911  00EC00  D000               	goto	l565
  4912  00EC02                     l565:
  4913  00EC02  0012               	return		;funcret
  4914  00EC04                     __end_of___ftdiv:
  4915                           	opt stack 0
  4916                           tblptru	equ	0xFF8
  4917                           tblptrh	equ	0xFF7
  4918                           tblptrl	equ	0xFF6
  4919                           tablat	equ	0xFF5
  4920                           prodh	equ	0xFF4
  4921                           prodl	equ	0xFF3
  4922                           wreg	equ	0xFE8
  4923                           postinc2	equ	0xFDE
  4924                           postdec2	equ	0xFDD
  4925                           fsr2h	equ	0xFDA
  4926                           fsr2l	equ	0xFD9
  4927                           status	equ	0xFD8
  4928                           
  4929 ;; *************** function ___awtoft *****************
  4930 ;; Defined at:
  4931 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  4932 ;; Parameters:    Size  Location     Type
  4933 ;;  c               2    8[COMRAM] int 
  4934 ;; Auto vars:     Size  Location     Type
  4935 ;;  sign            1   11[COMRAM] unsigned char 
  4936 ;; Return value:  Size  Location     Type
  4937 ;;                  3    8[COMRAM] float 
  4938 ;; Registers used:
  4939 ;;		wreg, status,2, status,0, cstack
  4940 ;; Tracked objects:
  4941 ;;		On entry : 0/0
  4942 ;;		On exit  : 0/0
  4943 ;;		Unchanged: 0/0
  4944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4945 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4946 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4948 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4949 ;;Total ram usage:        4 bytes
  4950 ;; Hardware stack levels used:    1
  4951 ;; Hardware stack levels required when called:    1
  4952 ;; This function calls:
  4953 ;;		___ftpack
  4954 ;; This function is called by:
  4955 ;;		_Read_Ch_Volt
  4956 ;; This function uses a non-reentrant model
  4957 ;;
  4958                           
  4959                           	psect	text21
  4960  00E5EC                     __ptext21:
  4961                           	opt stack 0
  4962  00E5EC                     ___awtoft:
  4963                           	opt stack 28
  4964                           
  4965                           ;incstack = 0
  4966  00E5EC  0E00               	movlw	0
  4967  00E5EE  6E0C               	movwf	___awtoft@sign,c
  4968  00E5F0  AE0A               	btfss	___awtoft@c+1,7,c
  4969  00E5F2  D007               	goto	l2201
  4970  00E5F4  6C09               	negf	___awtoft@c,c
  4971  00E5F6  1E0A               	comf	___awtoft@c+1,f,c
  4972  00E5F8  B0D8               	btfsc	status,0,c
  4973  00E5FA  2A0A               	incf	___awtoft@c+1,f,c
  4974  00E5FC  0E01               	movlw	1
  4975  00E5FE  6E0C               	movwf	___awtoft@sign,c
  4976  00E600  D000               	goto	l2201
  4977  00E602                     l2201:
  4978  00E602  C009  F001         	movff	___awtoft@c,___ftpack@arg
  4979  00E606  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  4980  00E60A  6A03               	clrf	___ftpack@arg+2,c
  4981  00E60C  0E8E               	movlw	142
  4982  00E60E  6E04               	movwf	___ftpack@exp,c
  4983  00E610  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  4984  00E614  EC2E  F075         	call	___ftpack	;wreg free
  4985  00E618  C001  F009         	movff	?___ftpack,?___awtoft
  4986  00E61C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  4987  00E620  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  4988  00E624  D000               	goto	l386
  4989  00E626                     l386:
  4990  00E626  0012               	return		;funcret
  4991  00E628                     __end_of___awtoft:
  4992                           	opt stack 0
  4993                           tblptru	equ	0xFF8
  4994                           tblptrh	equ	0xFF7
  4995                           tblptrl	equ	0xFF6
  4996                           tablat	equ	0xFF5
  4997                           prodh	equ	0xFF4
  4998                           prodl	equ	0xFF3
  4999                           wreg	equ	0xFE8
  5000                           postinc2	equ	0xFDE
  5001                           postdec2	equ	0xFDD
  5002                           fsr2h	equ	0xFDA
  5003                           fsr2l	equ	0xFD9
  5004                           status	equ	0xFD8
  5005                           
  5006 ;; *************** function ___ftpack *****************
  5007 ;; Defined at:
  5008 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5009 ;; Parameters:    Size  Location     Type
  5010 ;;  arg             3    0[COMRAM] unsigned um
  5011 ;;  exp             1    3[COMRAM] unsigned char 
  5012 ;;  sign            1    4[COMRAM] unsigned char 
  5013 ;; Auto vars:     Size  Location     Type
  5014 ;;		None
  5015 ;; Return value:  Size  Location     Type
  5016 ;;                  3    0[COMRAM] float 
  5017 ;; Registers used:
  5018 ;;		wreg, status,2, status,0
  5019 ;; Tracked objects:
  5020 ;;		On entry : 0/0
  5021 ;;		On exit  : 0/0
  5022 ;;		Unchanged: 0/0
  5023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5024 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5026 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5027 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5028 ;;Total ram usage:        8 bytes
  5029 ;; Hardware stack levels used:    1
  5030 ;; This function calls:
  5031 ;;		Nothing
  5032 ;; This function is called by:
  5033 ;;		___awtoft
  5034 ;;		___ftadd
  5035 ;;		___ftdiv
  5036 ;;		___ftmul
  5037 ;;		___lltoft
  5038 ;; This function uses a non-reentrant model
  5039 ;;
  5040                           
  5041                           	psect	text22
  5042  00EA5C                     __ptext22:
  5043                           	opt stack 0
  5044  00EA5C                     ___ftpack:
  5045                           	opt stack 27
  5046                           
  5047                           ;incstack = 0
  5048  00EA5C  5004               	movf	___ftpack@exp,w,c
  5049  00EA5E  B4D8               	btfsc	status,2,c
  5050  00EA60  D005               	goto	l1665
  5051  00EA62  5001               	movf	___ftpack@arg,w,c
  5052  00EA64  1002               	iorwf	___ftpack@arg+1,w,c
  5053  00EA66  1003               	iorwf	___ftpack@arg+2,w,c
  5054  00EA68  A4D8               	btfss	status,2,c
  5055  00EA6A  D00E               	goto	l1671
  5056  00EA6C                     l1665:
  5057  00EA6C  0E00               	movlw	0
  5058  00EA6E  6E01               	movwf	?___ftpack,c
  5059  00EA70  0E00               	movlw	0
  5060  00EA72  6E02               	movwf	?___ftpack+1,c
  5061  00EA74  0E00               	movlw	0
  5062  00EA76  6E03               	movwf	?___ftpack+2,c
  5063  00EA78  D053               	goto	l493
  5064  00EA7A  D006               	goto	l1671
  5065  00EA7C                     l1669:
  5066  00EA7C  2A04               	incf	___ftpack@exp,f,c
  5067  00EA7E  90D8               	bcf	status,0,c
  5068  00EA80  3203               	rrcf	___ftpack@arg+2,f,c
  5069  00EA82  3202               	rrcf	___ftpack@arg+1,f,c
  5070  00EA84  3201               	rrcf	___ftpack@arg,f,c
  5071  00EA86  D000               	goto	l1671
  5072  00EA88                     l1671:
  5073  00EA88  0E00               	movlw	0
  5074  00EA8A  1401               	andwf	___ftpack@arg,w,c
  5075  00EA8C  6E06               	movwf	??___ftpack& (0+255),c
  5076  00EA8E  0E00               	movlw	0
  5077  00EA90  1402               	andwf	___ftpack@arg+1,w,c
  5078  00EA92  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5079  00EA94  0EFE               	movlw	254
  5080  00EA96  1403               	andwf	___ftpack@arg+2,w,c
  5081  00EA98  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5082  00EA9A  5006               	movf	??___ftpack,w,c
  5083  00EA9C  1007               	iorwf	??___ftpack+1,w,c
  5084  00EA9E  1008               	iorwf	??___ftpack+2,w,c
  5085  00EAA0  B4D8               	btfsc	status,2,c
  5086  00EAA2  D00E               	goto	l1677
  5087  00EAA4  D7EB               	goto	l1669
  5088  00EAA6  D00C               	goto	l1677
  5089  00EAA8                     l1673:
  5090  00EAA8  2A04               	incf	___ftpack@exp,f,c
  5091  00EAAA  0E01               	movlw	1
  5092  00EAAC  2601               	addwf	___ftpack@arg,f,c
  5093  00EAAE  0E00               	movlw	0
  5094  00EAB0  2202               	addwfc	___ftpack@arg+1,f,c
  5095  00EAB2  0E00               	movlw	0
  5096  00EAB4  2203               	addwfc	___ftpack@arg+2,f,c
  5097  00EAB6  90D8               	bcf	status,0,c
  5098  00EAB8  3203               	rrcf	___ftpack@arg+2,f,c
  5099  00EABA  3202               	rrcf	___ftpack@arg+1,f,c
  5100  00EABC  3201               	rrcf	___ftpack@arg,f,c
  5101  00EABE  D000               	goto	l1677
  5102  00EAC0                     l1677:
  5103  00EAC0  0E00               	movlw	0
  5104  00EAC2  1401               	andwf	___ftpack@arg,w,c
  5105  00EAC4  6E06               	movwf	??___ftpack& (0+255),c
  5106  00EAC6  0E00               	movlw	0
  5107  00EAC8  1402               	andwf	___ftpack@arg+1,w,c
  5108  00EACA  6E07               	movwf	(??___ftpack+1)& (0+255),c
  5109  00EACC  0EFF               	movlw	255
  5110  00EACE  1403               	andwf	___ftpack@arg+2,w,c
  5111  00EAD0  6E08               	movwf	(??___ftpack+2)& (0+255),c
  5112  00EAD2  5006               	movf	??___ftpack,w,c
  5113  00EAD4  1007               	iorwf	??___ftpack+1,w,c
  5114  00EAD6  1008               	iorwf	??___ftpack+2,w,c
  5115  00EAD8  B4D8               	btfsc	status,2,c
  5116  00EADA  D008               	goto	l1681
  5117  00EADC  D7E5               	goto	l1673
  5118  00EADE  D006               	goto	l1681
  5119  00EAE0                     l1679:
  5120  00EAE0  0604               	decf	___ftpack@exp,f,c
  5121  00EAE2  90D8               	bcf	status,0,c
  5122  00EAE4  3601               	rlcf	___ftpack@arg,f,c
  5123  00EAE6  3602               	rlcf	___ftpack@arg+1,f,c
  5124  00EAE8  3603               	rlcf	___ftpack@arg+2,f,c
  5125  00EAEA  D000               	goto	l1681
  5126  00EAEC                     l1681:
  5127  00EAEC  BE02               	btfsc	___ftpack@arg+1,7,c
  5128  00EAEE  D004               	goto	l504
  5129  00EAF0  0E02               	movlw	2
  5130  00EAF2  6004               	cpfslt	___ftpack@exp,c
  5131  00EAF4  D7F5               	goto	l1679
  5132  00EAF6  D000               	goto	l504
  5133  00EAF8                     l504:
  5134  00EAF8  B004               	btfsc	___ftpack@exp,0,c
  5135  00EAFA  D002               	goto	l1687
  5136  00EAFC  9E02               	bcf	___ftpack@arg+1,7,c
  5137  00EAFE  D000               	goto	l1687
  5138  00EB00                     l1687:
  5139  00EB00  90D8               	bcf	status,0,c
  5140  00EB02  3204               	rrcf	___ftpack@exp,f,c
  5141  00EB04  5004               	movf	___ftpack@exp,w,c
  5142  00EB06  1203               	iorwf	___ftpack@arg+2,f,c
  5143  00EB08  5005               	movf	___ftpack@sign,w,c
  5144  00EB0A  B4D8               	btfsc	status,2,c
  5145  00EB0C  D002               	goto	l1693
  5146  00EB0E  8E03               	bsf	___ftpack@arg+2,7,c
  5147  00EB10  D000               	goto	l1693
  5148  00EB12                     l1693:
  5149  00EB12  C001  F001         	movff	___ftpack@arg,?___ftpack
  5150  00EB16  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  5151  00EB1A  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  5152  00EB1E  D000               	goto	l493
  5153  00EB20                     l493:
  5154  00EB20  0012               	return		;funcret
  5155  00EB22                     __end_of___ftpack:
  5156                           	opt stack 0
  5157                           tblptru	equ	0xFF8
  5158                           tblptrh	equ	0xFF7
  5159                           tblptrl	equ	0xFF6
  5160                           tablat	equ	0xFF5
  5161                           prodh	equ	0xFF4
  5162                           prodl	equ	0xFF3
  5163                           wreg	equ	0xFE8
  5164                           postinc2	equ	0xFDE
  5165                           postdec2	equ	0xFDD
  5166                           fsr2h	equ	0xFDA
  5167                           fsr2l	equ	0xFD9
  5168                           status	equ	0xFD8
  5169                           
  5170 ;; *************** function _Get_Full_ADC *****************
  5171 ;; Defined at:
  5172 ;;		line 36 in file "lab1p3.c"
  5173 ;; Parameters:    Size  Location     Type
  5174 ;;		None
  5175 ;; Auto vars:     Size  Location     Type
  5176 ;;  result          2    4[COMRAM] int 
  5177 ;; Return value:  Size  Location     Type
  5178 ;;                  2    0[COMRAM] unsigned int 
  5179 ;; Registers used:
  5180 ;;		wreg, status,2, status,0
  5181 ;; Tracked objects:
  5182 ;;		On entry : 0/0
  5183 ;;		On exit  : 0/0
  5184 ;;		Unchanged: 0/0
  5185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5186 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5187 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5188 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5189 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5190 ;;Total ram usage:        6 bytes
  5191 ;; Hardware stack levels used:    1
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		_Read_Ch_Volt
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198                           
  5199                           	psect	text23
  5200  00E59E                     __ptext23:
  5201                           	opt stack 0
  5202  00E59E                     _Get_Full_ADC:
  5203                           	opt stack 29
  5204                           
  5205                           ;lab1p3.c: 38: int result;
  5206                           ;lab1p3.c: 39: ADCON0bits.GO=1;
  5207                           
  5208                           ;incstack = 0
  5209  00E59E  82C2               	bsf	4034,1,c	;volatile
  5210                           
  5211                           ;lab1p3.c: 40: while(ADCON0bits.DONE==1);
  5212  00E5A0  D000               	goto	l37
  5213  00E5A2                     l37:
  5214  00E5A2  B2C2               	btfsc	4034,1,c	;volatile
  5215  00E5A4  D7FE               	goto	l37
  5216                           
  5217                           ;lab1p3.c: 41: result = (ADRESH * 0x100) + ADRESL;
  5218  00E5A6  50C4               	movf	4036,w,c	;volatile
  5219  00E5A8  6E04               	movwf	(??_Get_Full_ADC+1)& (0+255),c
  5220  00E5AA  6A03               	clrf	??_Get_Full_ADC& (0+255),c
  5221  00E5AC  50C3               	movf	4035,w,c	;volatile
  5222  00E5AE  2403               	addwf	??_Get_Full_ADC,w,c
  5223  00E5B0  6E05               	movwf	Get_Full_ADC@result,c
  5224  00E5B2  0E00               	movlw	0
  5225  00E5B4  2004               	addwfc	??_Get_Full_ADC+1,w,c
  5226  00E5B6  6E06               	movwf	Get_Full_ADC@result+1,c
  5227                           
  5228                           ;lab1p3.c: 42: return result;
  5229  00E5B8  C005  F001         	movff	Get_Full_ADC@result,?_Get_Full_ADC
  5230  00E5BC  C006  F002         	movff	Get_Full_ADC@result+1,?_Get_Full_ADC+1
  5231  00E5C0  D000               	goto	l40
  5232  00E5C2                     l40:
  5233  00E5C2  0012               	return		;funcret
  5234  00E5C4                     __end_of_Get_Full_ADC:
  5235                           	opt stack 0
  5236                           tblptru	equ	0xFF8
  5237                           tblptrh	equ	0xFF7
  5238                           tblptrl	equ	0xFF6
  5239                           tablat	equ	0xFF5
  5240                           prodh	equ	0xFF4
  5241                           prodl	equ	0xFF3
  5242                           wreg	equ	0xFE8
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function _Init_UART *****************
  5250 ;; Defined at:
  5251 ;;		line 17 in file "lab1p3.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;		None               void
  5258 ;; Registers used:
  5259 ;;		wreg, status,2, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;Total ram usage:        0 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    1
  5272 ;; This function calls:
  5273 ;;		_OpenUSART
  5274 ;; This function is called by:
  5275 ;;		_main
  5276 ;; This function uses a non-reentrant model
  5277 ;;
  5278                           
  5279                           	psect	text24
  5280  00E566                     __ptext24:
  5281                           	opt stack 0
  5282  00E566                     _Init_UART:
  5283                           	opt stack 29
  5284                           
  5285                           ;lab1p3.c: 19: OpenUSART (0b01111111 & 0b10111111 &
  5286                           ;lab1p3.c: 20: 0b11111110 & 0b11111101 & 0b11111111 &
  5287                           ;lab1p3.c: 21: 0b11111111, 25);
  5288                           
  5289                           ;incstack = 0
  5290  00E566  0E00               	movlw	0
  5291  00E568  6E02               	movwf	OpenUSART@spbrg+1,c
  5292  00E56A  0E19               	movlw	25
  5293  00E56C  6E01               	movwf	OpenUSART@spbrg,c
  5294  00E56E  0E3C               	movlw	60
  5295  00E570  EC66  F073         	call	_OpenUSART
  5296                           
  5297                           ;lab1p3.c: 22: OSCCON = 0x60;
  5298  00E574  0E60               	movlw	96
  5299  00E576  6ED3               	movwf	4051,c	;volatile
  5300  00E578  0012               	return		;funcret
  5301  00E57A                     __end_of_Init_UART:
  5302                           	opt stack 0
  5303                           tblptru	equ	0xFF8
  5304                           tblptrh	equ	0xFF7
  5305                           tblptrl	equ	0xFF6
  5306                           tablat	equ	0xFF5
  5307                           prodh	equ	0xFF4
  5308                           prodl	equ	0xFF3
  5309                           wreg	equ	0xFE8
  5310                           postinc2	equ	0xFDE
  5311                           postdec2	equ	0xFDD
  5312                           fsr2h	equ	0xFDA
  5313                           fsr2l	equ	0xFD9
  5314                           status	equ	0xFD8
  5315                           
  5316 ;; *************** function _OpenUSART *****************
  5317 ;; Defined at:
  5318 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;  config          1    wreg     unsigned char 
  5321 ;;  spbrg           2    0[COMRAM] unsigned int 
  5322 ;; Auto vars:     Size  Location     Type
  5323 ;;  config          1    2[COMRAM] unsigned char 
  5324 ;; Return value:  Size  Location     Type
  5325 ;;		None               void
  5326 ;; Registers used:
  5327 ;;		wreg, status,2
  5328 ;; Tracked objects:
  5329 ;;		On entry : 0/0
  5330 ;;		On exit  : 0/0
  5331 ;;		Unchanged: 0/0
  5332 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5333 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5337 ;;Total ram usage:        3 bytes
  5338 ;; Hardware stack levels used:    1
  5339 ;; This function calls:
  5340 ;;		Nothing
  5341 ;; This function is called by:
  5342 ;;		_Init_UART
  5343 ;; This function uses a non-reentrant model
  5344 ;;
  5345                           
  5346                           	psect	text25
  5347  00E6CC                     __ptext25:
  5348                           	opt stack 0
  5349  00E6CC                     _OpenUSART:
  5350                           	opt stack 29
  5351                           
  5352                           ;incstack = 0
  5353                           ;OpenUSART@config stored from wreg
  5354  00E6CC  6E03               	movwf	OpenUSART@config,c
  5355  00E6CE  0E00               	movlw	0
  5356  00E6D0  6EAC               	movwf	4012,c	;volatile
  5357  00E6D2  0E00               	movlw	0
  5358  00E6D4  6EAB               	movwf	4011,c	;volatile
  5359  00E6D6  A003               	btfss	OpenUSART@config,0,c
  5360  00E6D8  D002               	goto	l1907
  5361  00E6DA  88AC               	bsf	4012,4,c	;volatile
  5362  00E6DC  D000               	goto	l1907
  5363  00E6DE                     l1907:
  5364  00E6DE  A203               	btfss	OpenUSART@config,1,c
  5365  00E6E0  D003               	goto	l1911
  5366  00E6E2  8CAC               	bsf	4012,6,c	;volatile
  5367  00E6E4  8CAB               	bsf	4011,6,c	;volatile
  5368  00E6E6  D000               	goto	l1911
  5369  00E6E8                     l1911:
  5370  00E6E8  A403               	btfss	OpenUSART@config,2,c
  5371  00E6EA  D002               	goto	l1915
  5372  00E6EC  8EAC               	bsf	4012,7,c	;volatile
  5373  00E6EE  D000               	goto	l1915
  5374  00E6F0                     l1915:
  5375  00E6F0  A603               	btfss	OpenUSART@config,3,c
  5376  00E6F2  D002               	goto	l156
  5377  00E6F4  88AB               	bsf	4011,4,c	;volatile
  5378  00E6F6  D002               	goto	l1919
  5379  00E6F8                     l156:
  5380  00E6F8  8AAB               	bsf	4011,5,c	;volatile
  5381  00E6FA  D000               	goto	l1919
  5382  00E6FC                     l1919:
  5383  00E6FC  B803               	btfsc	OpenUSART@config,4,c
  5384  00E6FE  84AC               	bsf	4012,2,c	;volatile
  5385  00E700  989E               	bcf	3998,4,c	;volatile
  5386  00E702  AA03               	btfss	OpenUSART@config,5,c
  5387  00E704  D002               	goto	l1927
  5388  00E706  86AB               	bsf	4011,3,c	;volatile
  5389  00E708  D000               	goto	l1927
  5390  00E70A                     l1927:
  5391  00E70A  AC03               	btfss	OpenUSART@config,6,c
  5392  00E70C  D002               	goto	l160
  5393  00E70E  8A9D               	bsf	3997,5,c	;volatile
  5394  00E710  D001               	goto	l161
  5395  00E712                     l160:
  5396  00E712  9A9D               	bcf	3997,5,c	;volatile
  5397  00E714                     l161:
  5398  00E714  9A9E               	bcf	3998,5,c	;volatile
  5399  00E716  AE03               	btfss	OpenUSART@config,7,c
  5400  00E718  D002               	goto	l162
  5401  00E71A  889D               	bsf	3997,4,c	;volatile
  5402  00E71C  D001               	goto	l163
  5403  00E71E                     l162:
  5404  00E71E  989D               	bcf	3997,4,c	;volatile
  5405  00E720                     l163:
  5406  00E720  C001  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  5407  00E724  5002               	movf	OpenUSART@spbrg+1,w,c
  5408  00E726  6EB0               	movwf	4016,c	;volatile
  5409  00E728  8AAC               	bsf	4012,5,c	;volatile
  5410  00E72A  8EAB               	bsf	4011,7,c	;volatile
  5411  00E72C  9C94               	bcf	3988,6,c	;volatile
  5412  00E72E  8E94               	bsf	3988,7,c	;volatile
  5413  00E730  B8AC               	btfsc	4012,4,c	;volatile
  5414  00E732  BEAC               	btfsc	4012,7,c	;volatile
  5415  00E734  D002               	goto	l165
  5416  00E736  8C94               	bsf	3988,6,c	;volatile
  5417  00E738  D000               	goto	l165
  5418  00E73A                     l165:
  5419  00E73A  0012               	return		;funcret
  5420  00E73C                     __end_of_OpenUSART:
  5421                           	opt stack 0
  5422                           tblptru	equ	0xFF8
  5423                           tblptrh	equ	0xFF7
  5424                           tblptrl	equ	0xFF6
  5425                           tablat	equ	0xFF5
  5426                           prodh	equ	0xFF4
  5427                           prodl	equ	0xFF3
  5428                           wreg	equ	0xFE8
  5429                           postinc2	equ	0xFDE
  5430                           postdec2	equ	0xFDD
  5431                           fsr2h	equ	0xFDA
  5432                           fsr2l	equ	0xFD9
  5433                           status	equ	0xFD8
  5434                           
  5435 ;; *************** function _Init_ADC *****************
  5436 ;; Defined at:
  5437 ;;		line 30 in file "lab1p3.c"
  5438 ;; Parameters:    Size  Location     Type
  5439 ;;		None
  5440 ;; Auto vars:     Size  Location     Type
  5441 ;;		None
  5442 ;; Return value:  Size  Location     Type
  5443 ;;		None               void
  5444 ;; Registers used:
  5445 ;;		wreg, status,2
  5446 ;; Tracked objects:
  5447 ;;		On entry : 0/0
  5448 ;;		On exit  : 0/0
  5449 ;;		Unchanged: 0/0
  5450 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5451 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5454 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5455 ;;Total ram usage:        0 bytes
  5456 ;; Hardware stack levels used:    1
  5457 ;; This function calls:
  5458 ;;		Nothing
  5459 ;; This function is called by:
  5460 ;;		_main
  5461 ;; This function uses a non-reentrant model
  5462 ;;
  5463                           
  5464                           	psect	text26
  5465  00E54A                     __ptext26:
  5466                           	opt stack 0
  5467  00E54A                     _Init_ADC:
  5468                           	opt stack 30
  5469                           
  5470                           ;lab1p3.c: 32: ADCON0=0x01;
  5471                           
  5472                           ;incstack = 0
  5473  00E54A  0E01               	movlw	1
  5474  00E54C  6EC2               	movwf	4034,c	;volatile
  5475                           
  5476                           ;lab1p3.c: 33: ADCON1=0x0a;
  5477  00E54E  0E0A               	movlw	10
  5478  00E550  6EC1               	movwf	4033,c	;volatile
  5479                           
  5480                           ;lab1p3.c: 34: ADCON2=0xA9;
  5481  00E552  0EA9               	movlw	169
  5482  00E554  6EC0               	movwf	4032,c	;volatile
  5483  00E556  0012               	return		;funcret
  5484  00E558                     __end_of_Init_ADC:
  5485                           	opt stack 0
  5486                           tblptru	equ	0xFF8
  5487                           tblptrh	equ	0xFF7
  5488                           tblptrl	equ	0xFF6
  5489                           tablat	equ	0xFF5
  5490                           prodh	equ	0xFF4
  5491                           prodl	equ	0xFF3
  5492                           wreg	equ	0xFE8
  5493                           postinc2	equ	0xFDE
  5494                           postdec2	equ	0xFDD
  5495                           fsr2h	equ	0xFDA
  5496                           fsr2l	equ	0xFD9
  5497                           status	equ	0xFD8
  5498                           tblptru	equ	0xFF8
  5499                           tblptrh	equ	0xFF7
  5500                           tblptrl	equ	0xFF6
  5501                           tablat	equ	0xFF5
  5502                           prodh	equ	0xFF4
  5503                           prodl	equ	0xFF3
  5504                           wreg	equ	0xFE8
  5505                           postinc2	equ	0xFDE
  5506                           postdec2	equ	0xFDD
  5507                           fsr2h	equ	0xFDA
  5508                           fsr2l	equ	0xFD9
  5509                           status	equ	0xFD8
  5510                           
  5511                           	psect	rparam
  5512  0000                     tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           prodh	equ	0xFF4
  5517                           prodl	equ	0xFF3
  5518                           wreg	equ	0xFE8
  5519                           postinc2	equ	0xFDE
  5520                           postdec2	equ	0xFDD
  5521                           fsr2h	equ	0xFDA
  5522                           fsr2l	equ	0xFD9
  5523                           status	equ	0xFD8


Data Sizes:
    Strings     143
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    107     107
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 34
		 -> STR_6(CODE[34]), STR_5(CODE[21]), STR_4(CODE[20]), STR_3(CODE[20]), 
		 -> STR_2(CODE[20]), STR_1(CODE[28]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Read_Ch_Volt->___ftmul
    ___ftmul->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Init_UART->_OpenUSART

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0   44853
                                            104 COMRAM     3     3      0
                           _Init_ADC
                          _Init_UART
                       _Read_Ch_Volt
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              42    37      5   36530
                                             70 COMRAM    34    29      5
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3    8696
                                             42 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3    8498
                                             42 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1855
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1250
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1360
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     409
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     552
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    1868
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     477
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     374
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     411
                                             49 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3131
                                             64 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    2878
                                             52 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3      98
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     454
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Read_Ch_Volt                                         9     6      3    7935
                                             42 COMRAM     9     6      3
                       _Get_Full_ADC
                           ___awtoft
                            ___ftdiv
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    3742
                                             27 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2212
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    1890
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    1746
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _Get_Full_ADC                                         6     4      2      23
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                              0 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Init_ADC
   _Init_UART
     _OpenUSART
   _Read_Ch_Volt
     _Get_Full_ADC
     ___awtoft
       ___ftpack
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftpack
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     6B      6B       1       84.3%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Sep 09 17:32:40 2025

                     l40 E5C2                       l43 E820                       l28 E55C  
                     l37 E5A2                       l76 F8D0                       l69 F4F0  
           ___awdiv@sign 000C      ___wmul@multiplicand 0011             ___ftadd@exp1 0040  
           ___ftadd@exp2 003F             ___ftadd@sign 003E                      l121 FD52  
                    l132 FEF6                      l160 E712                      l161 E714  
                    l162 E71E                      l163 E720                      l156 E6F8  
                    l165 E73A                      l504 EAF8                      l168 E5EA  
                    l361 EA5A                      l452 EFD8                      l533 F12E  
                    l461 EFC8                      l534 F2AC                      l614 E66A  
                    l374 E8A2                      l607 E590                      l537 F158  
                    l386 E626                      l618 ECE8                      l548 F21A  
                    l493 EB20                      l565 EC02                      l557 F236  
                    l573 F0E8                      l582 F0D8                      l591 E9C4  
                    l575 F050                      l568 EBCE                      l576 F078  
                    l657 E91E                      l667 E79A                      l597 EECE  
                    l687 E6CA             ___awmod@sign 0006                      wreg 000FE8  
           __CFG_LVP$OFF 000000             ___ftdiv@cntr 0016             ___ftdiv@sign 001B  
           __CFG_WDT$OFF 000000                     l2001 F6C6                     l2013 F7FA  
                   l2005 F6D6                     l2201 E602                     l2113 EF66  
                   l2105 EF34                     l2131 EFA0                     l2035 F016  
                   l2019 F8AC                     l2213 E994                     l2301 E75C  
                   l2125 EF8A                     l2117 EF76                     l2029 EFF8  
                   l2151 EB68                     l2303 E764                     l2135 EFB4  
                   l2071 F0B0                     l2145 EB40                     l2209 E962  
                   l2233 EC22                     l2313 E672                     l2137 EFC2  
                   l2129 EF9A                     l2065 F09A                     l2057 F086  
                   l2171 EBA8                     l2147 EB5A                     l2219 E9C0  
                   l2251 EC7C                     l2307 E78A                     l2315 E680  
                   l2091 EEF0                     l2075 F0C4                     l2403 FB18  
                   l2181 EBDC                     l2261 ECA6                     l2085 EEE0  
                   l2077 F0D2                     l2069 F0AA                     l2421 FC2A  
                   l2413 FB88                     l2341 F8EC                     l1711 F13C  
                   l2263 ECB4                     l2255 EC8C                     l2431 FC6A  
                   l2423 FC2E                     l2415 FBB6                     l2407 FB3C  
                   l2343 F8F8                     l2257 EC92                     l2265 ECBE  
                   l2281 E8D4                     l2409 FB46                     l2417 FBC4  
                   l2337 F8DC                     l1803 EE64                     l1723 F172  
                   l2291 E90E                     l2283 E8DC                     l2451 FD2E  
                   l2435 FC6E                     l2427 FC3A                     l2363 F974  
                   l2347 F900                     l1813 EE92                     l1741 F1CA  
                   l1733 F19A                     l1717 F166                     l2189 E640  
                   l2269 ECD6                     l2453 FD3C                     l2445 FD14  
                   l2349 F922                     l1911 E6E8                     l1671 EA88  
                   l1807 EE7A                     l1751 F202                     l1743 F1D6  
                   l2279 E8C6                     l2463 FD72                     l2447 FD20  
                   l2439 FC8A                     l2391 FA90                     l1681 EAEC  
                   l1673 EAA8                     l1665 EA6C                     l1817 EEA8  
                   l1809 EE80                     l1753 F20E                     l1745 F1DE  
                   l1841 EA04                     l2473 FE98                     l2457 FD58  
                   l2393 FAA0                     l2481 FEBE                     l1915 E6F0  
                   l1907 E6DE                     l1739 F1BE                     l2299 E74E  
                   l1843 EA0E                     l1835 E9EE                     l2475 FEA4  
                   l2467 FDC2                     l2395 FAD0                     l2387 FA6A  
                   l2379 FA06                     l1693 EB12                     l1677 EAC0  
                   l1669 EA7C                     l1781 EE10                     l1861 EA50  
                   l1853 EA34                     l1845 EA16                     l1829 E9DC  
                   l2397 FAE0                     l2485 FEDA                     l1927 E70A  
                   l1919 E6FC                     l1687 EB00                     l1679 EAE0  
                   l1759 F254                     l2479 FEB2                     l1785 EE1E  
                   l1769 F286                     l1857 EA40                     l1881 E854  
                   l1873 E838                     l2489 ECF4                     l1779 EDF6  
                   l1883 E85E                     l1885 E866                     l1893 E888  
                   l1877 E846                     l1981 F4B0                     l1973 F3EC  
                   l1799 EE52                     l1897 E898                     l1889 E87C  
                   l1995 F61E                     STR_1 FF91                     STR_2 FFC2  
                   STR_3 FFD6                     STR_4 FFEA                     STR_5 FFAD  
                   STR_6 FF6F                     u2011 EFEA                     u2031 F008  
                   u2300 EC40                     u1431 F0FA                     u1441 F10E  
                   u2305 EC38                     u2171 EB32                     u2191 EB50  
                   u1641 EDE8                     u2281 EC14                     u1661 EE06  
                   u2630 FD4C                     u2470 F9AC                     u2475 F9A2  
           printf@tmpval 0061                     _TRMT 007D61                     _main ECEA  
           ___ftpack@arg 0001             ___ftpack@exp 0004                     fsr2h 000FDA  
                   fsr2l 000FD9                     prodh 000FF4                     prodl 000FF3  
                   start 0000             ___ftmul@cntr 0029             ___param_bank 000010  
           ___ftmul@sign 002A            ?_Read_Ch_Volt 002B     __end_of_Get_Full_ADC E5C4  
           ___fttol@exp1 0040             ___fttol@lval 003C                    ?_main 0001  
        __end_of___awdiv EA5C          __end_of___ftadd F2AE          __end_of___awmod E8A4  
        __end_of___ftdiv EC04          __end_of___ftneg E59E          __end_of___lldiv E930  
        __end_of___ftmul EED0          ___awdiv@divisor 0009          __end_of___llmod E7AC  
        __end_of___ftsub E66C          __end_of___fttol ECEA          ___awdiv@counter 000B  
                  _RCSTA 000FAB                    _SPBRG 000FAF                    _TXREG 000FAD  
                  _TXSTA 000FAC             ___lltoft@exp 0011            ___awtoft@sign 000C  
        __end_of_dpowers FF21                    _scale F4F2            ___ftpack@sign 0005  
                  _putch E558           __CFG_BOREN$OFF 000000                    tablat 000FF5  
                  status 000FD8          __initialization E540           ??_Read_Ch_Volt 002E  
           __end_of_main EDD8         __end_of_Init_ADC E558                   ??_main 0069  
          ___fttol@sign1 003B            __activetblptr 000002     __size_of__tdiv_to_l_ 0110  
                 _ADCON0 000FC2                   _ADCON1 000FC1                   _ADCON2 000FC0  
       ___llmod@dividend 0001                   ?_scale 002B                   _ADRESH 000FC4  
                 _ADRESL 000FC3         ___awdiv@dividend 0007         __end_of___awtoft E628  
                 ?_putch 0001         __end_of___ftpack EB22         __end_of___lltoft E6CC  
                 _OSCCON 000FD3       __size_of_Init_UART 0014                   _SPBRGH 000FB0  
     Get_Full_ADC@result 0005         __end_of__powers_ FF6F       __size_of_OpenUSART 0070  
                 ___ftge E930                   ___wmul E5C4                ??___awdiv 000B  
              ??___ftadd 003B                ??___awmod 0005                ??___ftdiv 0013  
              ??___ftneg 0004                ??___lldiv 0009                ??___ftmul 0022  
              ??___llmod 0009                ??___ftsub 0047                ??___fttol 0036  
                 _fround F2AE         ___awdiv@quotient 000D          ___awmod@divisor 0003  
        ___awmod@counter 0005                   _printf F8D2    ___ftmul@f3_as_product 0026  
           __mediumconst FEF8                   tblptrh 000FF7                   tblptrl 000FF6  
                 tblptru 000FF8                   putch@c 0001               __accesstop 0080  
__end_of__initialization E540               ___ftadd@f1 0035               ___ftadd@f2 0038  
             ___ftge@ff1 0001               ___ftge@ff2 0004            ___rparam_used 000001  
             ___ftdiv@f1 000D               ___ftdiv@f2 0010               ___ftdiv@f3 0017  
  __size_of_Get_Full_ADC 0026               ___ftneg@f1 0001               ___awtoft@c 0009  
             ___ftmul@f1 001C               ___ftmul@f2 001F               ___ftsub@f1 0041  
             ___ftsub@f2 0044               ___fttol@f1 0032           __pcstackCOMRAM 0001  
             ___lltoft@c 0009            __end_of_scale F8D2            __end_of_putch E566  
      __end_of_Init_UART E57A               __div_to_l_ EED0        __end_of_OpenUSART E73C  
   __end_of_Read_Ch_Volt E822          __div_to_l_@exp1 000C          __div_to_l_@cntr 000B  
                ??_scale 002E          __div_to_l_@quot 0007             _Get_Full_ADC E59E  
                ??_putch 0001                ?_Init_ADC 0001            __div_to_l_@f1 0001  
          __div_to_l_@f2 0004                  ?___ftge 0001                  ?___wmul 000F  
                ?_fround 002B                ?___awtoft 0009                ?___ftpack 0001  
                ?_printf 0047                ?___lltoft 0009               ??_Init_ADC 0001  
      __end_of__npowers_ FF48                  __Hparam 0000               _scale$1009 002E  
                __Lparam 0000          __size_of___ftge 0096                  ___awdiv E9C6  
                ___ftadd F0EA                  ___awmod E822                  ___ftdiv EB22  
                ___ftneg E57A                  ___lldiv E8A4          __size_of___wmul 0028  
                ___ftmul EDD8                  ___llmod E73C                  ___ftsub E628  
                ___fttol EC04                  __pcinit E540               ??___awtoft 000C  
             ??___ftpack 0006          __size_of_fround 0244                  __ramtop 1000  
             ??___lltoft 000D                  __ptext0 ECEA                  __ptext1 F8D2  
                __ptext2 F4F2                  __ptext3 E558                  __ptext4 F2AE  
                __ptext5 E5C4                  __ptext6 E822                  __ptext7 E9C6  
                __ptext8 EFDA                  __ptext9 EED0          __size_of_printf 0626  
            ?__div_to_l_ 0001                  _dpowers FEF9         ___awmod@dividend 0001  
       Read_Ch_Volt@Volt 002E     end_of_initialization E540            __Lmediumconst FEF8  
        ___lldiv@divisor 0005          ___lldiv@counter 000D                _RCSTAbits 000FAB  
                printf@c 0068                  printf@f 0047                  postdec2 000FDD  
                postinc2 000FDE           __tdiv_to_l_@f1 0001           __tdiv_to_l_@f2 0004  
          ??__tdiv_to_l_ 0007    __size_of_Read_Ch_Volt 0076                _TRISCbits 000F94  
            ___ftdiv@exp 001A                _TXSTAbits 000FAC      __size_of__div_to_l_ 010A  
            ___ftmul@exp 0025             _Read_Ch_Volt E7AC           __end_of___ftge E9C6  
         __end_of___wmul E5EC           __end_of_fround F4F2           __end_of_printf FEF8  
    start_initialization E540                _Init_UART E566      __end_of__tdiv_to_l_ F0EA  
              _OpenUSART E6CC          ___llmod@divisor 0005         __CFG_OSC$INTIO67 000000  
      __size_of_Init_ADC 000E          ___llmod@counter 0009                 ??___ftge 0007  
               ??___wmul 0013                 ??_fround 002E                 ??_printf 004C  
             fround@prec 0034        __size_of___awtoft 003C        __size_of___ftpack 00C6  
      __size_of___lltoft 0060               ?_Init_UART 0001               ?_OpenUSART 0001  
          __pmediumconst FEF8                 ?___awdiv 0007                 ?___ftadd 0035  
               ?___awmod 0001                 ?___ftdiv 000D                 ?___ftneg 0001  
               ?___lldiv 0001                 ?___ftmul 001C                 ?___llmod 0001  
               ?___ftsub 0041                __npowers_ FF21                 ?___fttol 0032  
            __tdiv_to_l_ EFDA             ??__div_to_l_ 0007           __size_of_scale 03E0  
         __size_of_putch 000E           ___wmul@product 0013                 _PIE1bits 000F9D  
               _PIR1bits 000F9E       __end_of__div_to_l_ EFDA               _ADCON0bits 000FC2  
      ___wmul@multiplier 000F               printf@flag 0057               printf@fval 0065  
             printf@prec 0059              ??_Init_UART 0004       Read_Ch_Volt@ch_num 0033  
               _Init_ADC E54A              ??_OpenUSART 0003          OpenUSART@config 0003  
               __Hrparam 0000                 __Lrparam 0000         __size_of___awdiv 0096  
       __size_of___ftadd 01C4         __size_of___awmod 0082         __size_of___ftdiv 00E2  
       __size_of___ftneg 0024         __size_of___lldiv 008C         __size_of___ftmul 00F8  
       __size_of___llmod 0070         __size_of___ftsub 0044         __size_of___fttol 00E6  
               ___awtoft E5EC                 ___ftpack EA5C   Read_Ch_Volt@ADC_Result 0031  
            _fround$1007 0031              _fround$1008 002E                 ___lltoft E66C  
               __ptext10 E66C                 __ptext11 E73C                 __ptext20 EB22  
               __ptext12 E8A4                 __ptext21 E5EC                 __ptext13 EC04  
               __ptext22 EA5C                 __ptext14 E628                 __ptext23 E59E  
               __ptext15 F0EA                 __ptext24 E566                 __ptext16 E57A  
               __ptext25 E6CC                 __ptext17 E930                 __ptext26 E54A  
               __ptext18 E7AC                 __ptext19 EDD8                 __powers_ FF48  
          ?_Get_Full_ADC 0001            __size_of_main 00EE                 main@Volt 0069  
              printf@exp 005F                printf@val 005B           OpenUSART@spbrg 0001  
         ??_Get_Full_ADC 0003                 scale@scl 0031         __tdiv_to_l_@exp1 000F  
       __tdiv_to_l_@cntr 000E         __tdiv_to_l_@quot 000A         ___lldiv@dividend 0001  
               printf@ap 0055             ?__tdiv_to_l_ 0001              _printf$1010 0052  
       ___lldiv@quotient 0009  
