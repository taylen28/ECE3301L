

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Oct 28 18:12:14 2025

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	idataBANK1,global,class=CODE,delta=1
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    55                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    56                           	psect	text38,global,reloc=2,class=CODE,delta=1
    57                           	psect	text39,global,reloc=2,class=CODE,delta=1
    58                           	psect	text40,global,reloc=2,class=CODE,delta=1
    59                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    60                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    61  0000                     
    62                           	psect	idataCOMRAM
    63  001540                     __pidataCOMRAM:
    64                           	opt stack 0
    65                           
    66                           ;initializer for _RGB_LED
    67  001540  81                 	db	129
    68  001541  0F                 	db	15
    69  001542  80                 	db	128
    70  001543  0F                 	db	15
    71  001544  80                 	db	128
    72  001545  0F                 	db	15
    73                           
    74                           ;initializer for _off
    75  001546  03                 	db	3
    76  001547  00                 	db	0
    77  001548  03                 	db	3
    78                           
    79                           ;initializer for _portE_mask
    80  001549  07                 	db	7
    81                           
    82                           ;initializer for _wrap
    83  00154A  01                 	db	1
    84                           
    85                           ;initializer for _Timing_Txt
    86  00154B  53                 	db	83
    87  00154C  50                 	db	80
    88  00154D  32                 	db	50
    89  00154E  34                 	db	52
    90  00154F  2F                 	db	47
    91  001550  31                 	db	49
    92  001551  2F                 	db	47
    93  001552  30                 	db	48
    94  001553  31                 	db	49
    95  001554  00                 	db	0
    96                           
    97                           	psect	idataBANK0
    98  001382                     __pidataBANK0:
    99                           	opt stack 0
   100                           
   101                           ;initializer for _color
   102  001382  F800               	dw	63488
   103  001384  F800               	dw	63488
   104  001386  F800               	dw	63488
   105  001388  07FF               	dw	2047
   106  00138A  07FF               	dw	2047
   107  00138C  07E0               	dw	2016
   108  00138E  001F               	dw	31
   109  001390  001F               	dw	31
   110  001392  F81F               	dw	63519
   111  001394  0000               	dw	0
   112  001396  0000               	dw	0
   113  001398  0000               	dw	0
   114  00139A  0000               	dw	0
   115  00139C  0000               	dw	0
   116  00139E  0000               	dw	0
   117  0013A0  0000               	dw	0
   118  0013A2  0000               	dw	0
   119  0013A4  0000               	dw	0
   120  0013A6  0000               	dw	0
   121  0013A8  0000               	dw	0
   122  0013AA  0000               	dw	0
   123                           
   124                           ;initializer for _array1
   125  0013AC  A2                 	db	162
   126  0013AD  62                 	db	98
   127  0013AE  E2                 	db	226
   128  0013AF  22                 	db	34
   129  0013B0  02                 	db	2
   130  0013B1  C2                 	db	194
   131  0013B2  E0                 	db	224
   132  0013B3  A8                 	db	168
   133  0013B4  90                 	db	144
   134  0013B5  68                 	db	104
   135  0013B6  98                 	db	152
   136  0013B7  B0                 	db	176
   137  0013B8  30                 	db	48
   138  0013B9  18                 	db	24
   139  0013BA  7A                 	db	122
   140  0013BB  10                 	db	16
   141  0013BC  38                 	db	56
   142  0013BD  5A                 	db	90
   143  0013BE  42                 	db	66
   144  0013BF  4A                 	db	74
   145  0013C0  52                 	db	82
   146                           
   147                           	psect	idataBANK1
   148  000E60                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _color2
   152  000E60  0001               	dw	1
   153  000E62  0001               	dw	1
   154  000E64  0001               	dw	1
   155  000E66  0006               	dw	6
   156  000E68  0006               	dw	6
   157  000E6A  0002               	dw	2
   158  000E6C  0004               	dw	4
   159  000E6E  0004               	dw	4
   160  000E70  0005               	dw	5
   161  000E72  0007               	dw	7
   162  000E74  0007               	dw	7
   163  000E76  0007               	dw	7
   164  000E78  0007               	dw	7
   165  000E7A  0007               	dw	7
   166  000E7C  0007               	dw	7
   167  000E7E  0007               	dw	7
   168  000E80  0007               	dw	7
   169  000E82  0007               	dw	7
   170  000E84  0007               	dw	7
   171  000E86  0007               	dw	7
   172  000E88  0007               	dw	7
   173                           
   174                           ;initializer for _nums
   175  000E8A  0000               	dw	0
   176  000E8C  0000               	dw	0
   177  000E8E  0000               	dw	0
   178  000E90  0000               	dw	0
   179  000E92  0000               	dw	0
   180  000E94  0000               	dw	0
   181  000E96  0000               	dw	0
   182  000E98  0000               	dw	0
   183  000E9A  0000               	dw	0
   184  000E9C  0001               	dw	1
   185  000E9E  0000               	dw	0
   186  000EA0  0000               	dw	0
   187  000EA2  0001               	dw	1
   188  000EA4  0001               	dw	1
   189  000EA6  0001               	dw	1
   190  000EA8  0001               	dw	1
   191  000EAA  0001               	dw	1
   192  000EAC  0001               	dw	1
   193  000EAE  0001               	dw	1
   194  000EB0  0001               	dw	1
   195  000EB2  0001               	dw	1
   196                           
   197                           ;initializer for _txt1
   198  000EB4  43                 	db	67
   199  000EB5  48                 	db	72
   200  000EB6  2D                 	db	45
   201  000EB7  00                 	db	0
   202  000EB8  20                 	db	32
   203  000EB9  43                 	db	67
   204  000EBA  48                 	db	72
   205  000EBB  00                 	db	0
   206  000EBC  43                 	db	67
   207  000EBD  48                 	db	72
   208  000EBE  2B                 	db	43
   209  000EBF  00                 	db	0
   210  000EC0  50                 	db	80
   211  000EC1  52                 	db	82
   212  000EC2  56                 	db	86
   213  000EC3  00                 	db	0
   214  000EC4  4E                 	db	78
   215  000EC5  58                 	db	88
   216  000EC6  54                 	db	84
   217  000EC7  00                 	db	0
   218  000EC8  50                 	db	80
   219  000EC9  41                 	db	65
   220  000ECA  55                 	db	85
   221  000ECB  00                 	db	0
   222  000ECC  56                 	db	86
   223  000ECD  4C                 	db	76
   224  000ECE  2D                 	db	45
   225  000ECF  00                 	db	0
   226  000ED0  56                 	db	86
   227  000ED1  4C                 	db	76
   228  000ED2  2B                 	db	43
   229  000ED3  00                 	db	0
   230  000ED4  20                 	db	32
   231  000ED5  45                 	db	69
   232  000ED6  51                 	db	81
   233  000ED7  00                 	db	0
   234  000ED8  20                 	db	32
   235  000ED9  30                 	db	48
   236  000EDA  20                 	db	32
   237  000EDB  00                 	db	0
   238  000EDC  31                 	db	49
   239  000EDD  30                 	db	48
   240  000EDE  30                 	db	48
   241  000EDF  00                 	db	0
   242  000EE0  32                 	db	50
   243  000EE1  30                 	db	48
   244  000EE2  30                 	db	48
   245  000EE3  00                 	db	0
   246  000EE4  20                 	db	32
   247  000EE5  31                 	db	49
   248  000EE6  20                 	db	32
   249  000EE7  00                 	db	0
   250  000EE8  20                 	db	32
   251  000EE9  32                 	db	50
   252  000EEA  20                 	db	32
   253  000EEB  00                 	db	0
   254  000EEC  20                 	db	32
   255  000EED  33                 	db	51
   256  000EEE  20                 	db	32
   257  000EEF  00                 	db	0
   258  000EF0  20                 	db	32
   259  000EF1  34                 	db	52
   260  000EF2  20                 	db	32
   261  000EF3  00                 	db	0
   262  000EF4  20                 	db	32
   263  000EF5  35                 	db	53
   264  000EF6  20                 	db	32
   265  000EF7  00                 	db	0
   266  000EF8  20                 	db	32
   267  000EF9  36                 	db	54
   268  000EFA  20                 	db	32
   269  000EFB  00                 	db	0
   270  000EFC  20                 	db	32
   271  000EFD  37                 	db	55
   272  000EFE  20                 	db	32
   273  000EFF  00                 	db	0
   274  000F00  20                 	db	32
   275  000F01  38                 	db	56
   276  000F02  20                 	db	32
   277  000F03  00                 	db	0
   278  000F04  20                 	db	32
   279  000F05  39                 	db	57
   280  000F06  20                 	db	32
   281  000F07  00                 	db	0
   282                           
   283                           	psect	mediumconst
   284  00FDCE                     __pmediumconst:
   285                           	opt stack 0
   286  00FDCE  00                 	db	0
   287  00FDCF                     _font:
   288                           	opt stack 0
   289  00FDCF  00                 	db	0
   290  00FDD0  00                 	db	0
   291  00FDD1  00                 	db	0
   292  00FDD2  00                 	db	0
   293  00FDD3  00                 	db	0
   294  00FDD4  00                 	db	0
   295  00FDD5  00                 	db	0
   296  00FDD6  5F                 	db	95
   297  00FDD7  00                 	db	0
   298  00FDD8  00                 	db	0
   299  00FDD9  00                 	db	0
   300  00FDDA  07                 	db	7
   301  00FDDB  00                 	db	0
   302  00FDDC  07                 	db	7
   303  00FDDD  00                 	db	0
   304  00FDDE  14                 	db	20
   305  00FDDF  7F                 	db	127
   306  00FDE0  14                 	db	20
   307  00FDE1  7F                 	db	127
   308  00FDE2  14                 	db	20
   309  00FDE3  24                 	db	36
   310  00FDE4  2A                 	db	42
   311  00FDE5  7F                 	db	127
   312  00FDE6  2A                 	db	42
   313  00FDE7  12                 	db	18
   314  00FDE8  23                 	db	35
   315  00FDE9  13                 	db	19
   316  00FDEA  08                 	db	8
   317  00FDEB  64                 	db	100
   318  00FDEC  62                 	db	98
   319  00FDED  36                 	db	54
   320  00FDEE  49                 	db	73
   321  00FDEF  56                 	db	86
   322  00FDF0  20                 	db	32
   323  00FDF1  50                 	db	80
   324  00FDF2  00                 	db	0
   325  00FDF3  08                 	db	8
   326  00FDF4  07                 	db	7
   327  00FDF5  03                 	db	3
   328  00FDF6  00                 	db	0
   329  00FDF7  00                 	db	0
   330  00FDF8  1C                 	db	28
   331  00FDF9  22                 	db	34
   332  00FDFA  41                 	db	65
   333  00FDFB  00                 	db	0
   334  00FDFC  00                 	db	0
   335  00FDFD  41                 	db	65
   336  00FDFE  22                 	db	34
   337  00FDFF  1C                 	db	28
   338  00FE00  00                 	db	0
   339  00FE01  2A                 	db	42
   340  00FE02  1C                 	db	28
   341  00FE03  7F                 	db	127
   342  00FE04  1C                 	db	28
   343  00FE05  2A                 	db	42
   344  00FE06  08                 	db	8
   345  00FE07  08                 	db	8
   346  00FE08  3E                 	db	62
   347  00FE09  08                 	db	8
   348  00FE0A  08                 	db	8
   349  00FE0B  00                 	db	0
   350  00FE0C  80                 	db	128
   351  00FE0D  70                 	db	112
   352  00FE0E  30                 	db	48
   353  00FE0F  00                 	db	0
   354  00FE10  08                 	db	8
   355  00FE11  08                 	db	8
   356  00FE12  08                 	db	8
   357  00FE13  08                 	db	8
   358  00FE14  08                 	db	8
   359  00FE15  00                 	db	0
   360  00FE16  00                 	db	0
   361  00FE17  60                 	db	96
   362  00FE18  60                 	db	96
   363  00FE19  00                 	db	0
   364  00FE1A  20                 	db	32
   365  00FE1B  10                 	db	16
   366  00FE1C  08                 	db	8
   367  00FE1D  04                 	db	4
   368  00FE1E  02                 	db	2
   369  00FE1F  3E                 	db	62
   370  00FE20  51                 	db	81
   371  00FE21  49                 	db	73
   372  00FE22  45                 	db	69
   373  00FE23  3E                 	db	62
   374  00FE24  00                 	db	0
   375  00FE25  42                 	db	66
   376  00FE26  7F                 	db	127
   377  00FE27  40                 	db	64
   378  00FE28  00                 	db	0
   379  00FE29  72                 	db	114
   380  00FE2A  49                 	db	73
   381  00FE2B  49                 	db	73
   382  00FE2C  49                 	db	73
   383  00FE2D  46                 	db	70
   384  00FE2E  21                 	db	33
   385  00FE2F  41                 	db	65
   386  00FE30  49                 	db	73
   387  00FE31  4D                 	db	77
   388  00FE32  33                 	db	51
   389  00FE33  18                 	db	24
   390  00FE34  14                 	db	20
   391  00FE35  12                 	db	18
   392  00FE36  7F                 	db	127
   393  00FE37  10                 	db	16
   394  00FE38  27                 	db	39
   395  00FE39  45                 	db	69
   396  00FE3A  45                 	db	69
   397  00FE3B  45                 	db	69
   398  00FE3C  39                 	db	57
   399  00FE3D  3C                 	db	60
   400  00FE3E  4A                 	db	74
   401  00FE3F  49                 	db	73
   402  00FE40  49                 	db	73
   403  00FE41  31                 	db	49
   404  00FE42  41                 	db	65
   405  00FE43  21                 	db	33
   406  00FE44  11                 	db	17
   407  00FE45  09                 	db	9
   408  00FE46  07                 	db	7
   409  00FE47  36                 	db	54
   410  00FE48  49                 	db	73
   411  00FE49  49                 	db	73
   412  00FE4A  49                 	db	73
   413  00FE4B  36                 	db	54
   414  00FE4C  46                 	db	70
   415  00FE4D  49                 	db	73
   416  00FE4E  49                 	db	73
   417  00FE4F  29                 	db	41
   418  00FE50  1E                 	db	30
   419  00FE51  00                 	db	0
   420  00FE52  00                 	db	0
   421  00FE53  14                 	db	20
   422  00FE54  00                 	db	0
   423  00FE55  00                 	db	0
   424  00FE56  00                 	db	0
   425  00FE57  40                 	db	64
   426  00FE58  34                 	db	52
   427  00FE59  00                 	db	0
   428  00FE5A  00                 	db	0
   429  00FE5B  00                 	db	0
   430  00FE5C  08                 	db	8
   431  00FE5D  14                 	db	20
   432  00FE5E  22                 	db	34
   433  00FE5F  41                 	db	65
   434  00FE60  14                 	db	20
   435  00FE61  14                 	db	20
   436  00FE62  14                 	db	20
   437  00FE63  14                 	db	20
   438  00FE64  14                 	db	20
   439  00FE65  00                 	db	0
   440  00FE66  41                 	db	65
   441  00FE67  22                 	db	34
   442  00FE68  14                 	db	20
   443  00FE69  08                 	db	8
   444  00FE6A  02                 	db	2
   445  00FE6B  01                 	db	1
   446  00FE6C  59                 	db	89
   447  00FE6D  09                 	db	9
   448  00FE6E  06                 	db	6
   449  00FE6F  3E                 	db	62
   450  00FE70  41                 	db	65
   451  00FE71  5D                 	db	93
   452  00FE72  59                 	db	89
   453  00FE73  4E                 	db	78
   454  00FE74  7C                 	db	124
   455  00FE75  12                 	db	18
   456  00FE76  11                 	db	17
   457  00FE77  12                 	db	18
   458  00FE78  7C                 	db	124
   459  00FE79  7F                 	db	127
   460  00FE7A  49                 	db	73
   461  00FE7B  49                 	db	73
   462  00FE7C  49                 	db	73
   463  00FE7D  36                 	db	54
   464  00FE7E  3E                 	db	62
   465  00FE7F  41                 	db	65
   466  00FE80  41                 	db	65
   467  00FE81  41                 	db	65
   468  00FE82  22                 	db	34
   469  00FE83  7F                 	db	127
   470  00FE84  41                 	db	65
   471  00FE85  41                 	db	65
   472  00FE86  41                 	db	65
   473  00FE87  3E                 	db	62
   474  00FE88  7F                 	db	127
   475  00FE89  49                 	db	73
   476  00FE8A  49                 	db	73
   477  00FE8B  49                 	db	73
   478  00FE8C  41                 	db	65
   479  00FE8D  7F                 	db	127
   480  00FE8E  09                 	db	9
   481  00FE8F  09                 	db	9
   482  00FE90  09                 	db	9
   483  00FE91  01                 	db	1
   484  00FE92  3E                 	db	62
   485  00FE93  41                 	db	65
   486  00FE94  41                 	db	65
   487  00FE95  51                 	db	81
   488  00FE96  73                 	db	115
   489  00FE97  7F                 	db	127
   490  00FE98  08                 	db	8
   491  00FE99  08                 	db	8
   492  00FE9A  08                 	db	8
   493  00FE9B  7F                 	db	127
   494  00FE9C  00                 	db	0
   495  00FE9D  41                 	db	65
   496  00FE9E  7F                 	db	127
   497  00FE9F  41                 	db	65
   498  00FEA0  00                 	db	0
   499  00FEA1  20                 	db	32
   500  00FEA2  40                 	db	64
   501  00FEA3  41                 	db	65
   502  00FEA4  3F                 	db	63
   503  00FEA5  01                 	db	1
   504  00FEA6  7F                 	db	127
   505  00FEA7  08                 	db	8
   506  00FEA8  14                 	db	20
   507  00FEA9  22                 	db	34
   508  00FEAA  41                 	db	65
   509  00FEAB  7F                 	db	127
   510  00FEAC  40                 	db	64
   511  00FEAD  40                 	db	64
   512  00FEAE  40                 	db	64
   513  00FEAF  40                 	db	64
   514  00FEB0  7F                 	db	127
   515  00FEB1  02                 	db	2
   516  00FEB2  1C                 	db	28
   517  00FEB3  02                 	db	2
   518  00FEB4  7F                 	db	127
   519  00FEB5  7F                 	db	127
   520  00FEB6  04                 	db	4
   521  00FEB7  08                 	db	8
   522  00FEB8  10                 	db	16
   523  00FEB9  7F                 	db	127
   524  00FEBA  3E                 	db	62
   525  00FEBB  41                 	db	65
   526  00FEBC  41                 	db	65
   527  00FEBD  41                 	db	65
   528  00FEBE  3E                 	db	62
   529  00FEBF  7F                 	db	127
   530  00FEC0  09                 	db	9
   531  00FEC1  09                 	db	9
   532  00FEC2  09                 	db	9
   533  00FEC3  06                 	db	6
   534  00FEC4  3E                 	db	62
   535  00FEC5  41                 	db	65
   536  00FEC6  51                 	db	81
   537  00FEC7  21                 	db	33
   538  00FEC8  5E                 	db	94
   539  00FEC9  7F                 	db	127
   540  00FECA  09                 	db	9
   541  00FECB  19                 	db	25
   542  00FECC  29                 	db	41
   543  00FECD  46                 	db	70
   544  00FECE                     __end_of_font:
   545                           	opt stack 0
   546  00FECE                     _font2:
   547                           	opt stack 0
   548  00FECE  26                 	db	38
   549  00FECF  49                 	db	73
   550  00FED0  49                 	db	73
   551  00FED1  49                 	db	73
   552  00FED2  32                 	db	50
   553  00FED3  03                 	db	3
   554  00FED4  01                 	db	1
   555  00FED5  7F                 	db	127
   556  00FED6  01                 	db	1
   557  00FED7  03                 	db	3
   558  00FED8  3F                 	db	63
   559  00FED9  40                 	db	64
   560  00FEDA  40                 	db	64
   561  00FEDB  40                 	db	64
   562  00FEDC  3F                 	db	63
   563  00FEDD  1F                 	db	31
   564  00FEDE  20                 	db	32
   565  00FEDF  40                 	db	64
   566  00FEE0  20                 	db	32
   567  00FEE1  1F                 	db	31
   568  00FEE2  3F                 	db	63
   569  00FEE3  40                 	db	64
   570  00FEE4  38                 	db	56
   571  00FEE5  40                 	db	64
   572  00FEE6  3F                 	db	63
   573  00FEE7  63                 	db	99
   574  00FEE8  14                 	db	20
   575  00FEE9  08                 	db	8
   576  00FEEA  14                 	db	20
   577  00FEEB  63                 	db	99
   578  00FEEC  03                 	db	3
   579  00FEED  04                 	db	4
   580  00FEEE  78                 	db	120
   581  00FEEF  04                 	db	4
   582  00FEF0  03                 	db	3
   583  00FEF1  61                 	db	97
   584  00FEF2  59                 	db	89
   585  00FEF3  49                 	db	73
   586  00FEF4  4D                 	db	77
   587  00FEF5  43                 	db	67
   588  00FEF6  00                 	db	0
   589  00FEF7  7F                 	db	127
   590  00FEF8  41                 	db	65
   591  00FEF9  41                 	db	65
   592  00FEFA  41                 	db	65
   593  00FEFB  02                 	db	2
   594  00FEFC  04                 	db	4
   595  00FEFD  08                 	db	8
   596  00FEFE  10                 	db	16
   597  00FEFF  20                 	db	32
   598  00FF00  00                 	db	0
   599  00FF01  41                 	db	65
   600  00FF02  41                 	db	65
   601  00FF03  41                 	db	65
   602  00FF04  7F                 	db	127
   603  00FF05  04                 	db	4
   604  00FF06  02                 	db	2
   605  00FF07  01                 	db	1
   606  00FF08  02                 	db	2
   607  00FF09  04                 	db	4
   608  00FF0A  40                 	db	64
   609  00FF0B  40                 	db	64
   610  00FF0C  40                 	db	64
   611  00FF0D  40                 	db	64
   612  00FF0E  40                 	db	64
   613  00FF0F  00                 	db	0
   614  00FF10  03                 	db	3
   615  00FF11  07                 	db	7
   616  00FF12  08                 	db	8
   617  00FF13  00                 	db	0
   618  00FF14  20                 	db	32
   619  00FF15  54                 	db	84
   620  00FF16  54                 	db	84
   621  00FF17  78                 	db	120
   622  00FF18  40                 	db	64
   623  00FF19  7F                 	db	127
   624  00FF1A  28                 	db	40
   625  00FF1B  44                 	db	68
   626  00FF1C  44                 	db	68
   627  00FF1D  38                 	db	56
   628  00FF1E  38                 	db	56
   629  00FF1F  44                 	db	68
   630  00FF20  44                 	db	68
   631  00FF21  44                 	db	68
   632  00FF22  28                 	db	40
   633  00FF23  38                 	db	56
   634  00FF24  44                 	db	68
   635  00FF25  44                 	db	68
   636  00FF26  28                 	db	40
   637  00FF27  7F                 	db	127
   638  00FF28  38                 	db	56
   639  00FF29  54                 	db	84
   640  00FF2A  54                 	db	84
   641  00FF2B  54                 	db	84
   642  00FF2C  18                 	db	24
   643  00FF2D  00                 	db	0
   644  00FF2E  08                 	db	8
   645  00FF2F  7E                 	db	126
   646  00FF30  09                 	db	9
   647  00FF31  02                 	db	2
   648  00FF32  18                 	db	24
   649  00FF33  A4                 	db	164
   650  00FF34  A4                 	db	164
   651  00FF35  9C                 	db	156
   652  00FF36  78                 	db	120
   653  00FF37  7F                 	db	127
   654  00FF38  08                 	db	8
   655  00FF39  04                 	db	4
   656  00FF3A  04                 	db	4
   657  00FF3B  78                 	db	120
   658  00FF3C  00                 	db	0
   659  00FF3D  44                 	db	68
   660  00FF3E  7D                 	db	125
   661  00FF3F  40                 	db	64
   662  00FF40  00                 	db	0
   663  00FF41  20                 	db	32
   664  00FF42  40                 	db	64
   665  00FF43  40                 	db	64
   666  00FF44  3D                 	db	61
   667  00FF45  00                 	db	0
   668  00FF46  7F                 	db	127
   669  00FF47  10                 	db	16
   670  00FF48  28                 	db	40
   671  00FF49  44                 	db	68
   672  00FF4A  00                 	db	0
   673  00FF4B  00                 	db	0
   674  00FF4C  41                 	db	65
   675  00FF4D  7F                 	db	127
   676  00FF4E  40                 	db	64
   677  00FF4F  00                 	db	0
   678  00FF50  7C                 	db	124
   679  00FF51  04                 	db	4
   680  00FF52  78                 	db	120
   681  00FF53  04                 	db	4
   682  00FF54  78                 	db	120
   683  00FF55  7C                 	db	124
   684  00FF56  08                 	db	8
   685  00FF57  04                 	db	4
   686  00FF58  04                 	db	4
   687  00FF59  78                 	db	120
   688  00FF5A  38                 	db	56
   689  00FF5B  44                 	db	68
   690  00FF5C  44                 	db	68
   691  00FF5D  44                 	db	68
   692  00FF5E  38                 	db	56
   693  00FF5F  FC                 	db	252
   694  00FF60  18                 	db	24
   695  00FF61  24                 	db	36
   696  00FF62  24                 	db	36
   697  00FF63  18                 	db	24
   698  00FF64  18                 	db	24
   699  00FF65  24                 	db	36
   700  00FF66  24                 	db	36
   701  00FF67  18                 	db	24
   702  00FF68  FC                 	db	252
   703  00FF69  7C                 	db	124
   704  00FF6A  08                 	db	8
   705  00FF6B  04                 	db	4
   706  00FF6C  04                 	db	4
   707  00FF6D  08                 	db	8
   708  00FF6E  48                 	db	72
   709  00FF6F  54                 	db	84
   710  00FF70  54                 	db	84
   711  00FF71  54                 	db	84
   712  00FF72  24                 	db	36
   713  00FF73  04                 	db	4
   714  00FF74  04                 	db	4
   715  00FF75  3F                 	db	63
   716  00FF76  44                 	db	68
   717  00FF77  24                 	db	36
   718  00FF78  3C                 	db	60
   719  00FF79  40                 	db	64
   720  00FF7A  40                 	db	64
   721  00FF7B  20                 	db	32
   722  00FF7C  7C                 	db	124
   723  00FF7D  1C                 	db	28
   724  00FF7E  20                 	db	32
   725  00FF7F  40                 	db	64
   726  00FF80  20                 	db	32
   727  00FF81  1C                 	db	28
   728  00FF82  3C                 	db	60
   729  00FF83  40                 	db	64
   730  00FF84  30                 	db	48
   731  00FF85  40                 	db	64
   732  00FF86  3C                 	db	60
   733  00FF87  44                 	db	68
   734  00FF88  28                 	db	40
   735  00FF89  10                 	db	16
   736  00FF8A  28                 	db	40
   737  00FF8B  44                 	db	68
   738  00FF8C  4C                 	db	76
   739  00FF8D  90                 	db	144
   740  00FF8E  90                 	db	144
   741  00FF8F  90                 	db	144
   742  00FF90  7C                 	db	124
   743  00FF91  44                 	db	68
   744  00FF92  64                 	db	100
   745  00FF93  54                 	db	84
   746  00FF94  4C                 	db	76
   747  00FF95  44                 	db	68
   748  00FF96  00                 	db	0
   749  00FF97  08                 	db	8
   750  00FF98  36                 	db	54
   751  00FF99  41                 	db	65
   752  00FF9A  00                 	db	0
   753  00FF9B  00                 	db	0
   754  00FF9C  00                 	db	0
   755  00FF9D  77                 	db	119
   756  00FF9E  00                 	db	0
   757  00FF9F  00                 	db	0
   758  00FFA0  00                 	db	0
   759  00FFA1  41                 	db	65
   760  00FFA2  36                 	db	54
   761  00FFA3  08                 	db	8
   762  00FFA4  00                 	db	0
   763  00FFA5  02                 	db	2
   764  00FFA6  01                 	db	1
   765  00FFA7  02                 	db	2
   766  00FFA8  04                 	db	4
   767  00FFA9  02                 	db	2
   768  00FFAA                     __end_of_font2:
   769                           	opt stack 0
   770  00FFAA                     _dpowers:
   771                           	opt stack 0
   772  00FFAA  0001               	dw	1
   773  00FFAC  000A               	dw	10
   774  00FFAE  0064               	dw	100
   775  00FFB0  03E8               	dw	1000
   776  00FFB2  2710               	dw	10000
   777  00FFB4                     __end_of_dpowers:
   778                           	opt stack 0
   779  00FFB4                     _hexpowers:
   780                           	opt stack 0
   781  00FFB4  0001               	dw	1
   782  00FFB6  0010               	dw	16
   783  00FFB8  0100               	dw	256
   784  00FFBA  1000               	dw	4096
   785  00FFBC                     __end_of_hexpowers:
   786                           	opt stack 0
   787  0000                     _ADCON0	set	4034
   788  0000                     _ADCON0bits	set	4034
   789  0000                     _ADCON1	set	4033
   790  0000                     _ADCON2	set	4032
   791  0000                     _ADRESH	set	4036
   792  0000                     _ADRESL	set	4035
   793  0000                     _CCP2CON	set	4026
   794  0000                     _CCPR2L	set	4027
   795  0000                     _INTCON2bits	set	4081
   796  0000                     _INTCONbits	set	4082
   797  0000                     _OSCCON	set	4051
   798  0000                     _PIE1bits	set	3997
   799  0000                     _PIR1bits	set	3998
   800  0000                     _PIR2bits	set	4001
   801  0000                     _PORTC	set	3970
   802  0000                     _PORTCbits	set	3970
   803  0000                     _PORTDbits	set	3971
   804  0000                     _PORTE	set	3972
   805  0000                     _PR2	set	4043
   806  0000                     _RCSTA	set	4011
   807  0000                     _RCSTAbits	set	4011
   808  0000                     _SPBRG	set	4015
   809  0000                     _SPBRGH	set	4016
   810  0000                     _SSPBUF	set	4041
   811  0000                     _SSPCON1	set	4038
   812  0000                     _SSPSTAT	set	4039
   813  0000                     _SSPSTATbits	set	4039
   814  0000                     _T0CON	set	4053
   815  0000                     _T0CONbits	set	4053
   816  0000                     _T1CON	set	4045
   817  0000                     _T1CONbits	set	4045
   818  0000                     _T2CON	set	4042
   819  0000                     _T3CON	set	4017
   820  0000                     _T3CONbits	set	4017
   821  0000                     _TMR0H	set	4055
   822  0000                     _TMR0L	set	4054
   823  0000                     _TMR1H	set	4047
   824  0000                     _TMR1L	set	4046
   825  0000                     _TRISA	set	3986
   826  0000                     _TRISB	set	3987
   827  0000                     _TRISC	set	3988
   828  0000                     _TRISCbits	set	3988
   829  0000                     _TRISD	set	3989
   830  0000                     _TRISE	set	3990
   831  0000                     _TXREG	set	4013
   832  0000                     _TXSTA	set	4012
   833  0000                     _TXSTAbits	set	4012
   834  0000                     _PORTA	set	3968
   835  0000                     _PORTB	set	3969
   836  0000                     _INT0IE	set	32660
   837  0000                     _TRMT	set	32097
   838  0000                     _nRBPU	set	32655
   839  00FFBC                     STR_3:
   840  00FFBC  4B                 	db	75	;'K'
   841  00FFBD  65                 	db	101	;'e'
   842  00FFBE  79                 	db	121	;'y'
   843  00FFBF  20                 	db	32
   844  00FFC0  4C                 	db	76	;'L'
   845  00FFC1  6F                 	db	111	;'o'
   846  00FFC2  63                 	db	99	;'c'
   847  00FFC3  61                 	db	97	;'a'
   848  00FFC4  74                 	db	116	;'t'
   849  00FFC5  69                 	db	105	;'i'
   850  00FFC6  6F                 	db	111	;'o'
   851  00FFC7  6E                 	db	110	;'n'
   852  00FFC8  20                 	db	32
   853  00FFC9  3D                 	db	61	;'='
   854  00FFCA  20                 	db	32
   855  00FFCB  25                 	db	37
   856  00FFCC  64                 	db	100	;'d'
   857  00FFCD  20                 	db	32
   858  00FFCE  0D                 	db	13
   859  00FFCF  0A                 	db	10
   860  00FFD0  0A                 	db	10
   861  00FFD1  00                 	db	0
   862  00FFD2                     STR_2:
   863  00FFD2  4E                 	db	78	;'N'
   864  00FFD3  45                 	db	69	;'E'
   865  00FFD4  43                 	db	67	;'C'
   866  00FFD5  5F                 	db	95	;'_'
   867  00FFD6  42                 	db	66	;'B'
   868  00FFD7  75                 	db	117	;'u'
   869  00FFD8  74                 	db	116	;'t'
   870  00FFD9  74                 	db	116	;'t'
   871  00FFDA  6F                 	db	111	;'o'
   872  00FFDB  6E                 	db	110	;'n'
   873  00FFDC  20                 	db	32
   874  00FFDD  3D                 	db	61	;'='
   875  00FFDE  20                 	db	32
   876  00FFDF  25                 	db	37
   877  00FFE0  78                 	db	120	;'x'
   878  00FFE1  20                 	db	32
   879  00FFE2  0D                 	db	13
   880  00FFE3  0A                 	db	10
   881  00FFE4  00                 	db	0
   882  00FFE5                     STR_4:
   883  00FFE5  30                 	db	48	;'0'
   884  00FFE6  31                 	db	49	;'1'
   885  00FFE7  32                 	db	50	;'2'
   886  00FFE8  33                 	db	51	;'3'
   887  00FFE9  34                 	db	52	;'4'
   888  00FFEA  35                 	db	53	;'5'
   889  00FFEB  36                 	db	54	;'6'
   890  00FFEC  37                 	db	55	;'7'
   891  00FFED  38                 	db	56	;'8'
   892  00FFEE  39                 	db	57	;'9'
   893  00FFEF  61                 	db	97	;'a'
   894  00FFF0  62                 	db	98	;'b'
   895  00FFF1  63                 	db	99	;'c'
   896  00FFF2  64                 	db	100	;'d'
   897  00FFF3  65                 	db	101	;'e'
   898  00FFF4  66                 	db	102	;'f'
   899  00FFF5  00                 	db	0
   900  00FFF6                     STR_1:
   901  00FFF6  4C                 	db	76	;'L'
   902  00FFF7  41                 	db	65	;'A'
   903  00FFF8  42                 	db	66	;'B'
   904  00FFF9  20                 	db	32
   905  00FFFA  31                 	db	49	;'1'
   906  00FFFB  30                 	db	48	;'0'
   907  00FFFC  20                 	db	32
   908  00FFFD  00                 	db	0
   909                           
   910                           ; #config settings
   911  00FFFE  00                 	db	0	; dummy byte at the end
   912  0000                     
   913                           	psect	cinit
   914  001030                     __pcinit:
   915                           	opt stack 0
   916  001030                     start_initialization:
   917                           	opt stack 0
   918  001030                     __initialization:
   919                           	opt stack 0
   920                           
   921                           ; Clear objects allocated to BANK0 (31 bytes)
   922  001030  EE00  F0BF         	lfsr	0,__pbssBANK0
   923  001034  0E1F               	movlw	31
   924  001036                     clear_0:
   925  001036  6AEE               	clrf	postinc0,c
   926  001038  06E8               	decf	wreg,f,c
   927  00103A  E1FD               	bnz	clear_0
   928                           
   929                           ; Clear objects allocated to COMRAM (18 bytes)
   930  00103C  EE00  F05C         	lfsr	0,__pbssCOMRAM
   931  001040  0E12               	movlw	18
   932  001042                     clear_1:
   933  001042  6AEE               	clrf	postinc0,c
   934  001044  06E8               	decf	wreg,f,c
   935  001046  E1FD               	bnz	clear_1
   936                           
   937                           ; Initialize objects allocated to BANK1 (168 bytes)
   938                           ; load TBLPTR registers with __pidataBANK1
   939  001048  0E60               	movlw	low __pidataBANK1
   940  00104A  6EF6               	movwf	tblptrl,c
   941  00104C  0E0E               	movlw	high __pidataBANK1
   942  00104E  6EF7               	movwf	tblptrh,c
   943  001050  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   944  001052  6EF8               	movwf	tblptru,c
   945  001054  EE01  F000         	lfsr	0,__pdataBANK1
   946  001058  EE10 F0A8          	lfsr	1,168
   947  00105C                     copy_data0:
   948  00105C  0009               	tblrd		*+
   949  00105E  CFF5 FFEE          	movff	tablat,postinc0
   950  001062  50E5               	movf	postdec1,w,c
   951  001064  50E1               	movf	fsr1l,w,c
   952  001066  E1FA               	bnz	copy_data0
   953                           
   954                           ; Initialize objects allocated to BANK0 (63 bytes)
   955                           ; load TBLPTR registers with __pidataBANK0
   956  001068  0E82               	movlw	low __pidataBANK0
   957  00106A  6EF6               	movwf	tblptrl,c
   958  00106C  0E13               	movlw	high __pidataBANK0
   959  00106E  6EF7               	movwf	tblptrh,c
   960  001070  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   961  001072  6EF8               	movwf	tblptru,c
   962  001074  EE00  F080         	lfsr	0,__pdataBANK0
   963  001078  EE10 F03F          	lfsr	1,63
   964  00107C                     copy_data1:
   965  00107C  0009               	tblrd		*+
   966  00107E  CFF5 FFEE          	movff	tablat,postinc0
   967  001082  50E5               	movf	postdec1,w,c
   968  001084  50E1               	movf	fsr1l,w,c
   969  001086  E1FA               	bnz	copy_data1
   970                           
   971                           ; Initialize objects allocated to COMRAM (21 bytes)
   972                           ; load TBLPTR registers with __pidataCOMRAM
   973  001088  0E40               	movlw	low __pidataCOMRAM
   974  00108A  6EF6               	movwf	tblptrl,c
   975  00108C  0E15               	movlw	high __pidataCOMRAM
   976  00108E  6EF7               	movwf	tblptrh,c
   977  001090  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   978  001092  6EF8               	movwf	tblptru,c
   979  001094  EE00  F047         	lfsr	0,__pdataCOMRAM
   980  001098  EE10 F015          	lfsr	1,21
   981  00109C                     copy_data2:
   982  00109C  0009               	tblrd		*+
   983  00109E  CFF5 FFEE          	movff	tablat,postinc0
   984  0010A2  50E5               	movf	postdec1,w,c
   985  0010A4  50E1               	movf	fsr1l,w,c
   986  0010A6  E1FA               	bnz	copy_data2
   987  0010A8                     end_of_initialization:
   988                           	opt stack 0
   989  0010A8                     __end_of__initialization:
   990                           	opt stack 0
   991  0010A8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   992  0010AA  6EF8               	movwf	tblptru,c
   993  0010AC  0100               	movlb	0
   994  0010AE  EF0E  F000         	goto	_main	;jump to C main() function
   995                           tblptru	equ	0xFF8
   996                           tblptrh	equ	0xFF7
   997                           tblptrl	equ	0xFF6
   998                           tablat	equ	0xFF5
   999                           postinc0	equ	0xFEE
  1000                           wreg	equ	0xFE8
  1001                           postdec1	equ	0xFE5
  1002                           fsr1l	equ	0xFE1
  1003                           
  1004                           	psect	bssCOMRAM
  1005  00005C                     __pbssCOMRAM:
  1006                           	opt stack 0
  1007  00005C                     _Nec_code:
  1008                           	opt stack 0
  1009  00005C                     	ds	4
  1010  000060                     _Nec_OK:
  1011                           	opt stack 0
  1012  000060                     	ds	2
  1013  000062                     _Time_Elapsed:
  1014                           	opt stack 0
  1015  000062                     	ds	2
  1016  000064                     _nbr:
  1017                           	opt stack 0
  1018  000064                     	ds	2
  1019  000066                     _txt:
  1020                           	opt stack 0
  1021  000066                     	ds	2
  1022  000068                     _Nec_Button:
  1023                           	opt stack 0
  1024  000068                     	ds	1
  1025  000069                     _Nec_State:
  1026                           	opt stack 0
  1027  000069                     	ds	1
  1028  00006A                     __tft_type:
  1029                           	opt stack 0
  1030  00006A                     	ds	1
  1031  00006B                     _bit_count:
  1032                           	opt stack 0
  1033  00006B                     	ds	1
  1034  00006C                     _colstart:
  1035                           	opt stack 0
  1036  00006C                     	ds	1
  1037  00006D                     _rowstart:
  1038                           	opt stack 0
  1039  00006D                     	ds	1
  1040                           tblptru	equ	0xFF8
  1041                           tblptrh	equ	0xFF7
  1042                           tblptrl	equ	0xFF6
  1043                           tablat	equ	0xFF5
  1044                           postinc0	equ	0xFEE
  1045                           wreg	equ	0xFE8
  1046                           postdec1	equ	0xFE5
  1047                           fsr1l	equ	0xFE1
  1048                           
  1049                           	psect	dataCOMRAM
  1050  000047                     __pdataCOMRAM:
  1051                           	opt stack 0
  1052  000047                     _RGB_LED:
  1053                           	opt stack 0
  1054  000047                     	ds	6
  1055  00004D                     _off:
  1056                           	opt stack 0
  1057  00004D                     	ds	3
  1058  000050                     _portE_mask:
  1059                           	opt stack 0
  1060  000050                     	ds	1
  1061  000051                     _wrap:
  1062                           	opt stack 0
  1063  000051                     	ds	1
  1064  000052                     _Timing_Txt:
  1065                           	opt stack 0
  1066  000052                     	ds	10
  1067                           tblptru	equ	0xFF8
  1068                           tblptrh	equ	0xFF7
  1069                           tblptrl	equ	0xFF6
  1070                           tablat	equ	0xFF5
  1071                           postinc0	equ	0xFEE
  1072                           wreg	equ	0xFE8
  1073                           postdec1	equ	0xFE5
  1074                           fsr1l	equ	0xFE1
  1075                           
  1076                           	psect	bssBANK0
  1077  0000BF                     __pbssBANK0:
  1078                           	opt stack 0
  1079  0000BF                     _buffer:
  1080                           	opt stack 0
  1081  0000BF                     	ds	31
  1082                           tblptru	equ	0xFF8
  1083                           tblptrh	equ	0xFF7
  1084                           tblptrl	equ	0xFF6
  1085                           tablat	equ	0xFF5
  1086                           postinc0	equ	0xFEE
  1087                           wreg	equ	0xFE8
  1088                           postdec1	equ	0xFE5
  1089                           fsr1l	equ	0xFE1
  1090                           
  1091                           	psect	dataBANK0
  1092  000080                     __pdataBANK0:
  1093                           	opt stack 0
  1094  000080                     _color:
  1095                           	opt stack 0
  1096  000080                     	ds	42
  1097  0000AA                     _array1:
  1098                           	opt stack 0
  1099  0000AA                     	ds	21
  1100                           tblptru	equ	0xFF8
  1101                           tblptrh	equ	0xFF7
  1102                           tblptrl	equ	0xFF6
  1103                           tablat	equ	0xFF5
  1104                           postinc0	equ	0xFEE
  1105                           wreg	equ	0xFE8
  1106                           postdec1	equ	0xFE5
  1107                           fsr1l	equ	0xFE1
  1108                           
  1109                           	psect	dataBANK1
  1110  000100                     __pdataBANK1:
  1111                           	opt stack 0
  1112  000100                     _color2:
  1113                           	opt stack 0
  1114  000100                     	ds	42
  1115  00012A                     _nums:
  1116                           	opt stack 0
  1117  00012A                     	ds	42
  1118  000154                     _txt1:
  1119                           	opt stack 0
  1120  000154                     	ds	84
  1121                           tblptru	equ	0xFF8
  1122                           tblptrh	equ	0xFF7
  1123                           tblptrl	equ	0xFF6
  1124                           tablat	equ	0xFF5
  1125                           postinc0	equ	0xFEE
  1126                           wreg	equ	0xFE8
  1127                           postdec1	equ	0xFE5
  1128                           fsr1l	equ	0xFE1
  1129                           
  1130                           	psect	cstackBANK0
  1131  0000DE                     __pcstackBANK0:
  1132                           	opt stack 0
  1133  0000DE                     drawtext@x:
  1134                           	opt stack 0
  1135                           
  1136                           ; 1 bytes @ 0x0
  1137  0000DE                     	ds	1
  1138  0000DF                     drawtext@textsize:
  1139                           	opt stack 0
  1140                           
  1141                           ; 2 bytes @ 0x1
  1142  0000DF                     	ds	2
  1143  0000E1                     drawtext@i:
  1144                           	opt stack 0
  1145                           
  1146                           ; 2 bytes @ 0x3
  1147  0000E1                     	ds	2
  1148  0000E3                     drawtext@cursor_y:
  1149                           	opt stack 0
  1150                           
  1151                           ; 1 bytes @ 0x5
  1152  0000E3                     	ds	1
  1153  0000E4                     drawtext@cursor_x:
  1154                           	opt stack 0
  1155                           
  1156                           ; 1 bytes @ 0x6
  1157  0000E4                     	ds	1
  1158  0000E5                     ??_main:
  1159                           
  1160                           ; 0 bytes @ 0x7
  1161  0000E5                     	ds	9
  1162                           tblptru	equ	0xFF8
  1163                           tblptrh	equ	0xFF7
  1164                           tblptrl	equ	0xFF6
  1165                           tablat	equ	0xFF5
  1166                           postinc0	equ	0xFEE
  1167                           wreg	equ	0xFE8
  1168                           postdec1	equ	0xFE5
  1169                           fsr1l	equ	0xFE1
  1170                           
  1171                           	psect	cstackCOMRAM
  1172  000001                     __pcstackCOMRAM:
  1173                           	opt stack 0
  1174  000001                     ??_INTx_isr:
  1175  000001                     
  1176                           ; 0 bytes @ 0x0
  1177  000001                     	ds	2
  1178  000003                     ??_chkisr:
  1179                           
  1180                           ; 0 bytes @ 0x2
  1181  000003                     	ds	14
  1182  000011                     ?_strlen:
  1183                           	opt stack 0
  1184  000011                     ?___wmul:
  1185                           	opt stack 0
  1186  000011                     ?___lwdiv:
  1187                           	opt stack 0
  1188  000011                     spiwrite@x:
  1189                           	opt stack 0
  1190  000011                     putch@c:
  1191                           	opt stack 0
  1192  000011                     OpenUSART@spbrg:
  1193                           	opt stack 0
  1194  000011                     ___wmul@multiplier:
  1195                           	opt stack 0
  1196  000011                     ___lwdiv@dividend:
  1197                           	opt stack 0
  1198  000011                     strcpy@to:
  1199                           	opt stack 0
  1200  000011                     strlen@s:
  1201                           	opt stack 0
  1202                           
  1203                           ; 2 bytes @ 0x10
  1204  000011                     	ds	1
  1205  000012                     spiwrite@spidata:
  1206                           	opt stack 0
  1207                           
  1208                           ; 1 bytes @ 0x11
  1209  000012                     	ds	1
  1210  000013                     ??_strlen:
  1211  000013                     write_command@cmd_:
  1212                           	opt stack 0
  1213  000013                     write_data@data_:
  1214                           	opt stack 0
  1215  000013                     OpenUSART@config:
  1216                           	opt stack 0
  1217  000013                     ___wmul@multiplicand:
  1218                           	opt stack 0
  1219  000013                     ___lwdiv@divisor:
  1220                           	opt stack 0
  1221  000013                     strcpy@from:
  1222                           	opt stack 0
  1223                           
  1224                           ; 2 bytes @ 0x12
  1225  000013                     	ds	1
  1226  000014                     setAddrWindow@y0:
  1227                           	opt stack 0
  1228                           
  1229                           ; 1 bytes @ 0x13
  1230  000014                     	ds	1
  1231  000015                     setAddrWindow@x1:
  1232                           	opt stack 0
  1233  000015                     ___wmul@product:
  1234                           	opt stack 0
  1235  000015                     ___lwdiv@quotient:
  1236                           	opt stack 0
  1237  000015                     strcpy@cp:
  1238                           	opt stack 0
  1239  000015                     strlen@cp:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x14
  1243  000015                     	ds	1
  1244  000016                     setAddrWindow@y1:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x15
  1248  000016                     	ds	1
  1249  000017                     setAddrWindow@x0:
  1250                           	opt stack 0
  1251  000017                     ___lwdiv@counter:
  1252                           	opt stack 0
  1253  000017                     delay_ms@ms:
  1254                           	opt stack 0
  1255                           
  1256                           ; 2 bytes @ 0x16
  1257  000017                     	ds	1
  1258  000018                     ?___lwmod:
  1259                           	opt stack 0
  1260  000018                     drawPixel@y:
  1261                           	opt stack 0
  1262  000018                     drawFastVLine@y:
  1263                           	opt stack 0
  1264  000018                     fillRectangle@y:
  1265                           	opt stack 0
  1266  000018                     ___lwmod@dividend:
  1267                           	opt stack 0
  1268                           
  1269                           ; 2 bytes @ 0x17
  1270  000018                     	ds	1
  1271  000019                     ??_delay_ms:
  1272  000019                     drawFastVLine@h:
  1273                           	opt stack 0
  1274  000019                     fillRectangle@w:
  1275                           	opt stack 0
  1276  000019                     drawPixel@color:
  1277                           	opt stack 0
  1278                           
  1279                           ; 2 bytes @ 0x18
  1280  000019                     	ds	1
  1281  00001A                     fillRectangle@h:
  1282                           	opt stack 0
  1283  00001A                     drawFastVLine@color:
  1284                           	opt stack 0
  1285  00001A                     ___lwmod@divisor:
  1286                           	opt stack 0
  1287                           
  1288                           ; 2 bytes @ 0x19
  1289  00001A                     	ds	1
  1290  00001B                     drawPixel@x:
  1291                           	opt stack 0
  1292  00001B                     delay_ms@count:
  1293                           	opt stack 0
  1294  00001B                     fillRectangle@color:
  1295                           	opt stack 0
  1296                           
  1297                           ; 2 bytes @ 0x1A
  1298  00001B                     	ds	1
  1299  00001C                     ??_drawFastVLine:
  1300  00001C                     ___lwmod@counter:
  1301                           	opt stack 0
  1302  00001C                     drawCircle@x0:
  1303                           	opt stack 0
  1304                           
  1305                           ; 2 bytes @ 0x1B
  1306  00001C                     	ds	1
  1307  00001D                     ??_fillRectangle:
  1308  00001D                     ?_printf:
  1309                           	opt stack 0
  1310  00001D                     printf@f:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x1C
  1314  00001D                     	ds	1
  1315  00001E                     drawCircle@y0:
  1316                           	opt stack 0
  1317                           
  1318                           ; 2 bytes @ 0x1D
  1319  00001E                     	ds	2
  1320  000020                     drawFastVLine@hi:
  1321                           	opt stack 0
  1322  000020                     drawCircle@r:
  1323                           	opt stack 0
  1324                           
  1325                           ; 2 bytes @ 0x1F
  1326  000020                     	ds	1
  1327  000021                     ??_printf:
  1328  000021                     drawFastVLine@lo:
  1329                           	opt stack 0
  1330  000021                     fillRectangle@hi:
  1331                           	opt stack 0
  1332                           
  1333                           ; 1 bytes @ 0x20
  1334  000021                     	ds	1
  1335  000022                     drawFastVLine@x:
  1336                           	opt stack 0
  1337  000022                     fillRectangle@lo:
  1338                           	opt stack 0
  1339  000022                     printf@idx:
  1340                           	opt stack 0
  1341  000022                     drawCircle@color:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x21
  1345  000022                     	ds	1
  1346  000023                     fillRect@y:
  1347                           	opt stack 0
  1348  000023                     fillRectangle@x:
  1349                           	opt stack 0
  1350  000023                     fillCircleHelper@x0:
  1351                           	opt stack 0
  1352  000023                     printf@ap:
  1353                           	opt stack 0
  1354                           
  1355                           ; 2 bytes @ 0x22
  1356  000023                     	ds	1
  1357  000024                     ??_drawCircle:
  1358  000024                     fillRect@w:
  1359                           	opt stack 0
  1360  000024                     fillScreen@color:
  1361                           	opt stack 0
  1362                           
  1363                           ; 2 bytes @ 0x23
  1364  000024                     	ds	1
  1365  000025                     fillRect@h:
  1366                           	opt stack 0
  1367  000025                     printf@prec:
  1368                           	opt stack 0
  1369  000025                     fillCircleHelper@y0:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x24
  1373  000025                     	ds	1
  1374  000026                     printf@flag:
  1375                           	opt stack 0
  1376  000026                     fillRect@color:
  1377                           	opt stack 0
  1378  000026                     drawCircle@ddF_x:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x25
  1382  000026                     	ds	1
  1383  000027                     fillCircleHelper@r:
  1384                           	opt stack 0
  1385  000027                     printf@val:
  1386                           	opt stack 0
  1387                           
  1388                           ; 2 bytes @ 0x26
  1389  000027                     	ds	1
  1390  000028                     ??_fillRect:
  1391  000028                     drawCircle@ddF_y:
  1392                           	opt stack 0
  1393                           
  1394                           ; 2 bytes @ 0x27
  1395  000028                     	ds	1
  1396  000029                     printf@c:
  1397                           	opt stack 0
  1398  000029                     fillCircleHelper@cornername:
  1399                           	opt stack 0
  1400                           
  1401                           ; 2 bytes @ 0x28
  1402  000029                     	ds	1
  1403  00002A                     drawCircle@f:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x29
  1407  00002A                     	ds	1
  1408  00002B                     fillRect@x:
  1409                           	opt stack 0
  1410  00002B                     fillCircleHelper@delta:
  1411                           	opt stack 0
  1412                           
  1413                           ; 2 bytes @ 0x2A
  1414  00002B                     	ds	1
  1415  00002C                     fillRect@i:
  1416                           	opt stack 0
  1417  00002C                     drawCircle@x:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x2B
  1421  00002C                     	ds	1
  1422  00002D                     fillCircleHelper@color:
  1423                           	opt stack 0
  1424                           
  1425                           ; 2 bytes @ 0x2C
  1426  00002D                     	ds	1
  1427  00002E                     drawChar@y:
  1428                           	opt stack 0
  1429  00002E                     drawCircle@y:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x2D
  1433  00002E                     	ds	1
  1434  00002F                     ??_fillCircleHelper:
  1435  00002F                     drawChar@c:
  1436                           	opt stack 0
  1437                           
  1438                           ; 1 bytes @ 0x2E
  1439  00002F                     	ds	1
  1440  000030                     drawChar@color:
  1441                           	opt stack 0
  1442                           
  1443                           ; 2 bytes @ 0x2F
  1444  000030                     	ds	1
  1445  000031                     fillCircleHelper@ddF_x:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x30
  1449  000031                     	ds	1
  1450  000032                     drawChar@bg:
  1451                           	opt stack 0
  1452                           
  1453                           ; 2 bytes @ 0x31
  1454  000032                     	ds	1
  1455  000033                     fillCircleHelper@ddF_y:
  1456                           	opt stack 0
  1457                           
  1458                           ; 2 bytes @ 0x32
  1459  000033                     	ds	1
  1460  000034                     drawChar@size:
  1461                           	opt stack 0
  1462                           
  1463                           ; 1 bytes @ 0x33
  1464  000034                     	ds	1
  1465  000035                     drawChar@line:
  1466                           	opt stack 0
  1467  000035                     fillCircleHelper@f:
  1468                           	opt stack 0
  1469                           
  1470                           ; 2 bytes @ 0x34
  1471  000035                     	ds	1
  1472  000036                     drawChar@x:
  1473                           	opt stack 0
  1474                           
  1475                           ; 1 bytes @ 0x35
  1476  000036                     	ds	1
  1477  000037                     drawChar@j:
  1478                           	opt stack 0
  1479  000037                     fillCircleHelper@x:
  1480                           	opt stack 0
  1481                           
  1482                           ; 2 bytes @ 0x36
  1483  000037                     	ds	1
  1484  000038                     drawChar@i:
  1485                           	opt stack 0
  1486                           
  1487                           ; 1 bytes @ 0x37
  1488  000038                     	ds	1
  1489  000039                     drawtext@y:
  1490                           	opt stack 0
  1491  000039                     fillCircleHelper@y:
  1492                           	opt stack 0
  1493                           
  1494                           ; 2 bytes @ 0x38
  1495  000039                     	ds	1
  1496  00003A                     drawtext@_text:
  1497                           	opt stack 0
  1498                           
  1499                           ; 2 bytes @ 0x39
  1500  00003A                     	ds	1
  1501  00003B                     fillCircle@x0:
  1502                           	opt stack 0
  1503                           
  1504                           ; 2 bytes @ 0x3A
  1505  00003B                     	ds	1
  1506  00003C                     drawtext@color:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0x3B
  1510  00003C                     	ds	1
  1511  00003D                     fillCircle@y0:
  1512                           	opt stack 0
  1513                           
  1514                           ; 2 bytes @ 0x3C
  1515  00003D                     	ds	1
  1516  00003E                     drawtext@bg:
  1517                           	opt stack 0
  1518                           
  1519                           ; 2 bytes @ 0x3D
  1520  00003E                     	ds	1
  1521  00003F                     fillCircle@r:
  1522                           	opt stack 0
  1523                           
  1524                           ; 2 bytes @ 0x3E
  1525  00003F                     	ds	1
  1526  000040                     drawtext@size:
  1527                           	opt stack 0
  1528                           
  1529                           ; 1 bytes @ 0x3F
  1530  000040                     	ds	1
  1531  000041                     ??_drawtext:
  1532  000041                     fillCircle@color:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x40
  1536  000041                     	ds	2
  1537  000043                     main@i:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x42
  1541  000043                     	ds	2
  1542  000045                     main@LED_Sel:
  1543                           	opt stack 0
  1544                           
  1545                           ; 1 bytes @ 0x44
  1546  000045                     	ds	1
  1547  000046                     main@found:
  1548                           	opt stack 0
  1549                           
  1550                           ; 1 bytes @ 0x45
  1551  000046                     	ds	1
  1552                           tblptru	equ	0xFF8
  1553                           tblptrh	equ	0xFF7
  1554                           tblptrl	equ	0xFF6
  1555                           tablat	equ	0xFF5
  1556                           postinc0	equ	0xFEE
  1557                           wreg	equ	0xFE8
  1558                           postdec1	equ	0xFE5
  1559                           fsr1l	equ	0xFE1
  1560                           
  1561 ;;
  1562 ;;Main: autosize = 0, tempsize = 9, incstack = 0, save=0
  1563 ;;
  1564 ;; *************** function _main *****************
  1565 ;; Defined at:
  1566 ;;		line 41 in file "F25_Lab10_S1_sample.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;		None
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;  LED_Sel         1   68[COMRAM] unsigned char 
  1571 ;;  i               2   66[COMRAM] int 
  1572 ;;  found           1   69[COMRAM] unsigned char 
  1573 ;; Return value:  Size  Location     Type
  1574 ;;		None               void
  1575 ;; Registers used:
  1576 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1577 ;; Tracked objects:
  1578 ;;		On entry : 0/0
  1579 ;;		On exit  : 0/0
  1580 ;;		Unchanged: 0/0
  1581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1582 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1583 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1584 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1585 ;;      Totals:         4       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1586 ;;Total ram usage:       13 bytes
  1587 ;; Hardware stack levels required when called:   11
  1588 ;; This function calls:
  1589 ;;		_Activate_Buzzer
  1590 ;;		_Deactivate_Buzzer
  1591 ;;		_Enable_INT_Interrupt
  1592 ;;		_Init_Interrupt
  1593 ;;		_Init_UART
  1594 ;;		_Initialize_LCD_Screen
  1595 ;;		_Wait_One_Sec
  1596 ;;		_drawCircle
  1597 ;;		_drawtext
  1598 ;;		_fillCircle
  1599 ;;		_printf
  1600 ;; This function is called by:
  1601 ;;		Startup code after reset
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605                           	psect	text0
  1606  00001C                     __ptext0:
  1607                           	opt stack 0
  1608  00001C                     _main:
  1609                           	opt stack 20
  1610                           
  1611                           ;F25_Lab10_S1_sample.c: 42: Init_UART();
  1612                           
  1613                           ;incstack = 0
  1614  00001C  ECB5  F00A         	call	_Init_UART	;wreg free
  1615                           
  1616                           ;F25_Lab10_S1_sample.c: 43: OSCCON = 0x70;
  1617  000020  0E70               	movlw	112
  1618  000022  6ED3               	movwf	4051,c	;volatile
  1619                           
  1620                           ;F25_Lab10_S1_sample.c: 44: nRBPU = 0;
  1621  000024  9EF1               	bcf	intcon2,7,c	;volatile
  1622                           
  1623                           ;F25_Lab10_S1_sample.c: 45: TRISB = 0x01;
  1624  000026  0E01               	movlw	1
  1625  000028  6E93               	movwf	3987,c	;volatile
  1626                           
  1627                           ;F25_Lab10_S1_sample.c: 46: TRISC = 0x00;
  1628  00002A  0E00               	movlw	0
  1629  00002C  6E94               	movwf	3988,c	;volatile
  1630                           
  1631                           ;F25_Lab10_S1_sample.c: 47: TRISD = 0x00;
  1632  00002E  0E00               	movlw	0
  1633  000030  6E95               	movwf	3989,c	;volatile
  1634                           
  1635                           ;F25_Lab10_S1_sample.c: 48: ADCON1 = 0x0F;
  1636  000032  0E0F               	movlw	15
  1637  000034  6EC1               	movwf	4033,c	;volatile
  1638                           
  1639                           ;F25_Lab10_S1_sample.c: 49: TRISA = 0x00;
  1640  000036  0E00               	movlw	0
  1641  000038  6E92               	movwf	3986,c	;volatile
  1642                           
  1643                           ;F25_Lab10_S1_sample.c: 50: TRISE = 0x00;
  1644  00003A  0E00               	movlw	0
  1645  00003C  6E96               	movwf	3990,c	;volatile
  1646                           
  1647                           ;F25_Lab10_S1_sample.c: 53: PORTA = 0x00;
  1648  00003E  0E00               	movlw	0
  1649  000040  6E80               	movwf	3968,c	;volatile
  1650                           
  1651                           ;F25_Lab10_S1_sample.c: 54: PORTB = 0x00;
  1652  000042  0E00               	movlw	0
  1653  000044  6E81               	movwf	3969,c	;volatile
  1654                           
  1655                           ;F25_Lab10_S1_sample.c: 55: PORTC = 0x00;
  1656  000046  0E00               	movlw	0
  1657  000048  6E82               	movwf	3970,c	;volatile
  1658                           
  1659                           ;F25_Lab10_S1_sample.c: 58: Initialize_LCD_Screen();
  1660  00004A  EC84  F007         	call	_Initialize_LCD_Screen	;wreg free
  1661                           
  1662                           ;F25_Lab10_S1_sample.c: 59: Init_Interrupt();
  1663  00004E  EC94  F00A         	call	_Init_Interrupt	;wreg free
  1664                           
  1665                           ;F25_Lab10_S1_sample.c: 63: Nec_code = 0x0;
  1666  000052  0E00               	movlw	0
  1667  000054  6E5C               	movwf	_Nec_code,c
  1668  000056  0E00               	movlw	0
  1669  000058  6E5D               	movwf	_Nec_code+1,c
  1670  00005A  0E00               	movlw	0
  1671  00005C  6E5E               	movwf	_Nec_code+2,c
  1672  00005E  0E00               	movlw	0
  1673  000060  6E5F               	movwf	_Nec_code+3,c
  1674  000062  D000               	goto	l4138
  1675  000064                     l4138:
  1676                           
  1677                           ;F25_Lab10_S1_sample.c: 66: if (Nec_OK == 1) {
  1678  000064  0460               	decf	_Nec_OK,w,c
  1679  000066  1061               	iorwf	_Nec_OK+1,w,c
  1680  000068  A4D8               	btfss	status,2,c
  1681  00006A  D7FC               	goto	l4138
  1682                           
  1683                           ;F25_Lab10_S1_sample.c: 67: Nec_OK = 0;
  1684  00006C  0E00               	movlw	0
  1685  00006E  6E61               	movwf	_Nec_OK+1,c
  1686  000070  0E00               	movlw	0
  1687  000072  6E60               	movwf	_Nec_OK,c
  1688                           
  1689                           ;F25_Lab10_S1_sample.c: 68: Enable_INT_Interrupt();
  1690  000074  ECFB  F00A         	call	_Enable_INT_Interrupt	;wreg free
  1691                           
  1692                           ;F25_Lab10_S1_sample.c: 69: printf("NEC_Button = %x \r\n", Nec_Button);
  1693  000078  0ED2               	movlw	low STR_2
  1694  00007A  6E1D               	movwf	printf@f,c
  1695  00007C  0EFF               	movlw	high STR_2
  1696  00007E  6E1E               	movwf	printf@f+1,c
  1697  000080  C068  F01F         	movff	_Nec_Button,?_printf+2
  1698  000084  6A20               	clrf	?_printf+3,c
  1699  000086  EC46  F001         	call	_printf	;wreg free
  1700                           
  1701                           ;F25_Lab10_S1_sample.c: 71: char found = 0xff;
  1702  00008A  6846               	setf	main@found,c
  1703                           
  1704                           ;F25_Lab10_S1_sample.c: 73: for (int i = 0; i < 21; i++) {
  1705  00008C  0E00               	movlw	0
  1706  00008E  6E44               	movwf	main@i+1,c
  1707  000090  0E00               	movlw	0
  1708  000092  6E43               	movwf	main@i,c
  1709  000094                     l4150:
  1710  000094  BE44               	btfsc	main@i+1,7,c
  1711  000096  D008               	goto	l4154
  1712  000098  5044               	movf	main@i+1,w,c
  1713  00009A  E117               	bnz	l4162
  1714  00009C  0E15               	movlw	21
  1715  00009E  5C43               	subwf	main@i,w,c
  1716  0000A0  B0D8               	btfsc	status,0,c
  1717  0000A2  D013               	goto	l4162
  1718  0000A4  D001               	goto	l4154
  1719  0000A6  D011               	goto	l4162
  1720  0000A8                     l4154:
  1721                           
  1722                           ;F25_Lab10_S1_sample.c: 74: if (array1[i] == Nec_Button) {
  1723  0000A8  0EAA               	movlw	low _array1
  1724  0000AA  2443               	addwf	main@i,w,c
  1725  0000AC  6ED9               	movwf	fsr2l,c
  1726  0000AE  0E00               	movlw	high _array1
  1727  0000B0  2044               	addwfc	main@i+1,w,c
  1728  0000B2  6EDA               	movwf	fsr2h,c
  1729  0000B4  5068               	movf	_Nec_Button,w,c
  1730  0000B6  18DE               	xorwf	postinc2,w,c
  1731  0000B8  A4D8               	btfss	status,2,c
  1732  0000BA  D003               	goto	l4158
  1733                           
  1734                           ;F25_Lab10_S1_sample.c: 75: found = i;
  1735  0000BC  C043  F046         	movff	main@i,main@found
  1736  0000C0  D000               	goto	l4158
  1737  0000C2                     l4158:
  1738  0000C2  4A43               	infsnz	main@i,f,c
  1739  0000C4  2A44               	incf	main@i+1,f,c
  1740  0000C6  D7E6               	goto	l4150
  1741  0000C8  D000               	goto	l4162
  1742  0000CA                     l4162:
  1743                           
  1744                           ;F25_Lab10_S1_sample.c: 76: }
  1745                           ;F25_Lab10_S1_sample.c: 77: }
  1746                           ;F25_Lab10_S1_sample.c: 79: if (found != 0xff) {
  1747  0000CA  2846               	incf	main@found,w,c
  1748  0000CC  B4D8               	btfsc	status,2,c
  1749  0000CE  D7CA               	goto	l4138
  1750                           
  1751                           ;F25_Lab10_S1_sample.c: 80: printf("Key Location = %d \r\n\n", found);
  1752  0000D0  0EBC               	movlw	low STR_3
  1753  0000D2  6E1D               	movwf	printf@f,c
  1754  0000D4  0EFF               	movlw	high STR_3
  1755  0000D6  6E1E               	movwf	printf@f+1,c
  1756  0000D8  C046  F01F         	movff	main@found,?_printf+2
  1757  0000DC  6A20               	clrf	?_printf+3,c
  1758  0000DE  EC46  F001         	call	_printf	;wreg free
  1759                           
  1760                           ;F25_Lab10_S1_sample.c: 81: fillCircle(60, 80, 20, color[found]);
  1761  0000E2  0E00               	movlw	0
  1762  0000E4  6E3C               	movwf	fillCircle@x0+1,c
  1763  0000E6  0E3C               	movlw	60
  1764  0000E8  6E3B               	movwf	fillCircle@x0,c
  1765  0000EA  0E00               	movlw	0
  1766  0000EC  6E3E               	movwf	fillCircle@y0+1,c
  1767  0000EE  0E50               	movlw	80
  1768  0000F0  6E3D               	movwf	fillCircle@y0,c
  1769  0000F2  0E00               	movlw	0
  1770  0000F4  6E40               	movwf	fillCircle@r+1,c
  1771  0000F6  0E14               	movlw	20
  1772  0000F8  6E3F               	movwf	fillCircle@r,c
  1773  0000FA  5046               	movf	main@found,w,c
  1774  0000FC  0D02               	mullw	2
  1775  0000FE  0E80               	movlw	low _color
  1776  000100  24F3               	addwf	prodl,w,c
  1777  000102  6ED9               	movwf	fsr2l,c
  1778  000104  0E00               	movlw	high _color
  1779  000106  20F4               	addwfc	prodh,w,c
  1780  000108  6EDA               	movwf	fsr2h,c
  1781  00010A  CFDE F041          	movff	postinc2,fillCircle@color
  1782  00010E  CFDD F042          	movff	postdec2,fillCircle@color+1
  1783  000112  ECFD  F008         	call	_fillCircle	;wreg free
  1784                           
  1785                           ;F25_Lab10_S1_sample.c: 82: drawCircle(60, 80, 20, 0xFFFF);
  1786  000116  0E00               	movlw	0
  1787  000118  6E1D               	movwf	drawCircle@x0+1,c
  1788  00011A  0E3C               	movlw	60
  1789  00011C  6E1C               	movwf	drawCircle@x0,c
  1790  00011E  0E00               	movlw	0
  1791  000120  6E1F               	movwf	drawCircle@y0+1,c
  1792  000122  0E50               	movlw	80
  1793  000124  6E1E               	movwf	drawCircle@y0,c
  1794  000126  0E00               	movlw	0
  1795  000128  6E21               	movwf	drawCircle@r+1,c
  1796  00012A  0E14               	movlw	20
  1797  00012C  6E20               	movwf	drawCircle@r,c
  1798  00012E  0EFF               	movlw	255
  1799  000130  6E23               	movwf	drawCircle@color+1,c
  1800  000132  6822               	setf	drawCircle@color,c
  1801  000134  EC4F  F002         	call	_drawCircle	;wreg free
  1802                           
  1803                           ;F25_Lab10_S1_sample.c: 83: drawtext(52, 77, txt1[found], 0xFFFF, 0x0000, 1);
  1804  000138  0E4D               	movlw	77
  1805  00013A  6E39               	movwf	drawtext@y,c
  1806  00013C  5046               	movf	main@found,w,c
  1807  00013E  0D04               	mullw	4
  1808  000140  0E54               	movlw	low _txt1
  1809  000142  24F3               	addwf	prodl,w,c
  1810  000144  6E3A               	movwf	drawtext@_text,c
  1811  000146  0E01               	movlw	high _txt1
  1812  000148  20F4               	addwfc	prodh,w,c
  1813  00014A  6E3B               	movwf	drawtext@_text+1,c
  1814  00014C  0EFF               	movlw	255
  1815  00014E  6E3D               	movwf	drawtext@color+1,c
  1816  000150  683C               	setf	drawtext@color,c
  1817  000152  0E00               	movlw	0
  1818  000154  6E3F               	movwf	drawtext@bg+1,c
  1819  000156  0E00               	movlw	0
  1820  000158  6E3E               	movwf	drawtext@bg,c
  1821  00015A  0E01               	movlw	1
  1822  00015C  6E40               	movwf	drawtext@size,c
  1823  00015E  0E34               	movlw	52
  1824  000160  ECC4  F005         	call	_drawtext
  1825                           
  1826                           ;F25_Lab10_S1_sample.c: 89: PORTA = 0;
  1827  000164  0E00               	movlw	0
  1828  000166  6E80               	movwf	3968,c	;volatile
  1829                           
  1830                           ;F25_Lab10_S1_sample.c: 90: PORTB = 0;
  1831  000168  0E00               	movlw	0
  1832  00016A  6E81               	movwf	3969,c	;volatile
  1833                           
  1834                           ;F25_Lab10_S1_sample.c: 91: PORTCbits.RC0 = nums[found];
  1835  00016C  5046               	movf	main@found,w,c
  1836  00016E  0D02               	mullw	2
  1837  000170  0E2A               	movlw	low _nums
  1838  000172  24F3               	addwf	prodl,w,c
  1839  000174  6ED9               	movwf	fsr2l,c
  1840  000176  0E01               	movlw	high _nums
  1841  000178  20F4               	addwfc	prodh,w,c
  1842  00017A  6EDA               	movwf	fsr2h,c
  1843  00017C  50DF               	movf	indf2,w,c
  1844  00017E  0100               	movlb	0	; () banked
  1845  000180  6FE5               	movwf	??_main& (0+255),b
  1846  000182  5082               	movf	3970,w,c	;volatile
  1847  000184  0100               	movlb	0	; () banked
  1848  000186  19E5               	xorwf	??_main& (0+255),w,b
  1849  000188  0BFE               	andlw	-2
  1850  00018A  19E5               	xorwf	??_main& (0+255),w,b
  1851  00018C  6E82               	movwf	3970,c	;volatile
  1852                           
  1853                           ;F25_Lab10_S1_sample.c: 94: char LED_Sel;
  1854                           ;F25_Lab10_S1_sample.c: 97: if (found >= 0 && found <= 2) {
  1855  00018E  0E03               	movlw	3
  1856  000190  6046               	cpfslt	main@found,c
  1857  000192  D002               	goto	l4180
  1858                           
  1859                           ; BSR set to: 0
  1860                           ;F25_Lab10_S1_sample.c: 98: LED_Sel = 0;
  1861  000194  0E00               	movlw	0
  1862  000196  D009               	goto	L2
  1863  000198                     l4180:
  1864                           
  1865                           ; BSR set to: 0
  1866                           ;F25_Lab10_S1_sample.c: 101: else if (found >= 3 && found <= 8) {
  1867  000198  0E02               	movlw	2
  1868  00019A  6446               	cpfsgt	main@found,c
  1869  00019C  D005               	goto	l4186
  1870                           
  1871                           ; BSR set to: 0
  1872  00019E  0E09               	movlw	9
  1873  0001A0  6046               	cpfslt	main@found,c
  1874  0001A2  D002               	goto	l4186
  1875                           
  1876                           ; BSR set to: 0
  1877                           ;F25_Lab10_S1_sample.c: 102: LED_Sel = 1;
  1878  0001A4  0E01               	movlw	1
  1879  0001A6  D001               	goto	L2
  1880  0001A8                     l4186:
  1881                           
  1882                           ; BSR set to: 0
  1883                           ;F25_Lab10_S1_sample.c: 105: else {
  1884                           ;F25_Lab10_S1_sample.c: 106: LED_Sel = 2;
  1885  0001A8  0E02               	movlw	2
  1886  0001AA                     L2:
  1887  0001AA  6E45               	movwf	main@LED_Sel,c
  1888                           
  1889                           ; BSR set to: 0
  1890  0001AC  D000               	goto	l4188
  1891  0001AE                     l4188:
  1892                           
  1893                           ; BSR set to: 0
  1894                           ;F25_Lab10_S1_sample.c: 107: }
  1895                           ;F25_Lab10_S1_sample.c: 110: *RGB_LED[LED_Sel] =
  1896                           ;F25_Lab10_S1_sample.c: 111: (*RGB_LED[LED_Sel] & (~(0b00000111 << off[LED_Sel]))) |
  1897                           ;F25_Lab10_S1_sample.c: 112: ((color2[found] & 0b00000111) << off[LED_Sel]);
  1898  0001AE  5045               	movf	main@LED_Sel,w,c
  1899  0001B0  0D02               	mullw	2
  1900  0001B2  0E47               	movlw	low _RGB_LED
  1901  0001B4  24F3               	addwf	prodl,w,c
  1902  0001B6  6ED9               	movwf	fsr2l,c
  1903  0001B8  0E00               	movlw	high _RGB_LED
  1904  0001BA  20F4               	addwfc	prodh,w,c
  1905  0001BC  6EDA               	movwf	fsr2h,c
  1906  0001BE  CFDE F0E5          	movff	postinc2,??_main
  1907  0001C2  CFDD F0E6          	movff	postdec2,??_main+1
  1908  0001C6  C0E5  FFD9         	movff	??_main,fsr2l
  1909  0001CA  C0E6  FFDA         	movff	??_main+1,fsr2h
  1910  0001CE  5045               	movf	main@LED_Sel,w,c
  1911  0001D0  0D01               	mullw	1
  1912  0001D2  0E4D               	movlw	low _off
  1913  0001D4  24F3               	addwf	prodl,w,c
  1914  0001D6  6EE1               	movwf	fsr1l,c
  1915  0001D8  0E00               	movlw	high _off
  1916  0001DA  20F4               	addwfc	prodh,w,c
  1917  0001DC  6EE2               	movwf	fsr1h,c
  1918  0001DE  50E7               	movf	indf1,w,c
  1919  0001E0  0100               	movlb	0	; () banked
  1920  0001E2  6FE7               	movwf	(??_main+2)& (0+255),b
  1921  0001E4  5046               	movf	main@found,w,c
  1922  0001E6  0D02               	mullw	2
  1923  0001E8  0E00               	movlw	low _color2
  1924  0001EA  24F3               	addwf	prodl,w,c
  1925  0001EC  6EE1               	movwf	fsr1l,c
  1926  0001EE  0E01               	movlw	high _color2
  1927  0001F0  20F4               	addwfc	prodh,w,c
  1928  0001F2  6EE2               	movwf	fsr1h,c
  1929  0001F4  50E7               	movf	indf1,w,c
  1930  0001F6  0100               	movlb	0	; () banked
  1931  0001F8  6FE8               	movwf	(??_main+3)& (0+255),b
  1932  0001FA  0E07               	movlw	7
  1933  0001FC  0100               	movlb	0	; () banked
  1934  0001FE  17E8               	andwf	(??_main+3)& (0+255),f,b
  1935  000200  0100               	movlb	0	; () banked
  1936  000202  2BE7               	incf	(??_main+2)& (0+255),f,b
  1937  000204  D003               	goto	u2904
  1938  000206                     u2905:
  1939  000206  0100               	movlb	0	; () banked
  1940  000208  90D8               	bcf	status,0,c
  1941  00020A  37E8               	rlcf	(??_main+3)& (0+255),f,b
  1942  00020C                     u2904:
  1943  00020C  0100               	movlb	0	; () banked
  1944  00020E  2FE7               	decfsz	(??_main+2)& (0+255),f,b
  1945  000210  D7FA               	goto	u2905
  1946  000212  5045               	movf	main@LED_Sel,w,c
  1947  000214  0D02               	mullw	2
  1948  000216  0E47               	movlw	low _RGB_LED
  1949  000218  24F3               	addwf	prodl,w,c
  1950  00021A  6EE1               	movwf	fsr1l,c
  1951  00021C  0E00               	movlw	high _RGB_LED
  1952  00021E  20F4               	addwfc	prodh,w,c
  1953  000220  6EE2               	movwf	fsr1h,c
  1954  000222  CFE6 F0E9          	movff	postinc1,??_main+4
  1955  000226  CFE5 F0EA          	movff	postdec1,??_main+5
  1956  00022A  C0E9  FFE1         	movff	??_main+4,fsr1l
  1957  00022E  C0EA  FFE2         	movff	??_main+5,fsr1h
  1958  000232  50E7               	movf	indf1,w,c
  1959  000234  0100               	movlb	0	; () banked
  1960  000236  6FEB               	movwf	(??_main+6)& (0+255),b
  1961  000238  5045               	movf	main@LED_Sel,w,c
  1962  00023A  0D01               	mullw	1
  1963  00023C  0E4D               	movlw	low _off
  1964  00023E  24F3               	addwf	prodl,w,c
  1965  000240  6EE1               	movwf	fsr1l,c
  1966  000242  0E00               	movlw	high _off
  1967  000244  20F4               	addwfc	prodh,w,c
  1968  000246  6EE2               	movwf	fsr1h,c
  1969  000248  50E7               	movf	indf1,w,c
  1970  00024A  0100               	movlb	0	; () banked
  1971  00024C  6FEC               	movwf	(??_main+7)& (0+255),b
  1972  00024E  0E07               	movlw	7
  1973  000250  0100               	movlb	0	; () banked
  1974  000252  6FED               	movwf	(??_main+8)& (0+255),b
  1975  000254  0100               	movlb	0	; () banked
  1976  000256  2BEC               	incf	(??_main+7)& (0+255),f,b
  1977  000258  D003               	goto	u2914
  1978  00025A                     u2915:
  1979  00025A  0100               	movlb	0	; () banked
  1980  00025C  90D8               	bcf	status,0,c
  1981  00025E  37ED               	rlcf	(??_main+8)& (0+255),f,b
  1982  000260                     u2914:
  1983  000260  0100               	movlb	0	; () banked
  1984  000262  2FEC               	decfsz	(??_main+7)& (0+255),f,b
  1985  000264  D7FA               	goto	u2915
  1986  000266  0100               	movlb	0	; () banked
  1987  000268  51ED               	movf	(??_main+8)& (0+255),w,b
  1988  00026A  0AFF               	xorlw	255
  1989  00026C  0100               	movlb	0	; () banked
  1990  00026E  15EB               	andwf	(??_main+6)& (0+255),w,b
  1991  000270  0100               	movlb	0	; () banked
  1992  000272  11E8               	iorwf	(??_main+3)& (0+255),w,b
  1993  000274  6EDF               	movwf	indf2,c
  1994                           
  1995                           ; BSR set to: 0
  1996                           ;F25_Lab10_S1_sample.c: 116: PORTDbits.RD7 = 1;
  1997  000276  8E83               	bsf	3971,7,c	;volatile
  1998                           
  1999                           ; BSR set to: 0
  2000                           ;F25_Lab10_S1_sample.c: 117: Activate_Buzzer();
  2001  000278  ECC8  F00A         	call	_Activate_Buzzer	;wreg free
  2002                           
  2003                           ;F25_Lab10_S1_sample.c: 118: Wait_One_Sec();
  2004  00027C  ECEE  F00A         	call	_Wait_One_Sec	;wreg free
  2005                           
  2006                           ;F25_Lab10_S1_sample.c: 119: Deactivate_Buzzer();
  2007  000280  ECF3  F00A         	call	_Deactivate_Buzzer	;wreg free
  2008                           
  2009                           ;F25_Lab10_S1_sample.c: 120: PORTDbits.RD7 = 0;
  2010  000284  9E83               	bcf	3971,7,c	;volatile
  2011  000286  D6EE               	goto	l4138
  2012  000288  EF0C  F000         	goto	start
  2013  00028C                     __end_of_main:
  2014                           	opt stack 0
  2015                           tblptru	equ	0xFF8
  2016                           tblptrh	equ	0xFF7
  2017                           tblptrl	equ	0xFF6
  2018                           tablat	equ	0xFF5
  2019                           prodh	equ	0xFF4
  2020                           prodl	equ	0xFF3
  2021                           intcon2	equ	0xFF1
  2022                           postinc0	equ	0xFEE
  2023                           wreg	equ	0xFE8
  2024                           indf1	equ	0xFE7
  2025                           postinc1	equ	0xFE6
  2026                           postdec1	equ	0xFE5
  2027                           fsr1h	equ	0xFE2
  2028                           fsr1l	equ	0xFE1
  2029                           indf2	equ	0xFDF
  2030                           postinc2	equ	0xFDE
  2031                           postdec2	equ	0xFDD
  2032                           fsr2h	equ	0xFDA
  2033                           fsr2l	equ	0xFD9
  2034                           status	equ	0xFD8
  2035                           
  2036 ;; *************** function _printf *****************
  2037 ;; Defined at:
  2038 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2039 ;; Parameters:    Size  Location     Type
  2040 ;;  f               2   28[COMRAM] PTR const unsigned char 
  2041 ;;		 -> STR_3(22), STR_2(19), 
  2042 ;; Auto vars:     Size  Location     Type
  2043 ;;  idx             1   33[COMRAM] unsigned char 
  2044 ;;  tmpval          4    0        struct .
  2045 ;;  cp              3    0        PTR const unsigned char 
  2046 ;;  val             2   38[COMRAM] unsigned int 
  2047 ;;  ap              2   34[COMRAM] PTR void [1]
  2048 ;;		 -> ?_printf(2), 
  2049 ;;  len             2    0        unsigned int 
  2050 ;;  c               1   40[COMRAM] char 
  2051 ;;  flag            1   37[COMRAM] unsigned char 
  2052 ;;  prec            1   36[COMRAM] char 
  2053 ;; Return value:  Size  Location     Type
  2054 ;;                  2   28[COMRAM] int 
  2055 ;; Registers used:
  2056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2057 ;; Tracked objects:
  2058 ;;		On entry : 0/0
  2059 ;;		On exit  : 0/0
  2060 ;;		Unchanged: 0/0
  2061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2062 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2063 ;;      Locals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2064 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2065 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2066 ;;Total ram usage:       13 bytes
  2067 ;; Hardware stack levels used:    1
  2068 ;; Hardware stack levels required when called:    4
  2069 ;; This function calls:
  2070 ;;		___lwdiv
  2071 ;;		___lwmod
  2072 ;;		_putch
  2073 ;; This function is called by:
  2074 ;;		_main
  2075 ;; This function uses a non-reentrant model
  2076 ;;
  2077                           
  2078                           	psect	text1
  2079  00028C                     __ptext1:
  2080                           	opt stack 0
  2081  00028C                     _printf:
  2082                           	opt stack 26
  2083                           
  2084                           ;doprnt.c: 466: va_list ap;
  2085                           ;doprnt.c: 499: signed char c;
  2086                           ;doprnt.c: 506: signed char prec;
  2087                           ;doprnt.c: 508: unsigned char flag;
  2088                           ;doprnt.c: 523: union {
  2089                           ;doprnt.c: 524: unsigned long vd;
  2090                           ;doprnt.c: 525: double integ;
  2091                           ;doprnt.c: 526: } tmpval;
  2092                           ;doprnt.c: 528: unsigned int val;
  2093                           ;doprnt.c: 529: unsigned len;
  2094                           ;doprnt.c: 530: const char * cp;
  2095                           ;doprnt.c: 533: *ap = __va_start();
  2096                           
  2097                           ;incstack = 0
  2098  00028C  0E1F               	movlw	low (?_printf+2)
  2099  00028E  6E23               	movwf	printf@ap,c
  2100  000290  0E00               	movlw	high (?_printf+2)
  2101  000292  6E24               	movwf	printf@ap+1,c
  2102                           
  2103                           ;doprnt.c: 536: while(c = *f++) {
  2104  000294  D0F5               	goto	l3052
  2105  000296                     l2974:
  2106                           
  2107                           ;doprnt.c: 538: if(c != '%')
  2108  000296  0E25               	movlw	37
  2109  000298  1829               	xorwf	printf@c,w,c
  2110  00029A  B4D8               	btfsc	status,2,c
  2111  00029C  D004               	goto	l2978
  2112                           
  2113                           ;doprnt.c: 540: {
  2114                           ;doprnt.c: 541: (putch(c) );
  2115  00029E  5029               	movf	printf@c,w,c
  2116  0002A0  ECE1  F00A         	call	_putch
  2117                           
  2118                           ;doprnt.c: 542: continue;
  2119  0002A4  D0ED               	goto	l3052
  2120  0002A6                     l2978:
  2121                           
  2122                           ;doprnt.c: 543: }
  2123                           ;doprnt.c: 548: flag = 0;
  2124  0002A6  0E00               	movlw	0
  2125  0002A8  6E26               	movwf	printf@flag,c
  2126                           
  2127                           ;doprnt.c: 635: switch(c = *f++) {
  2128  0002AA  D006               	goto	l2984
  2129                           
  2130                           ;doprnt.c: 638: goto alldone;
  2131                           
  2132                           ;doprnt.c: 637: case 0:
  2133  0002AC  D0F7               	goto	l563
  2134                           
  2135                           ;doprnt.c: 698: case 'i':
  2136                           ;doprnt.c: 699: break;
  2137                           
  2138                           ;doprnt.c: 697: case 'd':
  2139  0002AE  D01B               	goto	l538
  2140  0002B0                     l2980:
  2141                           
  2142                           ;doprnt.c: 721: flag |= 0x80;
  2143  0002B0  8E26               	bsf	printf@flag,7,c
  2144                           
  2145                           ;doprnt.c: 723: break;
  2146  0002B2  D019               	goto	l538
  2147                           
  2148                           ;doprnt.c: 813: continue;
  2149                           
  2150                           ;doprnt.c: 802: default:
  2151  0002B4  D0E5               	goto	l3052
  2152                           
  2153                           ;doprnt.c: 822: }
  2154  0002B6  D017               	goto	l538
  2155  0002B8                     l2984:
  2156  0002B8  C01D  FFF6         	movff	printf@f,tblptrl
  2157  0002BC  C01E  FFF7         	movff	printf@f+1,tblptrh
  2158  0002C0  4A1D               	infsnz	printf@f,f,c
  2159  0002C2  2A1E               	incf	printf@f+1,f,c
  2160  0002C4                     	if	0	;tblptru may be non-zero
  2161  0002C4                     	endif
  2162  0002C4                     	if	0	;tblptru may be non-zero
  2163  0002C4                     	endif
  2164  0002C4  0008               	tblrd		*
  2165  0002C6  CFF5 F029          	movff	tablat,printf@c
  2166  0002CA  5029               	movf	printf@c,w,c
  2167                           
  2168                           ; Switch size 1, requested type "space"
  2169                           ; Number of cases is 4, Range of values is 0 to 120
  2170                           ; switch strategies available:
  2171                           ; Name         Instructions Cycles
  2172                           ; simple_byte           13     7 (average)
  2173                           ;	Chosen strategy is simple_byte
  2174  0002CC  0A00               	xorlw	0	; case 0
  2175  0002CE  B4D8               	btfsc	status,2,c
  2176  0002D0  D0E5               	goto	l563
  2177  0002D2  0A64               	xorlw	100	; case 100
  2178  0002D4  B4D8               	btfsc	status,2,c
  2179  0002D6  D007               	goto	l538
  2180  0002D8  0A0D               	xorlw	13	; case 105
  2181  0002DA  B4D8               	btfsc	status,2,c
  2182  0002DC  D004               	goto	l538
  2183  0002DE  0A11               	xorlw	17	; case 120
  2184  0002E0  B4D8               	btfsc	status,2,c
  2185  0002E2  D7E6               	goto	l2980
  2186  0002E4  D0CD               	goto	l3052
  2187  0002E6                     l538:
  2188                           
  2189                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  2190  0002E6  BE26               	btfsc	printf@flag,7,c
  2191  0002E8  D015               	goto	l2996
  2192                           
  2193                           ;doprnt.c: 1253: {
  2194                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  2195  0002EA  C023  FFD9         	movff	printf@ap,fsr2l
  2196  0002EE  C024  FFDA         	movff	printf@ap+1,fsr2h
  2197  0002F2  CFDE F027          	movff	postinc2,printf@val
  2198  0002F6  CFDD F028          	movff	postdec2,printf@val+1
  2199  0002FA  0E02               	movlw	2
  2200  0002FC  2623               	addwf	printf@ap,f,c
  2201  0002FE  0E00               	movlw	0
  2202  000300  2224               	addwfc	printf@ap+1,f,c
  2203                           
  2204                           ;doprnt.c: 1261: if((int)val < 0) {
  2205  000302  AE28               	btfss	printf@val+1,7,c
  2206  000304  D04E               	goto	l3030
  2207                           
  2208                           ;doprnt.c: 1262: flag |= 0x03;
  2209  000306  0E03               	movlw	3
  2210  000308  1226               	iorwf	printf@flag,f,c
  2211                           
  2212                           ;doprnt.c: 1263: val = -val;
  2213  00030A  6C27               	negf	printf@val,c
  2214  00030C  1E28               	comf	printf@val+1,f,c
  2215  00030E  B0D8               	btfsc	status,0,c
  2216  000310  2A28               	incf	printf@val+1,f,c
  2217                           
  2218                           ;doprnt.c: 1264: }
  2219                           ;doprnt.c: 1266: }
  2220  000312  D047               	goto	l3030
  2221  000314                     l2996:
  2222                           
  2223                           ;doprnt.c: 1268: else
  2224                           ;doprnt.c: 1273: {
  2225                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  2226  000314  C023  FFD9         	movff	printf@ap,fsr2l
  2227  000318  C024  FFDA         	movff	printf@ap+1,fsr2h
  2228  00031C  CFDE F027          	movff	postinc2,printf@val
  2229  000320  CFDD F028          	movff	postdec2,printf@val+1
  2230  000324  0E02               	movlw	2
  2231  000326  2623               	addwf	printf@ap,f,c
  2232  000328  0E00               	movlw	0
  2233  00032A  2224               	addwfc	printf@ap+1,f,c
  2234                           
  2235                           ;doprnt.c: 1287: }
  2236                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  2237  00032C  D03A               	goto	l3030
  2238  00032E                     l3000:
  2239                           
  2240                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2241  00032E  0E01               	movlw	1
  2242  000330  6E29               	movwf	printf@c,c
  2243  000332                     l3002:
  2244  000332  0E05               	movlw	5
  2245  000334  1829               	xorwf	printf@c,w,c
  2246  000336  B4D8               	btfsc	status,2,c
  2247  000338  D03D               	goto	l3032
  2248  00033A  D001               	goto	l3006
  2249  00033C  D03B               	goto	l3032
  2250  00033E                     l3006:
  2251                           
  2252                           ;doprnt.c: 1306: if(val < dpowers[c])
  2253  00033E  5029               	movf	printf@c,w,c
  2254  000340  0D02               	mullw	2
  2255  000342  0EAA               	movlw	low _dpowers
  2256  000344  24F3               	addwf	prodl,w,c
  2257  000346  6EF6               	movwf	tblptrl,c
  2258  000348  0EFF               	movlw	high _dpowers
  2259  00034A  20F4               	addwfc	prodh,w,c
  2260  00034C  6EF7               	movwf	tblptrh,c
  2261  00034E                     	if	0	;There are less than 3 active tblptr bytes
  2262  00034E                     	endif
  2263  00034E  0009               	tblrd		*+
  2264  000350  50F5               	movf	tablat,w,c
  2265  000352  5C27               	subwf	printf@val,w,c
  2266  000354  0009               	tblrd		*+
  2267  000356  50F5               	movf	tablat,w,c
  2268  000358  5828               	subwfb	printf@val+1,w,c
  2269  00035A  A0D8               	btfss	status,0,c
  2270  00035C  D02B               	goto	l3032
  2271  00035E  D001               	goto	l3010
  2272                           
  2273                           ;doprnt.c: 1307: break;
  2274  000360  D029               	goto	l3032
  2275  000362                     l3010:
  2276  000362  2A29               	incf	printf@c,f,c
  2277  000364  D7E6               	goto	l3002
  2278                           
  2279                           ;doprnt.c: 1309: break;
  2280  000366  D026               	goto	l3032
  2281  000368                     l3014:
  2282                           
  2283                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  2284  000368  0E01               	movlw	1
  2285  00036A  6E29               	movwf	printf@c,c
  2286  00036C                     l3016:
  2287  00036C  0E04               	movlw	4
  2288  00036E  1829               	xorwf	printf@c,w,c
  2289  000370  B4D8               	btfsc	status,2,c
  2290  000372  D020               	goto	l3032
  2291  000374  D001               	goto	l3020
  2292  000376  D01E               	goto	l3032
  2293  000378                     l3020:
  2294                           
  2295                           ;doprnt.c: 1317: if(val < hexpowers[c])
  2296  000378  5029               	movf	printf@c,w,c
  2297  00037A  0D02               	mullw	2
  2298  00037C  0EB4               	movlw	low _hexpowers
  2299  00037E  24F3               	addwf	prodl,w,c
  2300  000380  6EF6               	movwf	tblptrl,c
  2301  000382  0EFF               	movlw	high _hexpowers
  2302  000384  20F4               	addwfc	prodh,w,c
  2303  000386  6EF7               	movwf	tblptrh,c
  2304  000388                     	if	0	;There are less than 3 active tblptr bytes
  2305  000388                     	endif
  2306  000388  0009               	tblrd		*+
  2307  00038A  50F5               	movf	tablat,w,c
  2308  00038C  5C27               	subwf	printf@val,w,c
  2309  00038E  0009               	tblrd		*+
  2310  000390  50F5               	movf	tablat,w,c
  2311  000392  5828               	subwfb	printf@val+1,w,c
  2312  000394  A0D8               	btfss	status,0,c
  2313  000396  D00E               	goto	l3032
  2314  000398  D001               	goto	l3024
  2315                           
  2316                           ;doprnt.c: 1318: break;
  2317  00039A  D00C               	goto	l3032
  2318  00039C                     l3024:
  2319  00039C  2A29               	incf	printf@c,f,c
  2320  00039E  D7E6               	goto	l3016
  2321                           
  2322                           ;doprnt.c: 1336: }
  2323                           
  2324                           ;doprnt.c: 1320: break;
  2325  0003A0  D009               	goto	l3032
  2326  0003A2                     l3030:
  2327  0003A2  5026               	movf	printf@flag,w,c
  2328  0003A4  0B80               	andlw	128
  2329                           
  2330                           ; Switch size 1, requested type "space"
  2331                           ; Number of cases is 2, Range of values is 0 to 128
  2332                           ; switch strategies available:
  2333                           ; Name         Instructions Cycles
  2334                           ; simple_byte            7     4 (average)
  2335                           ;	Chosen strategy is simple_byte
  2336  0003A6  0A00               	xorlw	0	; case 0
  2337  0003A8  B4D8               	btfsc	status,2,c
  2338  0003AA  D7C1               	goto	l3000
  2339  0003AC  0A80               	xorlw	128	; case 128
  2340  0003AE  B4D8               	btfsc	status,2,c
  2341  0003B0  D7DB               	goto	l3014
  2342  0003B2  D000               	goto	l3032
  2343  0003B4                     l3032:
  2344                           
  2345                           ;doprnt.c: 1422: {
  2346                           ;doprnt.c: 1438: if(flag & 0x03)
  2347  0003B4  C026  F021         	movff	printf@flag,??_printf
  2348  0003B8  0E03               	movlw	3
  2349  0003BA  1621               	andwf	??_printf,f,c
  2350  0003BC  B4D8               	btfsc	status,2,c
  2351  0003BE  D004               	goto	l3036
  2352                           
  2353                           ;doprnt.c: 1439: (putch('-') );
  2354  0003C0  0E2D               	movlw	45
  2355  0003C2  ECE1  F00A         	call	_putch
  2356  0003C6  D000               	goto	l3036
  2357  0003C8                     l3036:
  2358                           
  2359                           ;doprnt.c: 1469: }
  2360                           ;doprnt.c: 1472: prec = c;
  2361  0003C8  C029  F025         	movff	printf@c,printf@prec
  2362                           
  2363                           ;doprnt.c: 1474: while(prec--) {
  2364  0003CC  D053               	goto	l3050
  2365                           
  2366                           ;doprnt.c: 1476: switch((unsigned char)(flag & 0x80))
  2367  0003CE  D045               	goto	l3046
  2368  0003D0                     l3038:
  2369                           
  2370                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2371  0003D0  5025               	movf	printf@prec,w,c
  2372  0003D2  0D02               	mullw	2
  2373  0003D4  0EAA               	movlw	low _dpowers
  2374  0003D6  24F3               	addwf	prodl,w,c
  2375  0003D8  6EF6               	movwf	tblptrl,c
  2376  0003DA  0EFF               	movlw	high _dpowers
  2377  0003DC  20F4               	addwfc	prodh,w,c
  2378  0003DE  6EF7               	movwf	tblptrh,c
  2379  0003E0                     	if	0	;There are less than 3 active tblptr bytes
  2380  0003E0                     	endif
  2381  0003E0  0009               	tblrd		*+
  2382  0003E2  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2383  0003E6  000A               	tblrd		*-
  2384  0003E8  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2385  0003EC  C027  F011         	movff	printf@val,___lwdiv@dividend
  2386  0003F0  C028  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2387  0003F4  ECCF  F008         	call	___lwdiv	;wreg free
  2388  0003F8  C011  F018         	movff	?___lwdiv,___lwmod@dividend
  2389  0003FC  C012  F019         	movff	?___lwdiv+1,___lwmod@dividend+1
  2390  000400  0E00               	movlw	0
  2391  000402  6E1B               	movwf	___lwmod@divisor+1,c
  2392  000404  0E0A               	movlw	10
  2393  000406  6E1A               	movwf	___lwmod@divisor,c
  2394  000408  EC76  F009         	call	___lwmod	;wreg free
  2395  00040C  5018               	movf	?___lwmod,w,c
  2396  00040E  0F30               	addlw	48
  2397  000410  6E29               	movwf	printf@c,c
  2398                           
  2399                           ;doprnt.c: 1491: break;
  2400  000412  D02C               	goto	l3048
  2401  000414                     l3040:
  2402                           
  2403                           ;doprnt.c: 1499: {
  2404                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  2405  000414  C027  F011         	movff	printf@val,___lwdiv@dividend
  2406  000418  C028  F012         	movff	printf@val+1,___lwdiv@dividend+1
  2407  00041C  5025               	movf	printf@prec,w,c
  2408  00041E  0D02               	mullw	2
  2409  000420  0EB4               	movlw	low _hexpowers
  2410  000422  24F3               	addwf	prodl,w,c
  2411  000424  6EF6               	movwf	tblptrl,c
  2412  000426  0EFF               	movlw	high _hexpowers
  2413  000428  20F4               	addwfc	prodh,w,c
  2414  00042A  6EF7               	movwf	tblptrh,c
  2415  00042C                     	if	0	;There are less than 3 active tblptr bytes
  2416  00042C                     	endif
  2417  00042C  0009               	tblrd		*+
  2418  00042E  CFF5 F013          	movff	tablat,___lwdiv@divisor
  2419  000432  000A               	tblrd		*-
  2420  000434  CFF5 F014          	movff	tablat,___lwdiv@divisor+1
  2421  000438  ECCF  F008         	call	___lwdiv	;wreg free
  2422  00043C  5011               	movf	?___lwdiv,w,c
  2423  00043E  0B0F               	andlw	15
  2424  000440  6E22               	movwf	printf@idx,c
  2425                           
  2426                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  2427  000442  5022               	movf	printf@idx,w,c
  2428  000444  0D01               	mullw	1
  2429  000446  0EE5               	movlw	low STR_4
  2430  000448  24F3               	addwf	prodl,w,c
  2431  00044A  6EF6               	movwf	tblptrl,c
  2432  00044C  0EFF               	movlw	high STR_4
  2433  00044E  20F4               	addwfc	prodh,w,c
  2434  000450  6EF7               	movwf	tblptrh,c
  2435  000452                     	if	0	;There are less than 3 active tblptr bytes
  2436  000452                     	endif
  2437  000452  0008               	tblrd		*
  2438  000454  CFF5 F029          	movff	tablat,printf@c
  2439                           
  2440                           ;doprnt.c: 1523: }
  2441                           
  2442                           ;doprnt.c: 1508: }
  2443                           ;doprnt.c: 1510: break;
  2444  000458  D009               	goto	l3048
  2445  00045A                     l3046:
  2446  00045A  5026               	movf	printf@flag,w,c
  2447  00045C  0B80               	andlw	128
  2448                           
  2449                           ; Switch size 1, requested type "space"
  2450                           ; Number of cases is 2, Range of values is 0 to 128
  2451                           ; switch strategies available:
  2452                           ; Name         Instructions Cycles
  2453                           ; simple_byte            7     4 (average)
  2454                           ;	Chosen strategy is simple_byte
  2455  00045E  0A00               	xorlw	0	; case 0
  2456  000460  B4D8               	btfsc	status,2,c
  2457  000462  D7B6               	goto	l3038
  2458  000464  0A80               	xorlw	128	; case 128
  2459  000466  B4D8               	btfsc	status,2,c
  2460  000468  D7D5               	goto	l3040
  2461  00046A  D000               	goto	l3048
  2462  00046C                     l3048:
  2463                           
  2464                           ;doprnt.c: 1524: (putch(c) );
  2465  00046C  5029               	movf	printf@c,w,c
  2466  00046E  ECE1  F00A         	call	_putch
  2467  000472  D000               	goto	l3050
  2468  000474                     l3050:
  2469  000474  0625               	decf	printf@prec,f,c
  2470  000476  2825               	incf	printf@prec,w,c
  2471  000478  B4D8               	btfsc	status,2,c
  2472  00047A  D002               	goto	l3052
  2473  00047C  D7EE               	goto	l3046
  2474  00047E  D000               	goto	l3052
  2475  000480                     l3052:
  2476  000480  C01D  FFF6         	movff	printf@f,tblptrl
  2477  000484  C01E  FFF7         	movff	printf@f+1,tblptrh
  2478  000488  4A1D               	infsnz	printf@f,f,c
  2479  00048A  2A1E               	incf	printf@f+1,f,c
  2480  00048C                     	if	0	;tblptru may be non-zero
  2481  00048C                     	endif
  2482  00048C                     	if	0	;tblptru may be non-zero
  2483  00048C                     	endif
  2484  00048C  0008               	tblrd		*
  2485  00048E  CFF5 F029          	movff	tablat,printf@c
  2486  000492  5029               	movf	printf@c,w,c
  2487  000494  B4D8               	btfsc	status,2,c
  2488  000496  D002               	goto	l563
  2489  000498  D6FE               	goto	l2974
  2490  00049A  D000               	goto	l563
  2491  00049C                     l563:
  2492  00049C  0012               	return		;funcret
  2493  00049E                     __end_of_printf:
  2494                           	opt stack 0
  2495                           tblptru	equ	0xFF8
  2496                           tblptrh	equ	0xFF7
  2497                           tblptrl	equ	0xFF6
  2498                           tablat	equ	0xFF5
  2499                           prodh	equ	0xFF4
  2500                           prodl	equ	0xFF3
  2501                           intcon2	equ	0xFF1
  2502                           postinc0	equ	0xFEE
  2503                           wreg	equ	0xFE8
  2504                           indf1	equ	0xFE7
  2505                           postinc1	equ	0xFE6
  2506                           postdec1	equ	0xFE5
  2507                           fsr1h	equ	0xFE2
  2508                           fsr1l	equ	0xFE1
  2509                           indf2	equ	0xFDF
  2510                           postinc2	equ	0xFDE
  2511                           postdec2	equ	0xFDD
  2512                           fsr2h	equ	0xFDA
  2513                           fsr2l	equ	0xFD9
  2514                           status	equ	0xFD8
  2515                           
  2516 ;; *************** function _putch *****************
  2517 ;; Defined at:
  2518 ;;		line 33 in file "utils.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;  c               1    wreg     unsigned char 
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;  c               1   16[COMRAM] unsigned char 
  2523 ;; Return value:  Size  Location     Type
  2524 ;;		None               void
  2525 ;; Registers used:
  2526 ;;		wreg
  2527 ;; Tracked objects:
  2528 ;;		On entry : 0/0
  2529 ;;		On exit  : 0/0
  2530 ;;		Unchanged: 0/0
  2531 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2532 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2533 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2534 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2535 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2536 ;;Total ram usage:        1 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    3
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_printf
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545                           
  2546                           	psect	text2
  2547  0015C2                     __ptext2:
  2548                           	opt stack 0
  2549  0015C2                     _putch:
  2550                           	opt stack 26
  2551                           
  2552                           ;incstack = 0
  2553                           ;putch@c stored from wreg
  2554  0015C2  6E11               	movwf	putch@c,c
  2555                           
  2556                           ;utils.c: 35: while (!TRMT);
  2557  0015C4  D000               	goto	l369
  2558  0015C6                     l369:
  2559  0015C6  A2AC               	btfss	4012,1,c	;volatile
  2560  0015C8  D7FE               	goto	l369
  2561                           
  2562                           ;utils.c: 36: TXREG = c;
  2563  0015CA  C011  FFAD         	movff	putch@c,4013	;volatile
  2564  0015CE  0012               	return		;funcret
  2565  0015D0                     __end_of_putch:
  2566                           	opt stack 0
  2567                           tblptru	equ	0xFF8
  2568                           tblptrh	equ	0xFF7
  2569                           tblptrl	equ	0xFF6
  2570                           tablat	equ	0xFF5
  2571                           prodh	equ	0xFF4
  2572                           prodl	equ	0xFF3
  2573                           intcon2	equ	0xFF1
  2574                           postinc0	equ	0xFEE
  2575                           wreg	equ	0xFE8
  2576                           indf1	equ	0xFE7
  2577                           postinc1	equ	0xFE6
  2578                           postdec1	equ	0xFE5
  2579                           fsr1h	equ	0xFE2
  2580                           fsr1l	equ	0xFE1
  2581                           indf2	equ	0xFDF
  2582                           postinc2	equ	0xFDE
  2583                           postdec2	equ	0xFDD
  2584                           fsr2h	equ	0xFDA
  2585                           fsr2l	equ	0xFD9
  2586                           status	equ	0xFD8
  2587                           
  2588 ;; *************** function ___lwmod *****************
  2589 ;; Defined at:
  2590 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwmod.c"
  2591 ;; Parameters:    Size  Location     Type
  2592 ;;  dividend        2   23[COMRAM] unsigned int 
  2593 ;;  divisor         2   25[COMRAM] unsigned int 
  2594 ;; Auto vars:     Size  Location     Type
  2595 ;;  counter         1   27[COMRAM] unsigned char 
  2596 ;; Return value:  Size  Location     Type
  2597 ;;                  2   23[COMRAM] unsigned int 
  2598 ;; Registers used:
  2599 ;;		wreg, status,2, status,0
  2600 ;; Tracked objects:
  2601 ;;		On entry : 0/0
  2602 ;;		On exit  : 0/0
  2603 ;;		Unchanged: 0/0
  2604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2605 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2606 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2607 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2608 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2609 ;;Total ram usage:        5 bytes
  2610 ;; Hardware stack levels used:    1
  2611 ;; Hardware stack levels required when called:    3
  2612 ;; This function calls:
  2613 ;;		Nothing
  2614 ;; This function is called by:
  2615 ;;		_printf
  2616 ;; This function uses a non-reentrant model
  2617 ;;
  2618                           
  2619                           	psect	text3
  2620  0012EC                     __ptext3:
  2621                           	opt stack 0
  2622  0012EC                     ___lwmod:
  2623                           	opt stack 26
  2624                           
  2625                           ;incstack = 0
  2626  0012EC  501A               	movf	___lwmod@divisor,w,c
  2627  0012EE  101B               	iorwf	___lwmod@divisor+1,w,c
  2628  0012F0  B4D8               	btfsc	status,2,c
  2629  0012F2  D01D               	goto	l1127
  2630  0012F4  0E01               	movlw	1
  2631  0012F6  6E1C               	movwf	___lwmod@counter,c
  2632  0012F8  D005               	goto	l2846
  2633  0012FA                     l2844:
  2634  0012FA  90D8               	bcf	status,0,c
  2635  0012FC  361A               	rlcf	___lwmod@divisor,f,c
  2636  0012FE  361B               	rlcf	___lwmod@divisor+1,f,c
  2637  001300  2A1C               	incf	___lwmod@counter,f,c
  2638  001302  D000               	goto	l2846
  2639  001304                     l2846:
  2640  001304  BE1B               	btfsc	___lwmod@divisor+1,7,c
  2641  001306  D002               	goto	l2848
  2642  001308  D7F8               	goto	l2844
  2643  00130A  D000               	goto	l2848
  2644  00130C                     l2848:
  2645  00130C  501A               	movf	___lwmod@divisor,w,c
  2646  00130E  5C18               	subwf	___lwmod@dividend,w,c
  2647  001310  501B               	movf	___lwmod@divisor+1,w,c
  2648  001312  5819               	subwfb	___lwmod@dividend+1,w,c
  2649  001314  A0D8               	btfss	status,0,c
  2650  001316  D005               	goto	l2852
  2651  001318  501A               	movf	___lwmod@divisor,w,c
  2652  00131A  5E18               	subwf	___lwmod@dividend,f,c
  2653  00131C  501B               	movf	___lwmod@divisor+1,w,c
  2654  00131E  5A19               	subwfb	___lwmod@dividend+1,f,c
  2655  001320  D000               	goto	l2852
  2656  001322                     l2852:
  2657  001322  90D8               	bcf	status,0,c
  2658  001324  321B               	rrcf	___lwmod@divisor+1,f,c
  2659  001326  321A               	rrcf	___lwmod@divisor,f,c
  2660  001328  2E1C               	decfsz	___lwmod@counter,f,c
  2661  00132A  D7F0               	goto	l2848
  2662  00132C  D000               	goto	l1127
  2663  00132E                     l1127:
  2664  00132E  C018  F018         	movff	___lwmod@dividend,?___lwmod
  2665  001332  C019  F019         	movff	___lwmod@dividend+1,?___lwmod+1
  2666  001336  0012               	return		;funcret
  2667  001338                     __end_of___lwmod:
  2668                           	opt stack 0
  2669                           tblptru	equ	0xFF8
  2670                           tblptrh	equ	0xFF7
  2671                           tblptrl	equ	0xFF6
  2672                           tablat	equ	0xFF5
  2673                           prodh	equ	0xFF4
  2674                           prodl	equ	0xFF3
  2675                           intcon2	equ	0xFF1
  2676                           postinc0	equ	0xFEE
  2677                           wreg	equ	0xFE8
  2678                           indf1	equ	0xFE7
  2679                           postinc1	equ	0xFE6
  2680                           postdec1	equ	0xFE5
  2681                           fsr1h	equ	0xFE2
  2682                           fsr1l	equ	0xFE1
  2683                           indf2	equ	0xFDF
  2684                           postinc2	equ	0xFDE
  2685                           postdec2	equ	0xFDD
  2686                           fsr2h	equ	0xFDA
  2687                           fsr2l	equ	0xFD9
  2688                           status	equ	0xFD8
  2689                           
  2690 ;; *************** function ___lwdiv *****************
  2691 ;; Defined at:
  2692 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwdiv.c"
  2693 ;; Parameters:    Size  Location     Type
  2694 ;;  dividend        2   16[COMRAM] unsigned int 
  2695 ;;  divisor         2   18[COMRAM] unsigned int 
  2696 ;; Auto vars:     Size  Location     Type
  2697 ;;  quotient        2   20[COMRAM] unsigned int 
  2698 ;;  counter         1   22[COMRAM] unsigned char 
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  2   16[COMRAM] unsigned int 
  2701 ;; Registers used:
  2702 ;;		wreg, status,2, status,0
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2708 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;Total ram usage:        7 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:    3
  2715 ;; This function calls:
  2716 ;;		Nothing
  2717 ;; This function is called by:
  2718 ;;		_printf
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text4
  2723  00119E                     __ptext4:
  2724                           	opt stack 0
  2725  00119E                     ___lwdiv:
  2726                           	opt stack 26
  2727                           
  2728                           ;incstack = 0
  2729  00119E  0E00               	movlw	0
  2730  0011A0  6E16               	movwf	___lwdiv@quotient+1,c
  2731  0011A2  0E00               	movlw	0
  2732  0011A4  6E15               	movwf	___lwdiv@quotient,c
  2733  0011A6  5013               	movf	___lwdiv@divisor,w,c
  2734  0011A8  1014               	iorwf	___lwdiv@divisor+1,w,c
  2735  0011AA  B4D8               	btfsc	status,2,c
  2736  0011AC  D021               	goto	l1117
  2737  0011AE  0E01               	movlw	1
  2738  0011B0  6E17               	movwf	___lwdiv@counter,c
  2739  0011B2  D005               	goto	l2826
  2740  0011B4                     l2824:
  2741  0011B4  90D8               	bcf	status,0,c
  2742  0011B6  3613               	rlcf	___lwdiv@divisor,f,c
  2743  0011B8  3614               	rlcf	___lwdiv@divisor+1,f,c
  2744  0011BA  2A17               	incf	___lwdiv@counter,f,c
  2745  0011BC  D000               	goto	l2826
  2746  0011BE                     l2826:
  2747  0011BE  BE14               	btfsc	___lwdiv@divisor+1,7,c
  2748  0011C0  D002               	goto	l2828
  2749  0011C2  D7F8               	goto	l2824
  2750  0011C4  D000               	goto	l2828
  2751  0011C6                     l2828:
  2752  0011C6  90D8               	bcf	status,0,c
  2753  0011C8  3615               	rlcf	___lwdiv@quotient,f,c
  2754  0011CA  3616               	rlcf	___lwdiv@quotient+1,f,c
  2755  0011CC  5013               	movf	___lwdiv@divisor,w,c
  2756  0011CE  5C11               	subwf	___lwdiv@dividend,w,c
  2757  0011D0  5014               	movf	___lwdiv@divisor+1,w,c
  2758  0011D2  5812               	subwfb	___lwdiv@dividend+1,w,c
  2759  0011D4  A0D8               	btfss	status,0,c
  2760  0011D6  D006               	goto	l2836
  2761  0011D8  5013               	movf	___lwdiv@divisor,w,c
  2762  0011DA  5E11               	subwf	___lwdiv@dividend,f,c
  2763  0011DC  5014               	movf	___lwdiv@divisor+1,w,c
  2764  0011DE  5A12               	subwfb	___lwdiv@dividend+1,f,c
  2765  0011E0  8015               	bsf	___lwdiv@quotient,0,c
  2766  0011E2  D000               	goto	l2836
  2767  0011E4                     l2836:
  2768  0011E4  90D8               	bcf	status,0,c
  2769  0011E6  3214               	rrcf	___lwdiv@divisor+1,f,c
  2770  0011E8  3213               	rrcf	___lwdiv@divisor,f,c
  2771  0011EA  2E17               	decfsz	___lwdiv@counter,f,c
  2772  0011EC  D7EC               	goto	l2828
  2773  0011EE  D000               	goto	l1117
  2774  0011F0                     l1117:
  2775  0011F0  C015  F011         	movff	___lwdiv@quotient,?___lwdiv
  2776  0011F4  C016  F012         	movff	___lwdiv@quotient+1,?___lwdiv+1
  2777  0011F8  0012               	return		;funcret
  2778  0011FA                     __end_of___lwdiv:
  2779                           	opt stack 0
  2780                           tblptru	equ	0xFF8
  2781                           tblptrh	equ	0xFF7
  2782                           tblptrl	equ	0xFF6
  2783                           tablat	equ	0xFF5
  2784                           prodh	equ	0xFF4
  2785                           prodl	equ	0xFF3
  2786                           intcon2	equ	0xFF1
  2787                           postinc0	equ	0xFEE
  2788                           wreg	equ	0xFE8
  2789                           indf1	equ	0xFE7
  2790                           postinc1	equ	0xFE6
  2791                           postdec1	equ	0xFE5
  2792                           fsr1h	equ	0xFE2
  2793                           fsr1l	equ	0xFE1
  2794                           indf2	equ	0xFDF
  2795                           postinc2	equ	0xFDE
  2796                           postdec2	equ	0xFDD
  2797                           fsr2h	equ	0xFDA
  2798                           fsr2l	equ	0xFD9
  2799                           status	equ	0xFD8
  2800                           
  2801 ;; *************** function _fillCircle *****************
  2802 ;; Defined at:
  2803 ;;		line 561 in file "ST7735_TFT.c"
  2804 ;; Parameters:    Size  Location     Type
  2805 ;;  x0              2   58[COMRAM] int 
  2806 ;;  y0              2   60[COMRAM] int 
  2807 ;;  r               2   62[COMRAM] int 
  2808 ;;  color           2   64[COMRAM] unsigned int 
  2809 ;; Auto vars:     Size  Location     Type
  2810 ;;		None
  2811 ;; Return value:  Size  Location     Type
  2812 ;;		None               void
  2813 ;; Registers used:
  2814 ;;		wreg, status,2, status,0, cstack
  2815 ;; Tracked objects:
  2816 ;;		On entry : 0/0
  2817 ;;		On exit  : 0/0
  2818 ;;		Unchanged: 0/0
  2819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2820 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2822 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2823 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2824 ;;Total ram usage:        8 bytes
  2825 ;; Hardware stack levels used:    1
  2826 ;; Hardware stack levels required when called:    8
  2827 ;; This function calls:
  2828 ;;		_drawFastVLine
  2829 ;;		_fillCircleHelper
  2830 ;; This function is called by:
  2831 ;;		_main
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text5
  2836  0011FA                     __ptext5:
  2837                           	opt stack 0
  2838  0011FA                     _fillCircle:
  2839                           	opt stack 22
  2840                           
  2841                           ;ST7735_TFT.c: 563: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  2842                           
  2843                           ;incstack = 0
  2844  0011FA  503F               	movf	fillCircle@r,w,c
  2845  0011FC  0800               	sublw	0
  2846  0011FE  243D               	addwf	fillCircle@y0,w,c
  2847  001200  6E18               	movwf	drawFastVLine@y,c
  2848  001202  80D8               	bsf	status,0,c
  2849  001204  343F               	rlcf	fillCircle@r,w,c
  2850  001206  6E19               	movwf	drawFastVLine@h,c
  2851  001208  C041  F01A         	movff	fillCircle@color,drawFastVLine@color
  2852  00120C  C042  F01B         	movff	fillCircle@color+1,drawFastVLine@color+1
  2853  001210  503B               	movf	fillCircle@x0,w,c
  2854  001212  ECD4  F007         	call	_drawFastVLine
  2855                           
  2856                           ;ST7735_TFT.c: 564: fillCircleHelper(x0, y0, r, 3, 0, color);
  2857  001216  C03B  F023         	movff	fillCircle@x0,fillCircleHelper@x0
  2858  00121A  C03C  F024         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  2859  00121E  C03D  F025         	movff	fillCircle@y0,fillCircleHelper@y0
  2860  001222  C03E  F026         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  2861  001226  C03F  F027         	movff	fillCircle@r,fillCircleHelper@r
  2862  00122A  C040  F028         	movff	fillCircle@r+1,fillCircleHelper@r+1
  2863  00122E  0E00               	movlw	0
  2864  001230  6E2A               	movwf	fillCircleHelper@cornername+1,c
  2865  001232  0E03               	movlw	3
  2866  001234  6E29               	movwf	fillCircleHelper@cornername,c
  2867  001236  0E00               	movlw	0
  2868  001238  6E2C               	movwf	fillCircleHelper@delta+1,c
  2869  00123A  0E00               	movlw	0
  2870  00123C  6E2B               	movwf	fillCircleHelper@delta,c
  2871  00123E  C041  F02D         	movff	fillCircle@color,fillCircleHelper@color
  2872  001242  C042  F02E         	movff	fillCircle@color+1,fillCircleHelper@color+1
  2873  001246  ECA0  F004         	call	_fillCircleHelper	;wreg free
  2874  00124A  0012               	return		;funcret
  2875  00124C                     __end_of_fillCircle:
  2876                           	opt stack 0
  2877                           tblptru	equ	0xFF8
  2878                           tblptrh	equ	0xFF7
  2879                           tblptrl	equ	0xFF6
  2880                           tablat	equ	0xFF5
  2881                           prodh	equ	0xFF4
  2882                           prodl	equ	0xFF3
  2883                           intcon2	equ	0xFF1
  2884                           postinc0	equ	0xFEE
  2885                           wreg	equ	0xFE8
  2886                           indf1	equ	0xFE7
  2887                           postinc1	equ	0xFE6
  2888                           postdec1	equ	0xFE5
  2889                           fsr1h	equ	0xFE2
  2890                           fsr1l	equ	0xFE1
  2891                           indf2	equ	0xFDF
  2892                           postinc2	equ	0xFDE
  2893                           postdec2	equ	0xFDD
  2894                           fsr2h	equ	0xFDA
  2895                           fsr2l	equ	0xFD9
  2896                           status	equ	0xFD8
  2897                           
  2898 ;; *************** function _fillCircleHelper *****************
  2899 ;; Defined at:
  2900 ;;		line 536 in file "ST7735_TFT.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;  x0              2   34[COMRAM] int 
  2903 ;;  y0              2   36[COMRAM] int 
  2904 ;;  r               2   38[COMRAM] int 
  2905 ;;  cornername      2   40[COMRAM] unsigned int 
  2906 ;;  delta           2   42[COMRAM] int 
  2907 ;;  color           2   44[COMRAM] unsigned int 
  2908 ;; Auto vars:     Size  Location     Type
  2909 ;;  y               2   56[COMRAM] int 
  2910 ;;  x               2   54[COMRAM] int 
  2911 ;;  f               2   52[COMRAM] int 
  2912 ;;  ddF_y           2   50[COMRAM] int 
  2913 ;;  ddF_x           2   48[COMRAM] int 
  2914 ;; Return value:  Size  Location     Type
  2915 ;;		None               void
  2916 ;; Registers used:
  2917 ;;		wreg, status,2, status,0, cstack
  2918 ;; Tracked objects:
  2919 ;;		On entry : 0/0
  2920 ;;		On exit  : 0/0
  2921 ;;		Unchanged: 0/0
  2922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2923 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2924 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2925 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2926 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2927 ;;Total ram usage:       24 bytes
  2928 ;; Hardware stack levels used:    1
  2929 ;; Hardware stack levels required when called:    7
  2930 ;; This function calls:
  2931 ;;		_drawFastVLine
  2932 ;; This function is called by:
  2933 ;;		_fillCircle
  2934 ;; This function uses a non-reentrant model
  2935 ;;
  2936                           
  2937                           	psect	text6
  2938  000940                     __ptext6:
  2939                           	opt stack 0
  2940  000940                     _fillCircleHelper:
  2941                           	opt stack 22
  2942                           
  2943                           ;ST7735_TFT.c: 538: signed int f, ddF_x, ddF_y, x, y;
  2944                           ;ST7735_TFT.c: 539: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  2945                           
  2946                           ;incstack = 0
  2947  000940  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  2948  000944  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  2949  000948  1E2F               	comf	??_fillCircleHelper,f,c
  2950  00094A  1E30               	comf	??_fillCircleHelper+1,f,c
  2951  00094C  4A2F               	infsnz	??_fillCircleHelper,f,c
  2952  00094E  2A30               	incf	??_fillCircleHelper+1,f,c
  2953  000950  0E01               	movlw	1
  2954  000952  242F               	addwf	??_fillCircleHelper,w,c
  2955  000954  6E35               	movwf	fillCircleHelper@f,c
  2956  000956  0E00               	movlw	0
  2957  000958  2030               	addwfc	??_fillCircleHelper+1,w,c
  2958  00095A  6E36               	movwf	fillCircleHelper@f+1,c
  2959  00095C  0E00               	movlw	0
  2960  00095E  6E32               	movwf	fillCircleHelper@ddF_x+1,c
  2961  000960  0E01               	movlw	1
  2962  000962  6E31               	movwf	fillCircleHelper@ddF_x,c
  2963  000964  C027  F02F         	movff	fillCircleHelper@r,??_fillCircleHelper
  2964  000968  C028  F030         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  2965  00096C  90D8               	bcf	status,0,c
  2966  00096E  362F               	rlcf	??_fillCircleHelper,f,c
  2967  000970  3630               	rlcf	??_fillCircleHelper+1,f,c
  2968  000972  1E2F               	comf	??_fillCircleHelper,f,c
  2969  000974  1E30               	comf	??_fillCircleHelper+1,f,c
  2970  000976  4A2F               	infsnz	??_fillCircleHelper,f,c
  2971  000978  2A30               	incf	??_fillCircleHelper+1,f,c
  2972  00097A  C02F  F033         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  2973  00097E  C030  F034         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  2974  000982  0E00               	movlw	0
  2975  000984  6E38               	movwf	fillCircleHelper@x+1,c
  2976  000986  0E00               	movlw	0
  2977  000988  6E37               	movwf	fillCircleHelper@x,c
  2978  00098A  C027  F039         	movff	fillCircleHelper@r,fillCircleHelper@y
  2979  00098E  C028  F03A         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  2980                           
  2981                           ;ST7735_TFT.c: 540: while (x<y) {
  2982  000992  D067               	goto	l3770
  2983  000994                     l3750:
  2984                           
  2985                           ;ST7735_TFT.c: 541: if (f >= 0) {
  2986  000994  BE36               	btfsc	fillCircleHelper@f+1,7,c
  2987  000996  D00B               	goto	l280
  2988                           
  2989                           ;ST7735_TFT.c: 542: y--;
  2990  000998  0639               	decf	fillCircleHelper@y,f,c
  2991  00099A  A0D8               	btfss	status,0,c
  2992  00099C  063A               	decf	fillCircleHelper@y+1,f,c
  2993                           
  2994                           ;ST7735_TFT.c: 543: ddF_y += 2;
  2995  00099E  0E02               	movlw	2
  2996  0009A0  2633               	addwf	fillCircleHelper@ddF_y,f,c
  2997  0009A2  0E00               	movlw	0
  2998  0009A4  2234               	addwfc	fillCircleHelper@ddF_y+1,f,c
  2999                           
  3000                           ;ST7735_TFT.c: 544: f += ddF_y;
  3001  0009A6  5033               	movf	fillCircleHelper@ddF_y,w,c
  3002  0009A8  2635               	addwf	fillCircleHelper@f,f,c
  3003  0009AA  5034               	movf	fillCircleHelper@ddF_y+1,w,c
  3004  0009AC  2236               	addwfc	fillCircleHelper@f+1,f,c
  3005  0009AE                     l280:
  3006                           
  3007                           ;ST7735_TFT.c: 545: }
  3008                           ;ST7735_TFT.c: 546: x++;
  3009  0009AE  4A37               	infsnz	fillCircleHelper@x,f,c
  3010  0009B0  2A38               	incf	fillCircleHelper@x+1,f,c
  3011                           
  3012                           ;ST7735_TFT.c: 547: ddF_x += 2;
  3013  0009B2  0E02               	movlw	2
  3014  0009B4  2631               	addwf	fillCircleHelper@ddF_x,f,c
  3015  0009B6  0E00               	movlw	0
  3016  0009B8  2232               	addwfc	fillCircleHelper@ddF_x+1,f,c
  3017                           
  3018                           ;ST7735_TFT.c: 548: f += ddF_x;
  3019  0009BA  5031               	movf	fillCircleHelper@ddF_x,w,c
  3020  0009BC  2635               	addwf	fillCircleHelper@f,f,c
  3021  0009BE  5032               	movf	fillCircleHelper@ddF_x+1,w,c
  3022  0009C0  2236               	addwfc	fillCircleHelper@f+1,f,c
  3023                           
  3024                           ;ST7735_TFT.c: 550: if (cornername & 0x1) {
  3025  0009C2  A029               	btfss	fillCircleHelper@cornername,0,c
  3026  0009C4  D025               	goto	l3766
  3027                           
  3028                           ;ST7735_TFT.c: 551: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  3029  0009C6  5039               	movf	fillCircleHelper@y,w,c
  3030  0009C8  0800               	sublw	0
  3031  0009CA  2425               	addwf	fillCircleHelper@y0,w,c
  3032  0009CC  6E18               	movwf	drawFastVLine@y,c
  3033  0009CE  5039               	movf	fillCircleHelper@y,w,c
  3034  0009D0  2439               	addwf	fillCircleHelper@y,w,c
  3035  0009D2  242B               	addwf	fillCircleHelper@delta,w,c
  3036  0009D4  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3037  0009D6  282F               	incf	??_fillCircleHelper,w,c
  3038  0009D8  6E19               	movwf	drawFastVLine@h,c
  3039  0009DA  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3040  0009DE  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3041  0009E2  5023               	movf	fillCircleHelper@x0,w,c
  3042  0009E4  2437               	addwf	fillCircleHelper@x,w,c
  3043  0009E6  ECD4  F007         	call	_drawFastVLine
  3044                           
  3045                           ;ST7735_TFT.c: 552: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  3046  0009EA  5037               	movf	fillCircleHelper@x,w,c
  3047  0009EC  0800               	sublw	0
  3048  0009EE  2425               	addwf	fillCircleHelper@y0,w,c
  3049  0009F0  6E18               	movwf	drawFastVLine@y,c
  3050  0009F2  5037               	movf	fillCircleHelper@x,w,c
  3051  0009F4  2437               	addwf	fillCircleHelper@x,w,c
  3052  0009F6  242B               	addwf	fillCircleHelper@delta,w,c
  3053  0009F8  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3054  0009FA  282F               	incf	??_fillCircleHelper,w,c
  3055  0009FC  6E19               	movwf	drawFastVLine@h,c
  3056  0009FE  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3057  000A02  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3058  000A06  5023               	movf	fillCircleHelper@x0,w,c
  3059  000A08  2439               	addwf	fillCircleHelper@y,w,c
  3060  000A0A  ECD4  F007         	call	_drawFastVLine
  3061  000A0E  D000               	goto	l3766
  3062  000A10                     l3766:
  3063                           
  3064                           ;ST7735_TFT.c: 553: }
  3065                           ;ST7735_TFT.c: 554: if (cornername & 0x2) {
  3066  000A10  A229               	btfss	fillCircleHelper@cornername,1,c
  3067  000A12  D027               	goto	l3770
  3068                           
  3069                           ;ST7735_TFT.c: 555: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  3070  000A14  5039               	movf	fillCircleHelper@y,w,c
  3071  000A16  0800               	sublw	0
  3072  000A18  2425               	addwf	fillCircleHelper@y0,w,c
  3073  000A1A  6E18               	movwf	drawFastVLine@y,c
  3074  000A1C  5039               	movf	fillCircleHelper@y,w,c
  3075  000A1E  2439               	addwf	fillCircleHelper@y,w,c
  3076  000A20  242B               	addwf	fillCircleHelper@delta,w,c
  3077  000A22  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3078  000A24  282F               	incf	??_fillCircleHelper,w,c
  3079  000A26  6E19               	movwf	drawFastVLine@h,c
  3080  000A28  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3081  000A2C  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3082  000A30  5037               	movf	fillCircleHelper@x,w,c
  3083  000A32  0800               	sublw	0
  3084  000A34  2423               	addwf	fillCircleHelper@x0,w,c
  3085  000A36  ECD4  F007         	call	_drawFastVLine
  3086                           
  3087                           ;ST7735_TFT.c: 556: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  3088  000A3A  5037               	movf	fillCircleHelper@x,w,c
  3089  000A3C  0800               	sublw	0
  3090  000A3E  2425               	addwf	fillCircleHelper@y0,w,c
  3091  000A40  6E18               	movwf	drawFastVLine@y,c
  3092  000A42  5037               	movf	fillCircleHelper@x,w,c
  3093  000A44  2437               	addwf	fillCircleHelper@x,w,c
  3094  000A46  242B               	addwf	fillCircleHelper@delta,w,c
  3095  000A48  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3096  000A4A  282F               	incf	??_fillCircleHelper,w,c
  3097  000A4C  6E19               	movwf	drawFastVLine@h,c
  3098  000A4E  C02D  F01A         	movff	fillCircleHelper@color,drawFastVLine@color
  3099  000A52  C02E  F01B         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  3100  000A56  5039               	movf	fillCircleHelper@y,w,c
  3101  000A58  0800               	sublw	0
  3102  000A5A  2423               	addwf	fillCircleHelper@x0,w,c
  3103  000A5C  ECD4  F007         	call	_drawFastVLine
  3104  000A60  D000               	goto	l3770
  3105  000A62                     l3770:
  3106  000A62  5039               	movf	fillCircleHelper@y,w,c
  3107  000A64  5C37               	subwf	fillCircleHelper@x,w,c
  3108  000A66  5038               	movf	fillCircleHelper@x+1,w,c
  3109  000A68  0A80               	xorlw	128
  3110  000A6A  6E2F               	movwf	??_fillCircleHelper& (0+255),c
  3111  000A6C  503A               	movf	fillCircleHelper@y+1,w,c
  3112  000A6E  0A80               	xorlw	128
  3113  000A70  582F               	subwfb	??_fillCircleHelper& (0+255),w,c
  3114  000A72  A0D8               	btfss	status,0,c
  3115  000A74  D78F               	goto	l3750
  3116  000A76  0012               	return		;funcret
  3117  000A78                     __end_of_fillCircleHelper:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           prodh	equ	0xFF4
  3124                           prodl	equ	0xFF3
  3125                           intcon2	equ	0xFF1
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           indf1	equ	0xFE7
  3129                           postinc1	equ	0xFE6
  3130                           postdec1	equ	0xFE5
  3131                           fsr1h	equ	0xFE2
  3132                           fsr1l	equ	0xFE1
  3133                           indf2	equ	0xFDF
  3134                           postinc2	equ	0xFDE
  3135                           postdec2	equ	0xFDD
  3136                           fsr2h	equ	0xFDA
  3137                           fsr2l	equ	0xFD9
  3138                           status	equ	0xFD8
  3139                           
  3140 ;; *************** function _drawCircle *****************
  3141 ;; Defined at:
  3142 ;;		line 475 in file "ST7735_TFT.c"
  3143 ;; Parameters:    Size  Location     Type
  3144 ;;  x0              2   27[COMRAM] int 
  3145 ;;  y0              2   29[COMRAM] int 
  3146 ;;  r               2   31[COMRAM] int 
  3147 ;;  color           2   33[COMRAM] unsigned int 
  3148 ;; Auto vars:     Size  Location     Type
  3149 ;;  y               2   45[COMRAM] int 
  3150 ;;  x               2   43[COMRAM] int 
  3151 ;;  f               2   41[COMRAM] int 
  3152 ;;  ddF_y           2   39[COMRAM] int 
  3153 ;;  ddF_x           2   37[COMRAM] int 
  3154 ;; Return value:  Size  Location     Type
  3155 ;;		None               void
  3156 ;; Registers used:
  3157 ;;		wreg, status,2, status,0, cstack
  3158 ;; Tracked objects:
  3159 ;;		On entry : 0/0
  3160 ;;		On exit  : 0/0
  3161 ;;		Unchanged: 0/0
  3162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3163 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3164 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3165 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3166 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3167 ;;Total ram usage:       20 bytes
  3168 ;; Hardware stack levels used:    1
  3169 ;; Hardware stack levels required when called:    7
  3170 ;; This function calls:
  3171 ;;		_drawPixel
  3172 ;; This function is called by:
  3173 ;;		_main
  3174 ;; This function uses a non-reentrant model
  3175 ;;
  3176                           
  3177                           	psect	text7
  3178  00049E                     __ptext7:
  3179                           	opt stack 0
  3180  00049E                     _drawCircle:
  3181                           	opt stack 23
  3182                           
  3183                           ;ST7735_TFT.c: 477: signed int f, ddF_x, ddF_y, x, y;
  3184                           ;ST7735_TFT.c: 478: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  3185                           
  3186                           ;incstack = 0
  3187  00049E  C020  F024         	movff	drawCircle@r,??_drawCircle
  3188  0004A2  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3189  0004A6  1E24               	comf	??_drawCircle,f,c
  3190  0004A8  1E25               	comf	??_drawCircle+1,f,c
  3191  0004AA  4A24               	infsnz	??_drawCircle,f,c
  3192  0004AC  2A25               	incf	??_drawCircle+1,f,c
  3193  0004AE  0E01               	movlw	1
  3194  0004B0  2424               	addwf	??_drawCircle,w,c
  3195  0004B2  6E2A               	movwf	drawCircle@f,c
  3196  0004B4  0E00               	movlw	0
  3197  0004B6  2025               	addwfc	??_drawCircle+1,w,c
  3198  0004B8  6E2B               	movwf	drawCircle@f+1,c
  3199  0004BA  0E00               	movlw	0
  3200  0004BC  6E27               	movwf	drawCircle@ddF_x+1,c
  3201  0004BE  0E01               	movlw	1
  3202  0004C0  6E26               	movwf	drawCircle@ddF_x,c
  3203  0004C2  C020  F024         	movff	drawCircle@r,??_drawCircle
  3204  0004C6  C021  F025         	movff	drawCircle@r+1,??_drawCircle+1
  3205  0004CA  90D8               	bcf	status,0,c
  3206  0004CC  3624               	rlcf	??_drawCircle,f,c
  3207  0004CE  3625               	rlcf	??_drawCircle+1,f,c
  3208  0004D0  1E24               	comf	??_drawCircle,f,c
  3209  0004D2  1E25               	comf	??_drawCircle+1,f,c
  3210  0004D4  4A24               	infsnz	??_drawCircle,f,c
  3211  0004D6  2A25               	incf	??_drawCircle+1,f,c
  3212  0004D8  C024  F028         	movff	??_drawCircle,drawCircle@ddF_y
  3213  0004DC  C025  F029         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  3214  0004E0  0E00               	movlw	0
  3215  0004E2  6E2D               	movwf	drawCircle@x+1,c
  3216  0004E4  0E00               	movlw	0
  3217  0004E6  6E2C               	movwf	drawCircle@x,c
  3218  0004E8  C020  F02E         	movff	drawCircle@r,drawCircle@y
  3219  0004EC  C021  F02F         	movff	drawCircle@r+1,drawCircle@y+1
  3220                           
  3221                           ;ST7735_TFT.c: 479: drawPixel(x0 , y0 + r, color);
  3222  0004F0  501E               	movf	drawCircle@y0,w,c
  3223  0004F2  2420               	addwf	drawCircle@r,w,c
  3224  0004F4  6E18               	movwf	drawPixel@y,c
  3225  0004F6  C022  F019         	movff	drawCircle@color,drawPixel@color
  3226  0004FA  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3227  0004FE  501C               	movf	drawCircle@x0,w,c
  3228  000500  EC38  F00A         	call	_drawPixel
  3229                           
  3230                           ;ST7735_TFT.c: 480: drawPixel(x0 , y0 - r, color);
  3231  000504  5020               	movf	drawCircle@r,w,c
  3232  000506  0800               	sublw	0
  3233  000508  241E               	addwf	drawCircle@y0,w,c
  3234  00050A  6E18               	movwf	drawPixel@y,c
  3235  00050C  C022  F019         	movff	drawCircle@color,drawPixel@color
  3236  000510  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3237  000514  501C               	movf	drawCircle@x0,w,c
  3238  000516  EC38  F00A         	call	_drawPixel
  3239                           
  3240                           ;ST7735_TFT.c: 481: drawPixel(x0+r, y0 , color);
  3241  00051A  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3242  00051E  C022  F019         	movff	drawCircle@color,drawPixel@color
  3243  000522  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3244  000526  501C               	movf	drawCircle@x0,w,c
  3245  000528  2420               	addwf	drawCircle@r,w,c
  3246  00052A  EC38  F00A         	call	_drawPixel
  3247                           
  3248                           ;ST7735_TFT.c: 482: drawPixel(x0-r, y0 , color);
  3249  00052E  C01E  F018         	movff	drawCircle@y0,drawPixel@y
  3250  000532  C022  F019         	movff	drawCircle@color,drawPixel@color
  3251  000536  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3252  00053A  5020               	movf	drawCircle@r,w,c
  3253  00053C  0800               	sublw	0
  3254  00053E  241C               	addwf	drawCircle@x0,w,c
  3255  000540  EC38  F00A         	call	_drawPixel
  3256                           
  3257                           ;ST7735_TFT.c: 483: while (x < y) {
  3258  000544  D078               	goto	l3836
  3259  000546                     l3808:
  3260                           
  3261                           ;ST7735_TFT.c: 484: if (f >= 0) {
  3262  000546  BE2B               	btfsc	drawCircle@f+1,7,c
  3263  000548  D00B               	goto	l262
  3264                           
  3265                           ;ST7735_TFT.c: 485: y--;
  3266  00054A  062E               	decf	drawCircle@y,f,c
  3267  00054C  A0D8               	btfss	status,0,c
  3268  00054E  062F               	decf	drawCircle@y+1,f,c
  3269                           
  3270                           ;ST7735_TFT.c: 486: ddF_y += 2;
  3271  000550  0E02               	movlw	2
  3272  000552  2628               	addwf	drawCircle@ddF_y,f,c
  3273  000554  0E00               	movlw	0
  3274  000556  2229               	addwfc	drawCircle@ddF_y+1,f,c
  3275                           
  3276                           ;ST7735_TFT.c: 487: f += ddF_y;
  3277  000558  5028               	movf	drawCircle@ddF_y,w,c
  3278  00055A  262A               	addwf	drawCircle@f,f,c
  3279  00055C  5029               	movf	drawCircle@ddF_y+1,w,c
  3280  00055E  222B               	addwfc	drawCircle@f+1,f,c
  3281  000560                     l262:
  3282                           
  3283                           ;ST7735_TFT.c: 488: }
  3284                           ;ST7735_TFT.c: 489: x++;
  3285  000560  4A2C               	infsnz	drawCircle@x,f,c
  3286  000562  2A2D               	incf	drawCircle@x+1,f,c
  3287                           
  3288                           ;ST7735_TFT.c: 490: ddF_x += 2;
  3289  000564  0E02               	movlw	2
  3290  000566  2626               	addwf	drawCircle@ddF_x,f,c
  3291  000568  0E00               	movlw	0
  3292  00056A  2227               	addwfc	drawCircle@ddF_x+1,f,c
  3293                           
  3294                           ;ST7735_TFT.c: 491: f += ddF_x;
  3295  00056C  5026               	movf	drawCircle@ddF_x,w,c
  3296  00056E  262A               	addwf	drawCircle@f,f,c
  3297  000570  5027               	movf	drawCircle@ddF_x+1,w,c
  3298  000572  222B               	addwfc	drawCircle@f+1,f,c
  3299                           
  3300                           ;ST7735_TFT.c: 492: drawPixel(x0 + x, y0 + y, color);
  3301  000574  501E               	movf	drawCircle@y0,w,c
  3302  000576  242E               	addwf	drawCircle@y,w,c
  3303  000578  6E18               	movwf	drawPixel@y,c
  3304  00057A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3305  00057E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3306  000582  501C               	movf	drawCircle@x0,w,c
  3307  000584  242C               	addwf	drawCircle@x,w,c
  3308  000586  EC38  F00A         	call	_drawPixel
  3309                           
  3310                           ;ST7735_TFT.c: 493: drawPixel(x0 - x, y0 + y, color);
  3311  00058A  501E               	movf	drawCircle@y0,w,c
  3312  00058C  242E               	addwf	drawCircle@y,w,c
  3313  00058E  6E18               	movwf	drawPixel@y,c
  3314  000590  C022  F019         	movff	drawCircle@color,drawPixel@color
  3315  000594  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3316  000598  502C               	movf	drawCircle@x,w,c
  3317  00059A  0800               	sublw	0
  3318  00059C  241C               	addwf	drawCircle@x0,w,c
  3319  00059E  EC38  F00A         	call	_drawPixel
  3320                           
  3321                           ;ST7735_TFT.c: 494: drawPixel(x0 + x, y0 - y, color);
  3322  0005A2  502E               	movf	drawCircle@y,w,c
  3323  0005A4  0800               	sublw	0
  3324  0005A6  241E               	addwf	drawCircle@y0,w,c
  3325  0005A8  6E18               	movwf	drawPixel@y,c
  3326  0005AA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3327  0005AE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3328  0005B2  501C               	movf	drawCircle@x0,w,c
  3329  0005B4  242C               	addwf	drawCircle@x,w,c
  3330  0005B6  EC38  F00A         	call	_drawPixel
  3331                           
  3332                           ;ST7735_TFT.c: 495: drawPixel(x0 - x, y0 - y, color);
  3333  0005BA  502E               	movf	drawCircle@y,w,c
  3334  0005BC  0800               	sublw	0
  3335  0005BE  241E               	addwf	drawCircle@y0,w,c
  3336  0005C0  6E18               	movwf	drawPixel@y,c
  3337  0005C2  C022  F019         	movff	drawCircle@color,drawPixel@color
  3338  0005C6  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3339  0005CA  502C               	movf	drawCircle@x,w,c
  3340  0005CC  0800               	sublw	0
  3341  0005CE  241C               	addwf	drawCircle@x0,w,c
  3342  0005D0  EC38  F00A         	call	_drawPixel
  3343                           
  3344                           ;ST7735_TFT.c: 496: drawPixel(x0 + y, y0 + x, color);
  3345  0005D4  501E               	movf	drawCircle@y0,w,c
  3346  0005D6  242C               	addwf	drawCircle@x,w,c
  3347  0005D8  6E18               	movwf	drawPixel@y,c
  3348  0005DA  C022  F019         	movff	drawCircle@color,drawPixel@color
  3349  0005DE  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3350  0005E2  501C               	movf	drawCircle@x0,w,c
  3351  0005E4  242E               	addwf	drawCircle@y,w,c
  3352  0005E6  EC38  F00A         	call	_drawPixel
  3353                           
  3354                           ;ST7735_TFT.c: 497: drawPixel(x0 - y, y0 + x, color);
  3355  0005EA  501E               	movf	drawCircle@y0,w,c
  3356  0005EC  242C               	addwf	drawCircle@x,w,c
  3357  0005EE  6E18               	movwf	drawPixel@y,c
  3358  0005F0  C022  F019         	movff	drawCircle@color,drawPixel@color
  3359  0005F4  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3360  0005F8  502E               	movf	drawCircle@y,w,c
  3361  0005FA  0800               	sublw	0
  3362  0005FC  241C               	addwf	drawCircle@x0,w,c
  3363  0005FE  EC38  F00A         	call	_drawPixel
  3364                           
  3365                           ;ST7735_TFT.c: 498: drawPixel(x0 + y, y0 - x, color);
  3366  000602  502C               	movf	drawCircle@x,w,c
  3367  000604  0800               	sublw	0
  3368  000606  241E               	addwf	drawCircle@y0,w,c
  3369  000608  6E18               	movwf	drawPixel@y,c
  3370  00060A  C022  F019         	movff	drawCircle@color,drawPixel@color
  3371  00060E  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3372  000612  501C               	movf	drawCircle@x0,w,c
  3373  000614  242E               	addwf	drawCircle@y,w,c
  3374  000616  EC38  F00A         	call	_drawPixel
  3375                           
  3376                           ;ST7735_TFT.c: 499: drawPixel(x0 - y, y0 - x, color);
  3377  00061A  502C               	movf	drawCircle@x,w,c
  3378  00061C  0800               	sublw	0
  3379  00061E  241E               	addwf	drawCircle@y0,w,c
  3380  000620  6E18               	movwf	drawPixel@y,c
  3381  000622  C022  F019         	movff	drawCircle@color,drawPixel@color
  3382  000626  C023  F01A         	movff	drawCircle@color+1,drawPixel@color+1
  3383  00062A  502E               	movf	drawCircle@y,w,c
  3384  00062C  0800               	sublw	0
  3385  00062E  241C               	addwf	drawCircle@x0,w,c
  3386  000630  EC38  F00A         	call	_drawPixel
  3387  000634  D000               	goto	l3836
  3388  000636                     l3836:
  3389  000636  502E               	movf	drawCircle@y,w,c
  3390  000638  5C2C               	subwf	drawCircle@x,w,c
  3391  00063A  502D               	movf	drawCircle@x+1,w,c
  3392  00063C  0A80               	xorlw	128
  3393  00063E  6E24               	movwf	??_drawCircle& (0+255),c
  3394  000640  502F               	movf	drawCircle@y+1,w,c
  3395  000642  0A80               	xorlw	128
  3396  000644  5824               	subwfb	??_drawCircle& (0+255),w,c
  3397  000646  A0D8               	btfss	status,0,c
  3398  000648  D77E               	goto	l3808
  3399  00064A  0012               	return		;funcret
  3400  00064C                     __end_of_drawCircle:
  3401                           	opt stack 0
  3402                           tblptru	equ	0xFF8
  3403                           tblptrh	equ	0xFF7
  3404                           tblptrl	equ	0xFF6
  3405                           tablat	equ	0xFF5
  3406                           prodh	equ	0xFF4
  3407                           prodl	equ	0xFF3
  3408                           intcon2	equ	0xFF1
  3409                           postinc0	equ	0xFEE
  3410                           wreg	equ	0xFE8
  3411                           indf1	equ	0xFE7
  3412                           postinc1	equ	0xFE6
  3413                           postdec1	equ	0xFE5
  3414                           fsr1h	equ	0xFE2
  3415                           fsr1l	equ	0xFE1
  3416                           indf2	equ	0xFDF
  3417                           postinc2	equ	0xFDE
  3418                           postdec2	equ	0xFDD
  3419                           fsr2h	equ	0xFDA
  3420                           fsr2l	equ	0xFD9
  3421                           status	equ	0xFD8
  3422                           
  3423 ;; *************** function _Wait_One_Sec *****************
  3424 ;; Defined at:
  3425 ;;		line 39 in file "utils.c"
  3426 ;; Parameters:    Size  Location     Type
  3427 ;;		None
  3428 ;; Auto vars:     Size  Location     Type
  3429 ;;		None
  3430 ;; Return value:  Size  Location     Type
  3431 ;;		None               void
  3432 ;; Registers used:
  3433 ;;		wreg, status,2, cstack
  3434 ;; Tracked objects:
  3435 ;;		On entry : 0/0
  3436 ;;		On exit  : 0/0
  3437 ;;		Unchanged: 0/0
  3438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3439 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3440 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3441 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3442 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3443 ;;Total ram usage:        0 bytes
  3444 ;; Hardware stack levels used:    1
  3445 ;; Hardware stack levels required when called:    4
  3446 ;; This function calls:
  3447 ;;		_Wait_Half_Second
  3448 ;; This function is called by:
  3449 ;;		_main
  3450 ;;		_Do_Beep
  3451 ;; This function uses a non-reentrant model
  3452 ;;
  3453                           
  3454                           	psect	text8
  3455  0015DC                     __ptext8:
  3456                           	opt stack 0
  3457  0015DC                     _Wait_One_Sec:
  3458                           	opt stack 26
  3459                           
  3460                           ;utils.c: 41: Wait_Half_Second();
  3461                           
  3462                           ;incstack = 0
  3463  0015DC  EC87  F00A         	call	_Wait_Half_Second	;wreg free
  3464                           
  3465                           ;utils.c: 42: Wait_Half_Second();
  3466  0015E0  EC87  F00A         	call	_Wait_Half_Second	;wreg free
  3467  0015E4  0012               	return		;funcret
  3468  0015E6                     __end_of_Wait_One_Sec:
  3469                           	opt stack 0
  3470                           tblptru	equ	0xFF8
  3471                           tblptrh	equ	0xFF7
  3472                           tblptrl	equ	0xFF6
  3473                           tablat	equ	0xFF5
  3474                           prodh	equ	0xFF4
  3475                           prodl	equ	0xFF3
  3476                           intcon2	equ	0xFF1
  3477                           postinc0	equ	0xFEE
  3478                           wreg	equ	0xFE8
  3479                           indf1	equ	0xFE7
  3480                           postinc1	equ	0xFE6
  3481                           postdec1	equ	0xFE5
  3482                           fsr1h	equ	0xFE2
  3483                           fsr1l	equ	0xFE1
  3484                           indf2	equ	0xFDF
  3485                           postinc2	equ	0xFDE
  3486                           postdec2	equ	0xFDD
  3487                           fsr2h	equ	0xFDA
  3488                           fsr2l	equ	0xFD9
  3489                           status	equ	0xFD8
  3490                           
  3491 ;; *************** function _Wait_Half_Second *****************
  3492 ;; Defined at:
  3493 ;;		line 97 in file "utils.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;		None               void
  3500 ;; Registers used:
  3501 ;;		wreg, status,2
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3507 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3510 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3511 ;;Total ram usage:        0 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    3
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_Wait_One_Sec
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520                           
  3521                           	psect	text9
  3522  00150E                     __ptext9:
  3523                           	opt stack 0
  3524  00150E                     _Wait_Half_Second:
  3525                           	opt stack 26
  3526                           
  3527                           ;utils.c: 99: T0CON = 0x03;
  3528                           
  3529                           ;incstack = 0
  3530  00150E  0E03               	movlw	3
  3531  001510  6ED5               	movwf	4053,c	;volatile
  3532                           
  3533                           ;utils.c: 100: TMR0L = 0xDB;
  3534  001512  0EDB               	movlw	219
  3535  001514  6ED6               	movwf	4054,c	;volatile
  3536                           
  3537                           ;utils.c: 101: TMR0H = 0x0B;
  3538  001516  0E0B               	movlw	11
  3539  001518  6ED7               	movwf	4055,c	;volatile
  3540                           
  3541                           ;utils.c: 102: INTCONbits.TMR0IF = 0;
  3542  00151A  94F2               	bcf	intcon,2,c	;volatile
  3543                           
  3544                           ;utils.c: 103: T0CONbits.TMR0ON = 1;
  3545  00151C  8ED5               	bsf	4053,7,c	;volatile
  3546                           
  3547                           ;utils.c: 104: while (INTCONbits.TMR0IF == 0);
  3548  00151E  D000               	goto	l402
  3549  001520                     l402:
  3550  001520  A4F2               	btfss	intcon,2,c	;volatile
  3551  001522  D7FE               	goto	l402
  3552                           
  3553                           ;utils.c: 105: T0CONbits.TMR0ON = 0;
  3554  001524  9ED5               	bcf	4053,7,c	;volatile
  3555  001526  0012               	return		;funcret
  3556  001528                     __end_of_Wait_Half_Second:
  3557                           	opt stack 0
  3558                           tblptru	equ	0xFF8
  3559                           tblptrh	equ	0xFF7
  3560                           tblptrl	equ	0xFF6
  3561                           tablat	equ	0xFF5
  3562                           prodh	equ	0xFF4
  3563                           prodl	equ	0xFF3
  3564                           intcon	equ	0xFF2
  3565                           intcon2	equ	0xFF1
  3566                           postinc0	equ	0xFEE
  3567                           wreg	equ	0xFE8
  3568                           indf1	equ	0xFE7
  3569                           postinc1	equ	0xFE6
  3570                           postdec1	equ	0xFE5
  3571                           fsr1h	equ	0xFE2
  3572                           fsr1l	equ	0xFE1
  3573                           indf2	equ	0xFDF
  3574                           postinc2	equ	0xFDE
  3575                           postdec2	equ	0xFDD
  3576                           fsr2h	equ	0xFDA
  3577                           fsr2l	equ	0xFD9
  3578                           status	equ	0xFD8
  3579                           
  3580 ;; *************** function _Initialize_LCD_Screen *****************
  3581 ;; Defined at:
  3582 ;;		line 22 in file "Main_Screen.c"
  3583 ;; Parameters:    Size  Location     Type
  3584 ;;		None
  3585 ;; Auto vars:     Size  Location     Type
  3586 ;;		None
  3587 ;; Return value:  Size  Location     Type
  3588 ;;		None               void
  3589 ;; Registers used:
  3590 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3591 ;; Tracked objects:
  3592 ;;		On entry : 0/0
  3593 ;;		On exit  : 0/0
  3594 ;;		Unchanged: 0/0
  3595 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3596 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3597 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3598 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3599 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3600 ;;Total ram usage:        0 bytes
  3601 ;; Hardware stack levels used:    1
  3602 ;; Hardware stack levels required when called:   10
  3603 ;; This function calls:
  3604 ;;		_LCD_Reset
  3605 ;;		_TFT_GreenTab_Initialize
  3606 ;;		_drawtext
  3607 ;;		_fillScreen
  3608 ;;		_strcpy
  3609 ;; This function is called by:
  3610 ;;		_main
  3611 ;; This function uses a non-reentrant model
  3612 ;;
  3613                           
  3614                           	psect	text10
  3615  000F08                     __ptext10:
  3616                           	opt stack 0
  3617  000F08                     _Initialize_LCD_Screen:
  3618                           	opt stack 20
  3619                           
  3620                           ;Main_Screen.c: 24: LCD_Reset();
  3621                           
  3622                           ;incstack = 0
  3623  000F08  ECBF  F00A         	call	_LCD_Reset	;wreg free
  3624                           
  3625                           ;Main_Screen.c: 25: TFT_GreenTab_Initialize();
  3626  000F0C  EC50  F00A         	call	_TFT_GreenTab_Initialize	;wreg free
  3627                           
  3628                           ;Main_Screen.c: 26: fillScreen(0x0000);
  3629  000F10  0E00               	movlw	0
  3630  000F12  6E25               	movwf	fillScreen@color+1,c
  3631  000F14  0E00               	movlw	0
  3632  000F16  6E24               	movwf	fillScreen@color,c
  3633  000F18  EC79  F00A         	call	_fillScreen	;wreg free
  3634                           
  3635                           ;Main_Screen.c: 29: txt = buffer;
  3636  000F1C  0EBF               	movlw	low _buffer
  3637  000F1E  6E66               	movwf	_txt,c
  3638  000F20  0E00               	movlw	high _buffer
  3639  000F22  6E67               	movwf	_txt+1,c
  3640                           
  3641                           ;Main_Screen.c: 31: strcpy(txt, "LAB 10 ");
  3642  000F24  C066  F011         	movff	_txt,strcpy@to
  3643  000F28  C067  F012         	movff	_txt+1,strcpy@to+1
  3644  000F2C  0EF6               	movlw	low STR_1
  3645  000F2E  6E13               	movwf	strcpy@from,c
  3646  000F30  0EFF               	movlw	high STR_1
  3647  000F32  6E14               	movwf	strcpy@from+1,c
  3648  000F34  EC1F  F00A         	call	_strcpy	;wreg free
  3649                           
  3650                           ;Main_Screen.c: 32: drawtext(50, 2, txt, 0xFFFF, 0x0000, 1);
  3651  000F38  0E02               	movlw	2
  3652  000F3A  6E39               	movwf	drawtext@y,c
  3653  000F3C  C066  F03A         	movff	_txt,drawtext@_text
  3654  000F40  C067  F03B         	movff	_txt+1,drawtext@_text+1
  3655  000F44  0EFF               	movlw	255
  3656  000F46  6E3D               	movwf	drawtext@color+1,c
  3657  000F48  683C               	setf	drawtext@color,c
  3658  000F4A  0E00               	movlw	0
  3659  000F4C  6E3F               	movwf	drawtext@bg+1,c
  3660  000F4E  0E00               	movlw	0
  3661  000F50  6E3E               	movwf	drawtext@bg,c
  3662  000F52  0E01               	movlw	1
  3663  000F54  6E40               	movwf	drawtext@size,c
  3664  000F56  0E32               	movlw	50
  3665  000F58  ECC4  F005         	call	_drawtext
  3666                           
  3667                           ;Main_Screen.c: 34: if (01 == 0)
  3668  000F5C  D004               	goto	l3784
  3669                           
  3670                           ;Main_Screen.c: 35: {
  3671                           ;Main_Screen.c: 36: Timing_Txt[0] = 'S';
  3672  000F5E  0E53               	movlw	83
  3673  000F60  6E52               	movwf	_Timing_Txt,c
  3674                           
  3675                           ;Main_Screen.c: 37: Timing_Txt[1] = 'P';
  3676  000F62  0E50               	movlw	80
  3677  000F64  D003               	goto	L3
  3678  000F66                     l3784:
  3679                           
  3680                           ;Main_Screen.c: 39: else
  3681                           ;Main_Screen.c: 40: {
  3682                           ;Main_Screen.c: 41: Timing_Txt[0] = 'F';
  3683  000F66  0E46               	movlw	70
  3684  000F68  6E52               	movwf	_Timing_Txt,c
  3685                           
  3686                           ;Main_Screen.c: 42: Timing_Txt[1] = 'A';
  3687  000F6A  0E41               	movlw	65
  3688  000F6C                     L3:
  3689  000F6C  6E53               	movwf	_Timing_Txt+1,c
  3690                           
  3691                           ;Main_Screen.c: 43: }
  3692                           ;Main_Screen.c: 44: Timing_Txt[2] = 25/10 + '0';
  3693  000F6E  0E32               	movlw	50
  3694  000F70  6E54               	movwf	_Timing_Txt+2,c
  3695                           
  3696                           ;Main_Screen.c: 45: Timing_Txt[3] = 25%10 + '0';
  3697  000F72  0E35               	movlw	53
  3698  000F74  6E55               	movwf	_Timing_Txt+3,c
  3699                           
  3700                           ;Main_Screen.c: 46: Timing_Txt[5] = 01%10 + '0';
  3701  000F76  0E31               	movlw	49
  3702  000F78  6E57               	movwf	_Timing_Txt+5,c
  3703                           
  3704                           ;Main_Screen.c: 47: Timing_Txt[7] = 04/10 + '0';
  3705  000F7A  0E30               	movlw	48
  3706  000F7C  6E59               	movwf	_Timing_Txt+7,c
  3707                           
  3708                           ;Main_Screen.c: 48: Timing_Txt[8] = 04%10 + '0';
  3709  000F7E  0E34               	movlw	52
  3710  000F80  6E5A               	movwf	_Timing_Txt+8,c
  3711                           
  3712                           ;Main_Screen.c: 49: drawtext(1, 150, Timing_Txt, 0xFFFF, 0x0000, 1);
  3713  000F82  0E96               	movlw	150
  3714  000F84  6E39               	movwf	drawtext@y,c
  3715  000F86  0E52               	movlw	low _Timing_Txt
  3716  000F88  6E3A               	movwf	drawtext@_text,c
  3717  000F8A  0E00               	movlw	high _Timing_Txt
  3718  000F8C  6E3B               	movwf	drawtext@_text+1,c
  3719  000F8E  0EFF               	movlw	255
  3720  000F90  6E3D               	movwf	drawtext@color+1,c
  3721  000F92  683C               	setf	drawtext@color,c
  3722  000F94  0E00               	movlw	0
  3723  000F96  6E3F               	movwf	drawtext@bg+1,c
  3724  000F98  0E00               	movlw	0
  3725  000F9A  6E3E               	movwf	drawtext@bg,c
  3726  000F9C  0E01               	movlw	1
  3727  000F9E  6E40               	movwf	drawtext@size,c
  3728  000FA0  0E01               	movlw	1
  3729  000FA2  ECC4  F005         	call	_drawtext
  3730  000FA6  0012               	return		;funcret
  3731  000FA8                     __end_of_Initialize_LCD_Screen:
  3732                           	opt stack 0
  3733                           tblptru	equ	0xFF8
  3734                           tblptrh	equ	0xFF7
  3735                           tblptrl	equ	0xFF6
  3736                           tablat	equ	0xFF5
  3737                           prodh	equ	0xFF4
  3738                           prodl	equ	0xFF3
  3739                           intcon	equ	0xFF2
  3740                           intcon2	equ	0xFF1
  3741                           postinc0	equ	0xFEE
  3742                           wreg	equ	0xFE8
  3743                           indf1	equ	0xFE7
  3744                           postinc1	equ	0xFE6
  3745                           postdec1	equ	0xFE5
  3746                           fsr1h	equ	0xFE2
  3747                           fsr1l	equ	0xFE1
  3748                           indf2	equ	0xFDF
  3749                           postinc2	equ	0xFDE
  3750                           postdec2	equ	0xFDD
  3751                           fsr2h	equ	0xFDA
  3752                           fsr2l	equ	0xFD9
  3753                           status	equ	0xFD8
  3754                           
  3755 ;; *************** function _strcpy *****************
  3756 ;; Defined at:
  3757 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  3758 ;; Parameters:    Size  Location     Type
  3759 ;;  to              2   16[COMRAM] PTR unsigned char 
  3760 ;;		 -> NULL(0), buffer(31), 
  3761 ;;  from            2   18[COMRAM] PTR const unsigned char 
  3762 ;;		 -> STR_1(8), 
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;  cp              2   20[COMRAM] PTR unsigned char 
  3765 ;;		 -> NULL(0), buffer(31), 
  3766 ;; Return value:  Size  Location     Type
  3767 ;;                  2   16[COMRAM] PTR unsigned char 
  3768 ;; Registers used:
  3769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  3770 ;; Tracked objects:
  3771 ;;		On entry : 0/0
  3772 ;;		On exit  : 0/0
  3773 ;;		Unchanged: 0/0
  3774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3775 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;Total ram usage:        6 bytes
  3780 ;; Hardware stack levels used:    1
  3781 ;; Hardware stack levels required when called:    3
  3782 ;; This function calls:
  3783 ;;		Nothing
  3784 ;; This function is called by:
  3785 ;;		_Initialize_LCD_Screen
  3786 ;; This function uses a non-reentrant model
  3787 ;;
  3788                           
  3789                           	psect	text11
  3790  00143E                     __ptext11:
  3791                           	opt stack 0
  3792  00143E                     _strcpy:
  3793                           	opt stack 26
  3794                           
  3795                           ;incstack = 0
  3796  00143E  C011  F015         	movff	strcpy@to,strcpy@cp
  3797  001442  C012  F016         	movff	strcpy@to+1,strcpy@cp+1
  3798  001446  D005               	goto	l2688
  3799  001448                     l2686:
  3800  001448  4A15               	infsnz	strcpy@cp,f,c
  3801  00144A  2A16               	incf	strcpy@cp+1,f,c
  3802  00144C  4A13               	infsnz	strcpy@from,f,c
  3803  00144E  2A14               	incf	strcpy@from+1,f,c
  3804  001450  D000               	goto	l2688
  3805  001452                     l2688:
  3806  001452  C013  FFF6         	movff	strcpy@from,tblptrl
  3807  001456  C014  FFF7         	movff	strcpy@from+1,tblptrh
  3808  00145A                     	if	0	;tblptru may be non-zero
  3809  00145A                     	endif
  3810  00145A                     	if	0	;tblptru may be non-zero
  3811  00145A                     	endif
  3812  00145A  C015  FFD9         	movff	strcpy@cp,fsr2l
  3813  00145E  C016  FFDA         	movff	strcpy@cp+1,fsr2h
  3814  001462  0008               	tblrd		*
  3815  001464  CFF5 FFDF          	movff	tablat,indf2
  3816  001468  50DF               	movf	indf2,w,c
  3817  00146A  A4D8               	btfss	status,2,c
  3818  00146C  D7ED               	goto	l2686
  3819                           
  3820                           ;	Return value of _strcpy is never used
  3821  00146E  0012               	return		;funcret
  3822  001470                     __end_of_strcpy:
  3823                           	opt stack 0
  3824                           tblptru	equ	0xFF8
  3825                           tblptrh	equ	0xFF7
  3826                           tblptrl	equ	0xFF6
  3827                           tablat	equ	0xFF5
  3828                           prodh	equ	0xFF4
  3829                           prodl	equ	0xFF3
  3830                           intcon	equ	0xFF2
  3831                           intcon2	equ	0xFF1
  3832                           postinc0	equ	0xFEE
  3833                           wreg	equ	0xFE8
  3834                           indf1	equ	0xFE7
  3835                           postinc1	equ	0xFE6
  3836                           postdec1	equ	0xFE5
  3837                           fsr1h	equ	0xFE2
  3838                           fsr1l	equ	0xFE1
  3839                           indf2	equ	0xFDF
  3840                           postinc2	equ	0xFDE
  3841                           postdec2	equ	0xFDD
  3842                           fsr2h	equ	0xFDA
  3843                           fsr2l	equ	0xFD9
  3844                           status	equ	0xFD8
  3845                           
  3846 ;; *************** function _fillScreen *****************
  3847 ;; Defined at:
  3848 ;;		line 566 in file "ST7735_TFT.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  color           2   35[COMRAM] unsigned int 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;		None
  3853 ;; Return value:  Size  Location     Type
  3854 ;;		None               void
  3855 ;; Registers used:
  3856 ;;		wreg, status,2, status,0, cstack
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/0
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3862 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3865 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3866 ;;Total ram usage:        2 bytes
  3867 ;; Hardware stack levels used:    1
  3868 ;; Hardware stack levels required when called:    7
  3869 ;; This function calls:
  3870 ;;		_fillRectangle
  3871 ;; This function is called by:
  3872 ;;		_Initialize_LCD_Screen
  3873 ;; This function uses a non-reentrant model
  3874 ;;
  3875                           
  3876                           	psect	text12
  3877  0014F2                     __ptext12:
  3878                           	opt stack 0
  3879  0014F2                     _fillScreen:
  3880                           	opt stack 22
  3881                           
  3882                           ;ST7735_TFT.c: 568: fillRectangle(0, 0, 128, 160, color);
  3883                           
  3884                           ;incstack = 0
  3885  0014F2  0E00               	movlw	0
  3886  0014F4  6E18               	movwf	fillRectangle@y,c
  3887  0014F6  0E80               	movlw	128
  3888  0014F8  6E19               	movwf	fillRectangle@w,c
  3889  0014FA  0EA0               	movlw	160
  3890  0014FC  6E1A               	movwf	fillRectangle@h,c
  3891  0014FE  C024  F01B         	movff	fillScreen@color,fillRectangle@color
  3892  001502  C025  F01C         	movff	fillScreen@color+1,fillRectangle@color+1
  3893  001506  0E00               	movlw	0
  3894  001508  ECC2  F006         	call	_fillRectangle
  3895  00150C  0012               	return		;funcret
  3896  00150E                     __end_of_fillScreen:
  3897                           	opt stack 0
  3898                           tblptru	equ	0xFF8
  3899                           tblptrh	equ	0xFF7
  3900                           tblptrl	equ	0xFF6
  3901                           tablat	equ	0xFF5
  3902                           prodh	equ	0xFF4
  3903                           prodl	equ	0xFF3
  3904                           intcon	equ	0xFF2
  3905                           intcon2	equ	0xFF1
  3906                           postinc0	equ	0xFEE
  3907                           wreg	equ	0xFE8
  3908                           indf1	equ	0xFE7
  3909                           postinc1	equ	0xFE6
  3910                           postdec1	equ	0xFE5
  3911                           fsr1h	equ	0xFE2
  3912                           fsr1l	equ	0xFE1
  3913                           indf2	equ	0xFDF
  3914                           postinc2	equ	0xFDE
  3915                           postdec2	equ	0xFDD
  3916                           fsr2h	equ	0xFDA
  3917                           fsr2l	equ	0xFD9
  3918                           status	equ	0xFD8
  3919                           
  3920 ;; *************** function _fillRectangle *****************
  3921 ;; Defined at:
  3922 ;;		line 450 in file "ST7735_TFT.c"
  3923 ;; Parameters:    Size  Location     Type
  3924 ;;  x               1    wreg     unsigned char 
  3925 ;;  y               1   23[COMRAM] unsigned char 
  3926 ;;  w               1   24[COMRAM] unsigned char 
  3927 ;;  h               1   25[COMRAM] unsigned char 
  3928 ;;  color           2   26[COMRAM] unsigned int 
  3929 ;; Auto vars:     Size  Location     Type
  3930 ;;  x               1   34[COMRAM] unsigned char 
  3931 ;;  lo              1   33[COMRAM] unsigned char 
  3932 ;;  hi              1   32[COMRAM] unsigned char 
  3933 ;; Return value:  Size  Location     Type
  3934 ;;		None               void
  3935 ;; Registers used:
  3936 ;;		wreg, status,2, status,0, cstack
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3942 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3943 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3944 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3945 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3946 ;;Total ram usage:       12 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; Hardware stack levels required when called:    6
  3949 ;; This function calls:
  3950 ;;		_setAddrWindow
  3951 ;;		_spiwrite
  3952 ;; This function is called by:
  3953 ;;		_fillScreen
  3954 ;; This function uses a non-reentrant model
  3955 ;;
  3956                           
  3957                           	psect	text13
  3958  000D84                     __ptext13:
  3959                           	opt stack 0
  3960  000D84                     _fillRectangle:
  3961                           	opt stack 22
  3962                           
  3963                           ;incstack = 0
  3964                           ;fillRectangle@x stored from wreg
  3965  000D84  6E23               	movwf	fillRectangle@x,c
  3966                           
  3967                           ;ST7735_TFT.c: 452: unsigned char hi, lo;
  3968                           ;ST7735_TFT.c: 453: if((x >= 128) || (y >= 160))
  3969  000D86  0E80               	movlw	128
  3970  000D88  6023               	cpfslt	fillRectangle@x,c
  3971  000D8A  D069               	goto	l251
  3972  000D8C  0E9F               	movlw	159
  3973  000D8E  6418               	cpfsgt	fillRectangle@y,c
  3974  000D90  D001               	goto	l3644
  3975                           
  3976                           ;ST7735_TFT.c: 454: return;
  3977  000D92  D065               	goto	l251
  3978  000D94                     l3644:
  3979                           
  3980                           ;ST7735_TFT.c: 455: if((x + w - 1) >= 128)
  3981  000D94  0EFF               	movlw	255
  3982  000D96  6E1D               	movwf	??_fillRectangle& (0+255),c
  3983  000D98  0EFF               	movlw	255
  3984  000D9A  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  3985  000D9C  5019               	movf	fillRectangle@w,w,c
  3986  000D9E  C023  F01F         	movff	fillRectangle@x,??_fillRectangle+2
  3987  000DA2  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  3988  000DA4  261F               	addwf	??_fillRectangle+2,f,c
  3989  000DA6  0E00               	movlw	0
  3990  000DA8  2220               	addwfc	??_fillRectangle+3,f,c
  3991  000DAA  501D               	movf	??_fillRectangle,w,c
  3992  000DAC  261F               	addwf	??_fillRectangle+2,f,c
  3993  000DAE  501E               	movf	??_fillRectangle+1,w,c
  3994  000DB0  2220               	addwfc	??_fillRectangle+3,f,c
  3995  000DB2  BE20               	btfsc	??_fillRectangle+3,7,c
  3996  000DB4  D00A               	goto	l252
  3997  000DB6  5020               	movf	??_fillRectangle+3,w,c
  3998  000DB8  E104               	bnz	u2470
  3999  000DBA  0E80               	movlw	128
  4000  000DBC  5C1F               	subwf	??_fillRectangle+2,w,c
  4001  000DBE  A0D8               	btfss	status,0,c
  4002  000DC0  D004               	goto	l252
  4003  000DC2                     u2470:
  4004                           
  4005                           ;ST7735_TFT.c: 456: w = 128 - x;
  4006  000DC2  5023               	movf	fillRectangle@x,w,c
  4007  000DC4  0800               	sublw	0
  4008  000DC6  0F80               	addlw	128
  4009  000DC8  6E19               	movwf	fillRectangle@w,c
  4010  000DCA                     l252:
  4011                           
  4012                           ;ST7735_TFT.c: 457: if((y + h - 1) >= 160)
  4013  000DCA  0EFF               	movlw	255
  4014  000DCC  6E1D               	movwf	??_fillRectangle& (0+255),c
  4015  000DCE  0EFF               	movlw	255
  4016  000DD0  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4017  000DD2  501A               	movf	fillRectangle@h,w,c
  4018  000DD4  C018  F01F         	movff	fillRectangle@y,??_fillRectangle+2
  4019  000DD8  6A20               	clrf	(??_fillRectangle+3)& (0+255),c
  4020  000DDA  261F               	addwf	??_fillRectangle+2,f,c
  4021  000DDC  0E00               	movlw	0
  4022  000DDE  2220               	addwfc	??_fillRectangle+3,f,c
  4023  000DE0  501D               	movf	??_fillRectangle,w,c
  4024  000DE2  261F               	addwf	??_fillRectangle+2,f,c
  4025  000DE4  501E               	movf	??_fillRectangle+1,w,c
  4026  000DE6  2220               	addwfc	??_fillRectangle+3,f,c
  4027  000DE8  BE20               	btfsc	??_fillRectangle+3,7,c
  4028  000DEA  D00B               	goto	l3650
  4029  000DEC  5020               	movf	??_fillRectangle+3,w,c
  4030  000DEE  E104               	bnz	u2480
  4031  000DF0  0EA0               	movlw	160
  4032  000DF2  5C1F               	subwf	??_fillRectangle+2,w,c
  4033  000DF4  A0D8               	btfss	status,0,c
  4034  000DF6  D005               	goto	l3650
  4035  000DF8                     u2480:
  4036                           
  4037                           ;ST7735_TFT.c: 458: h = 160 - y;
  4038  000DF8  5018               	movf	fillRectangle@y,w,c
  4039  000DFA  0800               	sublw	0
  4040  000DFC  0FA0               	addlw	160
  4041  000DFE  6E1A               	movwf	fillRectangle@h,c
  4042  000E00  D000               	goto	l3650
  4043  000E02                     l3650:
  4044                           
  4045                           ;ST7735_TFT.c: 459: setAddrWindow(x, y, x+w-1, y+h-1);
  4046  000E02  C018  F014         	movff	fillRectangle@y,setAddrWindow@y0
  4047  000E06  5023               	movf	fillRectangle@x,w,c
  4048  000E08  2419               	addwf	fillRectangle@w,w,c
  4049  000E0A  6E1D               	movwf	??_fillRectangle& (0+255),c
  4050  000E0C  041D               	decf	??_fillRectangle,w,c
  4051  000E0E  6E15               	movwf	setAddrWindow@x1,c
  4052  000E10  5018               	movf	fillRectangle@y,w,c
  4053  000E12  241A               	addwf	fillRectangle@h,w,c
  4054  000E14  6E1E               	movwf	(??_fillRectangle+1)& (0+255),c
  4055  000E16  041E               	decf	??_fillRectangle+1,w,c
  4056  000E18  6E16               	movwf	setAddrWindow@y1,c
  4057  000E1A  5023               	movf	fillRectangle@x,w,c
  4058  000E1C  EC4F  F009         	call	_setAddrWindow
  4059                           
  4060                           ;ST7735_TFT.c: 460: hi = color >> 8; lo = color;
  4061  000E20  501C               	movf	fillRectangle@color+1,w,c
  4062  000E22  6E21               	movwf	fillRectangle@hi,c
  4063  000E24  C01B  F022         	movff	fillRectangle@color,fillRectangle@lo
  4064                           
  4065                           ;ST7735_TFT.c: 461: PORTDbits.RD0 = 1;
  4066  000E28  8083               	bsf	3971,0,c	;volatile
  4067                           
  4068                           ;ST7735_TFT.c: 462: PORTDbits.RD2 = 0;
  4069  000E2A  9483               	bcf	3971,2,c	;volatile
  4070                           
  4071                           ;ST7735_TFT.c: 464: for(y=h; y>0; y--) {
  4072  000E2C  C01A  F018         	movff	fillRectangle@h,fillRectangle@y
  4073  000E30                     l3662:
  4074  000E30  5018               	movf	fillRectangle@y,w,c
  4075  000E32  B4D8               	btfsc	status,2,c
  4076  000E34  D013               	goto	l255
  4077  000E36  D001               	goto	l254
  4078  000E38  D011               	goto	l255
  4079  000E3A                     l254:
  4080                           
  4081                           ;ST7735_TFT.c: 465: for(x = w; x > 0; x--) {
  4082  000E3A  C019  F023         	movff	fillRectangle@w,fillRectangle@x
  4083  000E3E                     l3666:
  4084  000E3E  5023               	movf	fillRectangle@x,w,c
  4085  000E40  B4D8               	btfsc	status,2,c
  4086  000E42  D00A               	goto	l3676
  4087  000E44  D001               	goto	l3670
  4088  000E46  D008               	goto	l3676
  4089  000E48                     l3670:
  4090                           
  4091                           ;ST7735_TFT.c: 466: spiwrite(hi);
  4092  000E48  5021               	movf	fillRectangle@hi,w,c
  4093  000E4A  ECAB  F00A         	call	_spiwrite
  4094                           
  4095                           ;ST7735_TFT.c: 467: spiwrite(lo);
  4096  000E4E  5022               	movf	fillRectangle@lo,w,c
  4097  000E50  ECAB  F00A         	call	_spiwrite
  4098  000E54  0623               	decf	fillRectangle@x,f,c
  4099  000E56  D7F3               	goto	l3666
  4100  000E58                     l3676:
  4101  000E58  0618               	decf	fillRectangle@y,f,c
  4102  000E5A  D7EA               	goto	l3662
  4103  000E5C                     l255:
  4104                           
  4105                           ;ST7735_TFT.c: 468: }
  4106                           ;ST7735_TFT.c: 469: }
  4107                           ;ST7735_TFT.c: 470: PORTDbits.RD2 = 1;
  4108  000E5C  8483               	bsf	3971,2,c	;volatile
  4109  000E5E                     l251:
  4110  000E5E  0012               	return		;funcret
  4111  000E60                     __end_of_fillRectangle:
  4112                           	opt stack 0
  4113                           tblptru	equ	0xFF8
  4114                           tblptrh	equ	0xFF7
  4115                           tblptrl	equ	0xFF6
  4116                           tablat	equ	0xFF5
  4117                           prodh	equ	0xFF4
  4118                           prodl	equ	0xFF3
  4119                           intcon	equ	0xFF2
  4120                           intcon2	equ	0xFF1
  4121                           postinc0	equ	0xFEE
  4122                           wreg	equ	0xFE8
  4123                           indf1	equ	0xFE7
  4124                           postinc1	equ	0xFE6
  4125                           postdec1	equ	0xFE5
  4126                           fsr1h	equ	0xFE2
  4127                           fsr1l	equ	0xFE1
  4128                           indf2	equ	0xFDF
  4129                           postinc2	equ	0xFDE
  4130                           postdec2	equ	0xFDD
  4131                           fsr2h	equ	0xFDA
  4132                           fsr2l	equ	0xFD9
  4133                           status	equ	0xFD8
  4134                           
  4135 ;; *************** function _drawtext *****************
  4136 ;; Defined at:
  4137 ;;		line 421 in file "ST7735_TFT.c"
  4138 ;; Parameters:    Size  Location     Type
  4139 ;;  x               1    wreg     unsigned char 
  4140 ;;  y               1   56[COMRAM] unsigned char 
  4141 ;;  _text           2   57[COMRAM] PTR unsigned char 
  4142 ;;		 -> NULL(0), txt1(84), Timing_Txt(10), buffer(31), 
  4143 ;;  color           2   59[COMRAM] unsigned int 
  4144 ;;  bg              2   61[COMRAM] unsigned int 
  4145 ;;  size            1   63[COMRAM] unsigned char 
  4146 ;; Auto vars:     Size  Location     Type
  4147 ;;  x               1    0[BANK0 ] unsigned char 
  4148 ;;  i               2    3[BANK0 ] unsigned int 
  4149 ;;  textsize        2    1[BANK0 ] unsigned int 
  4150 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  4151 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  4152 ;; Return value:  Size  Location     Type
  4153 ;;		None               void
  4154 ;; Registers used:
  4155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4156 ;; Tracked objects:
  4157 ;;		On entry : 0/0
  4158 ;;		On exit  : 0/0
  4159 ;;		Unchanged: 0/0
  4160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4161 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4162 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4163 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4164 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4165 ;;Total ram usage:       17 bytes
  4166 ;; Hardware stack levels used:    1
  4167 ;; Hardware stack levels required when called:    9
  4168 ;; This function calls:
  4169 ;;		_drawChar
  4170 ;;		_strlen
  4171 ;; This function is called by:
  4172 ;;		_Initialize_LCD_Screen
  4173 ;;		_main
  4174 ;; This function uses a non-reentrant model
  4175 ;;
  4176                           
  4177                           	psect	text14
  4178  000B88                     __ptext14:
  4179                           	opt stack 0
  4180  000B88                     _drawtext:
  4181                           	opt stack 21
  4182                           
  4183                           ;incstack = 0
  4184                           ;drawtext@x stored from wreg
  4185  000B88  0100               	movlb	0	; () banked
  4186  000B8A  6FDE               	movwf	drawtext@x& (0+255),b
  4187                           
  4188                           ; BSR set to: 0
  4189                           ;ST7735_TFT.c: 423: unsigned char cursor_x, cursor_y;
  4190                           ;ST7735_TFT.c: 424: unsigned int textsize, i;
  4191                           ;ST7735_TFT.c: 425: cursor_x = x, cursor_y = y;
  4192  000B8C  C0DE  F0E4         	movff	drawtext@x,drawtext@cursor_x
  4193                           
  4194                           ; BSR set to: 0
  4195  000B90  C039  F0E3         	movff	drawtext@y,drawtext@cursor_y
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;ST7735_TFT.c: 426: textsize = strlen(_text);
  4199  000B94  C03A  F011         	movff	drawtext@_text,strlen@s
  4200  000B98  C03B  F012         	movff	drawtext@_text+1,strlen@s+1
  4201  000B9C  ECE1  F009         	call	_strlen	;wreg free
  4202  000BA0  C011  F0DF         	movff	?_strlen,drawtext@textsize
  4203  000BA4  C012  F0E0         	movff	?_strlen+1,drawtext@textsize+1
  4204                           
  4205                           ;ST7735_TFT.c: 427: for(i = 0; i < textsize; i++){
  4206  000BA8  0E00               	movlw	0
  4207  000BAA  0100               	movlb	0	; () banked
  4208  000BAC  6FE2               	movwf	(drawtext@i+1)& (0+255),b
  4209  000BAE  0E00               	movlw	0
  4210  000BB0  6FE1               	movwf	drawtext@i& (0+255),b
  4211  000BB2  D064               	goto	l3738
  4212  000BB4                     l3712:
  4213                           
  4214                           ; BSR set to: 0
  4215                           ;ST7735_TFT.c: 428: if(wrap && ((cursor_x + size * 5) > 128)){
  4216  000BB4  5051               	movf	_wrap,w,c
  4217  000BB6  B4D8               	btfsc	status,2,c
  4218  000BB8  D034               	goto	l3728
  4219                           
  4220                           ; BSR set to: 0
  4221  000BBA  5040               	movf	drawtext@size,w,c
  4222  000BBC  0D05               	mullw	5
  4223  000BBE  0100               	movlb	0	; () banked
  4224  000BC0  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4225  000BC2  6E41               	movwf	??_drawtext& (0+255),c
  4226  000BC4  6A42               	clrf	(??_drawtext+1)& (0+255),c
  4227  000BC6  50F3               	movf	prodl,w,c
  4228  000BC8  2641               	addwf	??_drawtext,f,c
  4229  000BCA  50F4               	movf	prodh,w,c
  4230  000BCC  2242               	addwfc	??_drawtext+1,f,c
  4231  000BCE  BE42               	btfsc	??_drawtext+1,7,c
  4232  000BD0  D028               	goto	l3728
  4233  000BD2  5042               	movf	??_drawtext+1,w,c
  4234  000BD4  E104               	bnz	u2540
  4235  000BD6  0E81               	movlw	129
  4236  000BD8  5C41               	subwf	??_drawtext,w,c
  4237  000BDA  A0D8               	btfss	status,0,c
  4238  000BDC  D022               	goto	l3728
  4239  000BDE                     u2540:
  4240                           
  4241                           ; BSR set to: 0
  4242                           ;ST7735_TFT.c: 429: cursor_x = 0;
  4243  000BDE  0E00               	movlw	0
  4244  000BE0  0100               	movlb	0	; () banked
  4245  000BE2  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4246                           
  4247                           ; BSR set to: 0
  4248                           ;ST7735_TFT.c: 430: cursor_y = cursor_y + size * 7 + 3 ;
  4249  000BE4  5040               	movf	drawtext@size,w,c
  4250  000BE6  0D07               	mullw	7
  4251  000BE8  50F3               	movf	prodl,w,c
  4252  000BEA  0100               	movlb	0	; () banked
  4253  000BEC  25E3               	addwf	drawtext@cursor_y& (0+255),w,b
  4254  000BEE  0F03               	addlw	3
  4255  000BF0  0100               	movlb	0	; () banked
  4256  000BF2  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;ST7735_TFT.c: 431: if(cursor_y > 160) cursor_y = 160;
  4260  000BF4  0EA0               	movlw	160
  4261  000BF6  0100               	movlb	0	; () banked
  4262  000BF8  65E3               	cpfsgt	drawtext@cursor_y& (0+255),b
  4263  000BFA  D004               	goto	l3724
  4264                           
  4265                           ; BSR set to: 0
  4266  000BFC  0EA0               	movlw	160
  4267  000BFE  0100               	movlb	0	; () banked
  4268  000C00  6FE3               	movwf	drawtext@cursor_y& (0+255),b
  4269  000C02  D000               	goto	l3724
  4270  000C04                     l3724:
  4271                           
  4272                           ; BSR set to: 0
  4273                           ;ST7735_TFT.c: 432: if(_text[i] == 0x20) goto _skip; }
  4274  000C04  0100               	movlb	0	; () banked
  4275  000C06  51E1               	movf	drawtext@i& (0+255),w,b
  4276  000C08  243A               	addwf	drawtext@_text,w,c
  4277  000C0A  6ED9               	movwf	fsr2l,c
  4278  000C0C  0100               	movlb	0	; () banked
  4279  000C0E  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4280  000C10  203B               	addwfc	drawtext@_text+1,w,c
  4281  000C12  6EDA               	movwf	fsr2h,c
  4282  000C14  0E20               	movlw	32
  4283  000C16  18DE               	xorwf	postinc2,w,c
  4284  000C18  B4D8               	btfsc	status,2,c
  4285  000C1A  D02C               	goto	l3736
  4286  000C1C  D002               	goto	l3728
  4287                           
  4288                           ; BSR set to: 0
  4289  000C1E  D02A               	goto	l3736
  4290                           
  4291                           ; BSR set to: 0
  4292  000C20  D000               	goto	l3728
  4293  000C22                     l3728:
  4294                           
  4295                           ; BSR set to: 0
  4296                           ;ST7735_TFT.c: 433: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  4297  000C22  C0E3  F02E         	movff	drawtext@cursor_y,drawChar@y
  4298  000C26  0100               	movlb	0	; () banked
  4299  000C28  51E1               	movf	drawtext@i& (0+255),w,b
  4300  000C2A  243A               	addwf	drawtext@_text,w,c
  4301  000C2C  6ED9               	movwf	fsr2l,c
  4302  000C2E  0100               	movlb	0	; () banked
  4303  000C30  51E2               	movf	(drawtext@i+1)& (0+255),w,b
  4304  000C32  203B               	addwfc	drawtext@_text+1,w,c
  4305  000C34  6EDA               	movwf	fsr2h,c
  4306  000C36  50DF               	movf	indf2,w,c
  4307  000C38  6E2F               	movwf	drawChar@c,c
  4308  000C3A  C03C  F030         	movff	drawtext@color,drawChar@color
  4309  000C3E  C03D  F031         	movff	drawtext@color+1,drawChar@color+1
  4310  000C42  C03E  F032         	movff	drawtext@bg,drawChar@bg
  4311  000C46  C03F  F033         	movff	drawtext@bg+1,drawChar@bg+1
  4312  000C4A  C040  F034         	movff	drawtext@size,drawChar@size
  4313  000C4E  0100               	movlb	0	; () banked
  4314  000C50  51E4               	movf	drawtext@cursor_x& (0+255),w,b
  4315  000C52  ECF5  F003         	call	_drawChar
  4316                           
  4317                           ;ST7735_TFT.c: 434: cursor_x = cursor_x + size * 6;
  4318  000C56  5040               	movf	drawtext@size,w,c
  4319  000C58  0D06               	mullw	6
  4320  000C5A  50F3               	movf	prodl,w,c
  4321  000C5C  0100               	movlb	0	; () banked
  4322  000C5E  25E4               	addwf	drawtext@cursor_x& (0+255),w,b
  4323  000C60  0100               	movlb	0	; () banked
  4324  000C62  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4325                           
  4326                           ; BSR set to: 0
  4327                           ;ST7735_TFT.c: 435: if(cursor_x > 128) cursor_x = 128;
  4328  000C64  0E80               	movlw	128
  4329  000C66  0100               	movlb	0	; () banked
  4330  000C68  65E4               	cpfsgt	drawtext@cursor_x& (0+255),b
  4331  000C6A  D004               	goto	l3736
  4332                           
  4333                           ; BSR set to: 0
  4334  000C6C  0E80               	movlw	128
  4335  000C6E  0100               	movlb	0	; () banked
  4336  000C70  6FE4               	movwf	drawtext@cursor_x& (0+255),b
  4337                           
  4338                           ; BSR set to: 0
  4339  000C72  D000               	goto	l3736
  4340  000C74                     l3736:
  4341                           
  4342                           ; BSR set to: 0
  4343  000C74  0100               	movlb	0	; () banked
  4344  000C76  4BE1               	infsnz	drawtext@i& (0+255),f,b
  4345  000C78  2BE2               	incf	(drawtext@i+1)& (0+255),f,b
  4346  000C7A  D000               	goto	l3738
  4347  000C7C                     l3738:
  4348                           
  4349                           ; BSR set to: 0
  4350  000C7C  0100               	movlb	0	; () banked
  4351  000C7E  51DF               	movf	drawtext@textsize& (0+255),w,b
  4352  000C80  0100               	movlb	0	; () banked
  4353  000C82  5DE1               	subwf	drawtext@i& (0+255),w,b
  4354  000C84  0100               	movlb	0	; () banked
  4355  000C86  51E0               	movf	(drawtext@textsize+1)& (0+255),w,b
  4356  000C88  0100               	movlb	0	; () banked
  4357  000C8A  59E2               	subwfb	(drawtext@i+1)& (0+255),w,b
  4358  000C8C  A0D8               	btfss	status,0,c
  4359  000C8E  D792               	goto	l3712
  4360                           
  4361                           ; BSR set to: 0
  4362                           
  4363                           ; BSR set to: 0
  4364  000C90  0012               	return		;funcret
  4365  000C92                     __end_of_drawtext:
  4366                           	opt stack 0
  4367                           tblptru	equ	0xFF8
  4368                           tblptrh	equ	0xFF7
  4369                           tblptrl	equ	0xFF6
  4370                           tablat	equ	0xFF5
  4371                           prodh	equ	0xFF4
  4372                           prodl	equ	0xFF3
  4373                           intcon	equ	0xFF2
  4374                           intcon2	equ	0xFF1
  4375                           postinc0	equ	0xFEE
  4376                           wreg	equ	0xFE8
  4377                           indf1	equ	0xFE7
  4378                           postinc1	equ	0xFE6
  4379                           postdec1	equ	0xFE5
  4380                           fsr1h	equ	0xFE2
  4381                           fsr1l	equ	0xFE1
  4382                           indf2	equ	0xFDF
  4383                           postinc2	equ	0xFDE
  4384                           postdec2	equ	0xFDD
  4385                           fsr2h	equ	0xFDA
  4386                           fsr2l	equ	0xFD9
  4387                           status	equ	0xFD8
  4388                           
  4389 ;; *************** function _strlen *****************
  4390 ;; Defined at:
  4391 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  4392 ;; Parameters:    Size  Location     Type
  4393 ;;  s               2   16[COMRAM] PTR const unsigned char 
  4394 ;;		 -> NULL(0), txt1(84), Timing_Txt(10), buffer(31), 
  4395 ;; Auto vars:     Size  Location     Type
  4396 ;;  cp              2   20[COMRAM] PTR const unsigned char 
  4397 ;;		 -> NULL(0), txt1(84), Timing_Txt(10), buffer(31), 
  4398 ;; Return value:  Size  Location     Type
  4399 ;;                  2   16[COMRAM] unsigned int 
  4400 ;; Registers used:
  4401 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  4402 ;; Tracked objects:
  4403 ;;		On entry : 0/0
  4404 ;;		On exit  : 0/0
  4405 ;;		Unchanged: 0/0
  4406 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4407 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4408 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4409 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4410 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4411 ;;Total ram usage:        6 bytes
  4412 ;; Hardware stack levels used:    1
  4413 ;; Hardware stack levels required when called:    3
  4414 ;; This function calls:
  4415 ;;		Nothing
  4416 ;; This function is called by:
  4417 ;;		_drawtext
  4418 ;; This function uses a non-reentrant model
  4419 ;;
  4420                           
  4421                           	psect	text15
  4422  0013C2                     __ptext15:
  4423                           	opt stack 0
  4424  0013C2                     _strlen:
  4425                           	opt stack 26
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;incstack = 0
  4429  0013C2  C011  F015         	movff	strlen@s,strlen@cp
  4430  0013C6  C012  F016         	movff	strlen@s+1,strlen@cp+1
  4431  0013CA  D003               	goto	l3634
  4432  0013CC                     l3632:
  4433  0013CC  4A15               	infsnz	strlen@cp,f,c
  4434  0013CE  2A16               	incf	strlen@cp+1,f,c
  4435  0013D0  D000               	goto	l3634
  4436  0013D2                     l3634:
  4437  0013D2  C015  FFD9         	movff	strlen@cp,fsr2l
  4438  0013D6  C016  FFDA         	movff	strlen@cp+1,fsr2h
  4439  0013DA  50DF               	movf	indf2,w,c
  4440  0013DC  A4D8               	btfss	status,2,c
  4441  0013DE  D7F6               	goto	l3632
  4442  0013E0  C011  F013         	movff	strlen@s,??_strlen
  4443  0013E4  C012  F014         	movff	strlen@s+1,??_strlen+1
  4444  0013E8  1E13               	comf	??_strlen,f,c
  4445  0013EA  1E14               	comf	??_strlen+1,f,c
  4446  0013EC  4A13               	infsnz	??_strlen,f,c
  4447  0013EE  2A14               	incf	??_strlen+1,f,c
  4448  0013F0  5015               	movf	strlen@cp,w,c
  4449  0013F2  2413               	addwf	??_strlen,w,c
  4450  0013F4  6E11               	movwf	?_strlen,c
  4451  0013F6  5016               	movf	strlen@cp+1,w,c
  4452  0013F8  2014               	addwfc	??_strlen+1,w,c
  4453  0013FA  6E12               	movwf	?_strlen+1,c
  4454  0013FC  D000               	goto	l1156
  4455  0013FE                     l1156:
  4456  0013FE  0012               	return		;funcret
  4457  001400                     __end_of_strlen:
  4458                           	opt stack 0
  4459                           tblptru	equ	0xFF8
  4460                           tblptrh	equ	0xFF7
  4461                           tblptrl	equ	0xFF6
  4462                           tablat	equ	0xFF5
  4463                           prodh	equ	0xFF4
  4464                           prodl	equ	0xFF3
  4465                           intcon	equ	0xFF2
  4466                           intcon2	equ	0xFF1
  4467                           postinc0	equ	0xFEE
  4468                           wreg	equ	0xFE8
  4469                           indf1	equ	0xFE7
  4470                           postinc1	equ	0xFE6
  4471                           postdec1	equ	0xFE5
  4472                           fsr1h	equ	0xFE2
  4473                           fsr1l	equ	0xFE1
  4474                           indf2	equ	0xFDF
  4475                           postinc2	equ	0xFDE
  4476                           postdec2	equ	0xFDD
  4477                           fsr2h	equ	0xFDA
  4478                           fsr2l	equ	0xFD9
  4479                           status	equ	0xFD8
  4480                           
  4481 ;; *************** function _drawChar *****************
  4482 ;; Defined at:
  4483 ;;		line 394 in file "ST7735_TFT.c"
  4484 ;; Parameters:    Size  Location     Type
  4485 ;;  x               1    wreg     unsigned char 
  4486 ;;  y               1   45[COMRAM] unsigned char 
  4487 ;;  c               1   46[COMRAM] unsigned char 
  4488 ;;  color           2   47[COMRAM] unsigned int 
  4489 ;;  bg              2   49[COMRAM] unsigned int 
  4490 ;;  size            1   51[COMRAM] unsigned char 
  4491 ;; Auto vars:     Size  Location     Type
  4492 ;;  x               1   53[COMRAM] unsigned char 
  4493 ;;  line            1   52[COMRAM] unsigned char 
  4494 ;;  i               1   55[COMRAM] unsigned char 
  4495 ;;  j               1   54[COMRAM] unsigned char 
  4496 ;; Return value:  Size  Location     Type
  4497 ;;		None               void
  4498 ;; Registers used:
  4499 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4500 ;; Tracked objects:
  4501 ;;		On entry : 0/0
  4502 ;;		On exit  : 0/0
  4503 ;;		Unchanged: 0/0
  4504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4505 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4506 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4507 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4508 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4509 ;;Total ram usage:       11 bytes
  4510 ;; Hardware stack levels used:    1
  4511 ;; Hardware stack levels required when called:    8
  4512 ;; This function calls:
  4513 ;;		___wmul
  4514 ;;		_drawPixel
  4515 ;;		_fillRect
  4516 ;; This function is called by:
  4517 ;;		_drawtext
  4518 ;; This function uses a non-reentrant model
  4519 ;;
  4520                           
  4521                           	psect	text16
  4522  0007EA                     __ptext16:
  4523                           	opt stack 0
  4524  0007EA                     _drawChar:
  4525                           	opt stack 21
  4526                           
  4527                           ;incstack = 0
  4528                           ;drawChar@x stored from wreg
  4529  0007EA  6E36               	movwf	drawChar@x,c
  4530                           
  4531                           ;ST7735_TFT.c: 396: char i, j;
  4532                           ;ST7735_TFT.c: 397: if((x >= 128) || (y >= 160))
  4533  0007EC  0E80               	movlw	128
  4534  0007EE  6036               	cpfslt	drawChar@x,c
  4535  0007F0  D0A6               	goto	l214
  4536  0007F2  0E9F               	movlw	159
  4537  0007F4  642E               	cpfsgt	drawChar@y,c
  4538  0007F6  D001               	goto	l3580
  4539                           
  4540                           ;ST7735_TFT.c: 398: return;
  4541  0007F8  D0A2               	goto	l214
  4542  0007FA                     l3580:
  4543                           
  4544                           ;ST7735_TFT.c: 399: if(size < 1) size = 1;
  4545  0007FA  5034               	movf	drawChar@size,w,c
  4546  0007FC  A4D8               	btfss	status,2,c
  4547  0007FE  D003               	goto	l3584
  4548  000800  0E01               	movlw	1
  4549  000802  6E34               	movwf	drawChar@size,c
  4550  000804  D000               	goto	l3584
  4551  000806                     l3584:
  4552                           
  4553                           ;ST7735_TFT.c: 400: if((c < ' ') || (c > '~'))
  4554  000806  0E1F               	movlw	31
  4555  000808  642F               	cpfsgt	drawChar@c,c
  4556  00080A  D004               	goto	l3588
  4557  00080C  0E7E               	movlw	126
  4558  00080E  642F               	cpfsgt	drawChar@c,c
  4559  000810  D003               	goto	l216
  4560  000812  D000               	goto	l3588
  4561  000814                     l3588:
  4562                           
  4563                           ;ST7735_TFT.c: 401: c = '?';
  4564  000814  0E3F               	movlw	63
  4565  000816  6E2F               	movwf	drawChar@c,c
  4566  000818                     l216:
  4567                           
  4568                           ;ST7735_TFT.c: 402: for(i=0; i<5; i++ ) {
  4569  000818  0E00               	movlw	0
  4570  00081A  6E38               	movwf	drawChar@i,c
  4571  00081C                     l3590:
  4572  00081C  0E04               	movlw	4
  4573  00081E  6438               	cpfsgt	drawChar@i,c
  4574  000820  D001               	goto	l3594
  4575  000822  D08D               	goto	l214
  4576  000824                     l3594:
  4577                           
  4578                           ;ST7735_TFT.c: 403: unsigned char line;
  4579                           ;ST7735_TFT.c: 404: if(c < 'S')
  4580  000824  0E53               	movlw	83
  4581  000826  602F               	cpfslt	drawChar@c,c
  4582  000828  D015               	goto	l3598
  4583                           
  4584                           ;ST7735_TFT.c: 405: line = font[(c - 32)*5 + i];
  4585  00082A  0EE0               	movlw	224
  4586  00082C  242F               	addwf	drawChar@c,w,c
  4587  00082E  6E11               	movwf	___wmul@multiplier,c
  4588  000830  6A12               	clrf	___wmul@multiplier+1,c
  4589  000832  0EFF               	movlw	255
  4590  000834  2212               	addwfc	___wmul@multiplier+1,f,c
  4591  000836  0E00               	movlw	0
  4592  000838  6E14               	movwf	___wmul@multiplicand+1,c
  4593  00083A  0E05               	movlw	5
  4594  00083C  6E13               	movwf	___wmul@multiplicand,c
  4595  00083E  EC65  F00A         	call	___wmul	;wreg free
  4596  000842  5038               	movf	drawChar@i,w,c
  4597  000844  2611               	addwf	?___wmul,f,c
  4598  000846  0E00               	movlw	0
  4599  000848  2212               	addwfc	?___wmul+1,f,c
  4600  00084A  0ECF               	movlw	low _font
  4601  00084C  2411               	addwf	?___wmul,w,c
  4602  00084E  6EF6               	movwf	tblptrl,c
  4603  000850  0EFD               	movlw	high _font
  4604  000852  D014               	goto	L4
  4605  000854                     l3598:
  4606                           
  4607                           ;ST7735_TFT.c: 406: else
  4608                           ;ST7735_TFT.c: 407: line = font2[(c - 'S')*5 + i];
  4609  000854  0EAD               	movlw	173
  4610  000856  242F               	addwf	drawChar@c,w,c
  4611  000858  6E11               	movwf	___wmul@multiplier,c
  4612  00085A  6A12               	clrf	___wmul@multiplier+1,c
  4613  00085C  0EFF               	movlw	255
  4614  00085E  2212               	addwfc	___wmul@multiplier+1,f,c
  4615  000860  0E00               	movlw	0
  4616  000862  6E14               	movwf	___wmul@multiplicand+1,c
  4617  000864  0E05               	movlw	5
  4618  000866  6E13               	movwf	___wmul@multiplicand,c
  4619  000868  EC65  F00A         	call	___wmul	;wreg free
  4620  00086C  5038               	movf	drawChar@i,w,c
  4621  00086E  2611               	addwf	?___wmul,f,c
  4622  000870  0E00               	movlw	0
  4623  000872  2212               	addwfc	?___wmul+1,f,c
  4624  000874  0ECE               	movlw	low _font2
  4625  000876  2411               	addwf	?___wmul,w,c
  4626  000878  6EF6               	movwf	tblptrl,c
  4627  00087A  0EFE               	movlw	high _font2
  4628  00087C                     L4:
  4629  00087C  2012               	addwfc	?___wmul+1,w,c
  4630  00087E  6EF7               	movwf	tblptrh,c
  4631  000880                     	if	0	;There are less than 3 active tblptr bytes
  4632  000880                     	endif
  4633  000880  0008               	tblrd		*
  4634  000882  CFF5 F035          	movff	tablat,drawChar@line
  4635  000886  D000               	goto	l3600
  4636  000888                     l3600:
  4637                           
  4638                           ;ST7735_TFT.c: 408: for(j=0; j<7; j++, line >>= 1) {
  4639  000888  0E00               	movlw	0
  4640  00088A  6E37               	movwf	drawChar@j,c
  4641  00088C                     l3602:
  4642  00088C  0E06               	movlw	6
  4643  00088E  6437               	cpfsgt	drawChar@j,c
  4644  000890  D001               	goto	l223
  4645  000892  D053               	goto	l3626
  4646  000894                     l223:
  4647                           
  4648                           ;ST7735_TFT.c: 409: if(line & 0x01) {
  4649  000894  A035               	btfss	drawChar@line,0,c
  4650  000896  D023               	goto	l3612
  4651                           
  4652                           ;ST7735_TFT.c: 410: if(size == 1) drawPixel(x+i, y+j, color);
  4653  000898  0434               	decf	drawChar@size,w,c
  4654  00089A  A4D8               	btfss	status,2,c
  4655  00089C  D00C               	goto	l3610
  4656  00089E  502E               	movf	drawChar@y,w,c
  4657  0008A0  2437               	addwf	drawChar@j,w,c
  4658  0008A2  6E18               	movwf	drawPixel@y,c
  4659  0008A4  C030  F019         	movff	drawChar@color,drawPixel@color
  4660  0008A8  C031  F01A         	movff	drawChar@color+1,drawPixel@color+1
  4661  0008AC  5036               	movf	drawChar@x,w,c
  4662  0008AE  2438               	addwf	drawChar@i,w,c
  4663  0008B0  EC38  F00A         	call	_drawPixel
  4664  0008B4  D03E               	goto	l3620
  4665  0008B6                     l3610:
  4666                           
  4667                           ;ST7735_TFT.c: 411: else fillRect(x+(i*size), y+(j*size), size, size, color);
  4668  0008B6  5037               	movf	drawChar@j,w,c
  4669  0008B8  0234               	mulwf	drawChar@size,c
  4670  0008BA  50F3               	movf	prodl,w,c
  4671  0008BC  242E               	addwf	drawChar@y,w,c
  4672  0008BE  6E23               	movwf	fillRect@y,c
  4673  0008C0  C034  F024         	movff	drawChar@size,fillRect@w
  4674  0008C4  C034  F025         	movff	drawChar@size,fillRect@h
  4675  0008C8  C030  F026         	movff	drawChar@color,fillRect@color
  4676  0008CC  C031  F027         	movff	drawChar@color+1,fillRect@color+1
  4677  0008D0  5038               	movf	drawChar@i,w,c
  4678  0008D2  0234               	mulwf	drawChar@size,c
  4679  0008D4  50F3               	movf	prodl,w,c
  4680  0008D6  2436               	addwf	drawChar@x,w,c
  4681  0008D8  EC9C  F009         	call	_fillRect
  4682                           
  4683                           ;ST7735_TFT.c: 412: }
  4684  0008DC  D02A               	goto	l3620
  4685  0008DE                     l3612:
  4686                           
  4687                           ;ST7735_TFT.c: 413: else if(bg != color) {
  4688  0008DE  5030               	movf	drawChar@color,w,c
  4689  0008E0  1832               	xorwf	drawChar@bg,w,c
  4690  0008E2  E104               	bnz	u2400
  4691  0008E4  5031               	movf	drawChar@color+1,w,c
  4692  0008E6  1833               	xorwf	drawChar@bg+1,w,c
  4693  0008E8  B4D8               	btfsc	status,2,c
  4694  0008EA  D023               	goto	l3620
  4695  0008EC                     u2400:
  4696                           
  4697                           ;ST7735_TFT.c: 414: if(size == 1) drawPixel(x+i, y+j, bg);
  4698  0008EC  0434               	decf	drawChar@size,w,c
  4699  0008EE  A4D8               	btfss	status,2,c
  4700  0008F0  D00C               	goto	l3618
  4701  0008F2  502E               	movf	drawChar@y,w,c
  4702  0008F4  2437               	addwf	drawChar@j,w,c
  4703  0008F6  6E18               	movwf	drawPixel@y,c
  4704  0008F8  C032  F019         	movff	drawChar@bg,drawPixel@color
  4705  0008FC  C033  F01A         	movff	drawChar@bg+1,drawPixel@color+1
  4706  000900  5036               	movf	drawChar@x,w,c
  4707  000902  2438               	addwf	drawChar@i,w,c
  4708  000904  EC38  F00A         	call	_drawPixel
  4709  000908  D014               	goto	l3620
  4710  00090A                     l3618:
  4711                           
  4712                           ;ST7735_TFT.c: 415: else fillRect(x+i*size, y+j*size, size, size, bg);
  4713  00090A  5037               	movf	drawChar@j,w,c
  4714  00090C  0234               	mulwf	drawChar@size,c
  4715  00090E  50F3               	movf	prodl,w,c
  4716  000910  242E               	addwf	drawChar@y,w,c
  4717  000912  6E23               	movwf	fillRect@y,c
  4718  000914  C034  F024         	movff	drawChar@size,fillRect@w
  4719  000918  C034  F025         	movff	drawChar@size,fillRect@h
  4720  00091C  C032  F026         	movff	drawChar@bg,fillRect@color
  4721  000920  C033  F027         	movff	drawChar@bg+1,fillRect@color+1
  4722  000924  5038               	movf	drawChar@i,w,c
  4723  000926  0234               	mulwf	drawChar@size,c
  4724  000928  50F3               	movf	prodl,w,c
  4725  00092A  2436               	addwf	drawChar@x,w,c
  4726  00092C  EC9C  F009         	call	_fillRect
  4727  000930  D000               	goto	l3620
  4728  000932                     l3620:
  4729  000932  2A37               	incf	drawChar@j,f,c
  4730  000934  90D8               	bcf	status,0,c
  4731  000936  3235               	rrcf	drawChar@line,f,c
  4732  000938  D7A9               	goto	l3602
  4733  00093A                     l3626:
  4734  00093A  2A38               	incf	drawChar@i,f,c
  4735  00093C  D76F               	goto	l3590
  4736  00093E                     l214:
  4737  00093E  0012               	return		;funcret
  4738  000940                     __end_of_drawChar:
  4739                           	opt stack 0
  4740                           tblptru	equ	0xFF8
  4741                           tblptrh	equ	0xFF7
  4742                           tblptrl	equ	0xFF6
  4743                           tablat	equ	0xFF5
  4744                           prodh	equ	0xFF4
  4745                           prodl	equ	0xFF3
  4746                           intcon	equ	0xFF2
  4747                           intcon2	equ	0xFF1
  4748                           postinc0	equ	0xFEE
  4749                           wreg	equ	0xFE8
  4750                           indf1	equ	0xFE7
  4751                           postinc1	equ	0xFE6
  4752                           postdec1	equ	0xFE5
  4753                           fsr1h	equ	0xFE2
  4754                           fsr1l	equ	0xFE1
  4755                           indf2	equ	0xFDF
  4756                           postinc2	equ	0xFDE
  4757                           postdec2	equ	0xFDD
  4758                           fsr2h	equ	0xFDA
  4759                           fsr2l	equ	0xFD9
  4760                           status	equ	0xFD8
  4761                           
  4762 ;; *************** function _fillRect *****************
  4763 ;; Defined at:
  4764 ;;		line 384 in file "ST7735_TFT.c"
  4765 ;; Parameters:    Size  Location     Type
  4766 ;;  x               1    wreg     unsigned char 
  4767 ;;  y               1   34[COMRAM] unsigned char 
  4768 ;;  w               1   35[COMRAM] unsigned char 
  4769 ;;  h               1   36[COMRAM] unsigned char 
  4770 ;;  color           2   37[COMRAM] unsigned int 
  4771 ;; Auto vars:     Size  Location     Type
  4772 ;;  x               1   42[COMRAM] unsigned char 
  4773 ;;  i               2   43[COMRAM] int 
  4774 ;; Return value:  Size  Location     Type
  4775 ;;		None               void
  4776 ;; Registers used:
  4777 ;;		wreg, status,2, status,0, cstack
  4778 ;; Tracked objects:
  4779 ;;		On entry : 0/0
  4780 ;;		On exit  : 0/0
  4781 ;;		Unchanged: 0/0
  4782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4783 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4784 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4785 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4786 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4787 ;;Total ram usage:       11 bytes
  4788 ;; Hardware stack levels used:    1
  4789 ;; Hardware stack levels required when called:    7
  4790 ;; This function calls:
  4791 ;;		_drawFastVLine
  4792 ;; This function is called by:
  4793 ;;		_drawChar
  4794 ;; This function uses a non-reentrant model
  4795 ;;
  4796                           
  4797                           	psect	text17
  4798  001338                     __ptext17:
  4799                           	opt stack 0
  4800  001338                     _fillRect:
  4801                           	opt stack 21
  4802                           
  4803                           ;incstack = 0
  4804                           ;fillRect@x stored from wreg
  4805  001338  6E2B               	movwf	fillRect@x,c
  4806                           
  4807                           ;ST7735_TFT.c: 386: signed int i;
  4808                           ;ST7735_TFT.c: 388: for (i = x; i < x + w; i++)
  4809  00133A  C02B  F02C         	movff	fillRect@x,fillRect@i
  4810  00133E  6A2D               	clrf	fillRect@i+1,c
  4811  001340  D00E               	goto	l3482
  4812  001342                     l3478:
  4813                           
  4814                           ;ST7735_TFT.c: 389: {
  4815                           ;ST7735_TFT.c: 390: drawFastVLine(i, y, h, color);
  4816  001342  C023  F018         	movff	fillRect@y,drawFastVLine@y
  4817  001346  C025  F019         	movff	fillRect@h,drawFastVLine@h
  4818  00134A  C026  F01A         	movff	fillRect@color,drawFastVLine@color
  4819  00134E  C027  F01B         	movff	fillRect@color+1,drawFastVLine@color+1
  4820  001352  502C               	movf	fillRect@i,w,c
  4821  001354  ECD4  F007         	call	_drawFastVLine
  4822  001358  4A2C               	infsnz	fillRect@i,f,c
  4823  00135A  2A2D               	incf	fillRect@i+1,f,c
  4824  00135C  D000               	goto	l3482
  4825  00135E                     l3482:
  4826  00135E  5024               	movf	fillRect@w,w,c
  4827  001360  C02B  F028         	movff	fillRect@x,??_fillRect
  4828  001364  6A29               	clrf	(??_fillRect+1)& (0+255),c
  4829  001366  2628               	addwf	??_fillRect,f,c
  4830  001368  0E00               	movlw	0
  4831  00136A  2229               	addwfc	??_fillRect+1,f,c
  4832  00136C  5028               	movf	??_fillRect,w,c
  4833  00136E  5C2C               	subwf	fillRect@i,w,c
  4834  001370  502D               	movf	fillRect@i+1,w,c
  4835  001372  0A80               	xorlw	128
  4836  001374  6E2A               	movwf	(??_fillRect+2)& (0+255),c
  4837  001376  5029               	movf	??_fillRect+1,w,c
  4838  001378  0A80               	xorlw	128
  4839  00137A  582A               	subwfb	(??_fillRect+2)& (0+255),w,c
  4840  00137C  A0D8               	btfss	status,0,c
  4841  00137E  D7E1               	goto	l3478
  4842  001380  0012               	return		;funcret
  4843  001382                     __end_of_fillRect:
  4844                           	opt stack 0
  4845                           tblptru	equ	0xFF8
  4846                           tblptrh	equ	0xFF7
  4847                           tblptrl	equ	0xFF6
  4848                           tablat	equ	0xFF5
  4849                           prodh	equ	0xFF4
  4850                           prodl	equ	0xFF3
  4851                           intcon	equ	0xFF2
  4852                           intcon2	equ	0xFF1
  4853                           postinc0	equ	0xFEE
  4854                           wreg	equ	0xFE8
  4855                           indf1	equ	0xFE7
  4856                           postinc1	equ	0xFE6
  4857                           postdec1	equ	0xFE5
  4858                           fsr1h	equ	0xFE2
  4859                           fsr1l	equ	0xFE1
  4860                           indf2	equ	0xFDF
  4861                           postinc2	equ	0xFDE
  4862                           postdec2	equ	0xFDD
  4863                           fsr2h	equ	0xFDA
  4864                           fsr2l	equ	0xFD9
  4865                           status	equ	0xFD8
  4866                           
  4867 ;; *************** function _drawFastVLine *****************
  4868 ;; Defined at:
  4869 ;;		line 363 in file "ST7735_TFT.c"
  4870 ;; Parameters:    Size  Location     Type
  4871 ;;  x               1    wreg     unsigned char 
  4872 ;;  y               1   23[COMRAM] unsigned char 
  4873 ;;  h               1   24[COMRAM] unsigned char 
  4874 ;;  color           2   25[COMRAM] unsigned int 
  4875 ;; Auto vars:     Size  Location     Type
  4876 ;;  x               1   33[COMRAM] unsigned char 
  4877 ;;  lo              1   32[COMRAM] unsigned char 
  4878 ;;  hi              1   31[COMRAM] unsigned char 
  4879 ;; Return value:  Size  Location     Type
  4880 ;;		None               void
  4881 ;; Registers used:
  4882 ;;		wreg, status,2, status,0, cstack
  4883 ;; Tracked objects:
  4884 ;;		On entry : 0/0
  4885 ;;		On exit  : 0/0
  4886 ;;		Unchanged: 0/0
  4887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4888 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4889 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4890 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4891 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4892 ;;Total ram usage:       11 bytes
  4893 ;; Hardware stack levels used:    1
  4894 ;; Hardware stack levels required when called:    6
  4895 ;; This function calls:
  4896 ;;		_setAddrWindow
  4897 ;;		_spiwrite
  4898 ;; This function is called by:
  4899 ;;		_fillRect
  4900 ;;		_fillCircleHelper
  4901 ;;		_fillCircle
  4902 ;;		_drawRect
  4903 ;; This function uses a non-reentrant model
  4904 ;;
  4905                           
  4906                           	psect	text18
  4907  000FA8                     __ptext18:
  4908                           	opt stack 0
  4909  000FA8                     _drawFastVLine:
  4910                           	opt stack 22
  4911                           
  4912                           ;incstack = 0
  4913                           ;drawFastVLine@x stored from wreg
  4914  000FA8  6E22               	movwf	drawFastVLine@x,c
  4915                           
  4916                           ;ST7735_TFT.c: 365: unsigned char hi, lo;
  4917                           ;ST7735_TFT.c: 366: if((x >= 128) || (y >= 160))
  4918  000FAA  0E80               	movlw	128
  4919  000FAC  6022               	cpfslt	drawFastVLine@x,c
  4920  000FAE  D03F               	goto	l198
  4921  000FB0  0E9F               	movlw	159
  4922  000FB2  6418               	cpfsgt	drawFastVLine@y,c
  4923  000FB4  D001               	goto	l3428
  4924                           
  4925                           ;ST7735_TFT.c: 367: return;
  4926  000FB6  D03B               	goto	l198
  4927  000FB8                     l3428:
  4928                           
  4929                           ;ST7735_TFT.c: 368: if((y + h - 1) >= 160)
  4930  000FB8  0EFF               	movlw	255
  4931  000FBA  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4932  000FBC  0EFF               	movlw	255
  4933  000FBE  6E1D               	movwf	(??_drawFastVLine+1)& (0+255),c
  4934  000FC0  5019               	movf	drawFastVLine@h,w,c
  4935  000FC2  C018  F01E         	movff	drawFastVLine@y,??_drawFastVLine+2
  4936  000FC6  6A1F               	clrf	(??_drawFastVLine+3)& (0+255),c
  4937  000FC8  261E               	addwf	??_drawFastVLine+2,f,c
  4938  000FCA  0E00               	movlw	0
  4939  000FCC  221F               	addwfc	??_drawFastVLine+3,f,c
  4940  000FCE  501C               	movf	??_drawFastVLine,w,c
  4941  000FD0  261E               	addwf	??_drawFastVLine+2,f,c
  4942  000FD2  501D               	movf	??_drawFastVLine+1,w,c
  4943  000FD4  221F               	addwfc	??_drawFastVLine+3,f,c
  4944  000FD6  BE1F               	btfsc	??_drawFastVLine+3,7,c
  4945  000FD8  D00B               	goto	l3432
  4946  000FDA  501F               	movf	??_drawFastVLine+3,w,c
  4947  000FDC  E104               	bnz	u2240
  4948  000FDE  0EA0               	movlw	160
  4949  000FE0  5C1E               	subwf	??_drawFastVLine+2,w,c
  4950  000FE2  A0D8               	btfss	status,0,c
  4951  000FE4  D005               	goto	l3432
  4952  000FE6                     u2240:
  4953                           
  4954                           ;ST7735_TFT.c: 369: h = 160 - y;
  4955  000FE6  5018               	movf	drawFastVLine@y,w,c
  4956  000FE8  0800               	sublw	0
  4957  000FEA  0FA0               	addlw	160
  4958  000FEC  6E19               	movwf	drawFastVLine@h,c
  4959  000FEE  D000               	goto	l3432
  4960  000FF0                     l3432:
  4961                           
  4962                           ;ST7735_TFT.c: 370: hi = color >> 8; lo = color;
  4963  000FF0  501B               	movf	drawFastVLine@color+1,w,c
  4964  000FF2  6E20               	movwf	drawFastVLine@hi,c
  4965  000FF4  C01A  F021         	movff	drawFastVLine@color,drawFastVLine@lo
  4966                           
  4967                           ;ST7735_TFT.c: 371: setAddrWindow(x, y, x, y + h - 1);
  4968  000FF8  C018  F014         	movff	drawFastVLine@y,setAddrWindow@y0
  4969  000FFC  C022  F015         	movff	drawFastVLine@x,setAddrWindow@x1
  4970  001000  5018               	movf	drawFastVLine@y,w,c
  4971  001002  2419               	addwf	drawFastVLine@h,w,c
  4972  001004  6E1C               	movwf	??_drawFastVLine& (0+255),c
  4973  001006  041C               	decf	??_drawFastVLine,w,c
  4974  001008  6E16               	movwf	setAddrWindow@y1,c
  4975  00100A  5022               	movf	drawFastVLine@x,w,c
  4976  00100C  EC4F  F009         	call	_setAddrWindow
  4977                           
  4978                           ;ST7735_TFT.c: 372: PORTDbits.RD0 = 1;
  4979  001010  8083               	bsf	3971,0,c	;volatile
  4980                           
  4981                           ;ST7735_TFT.c: 373: PORTDbits.RD2 = 0;
  4982  001012  9483               	bcf	3971,2,c	;volatile
  4983                           
  4984                           ;ST7735_TFT.c: 375: while (h--) {
  4985  001014  D007               	goto	l3444
  4986  001016                     l3442:
  4987                           
  4988                           ;ST7735_TFT.c: 376: spiwrite(hi);
  4989  001016  5020               	movf	drawFastVLine@hi,w,c
  4990  001018  ECAB  F00A         	call	_spiwrite
  4991                           
  4992                           ;ST7735_TFT.c: 377: spiwrite(lo);
  4993  00101C  5021               	movf	drawFastVLine@lo,w,c
  4994  00101E  ECAB  F00A         	call	_spiwrite
  4995  001022  D000               	goto	l3444
  4996  001024                     l3444:
  4997  001024  0619               	decf	drawFastVLine@h,f,c
  4998  001026  2819               	incf	drawFastVLine@h,w,c
  4999  001028  A4D8               	btfss	status,2,c
  5000  00102A  D7F5               	goto	l3442
  5001                           
  5002                           ;ST7735_TFT.c: 378: }
  5003                           ;ST7735_TFT.c: 379: PORTDbits.RD2 = 1;
  5004  00102C  8483               	bsf	3971,2,c	;volatile
  5005  00102E                     l198:
  5006  00102E  0012               	return		;funcret
  5007  001030                     __end_of_drawFastVLine:
  5008                           	opt stack 0
  5009                           tblptru	equ	0xFF8
  5010                           tblptrh	equ	0xFF7
  5011                           tblptrl	equ	0xFF6
  5012                           tablat	equ	0xFF5
  5013                           prodh	equ	0xFF4
  5014                           prodl	equ	0xFF3
  5015                           intcon	equ	0xFF2
  5016                           intcon2	equ	0xFF1
  5017                           postinc0	equ	0xFEE
  5018                           wreg	equ	0xFE8
  5019                           indf1	equ	0xFE7
  5020                           postinc1	equ	0xFE6
  5021                           postdec1	equ	0xFE5
  5022                           fsr1h	equ	0xFE2
  5023                           fsr1l	equ	0xFE1
  5024                           indf2	equ	0xFDF
  5025                           postinc2	equ	0xFDE
  5026                           postdec2	equ	0xFDD
  5027                           fsr2h	equ	0xFDA
  5028                           fsr2l	equ	0xFD9
  5029                           status	equ	0xFD8
  5030                           
  5031 ;; *************** function _drawPixel *****************
  5032 ;; Defined at:
  5033 ;;		line 354 in file "ST7735_TFT.c"
  5034 ;; Parameters:    Size  Location     Type
  5035 ;;  x               1    wreg     unsigned char 
  5036 ;;  y               1   23[COMRAM] unsigned char 
  5037 ;;  color           2   24[COMRAM] unsigned int 
  5038 ;; Auto vars:     Size  Location     Type
  5039 ;;  x               1   26[COMRAM] unsigned char 
  5040 ;; Return value:  Size  Location     Type
  5041 ;;		None               void
  5042 ;; Registers used:
  5043 ;;		wreg, status,2, status,0, cstack
  5044 ;; Tracked objects:
  5045 ;;		On entry : 0/0
  5046 ;;		On exit  : 0/0
  5047 ;;		Unchanged: 0/0
  5048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5049 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5050 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5052 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5053 ;;Total ram usage:        4 bytes
  5054 ;; Hardware stack levels used:    1
  5055 ;; Hardware stack levels required when called:    6
  5056 ;; This function calls:
  5057 ;;		_setAddrWindow
  5058 ;;		_write_data
  5059 ;; This function is called by:
  5060 ;;		_drawChar
  5061 ;;		_drawCircle
  5062 ;;		_drawCircleHelper
  5063 ;; This function uses a non-reentrant model
  5064 ;;
  5065                           
  5066                           	psect	text19
  5067  001470                     __ptext19:
  5068                           	opt stack 0
  5069  001470                     _drawPixel:
  5070                           	opt stack 22
  5071                           
  5072                           ;incstack = 0
  5073                           ;drawPixel@x stored from wreg
  5074  001470  6E1B               	movwf	drawPixel@x,c
  5075                           
  5076                           ;ST7735_TFT.c: 356: if((x >= 128) || (y >= 160))
  5077  001472  0E80               	movlw	128
  5078  001474  601B               	cpfslt	drawPixel@x,c
  5079  001476  D013               	goto	l192
  5080  001478  0E9F               	movlw	159
  5081  00147A  6418               	cpfsgt	drawPixel@y,c
  5082  00147C  D001               	goto	l3470
  5083                           
  5084                           ;ST7735_TFT.c: 357: return;
  5085  00147E  D00F               	goto	l192
  5086  001480                     l3470:
  5087                           
  5088                           ;ST7735_TFT.c: 358: setAddrWindow(x,y,x+1,y+1);
  5089  001480  C018  F014         	movff	drawPixel@y,setAddrWindow@y0
  5090  001484  281B               	incf	drawPixel@x,w,c
  5091  001486  6E15               	movwf	setAddrWindow@x1,c
  5092  001488  2818               	incf	drawPixel@y,w,c
  5093  00148A  6E16               	movwf	setAddrWindow@y1,c
  5094  00148C  501B               	movf	drawPixel@x,w,c
  5095  00148E  EC4F  F009         	call	_setAddrWindow
  5096                           
  5097                           ;ST7735_TFT.c: 359: write_data(color >> 8);
  5098  001492  501A               	movf	drawPixel@color+1,w,c
  5099  001494  ECD1  F00A         	call	_write_data
  5100                           
  5101                           ;ST7735_TFT.c: 360: write_data(color & 0xFF);
  5102  001498  5019               	movf	drawPixel@color,w,c
  5103  00149A  ECD1  F00A         	call	_write_data
  5104  00149E                     l192:
  5105  00149E  0012               	return		;funcret
  5106  0014A0                     __end_of_drawPixel:
  5107                           	opt stack 0
  5108                           tblptru	equ	0xFF8
  5109                           tblptrh	equ	0xFF7
  5110                           tblptrl	equ	0xFF6
  5111                           tablat	equ	0xFF5
  5112                           prodh	equ	0xFF4
  5113                           prodl	equ	0xFF3
  5114                           intcon	equ	0xFF2
  5115                           intcon2	equ	0xFF1
  5116                           postinc0	equ	0xFEE
  5117                           wreg	equ	0xFE8
  5118                           indf1	equ	0xFE7
  5119                           postinc1	equ	0xFE6
  5120                           postdec1	equ	0xFE5
  5121                           fsr1h	equ	0xFE2
  5122                           fsr1l	equ	0xFE1
  5123                           indf2	equ	0xFDF
  5124                           postinc2	equ	0xFDE
  5125                           postdec2	equ	0xFDD
  5126                           fsr2h	equ	0xFDA
  5127                           fsr2l	equ	0xFD9
  5128                           status	equ	0xFD8
  5129                           
  5130 ;; *************** function _setAddrWindow *****************
  5131 ;; Defined at:
  5132 ;;		line 339 in file "ST7735_TFT.c"
  5133 ;; Parameters:    Size  Location     Type
  5134 ;;  x0              1    wreg     unsigned char 
  5135 ;;  y0              1   19[COMRAM] unsigned char 
  5136 ;;  x1              1   20[COMRAM] unsigned char 
  5137 ;;  y1              1   21[COMRAM] unsigned char 
  5138 ;; Auto vars:     Size  Location     Type
  5139 ;;  x0              1   22[COMRAM] unsigned char 
  5140 ;; Return value:  Size  Location     Type
  5141 ;;		None               void
  5142 ;; Registers used:
  5143 ;;		wreg, status,2, status,0, cstack
  5144 ;; Tracked objects:
  5145 ;;		On entry : 0/0
  5146 ;;		On exit  : 0/0
  5147 ;;		Unchanged: 0/0
  5148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5149 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5150 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5151 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5152 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5153 ;;Total ram usage:        4 bytes
  5154 ;; Hardware stack levels used:    1
  5155 ;; Hardware stack levels required when called:    5
  5156 ;; This function calls:
  5157 ;;		_write_command
  5158 ;;		_write_data
  5159 ;; This function is called by:
  5160 ;;		_drawPixel
  5161 ;;		_drawFastVLine
  5162 ;;		_fillRectangle
  5163 ;;		_drawFastHLine
  5164 ;; This function uses a non-reentrant model
  5165 ;;
  5166                           
  5167                           	psect	text20
  5168  00129E                     __ptext20:
  5169                           	opt stack 0
  5170  00129E                     _setAddrWindow:
  5171                           	opt stack 22
  5172                           
  5173                           ;incstack = 0
  5174                           ;setAddrWindow@x0 stored from wreg
  5175  00129E  6E17               	movwf	setAddrWindow@x0,c
  5176                           
  5177                           ;ST7735_TFT.c: 341: write_command(0x2A);
  5178  0012A0  0E2A               	movlw	42
  5179  0012A2  ECD9  F00A         	call	_write_command
  5180                           
  5181                           ;ST7735_TFT.c: 342: write_data(0);
  5182  0012A6  0E00               	movlw	0
  5183  0012A8  ECD1  F00A         	call	_write_data
  5184                           
  5185                           ;ST7735_TFT.c: 343: write_data(x0 + colstart);
  5186  0012AC  5017               	movf	setAddrWindow@x0,w,c
  5187  0012AE  246C               	addwf	_colstart,w,c
  5188  0012B0  ECD1  F00A         	call	_write_data
  5189                           
  5190                           ;ST7735_TFT.c: 344: write_data(0);
  5191  0012B4  0E00               	movlw	0
  5192  0012B6  ECD1  F00A         	call	_write_data
  5193                           
  5194                           ;ST7735_TFT.c: 345: write_data(x1 + colstart);
  5195  0012BA  5015               	movf	setAddrWindow@x1,w,c
  5196  0012BC  246C               	addwf	_colstart,w,c
  5197  0012BE  ECD1  F00A         	call	_write_data
  5198                           
  5199                           ;ST7735_TFT.c: 346: write_command(0x2B);
  5200  0012C2  0E2B               	movlw	43
  5201  0012C4  ECD9  F00A         	call	_write_command
  5202                           
  5203                           ;ST7735_TFT.c: 347: write_data(0);
  5204  0012C8  0E00               	movlw	0
  5205  0012CA  ECD1  F00A         	call	_write_data
  5206                           
  5207                           ;ST7735_TFT.c: 348: write_data(y0 + rowstart);
  5208  0012CE  5014               	movf	setAddrWindow@y0,w,c
  5209  0012D0  246D               	addwf	_rowstart,w,c
  5210  0012D2  ECD1  F00A         	call	_write_data
  5211                           
  5212                           ;ST7735_TFT.c: 349: write_data(0);
  5213  0012D6  0E00               	movlw	0
  5214  0012D8  ECD1  F00A         	call	_write_data
  5215                           
  5216                           ;ST7735_TFT.c: 350: write_data(y1 + rowstart);
  5217  0012DC  5016               	movf	setAddrWindow@y1,w,c
  5218  0012DE  246D               	addwf	_rowstart,w,c
  5219  0012E0  ECD1  F00A         	call	_write_data
  5220                           
  5221                           ;ST7735_TFT.c: 351: write_command(0x2C);
  5222  0012E4  0E2C               	movlw	44
  5223  0012E6  ECD9  F00A         	call	_write_command
  5224  0012EA  0012               	return		;funcret
  5225  0012EC                     __end_of_setAddrWindow:
  5226                           	opt stack 0
  5227                           tblptru	equ	0xFF8
  5228                           tblptrh	equ	0xFF7
  5229                           tblptrl	equ	0xFF6
  5230                           tablat	equ	0xFF5
  5231                           prodh	equ	0xFF4
  5232                           prodl	equ	0xFF3
  5233                           intcon	equ	0xFF2
  5234                           intcon2	equ	0xFF1
  5235                           postinc0	equ	0xFEE
  5236                           wreg	equ	0xFE8
  5237                           indf1	equ	0xFE7
  5238                           postinc1	equ	0xFE6
  5239                           postdec1	equ	0xFE5
  5240                           fsr1h	equ	0xFE2
  5241                           fsr1l	equ	0xFE1
  5242                           indf2	equ	0xFDF
  5243                           postinc2	equ	0xFDE
  5244                           postdec2	equ	0xFDD
  5245                           fsr2h	equ	0xFDA
  5246                           fsr2l	equ	0xFD9
  5247                           status	equ	0xFD8
  5248                           
  5249 ;; *************** function _TFT_GreenTab_Initialize *****************
  5250 ;; Defined at:
  5251 ;;		line 591 in file "ST7735_TFT.c"
  5252 ;; Parameters:    Size  Location     Type
  5253 ;;		None
  5254 ;; Auto vars:     Size  Location     Type
  5255 ;;		None
  5256 ;; Return value:  Size  Location     Type
  5257 ;;		None               void
  5258 ;; Registers used:
  5259 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5260 ;; Tracked objects:
  5261 ;;		On entry : 0/0
  5262 ;;		On exit  : 0/0
  5263 ;;		Unchanged: 0/0
  5264 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5265 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5266 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5267 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5268 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5269 ;;Total ram usage:        0 bytes
  5270 ;; Hardware stack levels used:    1
  5271 ;; Hardware stack levels required when called:    6
  5272 ;; This function calls:
  5273 ;;		_Rcmd1
  5274 ;;		_Rcmd2red
  5275 ;;		_Rcmd3
  5276 ;;		_write_command
  5277 ;;		_write_data
  5278 ;; This function is called by:
  5279 ;;		_Initialize_LCD_Screen
  5280 ;; This function uses a non-reentrant model
  5281 ;;
  5282                           
  5283                           	psect	text21
  5284  0014A0                     __ptext21:
  5285                           	opt stack 0
  5286  0014A0                     _TFT_GreenTab_Initialize:
  5287                           	opt stack 23
  5288                           
  5289                           ;ST7735_TFT.c: 593: PORTDbits.RD2 = 1;
  5290                           
  5291                           ;incstack = 0
  5292  0014A0  8483               	bsf	3971,2,c	;volatile
  5293                           
  5294                           ;ST7735_TFT.c: 594: PORTDbits.RD0 = 0;
  5295  0014A2  9083               	bcf	3971,0,c	;volatile
  5296                           
  5297                           ;ST7735_TFT.c: 596: SSPSTAT=0x80;
  5298  0014A4  0E80               	movlw	128
  5299  0014A6  6EC7               	movwf	4039,c	;volatile
  5300                           
  5301                           ;ST7735_TFT.c: 597: SSPCON1=0x30;
  5302  0014A8  0E30               	movlw	48
  5303  0014AA  6EC6               	movwf	4038,c	;volatile
  5304                           
  5305                           ;ST7735_TFT.c: 600: Rcmd1();
  5306  0014AC  EC3C  F005         	call	_Rcmd1	;wreg free
  5307                           
  5308                           ;ST7735_TFT.c: 601: Rcmd2red();
  5309  0014B0  EC00  F00A         	call	_Rcmd2red	;wreg free
  5310                           
  5311                           ;ST7735_TFT.c: 602: Rcmd3();
  5312  0014B4  EC49  F006         	call	_Rcmd3	;wreg free
  5313                           
  5314                           ;ST7735_TFT.c: 603: write_command(0x36);
  5315  0014B8  0E36               	movlw	54
  5316  0014BA  ECD9  F00A         	call	_write_command
  5317                           
  5318                           ;ST7735_TFT.c: 604: write_data(0xC0);
  5319  0014BE  0EC0               	movlw	192
  5320  0014C0  ECD1  F00A         	call	_write_data
  5321                           
  5322                           ;ST7735_TFT.c: 605: _tft_type = 1;
  5323  0014C4  0E01               	movlw	1
  5324  0014C6  6E6A               	movwf	__tft_type,c
  5325  0014C8  0012               	return		;funcret
  5326  0014CA                     __end_of_TFT_GreenTab_Initialize:
  5327                           	opt stack 0
  5328                           tblptru	equ	0xFF8
  5329                           tblptrh	equ	0xFF7
  5330                           tblptrl	equ	0xFF6
  5331                           tablat	equ	0xFF5
  5332                           prodh	equ	0xFF4
  5333                           prodl	equ	0xFF3
  5334                           intcon	equ	0xFF2
  5335                           intcon2	equ	0xFF1
  5336                           postinc0	equ	0xFEE
  5337                           wreg	equ	0xFE8
  5338                           indf1	equ	0xFE7
  5339                           postinc1	equ	0xFE6
  5340                           postdec1	equ	0xFE5
  5341                           fsr1h	equ	0xFE2
  5342                           fsr1l	equ	0xFE1
  5343                           indf2	equ	0xFDF
  5344                           postinc2	equ	0xFDE
  5345                           postdec2	equ	0xFDD
  5346                           fsr2h	equ	0xFDA
  5347                           fsr2l	equ	0xFD9
  5348                           status	equ	0xFD8
  5349                           
  5350 ;; *************** function _Rcmd3 *****************
  5351 ;; Defined at:
  5352 ;;		line 285 in file "ST7735_TFT.c"
  5353 ;; Parameters:    Size  Location     Type
  5354 ;;		None
  5355 ;; Auto vars:     Size  Location     Type
  5356 ;;		None
  5357 ;; Return value:  Size  Location     Type
  5358 ;;		None               void
  5359 ;; Registers used:
  5360 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5361 ;; Tracked objects:
  5362 ;;		On entry : 0/0
  5363 ;;		On exit  : 0/0
  5364 ;;		Unchanged: 0/0
  5365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5366 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5369 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5370 ;;Total ram usage:        0 bytes
  5371 ;; Hardware stack levels used:    1
  5372 ;; Hardware stack levels required when called:    5
  5373 ;; This function calls:
  5374 ;;		_delay_ms
  5375 ;;		_write_command
  5376 ;;		_write_data
  5377 ;; This function is called by:
  5378 ;;		_TFT_GreenTab_Initialize
  5379 ;;		_TFT_BlackTab_Initialize
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           	psect	text22
  5384  000C92                     __ptext22:
  5385                           	opt stack 0
  5386  000C92                     _Rcmd3:
  5387                           	opt stack 23
  5388                           
  5389                           ;ST7735_TFT.c: 287: write_command(0xE0);
  5390                           
  5391                           ;incstack = 0
  5392  000C92  0EE0               	movlw	224
  5393  000C94  ECD9  F00A         	call	_write_command
  5394                           
  5395                           ;ST7735_TFT.c: 288: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  5396  000C98  0E02               	movlw	2
  5397  000C9A  ECD1  F00A         	call	_write_data
  5398  000C9E  0E1C               	movlw	28
  5399  000CA0  ECD1  F00A         	call	_write_data
  5400  000CA4  0E07               	movlw	7
  5401  000CA6  ECD1  F00A         	call	_write_data
  5402  000CAA  0E12               	movlw	18
  5403  000CAC  ECD1  F00A         	call	_write_data
  5404                           
  5405                           ;ST7735_TFT.c: 289: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  5406  000CB0  0E37               	movlw	55
  5407  000CB2  ECD1  F00A         	call	_write_data
  5408  000CB6  0E32               	movlw	50
  5409  000CB8  ECD1  F00A         	call	_write_data
  5410  000CBC  0E29               	movlw	41
  5411  000CBE  ECD1  F00A         	call	_write_data
  5412  000CC2  0E2D               	movlw	45
  5413  000CC4  ECD1  F00A         	call	_write_data
  5414                           
  5415                           ;ST7735_TFT.c: 290: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  5416  000CC8  0E29               	movlw	41
  5417  000CCA  ECD1  F00A         	call	_write_data
  5418  000CCE  0E25               	movlw	37
  5419  000CD0  ECD1  F00A         	call	_write_data
  5420  000CD4  0E2B               	movlw	43
  5421  000CD6  ECD1  F00A         	call	_write_data
  5422  000CDA  0E39               	movlw	57
  5423  000CDC  ECD1  F00A         	call	_write_data
  5424                           
  5425                           ;ST7735_TFT.c: 291: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  5426  000CE0  0E00               	movlw	0
  5427  000CE2  ECD1  F00A         	call	_write_data
  5428  000CE6  0E01               	movlw	1
  5429  000CE8  ECD1  F00A         	call	_write_data
  5430  000CEC  0E03               	movlw	3
  5431  000CEE  ECD1  F00A         	call	_write_data
  5432  000CF2  0E10               	movlw	16
  5433  000CF4  ECD1  F00A         	call	_write_data
  5434                           
  5435                           ;ST7735_TFT.c: 292: write_command(0xE1);
  5436  000CF8  0EE1               	movlw	225
  5437  000CFA  ECD9  F00A         	call	_write_command
  5438                           
  5439                           ;ST7735_TFT.c: 293: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  5440  000CFE  0E03               	movlw	3
  5441  000D00  ECD1  F00A         	call	_write_data
  5442  000D04  0E1D               	movlw	29
  5443  000D06  ECD1  F00A         	call	_write_data
  5444  000D0A  0E07               	movlw	7
  5445  000D0C  ECD1  F00A         	call	_write_data
  5446  000D10  0E06               	movlw	6
  5447  000D12  ECD1  F00A         	call	_write_data
  5448                           
  5449                           ;ST7735_TFT.c: 294: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  5450  000D16  0E2E               	movlw	46
  5451  000D18  ECD1  F00A         	call	_write_data
  5452  000D1C  0E2C               	movlw	44
  5453  000D1E  ECD1  F00A         	call	_write_data
  5454  000D22  0E29               	movlw	41
  5455  000D24  ECD1  F00A         	call	_write_data
  5456  000D28  0E2D               	movlw	45
  5457  000D2A  ECD1  F00A         	call	_write_data
  5458                           
  5459                           ;ST7735_TFT.c: 295: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  5460  000D2E  0E2E               	movlw	46
  5461  000D30  ECD1  F00A         	call	_write_data
  5462  000D34  0E2E               	movlw	46
  5463  000D36  ECD1  F00A         	call	_write_data
  5464  000D3A  0E37               	movlw	55
  5465  000D3C  ECD1  F00A         	call	_write_data
  5466  000D40  0E3F               	movlw	63
  5467  000D42  ECD1  F00A         	call	_write_data
  5468                           
  5469                           ;ST7735_TFT.c: 296: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  5470  000D46  0E00               	movlw	0
  5471  000D48  ECD1  F00A         	call	_write_data
  5472  000D4C  0E00               	movlw	0
  5473  000D4E  ECD1  F00A         	call	_write_data
  5474  000D52  0E02               	movlw	2
  5475  000D54  ECD1  F00A         	call	_write_data
  5476  000D58  0E10               	movlw	16
  5477  000D5A  ECD1  F00A         	call	_write_data
  5478                           
  5479                           ;ST7735_TFT.c: 297: write_command(0x13);
  5480  000D5E  0E13               	movlw	19
  5481  000D60  ECD9  F00A         	call	_write_command
  5482                           
  5483                           ;ST7735_TFT.c: 298: delay_ms(10);
  5484  000D64  0E00               	movlw	0
  5485  000D66  6E18               	movwf	delay_ms@ms+1,c
  5486  000D68  0E0A               	movlw	10
  5487  000D6A  6E17               	movwf	delay_ms@ms,c
  5488  000D6C  EC26  F009         	call	_delay_ms	;wreg free
  5489                           
  5490                           ;ST7735_TFT.c: 299: write_command(0x29);
  5491  000D70  0E29               	movlw	41
  5492  000D72  ECD9  F00A         	call	_write_command
  5493                           
  5494                           ;ST7735_TFT.c: 300: delay_ms(100);
  5495  000D76  0E00               	movlw	0
  5496  000D78  6E18               	movwf	delay_ms@ms+1,c
  5497  000D7A  0E64               	movlw	100
  5498  000D7C  6E17               	movwf	delay_ms@ms,c
  5499  000D7E  EC26  F009         	call	_delay_ms	;wreg free
  5500  000D82  0012               	return		;funcret
  5501  000D84                     __end_of_Rcmd3:
  5502                           	opt stack 0
  5503                           tblptru	equ	0xFF8
  5504                           tblptrh	equ	0xFF7
  5505                           tblptrl	equ	0xFF6
  5506                           tablat	equ	0xFF5
  5507                           prodh	equ	0xFF4
  5508                           prodl	equ	0xFF3
  5509                           intcon	equ	0xFF2
  5510                           intcon2	equ	0xFF1
  5511                           postinc0	equ	0xFEE
  5512                           wreg	equ	0xFE8
  5513                           indf1	equ	0xFE7
  5514                           postinc1	equ	0xFE6
  5515                           postdec1	equ	0xFE5
  5516                           fsr1h	equ	0xFE2
  5517                           fsr1l	equ	0xFE1
  5518                           indf2	equ	0xFDF
  5519                           postinc2	equ	0xFDE
  5520                           postdec2	equ	0xFDD
  5521                           fsr2h	equ	0xFDA
  5522                           fsr2l	equ	0xFD9
  5523                           status	equ	0xFD8
  5524                           
  5525 ;; *************** function _Rcmd2red *****************
  5526 ;; Defined at:
  5527 ;;		line 275 in file "ST7735_TFT.c"
  5528 ;; Parameters:    Size  Location     Type
  5529 ;;		None
  5530 ;; Auto vars:     Size  Location     Type
  5531 ;;		None
  5532 ;; Return value:  Size  Location     Type
  5533 ;;		None               void
  5534 ;; Registers used:
  5535 ;;		wreg, status,2, cstack
  5536 ;; Tracked objects:
  5537 ;;		On entry : 0/0
  5538 ;;		On exit  : 0/0
  5539 ;;		Unchanged: 0/0
  5540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5545 ;;Total ram usage:        0 bytes
  5546 ;; Hardware stack levels used:    1
  5547 ;; Hardware stack levels required when called:    5
  5548 ;; This function calls:
  5549 ;;		_write_command
  5550 ;;		_write_data
  5551 ;; This function is called by:
  5552 ;;		_TFT_GreenTab_Initialize
  5553 ;; This function uses a non-reentrant model
  5554 ;;
  5555                           
  5556                           	psect	text23
  5557  001400                     __ptext23:
  5558                           	opt stack 0
  5559  001400                     _Rcmd2red:
  5560                           	opt stack 23
  5561                           
  5562                           ;ST7735_TFT.c: 277: write_command(0x2A);
  5563                           
  5564                           ;incstack = 0
  5565  001400  0E2A               	movlw	42
  5566  001402  ECD9  F00A         	call	_write_command
  5567                           
  5568                           ;ST7735_TFT.c: 278: write_data(0x00); write_data(0x00);
  5569  001406  0E00               	movlw	0
  5570  001408  ECD1  F00A         	call	_write_data
  5571  00140C  0E00               	movlw	0
  5572  00140E  ECD1  F00A         	call	_write_data
  5573                           
  5574                           ;ST7735_TFT.c: 279: write_data(0x00); write_data(0x7F);
  5575  001412  0E00               	movlw	0
  5576  001414  ECD1  F00A         	call	_write_data
  5577  001418  0E7F               	movlw	127
  5578  00141A  ECD1  F00A         	call	_write_data
  5579                           
  5580                           ;ST7735_TFT.c: 280: write_command(0x2B);
  5581  00141E  0E2B               	movlw	43
  5582  001420  ECD9  F00A         	call	_write_command
  5583                           
  5584                           ;ST7735_TFT.c: 281: write_data(0x00); write_data(0x00);
  5585  001424  0E00               	movlw	0
  5586  001426  ECD1  F00A         	call	_write_data
  5587  00142A  0E00               	movlw	0
  5588  00142C  ECD1  F00A         	call	_write_data
  5589                           
  5590                           ;ST7735_TFT.c: 282: write_data(0x00); write_data(0x9F);
  5591  001430  0E00               	movlw	0
  5592  001432  ECD1  F00A         	call	_write_data
  5593  001436  0E9F               	movlw	159
  5594  001438  ECD1  F00A         	call	_write_data
  5595  00143C  0012               	return		;funcret
  5596  00143E                     __end_of_Rcmd2red:
  5597                           	opt stack 0
  5598                           tblptru	equ	0xFF8
  5599                           tblptrh	equ	0xFF7
  5600                           tblptrl	equ	0xFF6
  5601                           tablat	equ	0xFF5
  5602                           prodh	equ	0xFF4
  5603                           prodl	equ	0xFF3
  5604                           intcon	equ	0xFF2
  5605                           intcon2	equ	0xFF1
  5606                           postinc0	equ	0xFEE
  5607                           wreg	equ	0xFE8
  5608                           indf1	equ	0xFE7
  5609                           postinc1	equ	0xFE6
  5610                           postdec1	equ	0xFE5
  5611                           fsr1h	equ	0xFE2
  5612                           fsr1l	equ	0xFE1
  5613                           indf2	equ	0xFDF
  5614                           postinc2	equ	0xFDE
  5615                           postdec2	equ	0xFDD
  5616                           fsr2h	equ	0xFDA
  5617                           fsr2l	equ	0xFD9
  5618                           status	equ	0xFD8
  5619                           
  5620 ;; *************** function _Rcmd1 *****************
  5621 ;; Defined at:
  5622 ;;		line 228 in file "ST7735_TFT.c"
  5623 ;; Parameters:    Size  Location     Type
  5624 ;;		None
  5625 ;; Auto vars:     Size  Location     Type
  5626 ;;		None
  5627 ;; Return value:  Size  Location     Type
  5628 ;;		None               void
  5629 ;; Registers used:
  5630 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5631 ;; Tracked objects:
  5632 ;;		On entry : 0/0
  5633 ;;		On exit  : 0/0
  5634 ;;		Unchanged: 0/0
  5635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5640 ;;Total ram usage:        0 bytes
  5641 ;; Hardware stack levels used:    1
  5642 ;; Hardware stack levels required when called:    5
  5643 ;; This function calls:
  5644 ;;		_delay_ms
  5645 ;;		_write_command
  5646 ;;		_write_data
  5647 ;; This function is called by:
  5648 ;;		_TFT_GreenTab_Initialize
  5649 ;;		_TFT_BlackTab_Initialize
  5650 ;; This function uses a non-reentrant model
  5651 ;;
  5652                           
  5653                           	psect	text24
  5654  000A78                     __ptext24:
  5655                           	opt stack 0
  5656  000A78                     _Rcmd1:
  5657                           	opt stack 23
  5658                           
  5659                           ;ST7735_TFT.c: 230: write_command(0x01);
  5660                           
  5661                           ;incstack = 0
  5662  000A78  0E01               	movlw	1
  5663  000A7A  ECD9  F00A         	call	_write_command
  5664                           
  5665                           ;ST7735_TFT.c: 231: delay_ms(150);
  5666  000A7E  0E00               	movlw	0
  5667  000A80  6E18               	movwf	delay_ms@ms+1,c
  5668  000A82  0E96               	movlw	150
  5669  000A84  6E17               	movwf	delay_ms@ms,c
  5670  000A86  EC26  F009         	call	_delay_ms	;wreg free
  5671                           
  5672                           ;ST7735_TFT.c: 232: write_command(0x11);
  5673  000A8A  0E11               	movlw	17
  5674  000A8C  ECD9  F00A         	call	_write_command
  5675                           
  5676                           ;ST7735_TFT.c: 233: delay_ms(500);
  5677  000A90  0E01               	movlw	1
  5678  000A92  6E18               	movwf	delay_ms@ms+1,c
  5679  000A94  0EF4               	movlw	244
  5680  000A96  6E17               	movwf	delay_ms@ms,c
  5681  000A98  EC26  F009         	call	_delay_ms	;wreg free
  5682                           
  5683                           ;ST7735_TFT.c: 234: write_command(0xB1);
  5684  000A9C  0EB1               	movlw	177
  5685  000A9E  ECD9  F00A         	call	_write_command
  5686                           
  5687                           ;ST7735_TFT.c: 235: write_data(0x01);
  5688  000AA2  0E01               	movlw	1
  5689  000AA4  ECD1  F00A         	call	_write_data
  5690                           
  5691                           ;ST7735_TFT.c: 236: write_data(0x2C);
  5692  000AA8  0E2C               	movlw	44
  5693  000AAA  ECD1  F00A         	call	_write_data
  5694                           
  5695                           ;ST7735_TFT.c: 237: write_data(0x2D);
  5696  000AAE  0E2D               	movlw	45
  5697  000AB0  ECD1  F00A         	call	_write_data
  5698                           
  5699                           ;ST7735_TFT.c: 238: write_command(0xB2);
  5700  000AB4  0EB2               	movlw	178
  5701  000AB6  ECD9  F00A         	call	_write_command
  5702                           
  5703                           ;ST7735_TFT.c: 239: write_data(0x01);
  5704  000ABA  0E01               	movlw	1
  5705  000ABC  ECD1  F00A         	call	_write_data
  5706                           
  5707                           ;ST7735_TFT.c: 240: write_data(0x2C);
  5708  000AC0  0E2C               	movlw	44
  5709  000AC2  ECD1  F00A         	call	_write_data
  5710                           
  5711                           ;ST7735_TFT.c: 241: write_data(0x2D);
  5712  000AC6  0E2D               	movlw	45
  5713  000AC8  ECD1  F00A         	call	_write_data
  5714                           
  5715                           ;ST7735_TFT.c: 242: write_command(0xB3);
  5716  000ACC  0EB3               	movlw	179
  5717  000ACE  ECD9  F00A         	call	_write_command
  5718                           
  5719                           ;ST7735_TFT.c: 243: write_data(0x01);
  5720  000AD2  0E01               	movlw	1
  5721  000AD4  ECD1  F00A         	call	_write_data
  5722                           
  5723                           ;ST7735_TFT.c: 244: write_data(0x2C);
  5724  000AD8  0E2C               	movlw	44
  5725  000ADA  ECD1  F00A         	call	_write_data
  5726                           
  5727                           ;ST7735_TFT.c: 245: write_data(0x2D);
  5728  000ADE  0E2D               	movlw	45
  5729  000AE0  ECD1  F00A         	call	_write_data
  5730                           
  5731                           ;ST7735_TFT.c: 246: write_data(0x01);
  5732  000AE4  0E01               	movlw	1
  5733  000AE6  ECD1  F00A         	call	_write_data
  5734                           
  5735                           ;ST7735_TFT.c: 247: write_data(0x2C);
  5736  000AEA  0E2C               	movlw	44
  5737  000AEC  ECD1  F00A         	call	_write_data
  5738                           
  5739                           ;ST7735_TFT.c: 248: write_data(0x2D);
  5740  000AF0  0E2D               	movlw	45
  5741  000AF2  ECD1  F00A         	call	_write_data
  5742                           
  5743                           ;ST7735_TFT.c: 249: write_command(0xB4);
  5744  000AF6  0EB4               	movlw	180
  5745  000AF8  ECD9  F00A         	call	_write_command
  5746                           
  5747                           ;ST7735_TFT.c: 250: write_data(0x07);
  5748  000AFC  0E07               	movlw	7
  5749  000AFE  ECD1  F00A         	call	_write_data
  5750                           
  5751                           ;ST7735_TFT.c: 251: write_command(0xC0);
  5752  000B02  0EC0               	movlw	192
  5753  000B04  ECD9  F00A         	call	_write_command
  5754                           
  5755                           ;ST7735_TFT.c: 252: write_data(0xA2);
  5756  000B08  0EA2               	movlw	162
  5757  000B0A  ECD1  F00A         	call	_write_data
  5758                           
  5759                           ;ST7735_TFT.c: 253: write_data(0x02);
  5760  000B0E  0E02               	movlw	2
  5761  000B10  ECD1  F00A         	call	_write_data
  5762                           
  5763                           ;ST7735_TFT.c: 254: write_data(0x84);
  5764  000B14  0E84               	movlw	132
  5765  000B16  ECD1  F00A         	call	_write_data
  5766                           
  5767                           ;ST7735_TFT.c: 255: write_command(0xC1);
  5768  000B1A  0EC1               	movlw	193
  5769  000B1C  ECD9  F00A         	call	_write_command
  5770                           
  5771                           ;ST7735_TFT.c: 256: write_data(0xC5);
  5772  000B20  0EC5               	movlw	197
  5773  000B22  ECD1  F00A         	call	_write_data
  5774                           
  5775                           ;ST7735_TFT.c: 257: write_command(0xC2);
  5776  000B26  0EC2               	movlw	194
  5777  000B28  ECD9  F00A         	call	_write_command
  5778                           
  5779                           ;ST7735_TFT.c: 258: write_data(0x0A);
  5780  000B2C  0E0A               	movlw	10
  5781  000B2E  ECD1  F00A         	call	_write_data
  5782                           
  5783                           ;ST7735_TFT.c: 259: write_data(0x00);
  5784  000B32  0E00               	movlw	0
  5785  000B34  ECD1  F00A         	call	_write_data
  5786                           
  5787                           ;ST7735_TFT.c: 260: write_command(0xC3);
  5788  000B38  0EC3               	movlw	195
  5789  000B3A  ECD9  F00A         	call	_write_command
  5790                           
  5791                           ;ST7735_TFT.c: 261: write_data(0x8A);
  5792  000B3E  0E8A               	movlw	138
  5793  000B40  ECD1  F00A         	call	_write_data
  5794                           
  5795                           ;ST7735_TFT.c: 262: write_data(0x2A);
  5796  000B44  0E2A               	movlw	42
  5797  000B46  ECD1  F00A         	call	_write_data
  5798                           
  5799                           ;ST7735_TFT.c: 263: write_command(0xC4);
  5800  000B4A  0EC4               	movlw	196
  5801  000B4C  ECD9  F00A         	call	_write_command
  5802                           
  5803                           ;ST7735_TFT.c: 264: write_data(0x8A);
  5804  000B50  0E8A               	movlw	138
  5805  000B52  ECD1  F00A         	call	_write_data
  5806                           
  5807                           ;ST7735_TFT.c: 265: write_data(0xEE);
  5808  000B56  0EEE               	movlw	238
  5809  000B58  ECD1  F00A         	call	_write_data
  5810                           
  5811                           ;ST7735_TFT.c: 266: write_command(0xC5);
  5812  000B5C  0EC5               	movlw	197
  5813  000B5E  ECD9  F00A         	call	_write_command
  5814                           
  5815                           ;ST7735_TFT.c: 267: write_data(0x0E);
  5816  000B62  0E0E               	movlw	14
  5817  000B64  ECD1  F00A         	call	_write_data
  5818                           
  5819                           ;ST7735_TFT.c: 268: write_command(0x20);
  5820  000B68  0E20               	movlw	32
  5821  000B6A  ECD9  F00A         	call	_write_command
  5822                           
  5823                           ;ST7735_TFT.c: 269: write_command(0x36);
  5824  000B6E  0E36               	movlw	54
  5825  000B70  ECD9  F00A         	call	_write_command
  5826                           
  5827                           ;ST7735_TFT.c: 270: write_data(0xC8);
  5828  000B74  0EC8               	movlw	200
  5829  000B76  ECD1  F00A         	call	_write_data
  5830                           
  5831                           ;ST7735_TFT.c: 271: write_command(0x3A);
  5832  000B7A  0E3A               	movlw	58
  5833  000B7C  ECD9  F00A         	call	_write_command
  5834                           
  5835                           ;ST7735_TFT.c: 272: write_data(0x05);
  5836  000B80  0E05               	movlw	5
  5837  000B82  ECD1  F00A         	call	_write_data
  5838  000B86  0012               	return		;funcret
  5839  000B88                     __end_of_Rcmd1:
  5840                           	opt stack 0
  5841                           tblptru	equ	0xFF8
  5842                           tblptrh	equ	0xFF7
  5843                           tblptrl	equ	0xFF6
  5844                           tablat	equ	0xFF5
  5845                           prodh	equ	0xFF4
  5846                           prodl	equ	0xFF3
  5847                           intcon	equ	0xFF2
  5848                           intcon2	equ	0xFF1
  5849                           postinc0	equ	0xFEE
  5850                           wreg	equ	0xFE8
  5851                           indf1	equ	0xFE7
  5852                           postinc1	equ	0xFE6
  5853                           postdec1	equ	0xFE5
  5854                           fsr1h	equ	0xFE2
  5855                           fsr1l	equ	0xFE1
  5856                           indf2	equ	0xFDF
  5857                           postinc2	equ	0xFDE
  5858                           postdec2	equ	0xFDD
  5859                           fsr2h	equ	0xFDA
  5860                           fsr2l	equ	0xFD9
  5861                           status	equ	0xFD8
  5862                           
  5863 ;; *************** function _write_data *****************
  5864 ;; Defined at:
  5865 ;;		line 156 in file "ST7735_TFT.c"
  5866 ;; Parameters:    Size  Location     Type
  5867 ;;  data_           1    wreg     unsigned char 
  5868 ;; Auto vars:     Size  Location     Type
  5869 ;;  data_           1   18[COMRAM] unsigned char 
  5870 ;; Return value:  Size  Location     Type
  5871 ;;		None               void
  5872 ;; Registers used:
  5873 ;;		wreg, status,2, cstack
  5874 ;; Tracked objects:
  5875 ;;		On entry : 0/0
  5876 ;;		On exit  : 0/0
  5877 ;;		Unchanged: 0/0
  5878 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5879 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5880 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5881 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5882 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5883 ;;Total ram usage:        1 bytes
  5884 ;; Hardware stack levels used:    1
  5885 ;; Hardware stack levels required when called:    4
  5886 ;; This function calls:
  5887 ;;		_spiwrite
  5888 ;; This function is called by:
  5889 ;;		_Rcmd1
  5890 ;;		_Rcmd2red
  5891 ;;		_Rcmd3
  5892 ;;		_setAddrWindow
  5893 ;;		_drawPixel
  5894 ;;		_TFT_GreenTab_Initialize
  5895 ;;		_Bcmd
  5896 ;;		_setScrollDefinition
  5897 ;;		_Rcmd2green
  5898 ;;		_VerticalScroll
  5899 ;; This function uses a non-reentrant model
  5900 ;;
  5901                           
  5902                           	psect	text25
  5903  0015A2                     __ptext25:
  5904                           	opt stack 0
  5905  0015A2                     _write_data:
  5906                           	opt stack 22
  5907                           
  5908                           ;incstack = 0
  5909                           ;write_data@data_ stored from wreg
  5910  0015A2  6E13               	movwf	write_data@data_,c
  5911                           
  5912                           ;ST7735_TFT.c: 158: PORTDbits.RD2 = 0;
  5913  0015A4  9483               	bcf	3971,2,c	;volatile
  5914                           
  5915                           ;ST7735_TFT.c: 159: PORTDbits.RD0 = 1;
  5916  0015A6  8083               	bsf	3971,0,c	;volatile
  5917                           
  5918                           ;ST7735_TFT.c: 160: spiwrite(data_);
  5919  0015A8  5013               	movf	write_data@data_,w,c
  5920  0015AA  ECAB  F00A         	call	_spiwrite
  5921                           
  5922                           ;ST7735_TFT.c: 161: PORTDbits.RD2 = 1;
  5923  0015AE  8483               	bsf	3971,2,c	;volatile
  5924  0015B0  0012               	return		;funcret
  5925  0015B2                     __end_of_write_data:
  5926                           	opt stack 0
  5927                           tblptru	equ	0xFF8
  5928                           tblptrh	equ	0xFF7
  5929                           tblptrl	equ	0xFF6
  5930                           tablat	equ	0xFF5
  5931                           prodh	equ	0xFF4
  5932                           prodl	equ	0xFF3
  5933                           intcon	equ	0xFF2
  5934                           intcon2	equ	0xFF1
  5935                           postinc0	equ	0xFEE
  5936                           wreg	equ	0xFE8
  5937                           indf1	equ	0xFE7
  5938                           postinc1	equ	0xFE6
  5939                           postdec1	equ	0xFE5
  5940                           fsr1h	equ	0xFE2
  5941                           fsr1l	equ	0xFE1
  5942                           indf2	equ	0xFDF
  5943                           postinc2	equ	0xFDE
  5944                           postdec2	equ	0xFDD
  5945                           fsr2h	equ	0xFDA
  5946                           fsr2l	equ	0xFD9
  5947                           status	equ	0xFD8
  5948                           
  5949 ;; *************** function _write_command *****************
  5950 ;; Defined at:
  5951 ;;		line 145 in file "ST7735_TFT.c"
  5952 ;; Parameters:    Size  Location     Type
  5953 ;;  cmd_            1    wreg     unsigned char 
  5954 ;; Auto vars:     Size  Location     Type
  5955 ;;  cmd_            1   18[COMRAM] unsigned char 
  5956 ;; Return value:  Size  Location     Type
  5957 ;;		None               void
  5958 ;; Registers used:
  5959 ;;		wreg, status,2, cstack
  5960 ;; Tracked objects:
  5961 ;;		On entry : 0/0
  5962 ;;		On exit  : 0/0
  5963 ;;		Unchanged: 0/0
  5964 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5965 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5966 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5967 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5968 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;Total ram usage:        1 bytes
  5970 ;; Hardware stack levels used:    1
  5971 ;; Hardware stack levels required when called:    4
  5972 ;; This function calls:
  5973 ;;		_spiwrite
  5974 ;; This function is called by:
  5975 ;;		_Rcmd1
  5976 ;;		_Rcmd2red
  5977 ;;		_Rcmd3
  5978 ;;		_setAddrWindow
  5979 ;;		_TFT_GreenTab_Initialize
  5980 ;;		_Bcmd
  5981 ;;		_setScrollDefinition
  5982 ;;		_Rcmd2green
  5983 ;;		_VerticalScroll
  5984 ;; This function uses a non-reentrant model
  5985 ;;
  5986                           
  5987                           	psect	text26
  5988  0015B2                     __ptext26:
  5989                           	opt stack 0
  5990  0015B2                     _write_command:
  5991                           	opt stack 22
  5992                           
  5993                           ;incstack = 0
  5994                           ;write_command@cmd_ stored from wreg
  5995  0015B2  6E13               	movwf	write_command@cmd_,c
  5996                           
  5997                           ;ST7735_TFT.c: 147: PORTDbits.RD2 = 0;
  5998  0015B4  9483               	bcf	3971,2,c	;volatile
  5999                           
  6000                           ;ST7735_TFT.c: 149: PORTDbits.RD0 = 0;
  6001  0015B6  9083               	bcf	3971,0,c	;volatile
  6002                           
  6003                           ;ST7735_TFT.c: 150: spiwrite(cmd_);
  6004  0015B8  5013               	movf	write_command@cmd_,w,c
  6005  0015BA  ECAB  F00A         	call	_spiwrite
  6006                           
  6007                           ;ST7735_TFT.c: 152: PORTDbits.RD2 = 1;
  6008  0015BE  8483               	bsf	3971,2,c	;volatile
  6009  0015C0  0012               	return		;funcret
  6010  0015C2                     __end_of_write_command:
  6011                           	opt stack 0
  6012                           tblptru	equ	0xFF8
  6013                           tblptrh	equ	0xFF7
  6014                           tblptrl	equ	0xFF6
  6015                           tablat	equ	0xFF5
  6016                           prodh	equ	0xFF4
  6017                           prodl	equ	0xFF3
  6018                           intcon	equ	0xFF2
  6019                           intcon2	equ	0xFF1
  6020                           postinc0	equ	0xFEE
  6021                           wreg	equ	0xFE8
  6022                           indf1	equ	0xFE7
  6023                           postinc1	equ	0xFE6
  6024                           postdec1	equ	0xFE5
  6025                           fsr1h	equ	0xFE2
  6026                           fsr1l	equ	0xFE1
  6027                           indf2	equ	0xFDF
  6028                           postinc2	equ	0xFDE
  6029                           postdec2	equ	0xFDD
  6030                           fsr2h	equ	0xFDA
  6031                           fsr2l	equ	0xFD9
  6032                           status	equ	0xFD8
  6033                           
  6034 ;; *************** function _spiwrite *****************
  6035 ;; Defined at:
  6036 ;;		line 136 in file "ST7735_TFT.c"
  6037 ;; Parameters:    Size  Location     Type
  6038 ;;  spidata         1    wreg     unsigned char 
  6039 ;; Auto vars:     Size  Location     Type
  6040 ;;  spidata         1   17[COMRAM] unsigned char 
  6041 ;;  x               1   16[COMRAM] unsigned char 
  6042 ;; Return value:  Size  Location     Type
  6043 ;;		None               void
  6044 ;; Registers used:
  6045 ;;		wreg
  6046 ;; Tracked objects:
  6047 ;;		On entry : 0/0
  6048 ;;		On exit  : 0/0
  6049 ;;		Unchanged: 0/0
  6050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6052 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6054 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6055 ;;Total ram usage:        2 bytes
  6056 ;; Hardware stack levels used:    1
  6057 ;; Hardware stack levels required when called:    3
  6058 ;; This function calls:
  6059 ;;		Nothing
  6060 ;; This function is called by:
  6061 ;;		_write_command
  6062 ;;		_write_data
  6063 ;;		_drawFastVLine
  6064 ;;		_fillRectangle
  6065 ;;		_drawFastHLine
  6066 ;; This function uses a non-reentrant model
  6067 ;;
  6068                           
  6069                           	psect	text27
  6070  001556                     __ptext27:
  6071                           	opt stack 0
  6072  001556                     _spiwrite:
  6073                           	opt stack 24
  6074                           
  6075                           ;incstack = 0
  6076                           ;spiwrite@spidata stored from wreg
  6077  001556  6E12               	movwf	spiwrite@spidata,c
  6078                           
  6079                           ;ST7735_TFT.c: 138: char x;
  6080                           ;ST7735_TFT.c: 139: PIR1bits.SSPIF = 0;
  6081  001558  969E               	bcf	3998,3,c	;volatile
  6082                           
  6083                           ;ST7735_TFT.c: 140: x = SSPBUF;
  6084  00155A  CFC9 F011          	movff	4041,spiwrite@x	;volatile
  6085                           
  6086                           ;ST7735_TFT.c: 141: SSPBUF = spidata;
  6087  00155E  C012  FFC9         	movff	spiwrite@spidata,4041	;volatile
  6088                           
  6089                           ;ST7735_TFT.c: 142: while (!SSPSTATbits.BF);
  6090  001562  D000               	goto	l148
  6091  001564                     l148:
  6092  001564  A0C7               	btfss	4039,0,c	;volatile
  6093  001566  D7FE               	goto	l148
  6094  001568  0012               	return		;funcret
  6095  00156A                     __end_of_spiwrite:
  6096                           	opt stack 0
  6097                           tblptru	equ	0xFF8
  6098                           tblptrh	equ	0xFF7
  6099                           tblptrl	equ	0xFF6
  6100                           tablat	equ	0xFF5
  6101                           prodh	equ	0xFF4
  6102                           prodl	equ	0xFF3
  6103                           intcon	equ	0xFF2
  6104                           intcon2	equ	0xFF1
  6105                           postinc0	equ	0xFEE
  6106                           wreg	equ	0xFE8
  6107                           indf1	equ	0xFE7
  6108                           postinc1	equ	0xFE6
  6109                           postdec1	equ	0xFE5
  6110                           fsr1h	equ	0xFE2
  6111                           fsr1l	equ	0xFE1
  6112                           indf2	equ	0xFDF
  6113                           postinc2	equ	0xFDE
  6114                           postdec2	equ	0xFDD
  6115                           fsr2h	equ	0xFDA
  6116                           fsr2l	equ	0xFD9
  6117                           status	equ	0xFD8
  6118                           
  6119 ;; *************** function _LCD_Reset *****************
  6120 ;; Defined at:
  6121 ;;		line 164 in file "ST7735_TFT.c"
  6122 ;; Parameters:    Size  Location     Type
  6123 ;;		None
  6124 ;; Auto vars:     Size  Location     Type
  6125 ;;		None
  6126 ;; Return value:  Size  Location     Type
  6127 ;;		None               void
  6128 ;; Registers used:
  6129 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6130 ;; Tracked objects:
  6131 ;;		On entry : 0/0
  6132 ;;		On exit  : 0/0
  6133 ;;		Unchanged: 0/0
  6134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6139 ;;Total ram usage:        0 bytes
  6140 ;; Hardware stack levels used:    1
  6141 ;; Hardware stack levels required when called:    5
  6142 ;; This function calls:
  6143 ;;		_delay_ms
  6144 ;; This function is called by:
  6145 ;;		_Initialize_LCD_Screen
  6146 ;; This function uses a non-reentrant model
  6147 ;;
  6148                           
  6149                           	psect	text28
  6150  00157E                     __ptext28:
  6151                           	opt stack 0
  6152  00157E                     _LCD_Reset:
  6153                           	opt stack 24
  6154                           
  6155                           ;ST7735_TFT.c: 166: PORTDbits.RD5 = 0;
  6156                           
  6157                           ;incstack = 0
  6158  00157E  9A83               	bcf	3971,5,c	;volatile
  6159                           
  6160                           ;ST7735_TFT.c: 167: delay_ms(100);
  6161  001580  0E00               	movlw	0
  6162  001582  6E18               	movwf	delay_ms@ms+1,c
  6163  001584  0E64               	movlw	100
  6164  001586  6E17               	movwf	delay_ms@ms,c
  6165  001588  EC26  F009         	call	_delay_ms	;wreg free
  6166                           
  6167                           ;ST7735_TFT.c: 168: PORTDbits.RD5 = 1;
  6168  00158C  8A83               	bsf	3971,5,c	;volatile
  6169  00158E  0012               	return		;funcret
  6170  001590                     __end_of_LCD_Reset:
  6171                           	opt stack 0
  6172                           tblptru	equ	0xFF8
  6173                           tblptrh	equ	0xFF7
  6174                           tblptrl	equ	0xFF6
  6175                           tablat	equ	0xFF5
  6176                           prodh	equ	0xFF4
  6177                           prodl	equ	0xFF3
  6178                           intcon	equ	0xFF2
  6179                           intcon2	equ	0xFF1
  6180                           postinc0	equ	0xFEE
  6181                           wreg	equ	0xFE8
  6182                           indf1	equ	0xFE7
  6183                           postinc1	equ	0xFE6
  6184                           postdec1	equ	0xFE5
  6185                           fsr1h	equ	0xFE2
  6186                           fsr1l	equ	0xFE1
  6187                           indf2	equ	0xFDF
  6188                           postinc2	equ	0xFDE
  6189                           postdec2	equ	0xFDD
  6190                           fsr2h	equ	0xFDA
  6191                           fsr2l	equ	0xFD9
  6192                           status	equ	0xFD8
  6193                           
  6194 ;; *************** function _delay_ms *****************
  6195 ;; Defined at:
  6196 ;;		line 11 in file "ST7735_TFT.c"
  6197 ;; Parameters:    Size  Location     Type
  6198 ;;  ms              2   22[COMRAM] int 
  6199 ;; Auto vars:     Size  Location     Type
  6200 ;;  count           2   26[COMRAM] int 
  6201 ;; Return value:  Size  Location     Type
  6202 ;;		None               void
  6203 ;; Registers used:
  6204 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  6205 ;; Tracked objects:
  6206 ;;		On entry : 0/0
  6207 ;;		On exit  : 0/0
  6208 ;;		Unchanged: 0/0
  6209 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6210 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6211 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6212 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6213 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6214 ;;Total ram usage:        6 bytes
  6215 ;; Hardware stack levels used:    1
  6216 ;; Hardware stack levels required when called:    4
  6217 ;; This function calls:
  6218 ;;		___wmul
  6219 ;; This function is called by:
  6220 ;;		_LCD_Reset
  6221 ;;		_Rcmd1
  6222 ;;		_Rcmd3
  6223 ;;		_Bcmd
  6224 ;; This function uses a non-reentrant model
  6225 ;;
  6226                           
  6227                           	psect	text29
  6228  00124C                     __ptext29:
  6229                           	opt stack 0
  6230  00124C                     _delay_ms:
  6231                           	opt stack 23
  6232                           
  6233                           ;ST7735_TFT.c: 17: int count;
  6234                           ;ST7735_TFT.c: 18: count = 8000000/4000/8 * ms;
  6235                           
  6236                           ;incstack = 0
  6237  00124C  C017  F011         	movff	delay_ms@ms,___wmul@multiplier
  6238  001250  C018  F012         	movff	delay_ms@ms+1,___wmul@multiplier+1
  6239  001254  0E00               	movlw	0
  6240  001256  6E14               	movwf	___wmul@multiplicand+1,c
  6241  001258  0EFA               	movlw	250
  6242  00125A  6E13               	movwf	___wmul@multiplicand,c
  6243  00125C  EC65  F00A         	call	___wmul	;wreg free
  6244  001260  C011  F01B         	movff	?___wmul,delay_ms@count
  6245  001264  C012  F01C         	movff	?___wmul+1,delay_ms@count+1
  6246                           
  6247                           ;ST7735_TFT.c: 19: count = (0xffff - count);
  6248  001268  C01B  F019         	movff	delay_ms@count,??_delay_ms
  6249  00126C  C01C  F01A         	movff	delay_ms@count+1,??_delay_ms+1
  6250  001270  1E19               	comf	??_delay_ms,f,c
  6251  001272  1E1A               	comf	??_delay_ms+1,f,c
  6252  001274  4A19               	infsnz	??_delay_ms,f,c
  6253  001276  2A1A               	incf	??_delay_ms+1,f,c
  6254  001278  0EFF               	movlw	255
  6255  00127A  2419               	addwf	??_delay_ms,w,c
  6256  00127C  6E1B               	movwf	delay_ms@count,c
  6257  00127E  0EFF               	movlw	255
  6258  001280  201A               	addwfc	??_delay_ms+1,w,c
  6259  001282  6E1C               	movwf	delay_ms@count+1,c
  6260                           
  6261                           ;ST7735_TFT.c: 21: T3CON = 0xb8;
  6262  001284  0EB8               	movlw	184
  6263  001286  6EB1               	movwf	4017,c	;volatile
  6264                           
  6265                           ;ST7735_TFT.c: 23: TMR0L = count & 0x00ff;
  6266  001288  C01B  FFD6         	movff	delay_ms@count,4054	;volatile
  6267                           
  6268                           ;ST7735_TFT.c: 24: TMR0H = count >> 8;
  6269  00128C  501C               	movf	delay_ms@count+1,w,c
  6270  00128E  6ED7               	movwf	4055,c	;volatile
  6271                           
  6272                           ;ST7735_TFT.c: 26: PIR2bits.TMR3IF = 0;
  6273  001290  92A1               	bcf	4001,1,c	;volatile
  6274                           
  6275                           ;ST7735_TFT.c: 27: T3CONbits.TMR3ON = 1;
  6276  001292  80B1               	bsf	4017,0,c	;volatile
  6277                           
  6278                           ;ST7735_TFT.c: 29: while (PIR2bits.TMR3IF == 0);
  6279  001294  D000               	goto	l138
  6280  001296                     l138:
  6281  001296  A2A1               	btfss	4001,1,c	;volatile
  6282  001298  D7FE               	goto	l138
  6283                           
  6284                           ;ST7735_TFT.c: 30: T3CONbits.TMR3ON = 0;
  6285  00129A  90B1               	bcf	4017,0,c	;volatile
  6286  00129C  0012               	return		;funcret
  6287  00129E                     __end_of_delay_ms:
  6288                           	opt stack 0
  6289                           tblptru	equ	0xFF8
  6290                           tblptrh	equ	0xFF7
  6291                           tblptrl	equ	0xFF6
  6292                           tablat	equ	0xFF5
  6293                           prodh	equ	0xFF4
  6294                           prodl	equ	0xFF3
  6295                           intcon	equ	0xFF2
  6296                           intcon2	equ	0xFF1
  6297                           postinc0	equ	0xFEE
  6298                           wreg	equ	0xFE8
  6299                           indf1	equ	0xFE7
  6300                           postinc1	equ	0xFE6
  6301                           postdec1	equ	0xFE5
  6302                           fsr1h	equ	0xFE2
  6303                           fsr1l	equ	0xFE1
  6304                           indf2	equ	0xFDF
  6305                           postinc2	equ	0xFDE
  6306                           postdec2	equ	0xFDD
  6307                           fsr2h	equ	0xFDA
  6308                           fsr2l	equ	0xFD9
  6309                           status	equ	0xFD8
  6310                           
  6311 ;; *************** function ___wmul *****************
  6312 ;; Defined at:
  6313 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  6314 ;; Parameters:    Size  Location     Type
  6315 ;;  multiplier      2   16[COMRAM] unsigned int 
  6316 ;;  multiplicand    2   18[COMRAM] unsigned int 
  6317 ;; Auto vars:     Size  Location     Type
  6318 ;;  product         2   20[COMRAM] unsigned int 
  6319 ;; Return value:  Size  Location     Type
  6320 ;;                  2   16[COMRAM] unsigned int 
  6321 ;; Registers used:
  6322 ;;		wreg, status,2, status,0, prodl, prodh
  6323 ;; Tracked objects:
  6324 ;;		On entry : 0/0
  6325 ;;		On exit  : 0/0
  6326 ;;		Unchanged: 0/0
  6327 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6328 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6329 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6330 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6331 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6332 ;;Total ram usage:        6 bytes
  6333 ;; Hardware stack levels used:    1
  6334 ;; Hardware stack levels required when called:    3
  6335 ;; This function calls:
  6336 ;;		Nothing
  6337 ;; This function is called by:
  6338 ;;		_delay_ms
  6339 ;;		_drawChar
  6340 ;;		_Read_Volt
  6341 ;; This function uses a non-reentrant model
  6342 ;;
  6343                           
  6344                           	psect	text30
  6345  0014CA                     __ptext30:
  6346                           	opt stack 0
  6347  0014CA                     ___wmul:
  6348                           	opt stack 25
  6349                           
  6350                           ;incstack = 0
  6351  0014CA  5011               	movf	___wmul@multiplier,w,c
  6352  0014CC  0213               	mulwf	___wmul@multiplicand,c
  6353  0014CE  CFF3 F015          	movff	prodl,___wmul@product
  6354  0014D2  CFF4 F016          	movff	prodh,___wmul@product+1
  6355  0014D6  5011               	movf	___wmul@multiplier,w,c
  6356  0014D8  0214               	mulwf	___wmul@multiplicand+1,c
  6357  0014DA  50F3               	movf	prodl,w,c
  6358  0014DC  2616               	addwf	___wmul@product+1,f,c
  6359  0014DE  5012               	movf	___wmul@multiplier+1,w,c
  6360  0014E0  0213               	mulwf	___wmul@multiplicand,c
  6361  0014E2  50F3               	movf	prodl,w,c
  6362  0014E4  2616               	addwf	___wmul@product+1,f,c
  6363  0014E6  C015  F011         	movff	___wmul@product,?___wmul
  6364  0014EA  C016  F012         	movff	___wmul@product+1,?___wmul+1
  6365  0014EE  D000               	goto	l599
  6366  0014F0                     l599:
  6367  0014F0  0012               	return		;funcret
  6368  0014F2                     __end_of___wmul:
  6369                           	opt stack 0
  6370                           tblptru	equ	0xFF8
  6371                           tblptrh	equ	0xFF7
  6372                           tblptrl	equ	0xFF6
  6373                           tablat	equ	0xFF5
  6374                           prodh	equ	0xFF4
  6375                           prodl	equ	0xFF3
  6376                           intcon	equ	0xFF2
  6377                           intcon2	equ	0xFF1
  6378                           postinc0	equ	0xFEE
  6379                           wreg	equ	0xFE8
  6380                           indf1	equ	0xFE7
  6381                           postinc1	equ	0xFE6
  6382                           postdec1	equ	0xFE5
  6383                           fsr1h	equ	0xFE2
  6384                           fsr1l	equ	0xFE1
  6385                           indf2	equ	0xFDF
  6386                           postinc2	equ	0xFDE
  6387                           postdec2	equ	0xFDD
  6388                           fsr2h	equ	0xFDA
  6389                           fsr2l	equ	0xFD9
  6390                           status	equ	0xFD8
  6391                           
  6392 ;; *************** function _Init_UART *****************
  6393 ;; Defined at:
  6394 ;;		line 25 in file "utils.c"
  6395 ;; Parameters:    Size  Location     Type
  6396 ;;		None
  6397 ;; Auto vars:     Size  Location     Type
  6398 ;;		None
  6399 ;; Return value:  Size  Location     Type
  6400 ;;		None               void
  6401 ;; Registers used:
  6402 ;;		wreg, status,2, cstack
  6403 ;; Tracked objects:
  6404 ;;		On entry : 0/0
  6405 ;;		On exit  : 0/0
  6406 ;;		Unchanged: 0/0
  6407 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;Total ram usage:        0 bytes
  6413 ;; Hardware stack levels used:    1
  6414 ;; Hardware stack levels required when called:    4
  6415 ;; This function calls:
  6416 ;;		_OpenUSART
  6417 ;; This function is called by:
  6418 ;;		_main
  6419 ;; This function uses a non-reentrant model
  6420 ;;
  6421                           
  6422                           	psect	text31
  6423  00156A                     __ptext31:
  6424                           	opt stack 0
  6425  00156A                     _Init_UART:
  6426                           	opt stack 26
  6427                           
  6428                           ;utils.c: 27: OpenUSART (0b01111111 & 0b10111111 &
  6429                           ;utils.c: 28: 0b11111110 & 0b11111101 & 0b11111111 &
  6430                           ;utils.c: 29: 0b11111111, 25);
  6431                           
  6432                           ;incstack = 0
  6433  00156A  0E00               	movlw	0
  6434  00156C  6E12               	movwf	OpenUSART@spbrg+1,c
  6435  00156E  0E19               	movlw	25
  6436  001570  6E11               	movwf	OpenUSART@spbrg,c
  6437  001572  0E3C               	movlw	60
  6438  001574  EC97  F008         	call	_OpenUSART
  6439                           
  6440                           ;utils.c: 30: OSCCON = 0x70;
  6441  001578  0E70               	movlw	112
  6442  00157A  6ED3               	movwf	4051,c	;volatile
  6443  00157C  0012               	return		;funcret
  6444  00157E                     __end_of_Init_UART:
  6445                           	opt stack 0
  6446                           tblptru	equ	0xFF8
  6447                           tblptrh	equ	0xFF7
  6448                           tblptrl	equ	0xFF6
  6449                           tablat	equ	0xFF5
  6450                           prodh	equ	0xFF4
  6451                           prodl	equ	0xFF3
  6452                           intcon	equ	0xFF2
  6453                           intcon2	equ	0xFF1
  6454                           postinc0	equ	0xFEE
  6455                           wreg	equ	0xFE8
  6456                           indf1	equ	0xFE7
  6457                           postinc1	equ	0xFE6
  6458                           postdec1	equ	0xFE5
  6459                           fsr1h	equ	0xFE2
  6460                           fsr1l	equ	0xFE1
  6461                           indf2	equ	0xFDF
  6462                           postinc2	equ	0xFDE
  6463                           postdec2	equ	0xFDD
  6464                           fsr2h	equ	0xFDA
  6465                           fsr2l	equ	0xFD9
  6466                           status	equ	0xFD8
  6467                           
  6468 ;; *************** function _OpenUSART *****************
  6469 ;; Defined at:
  6470 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  6471 ;; Parameters:    Size  Location     Type
  6472 ;;  config          1    wreg     unsigned char 
  6473 ;;  spbrg           2   16[COMRAM] unsigned int 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;  config          1   18[COMRAM] unsigned char 
  6476 ;; Return value:  Size  Location     Type
  6477 ;;		None               void
  6478 ;; Registers used:
  6479 ;;		wreg, status,2
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6485 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;Total ram usage:        3 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    3
  6492 ;; This function calls:
  6493 ;;		Nothing
  6494 ;; This function is called by:
  6495 ;;		_Init_UART
  6496 ;; This function uses a non-reentrant model
  6497 ;;
  6498                           
  6499                           	psect	text32
  6500  00112E                     __ptext32:
  6501                           	opt stack 0
  6502  00112E                     _OpenUSART:
  6503                           	opt stack 26
  6504                           
  6505                           ;incstack = 0
  6506                           ;OpenUSART@config stored from wreg
  6507  00112E  6E13               	movwf	OpenUSART@config,c
  6508  001130  0E00               	movlw	0
  6509  001132  6EAC               	movwf	4012,c	;volatile
  6510  001134  0E00               	movlw	0
  6511  001136  6EAB               	movwf	4011,c	;volatile
  6512  001138  A013               	btfss	OpenUSART@config,0,c
  6513  00113A  D002               	goto	l2764
  6514  00113C  88AC               	bsf	4012,4,c	;volatile
  6515  00113E  D000               	goto	l2764
  6516  001140                     l2764:
  6517  001140  A213               	btfss	OpenUSART@config,1,c
  6518  001142  D003               	goto	l2768
  6519  001144  8CAC               	bsf	4012,6,c	;volatile
  6520  001146  8CAB               	bsf	4011,6,c	;volatile
  6521  001148  D000               	goto	l2768
  6522  00114A                     l2768:
  6523  00114A  A413               	btfss	OpenUSART@config,2,c
  6524  00114C  D002               	goto	l2772
  6525  00114E  8EAC               	bsf	4012,7,c	;volatile
  6526  001150  D000               	goto	l2772
  6527  001152                     l2772:
  6528  001152  A613               	btfss	OpenUSART@config,3,c
  6529  001154  D002               	goto	l587
  6530  001156  88AB               	bsf	4011,4,c	;volatile
  6531  001158  D002               	goto	l2776
  6532  00115A                     l587:
  6533  00115A  8AAB               	bsf	4011,5,c	;volatile
  6534  00115C  D000               	goto	l2776
  6535  00115E                     l2776:
  6536  00115E  B813               	btfsc	OpenUSART@config,4,c
  6537  001160  84AC               	bsf	4012,2,c	;volatile
  6538  001162  989E               	bcf	3998,4,c	;volatile
  6539  001164  AA13               	btfss	OpenUSART@config,5,c
  6540  001166  D002               	goto	l2784
  6541  001168  86AB               	bsf	4011,3,c	;volatile
  6542  00116A  D000               	goto	l2784
  6543  00116C                     l2784:
  6544  00116C  AC13               	btfss	OpenUSART@config,6,c
  6545  00116E  D002               	goto	l591
  6546  001170  8A9D               	bsf	3997,5,c	;volatile
  6547  001172  D001               	goto	l592
  6548  001174                     l591:
  6549  001174  9A9D               	bcf	3997,5,c	;volatile
  6550  001176                     l592:
  6551  001176  9A9E               	bcf	3998,5,c	;volatile
  6552  001178  AE13               	btfss	OpenUSART@config,7,c
  6553  00117A  D002               	goto	l593
  6554  00117C  889D               	bsf	3997,4,c	;volatile
  6555  00117E  D001               	goto	l594
  6556  001180                     l593:
  6557  001180  989D               	bcf	3997,4,c	;volatile
  6558  001182                     l594:
  6559  001182  C011  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  6560  001186  5012               	movf	OpenUSART@spbrg+1,w,c
  6561  001188  6EB0               	movwf	4016,c	;volatile
  6562  00118A  8AAC               	bsf	4012,5,c	;volatile
  6563  00118C  8EAB               	bsf	4011,7,c	;volatile
  6564  00118E  9C94               	bcf	3988,6,c	;volatile
  6565  001190  8E94               	bsf	3988,7,c	;volatile
  6566  001192  B8AC               	btfsc	4012,4,c	;volatile
  6567  001194  BEAC               	btfsc	4012,7,c	;volatile
  6568  001196  D002               	goto	l596
  6569  001198  8C94               	bsf	3988,6,c	;volatile
  6570  00119A  D000               	goto	l596
  6571  00119C                     l596:
  6572  00119C  0012               	return		;funcret
  6573  00119E                     __end_of_OpenUSART:
  6574                           	opt stack 0
  6575                           tblptru	equ	0xFF8
  6576                           tblptrh	equ	0xFF7
  6577                           tblptrl	equ	0xFF6
  6578                           tablat	equ	0xFF5
  6579                           prodh	equ	0xFF4
  6580                           prodl	equ	0xFF3
  6581                           intcon	equ	0xFF2
  6582                           intcon2	equ	0xFF1
  6583                           postinc0	equ	0xFEE
  6584                           wreg	equ	0xFE8
  6585                           indf1	equ	0xFE7
  6586                           postinc1	equ	0xFE6
  6587                           postdec1	equ	0xFE5
  6588                           fsr1h	equ	0xFE2
  6589                           fsr1l	equ	0xFE1
  6590                           indf2	equ	0xFDF
  6591                           postinc2	equ	0xFDE
  6592                           postdec2	equ	0xFDD
  6593                           fsr2h	equ	0xFDA
  6594                           fsr2l	equ	0xFD9
  6595                           status	equ	0xFD8
  6596                           
  6597 ;; *************** function _Init_Interrupt *****************
  6598 ;; Defined at:
  6599 ;;		line 17 in file "Interrupt.c"
  6600 ;; Parameters:    Size  Location     Type
  6601 ;;		None
  6602 ;; Auto vars:     Size  Location     Type
  6603 ;;		None
  6604 ;; Return value:  Size  Location     Type
  6605 ;;		None               void
  6606 ;; Registers used:
  6607 ;;		wreg, status,2
  6608 ;; Tracked objects:
  6609 ;;		On entry : 0/0
  6610 ;;		On exit  : 0/0
  6611 ;;		Unchanged: 0/0
  6612 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6613 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6614 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6615 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6616 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6617 ;;Total ram usage:        0 bytes
  6618 ;; Hardware stack levels used:    1
  6619 ;; Hardware stack levels required when called:    3
  6620 ;; This function calls:
  6621 ;;		Nothing
  6622 ;; This function is called by:
  6623 ;;		_main
  6624 ;; This function uses a non-reentrant model
  6625 ;;
  6626                           
  6627                           	psect	text33
  6628  001528                     __ptext33:
  6629                           	opt stack 0
  6630  001528                     _Init_Interrupt:
  6631                           	opt stack 27
  6632                           
  6633                           ;Interrupt.c: 19: INTCONbits.INT0IF = 0;
  6634                           
  6635                           ;incstack = 0
  6636  001528  92F2               	bcf	intcon,1,c	;volatile
  6637                           
  6638                           ;Interrupt.c: 20: INTCON2bits.INTEDG0 = 0;
  6639  00152A  9CF1               	bcf	intcon2,6,c	;volatile
  6640                           
  6641                           ;Interrupt.c: 21: INTCONbits.INT0IE = 1;
  6642  00152C  88F2               	bsf	intcon,4,c	;volatile
  6643                           
  6644                           ;Interrupt.c: 23: TMR1H = 0;
  6645  00152E  0E00               	movlw	0
  6646  001530  6ECF               	movwf	4047,c	;volatile
  6647                           
  6648                           ;Interrupt.c: 24: TMR1L = 0;
  6649  001532  0E00               	movlw	0
  6650  001534  6ECE               	movwf	4046,c	;volatile
  6651                           
  6652                           ;Interrupt.c: 25: PIR1bits.TMR1IF = 0;
  6653  001536  909E               	bcf	3998,0,c	;volatile
  6654                           
  6655                           ;Interrupt.c: 26: PIE1bits.TMR1IE = 1;
  6656  001538  809D               	bsf	3997,0,c	;volatile
  6657                           
  6658                           ;Interrupt.c: 27: INTCONbits.PEIE = 1;
  6659  00153A  8CF2               	bsf	intcon,6,c	;volatile
  6660                           
  6661                           ;Interrupt.c: 28: INTCONbits.GIE = 1;
  6662  00153C  8EF2               	bsf	intcon,7,c	;volatile
  6663  00153E  0012               	return		;funcret
  6664  001540                     __end_of_Init_Interrupt:
  6665                           	opt stack 0
  6666                           tblptru	equ	0xFF8
  6667                           tblptrh	equ	0xFF7
  6668                           tblptrl	equ	0xFF6
  6669                           tablat	equ	0xFF5
  6670                           prodh	equ	0xFF4
  6671                           prodl	equ	0xFF3
  6672                           intcon	equ	0xFF2
  6673                           intcon2	equ	0xFF1
  6674                           postinc0	equ	0xFEE
  6675                           wreg	equ	0xFE8
  6676                           indf1	equ	0xFE7
  6677                           postinc1	equ	0xFE6
  6678                           postdec1	equ	0xFE5
  6679                           fsr1h	equ	0xFE2
  6680                           fsr1l	equ	0xFE1
  6681                           indf2	equ	0xFDF
  6682                           postinc2	equ	0xFDE
  6683                           postdec2	equ	0xFDD
  6684                           fsr2h	equ	0xFDA
  6685                           fsr2l	equ	0xFD9
  6686                           status	equ	0xFD8
  6687                           
  6688 ;; *************** function _Enable_INT_Interrupt *****************
  6689 ;; Defined at:
  6690 ;;		line 31 in file "Interrupt.c"
  6691 ;; Parameters:    Size  Location     Type
  6692 ;;		None
  6693 ;; Auto vars:     Size  Location     Type
  6694 ;;		None
  6695 ;; Return value:  Size  Location     Type
  6696 ;;		None               void
  6697 ;; Registers used:
  6698 ;;		None
  6699 ;; Tracked objects:
  6700 ;;		On entry : 0/0
  6701 ;;		On exit  : 0/0
  6702 ;;		Unchanged: 0/0
  6703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6707 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6708 ;;Total ram usage:        0 bytes
  6709 ;; Hardware stack levels used:    1
  6710 ;; Hardware stack levels required when called:    3
  6711 ;; This function calls:
  6712 ;;		Nothing
  6713 ;; This function is called by:
  6714 ;;		_main
  6715 ;; This function uses a non-reentrant model
  6716 ;;
  6717                           
  6718                           	psect	text34
  6719  0015F6                     __ptext34:
  6720                           	opt stack 0
  6721  0015F6                     _Enable_INT_Interrupt:
  6722                           	opt stack 27
  6723                           
  6724                           ;Interrupt.c: 33: INTCONbits.INT0IE = 1;
  6725                           
  6726                           ;incstack = 0
  6727  0015F6  88F2               	bsf	intcon,4,c	;volatile
  6728                           
  6729                           ;Interrupt.c: 34: INTCON2bits.INTEDG0 = 0;
  6730  0015F8  9CF1               	bcf	intcon2,6,c	;volatile
  6731  0015FA  0012               	return		;funcret
  6732  0015FC                     __end_of_Enable_INT_Interrupt:
  6733                           	opt stack 0
  6734                           tblptru	equ	0xFF8
  6735                           tblptrh	equ	0xFF7
  6736                           tblptrl	equ	0xFF6
  6737                           tablat	equ	0xFF5
  6738                           prodh	equ	0xFF4
  6739                           prodl	equ	0xFF3
  6740                           intcon	equ	0xFF2
  6741                           intcon2	equ	0xFF1
  6742                           postinc0	equ	0xFEE
  6743                           wreg	equ	0xFE8
  6744                           indf1	equ	0xFE7
  6745                           postinc1	equ	0xFE6
  6746                           postdec1	equ	0xFE5
  6747                           fsr1h	equ	0xFE2
  6748                           fsr1l	equ	0xFE1
  6749                           indf2	equ	0xFDF
  6750                           postinc2	equ	0xFDE
  6751                           postdec2	equ	0xFDD
  6752                           fsr2h	equ	0xFDA
  6753                           fsr2l	equ	0xFD9
  6754                           status	equ	0xFD8
  6755                           
  6756 ;; *************** function _Deactivate_Buzzer *****************
  6757 ;; Defined at:
  6758 ;;		line 90 in file "utils.c"
  6759 ;; Parameters:    Size  Location     Type
  6760 ;;		None
  6761 ;; Auto vars:     Size  Location     Type
  6762 ;;		None
  6763 ;; Return value:  Size  Location     Type
  6764 ;;		None               void
  6765 ;; Registers used:
  6766 ;;		wreg, status,2
  6767 ;; Tracked objects:
  6768 ;;		On entry : 0/0
  6769 ;;		On exit  : 0/0
  6770 ;;		Unchanged: 0/0
  6771 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6772 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6773 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6774 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6775 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6776 ;;Total ram usage:        0 bytes
  6777 ;; Hardware stack levels used:    1
  6778 ;; Hardware stack levels required when called:    3
  6779 ;; This function calls:
  6780 ;;		Nothing
  6781 ;; This function is called by:
  6782 ;;		_main
  6783 ;;		_Do_Beep
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text35
  6788  0015E6                     __ptext35:
  6789                           	opt stack 0
  6790  0015E6                     _Deactivate_Buzzer:
  6791                           	opt stack 27
  6792                           
  6793                           ;utils.c: 92: CCP2CON = 0x0;
  6794                           
  6795                           ;incstack = 0
  6796  0015E6  0E00               	movlw	0
  6797  0015E8  6EBA               	movwf	4026,c	;volatile
  6798                           
  6799                           ;utils.c: 93: PORTCbits.RC1 = 0;
  6800  0015EA  9282               	bcf	3970,1,c	;volatile
  6801  0015EC  0012               	return		;funcret
  6802  0015EE                     __end_of_Deactivate_Buzzer:
  6803                           	opt stack 0
  6804                           tblptru	equ	0xFF8
  6805                           tblptrh	equ	0xFF7
  6806                           tblptrl	equ	0xFF6
  6807                           tablat	equ	0xFF5
  6808                           prodh	equ	0xFF4
  6809                           prodl	equ	0xFF3
  6810                           intcon	equ	0xFF2
  6811                           intcon2	equ	0xFF1
  6812                           postinc0	equ	0xFEE
  6813                           wreg	equ	0xFE8
  6814                           indf1	equ	0xFE7
  6815                           postinc1	equ	0xFE6
  6816                           postdec1	equ	0xFE5
  6817                           fsr1h	equ	0xFE2
  6818                           fsr1l	equ	0xFE1
  6819                           indf2	equ	0xFDF
  6820                           postinc2	equ	0xFDE
  6821                           postdec2	equ	0xFDD
  6822                           fsr2h	equ	0xFDA
  6823                           fsr2l	equ	0xFD9
  6824                           status	equ	0xFD8
  6825                           
  6826 ;; *************** function _Activate_Buzzer *****************
  6827 ;; Defined at:
  6828 ;;		line 67 in file "utils.c"
  6829 ;; Parameters:    Size  Location     Type
  6830 ;;		None
  6831 ;; Auto vars:     Size  Location     Type
  6832 ;;		None
  6833 ;; Return value:  Size  Location     Type
  6834 ;;		None               void
  6835 ;; Registers used:
  6836 ;;		wreg, status,2
  6837 ;; Tracked objects:
  6838 ;;		On entry : 0/0
  6839 ;;		On exit  : 0/0
  6840 ;;		Unchanged: 0/0
  6841 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6842 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6845 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6846 ;;Total ram usage:        0 bytes
  6847 ;; Hardware stack levels used:    1
  6848 ;; Hardware stack levels required when called:    3
  6849 ;; This function calls:
  6850 ;;		Nothing
  6851 ;; This function is called by:
  6852 ;;		_main
  6853 ;;		_Do_Beep
  6854 ;; This function uses a non-reentrant model
  6855 ;;
  6856                           
  6857                           	psect	text36
  6858  001590                     __ptext36:
  6859                           	opt stack 0
  6860  001590                     _Activate_Buzzer:
  6861                           	opt stack 27
  6862                           
  6863                           ;utils.c: 69: PR2 = 0b11111001 ;
  6864                           
  6865                           ;incstack = 0
  6866  001590  0EF9               	movlw	249
  6867  001592  6ECB               	movwf	4043,c	;volatile
  6868                           
  6869                           ;utils.c: 70: T2CON = 0b00000101 ;
  6870  001594  0E05               	movlw	5
  6871  001596  6ECA               	movwf	4042,c	;volatile
  6872                           
  6873                           ;utils.c: 71: CCPR2L = 0b01001010 ;
  6874  001598  0E4A               	movlw	74
  6875  00159A  6EBB               	movwf	4027,c	;volatile
  6876                           
  6877                           ;utils.c: 72: CCP2CON = 0b00111100 ;
  6878  00159C  0E3C               	movlw	60
  6879  00159E  6EBA               	movwf	4026,c	;volatile
  6880  0015A0  0012               	return		;funcret
  6881  0015A2                     __end_of_Activate_Buzzer:
  6882                           	opt stack 0
  6883                           tblptru	equ	0xFF8
  6884                           tblptrh	equ	0xFF7
  6885                           tblptrl	equ	0xFF6
  6886                           tablat	equ	0xFF5
  6887                           prodh	equ	0xFF4
  6888                           prodl	equ	0xFF3
  6889                           intcon	equ	0xFF2
  6890                           intcon2	equ	0xFF1
  6891                           postinc0	equ	0xFEE
  6892                           wreg	equ	0xFE8
  6893                           indf1	equ	0xFE7
  6894                           postinc1	equ	0xFE6
  6895                           postdec1	equ	0xFE5
  6896                           fsr1h	equ	0xFE2
  6897                           fsr1l	equ	0xFE1
  6898                           indf2	equ	0xFDF
  6899                           postinc2	equ	0xFDE
  6900                           postdec2	equ	0xFDD
  6901                           fsr2h	equ	0xFDA
  6902                           fsr2l	equ	0xFD9
  6903                           status	equ	0xFD8
  6904                           
  6905 ;; *************** function _chkisr *****************
  6906 ;; Defined at:
  6907 ;;		line 37 in file "Interrupt.c"
  6908 ;; Parameters:    Size  Location     Type
  6909 ;;		None
  6910 ;; Auto vars:     Size  Location     Type
  6911 ;;		None
  6912 ;; Return value:  Size  Location     Type
  6913 ;;		None               void
  6914 ;; Registers used:
  6915 ;;		wreg, status,2, status,0, cstack
  6916 ;; Tracked objects:
  6917 ;;		On entry : 0/0
  6918 ;;		On exit  : 0/0
  6919 ;;		Unchanged: 0/0
  6920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6921 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6922 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6923 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6924 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6925 ;;Total ram usage:       14 bytes
  6926 ;; Hardware stack levels used:    1
  6927 ;; Hardware stack levels required when called:    2
  6928 ;; This function calls:
  6929 ;;		_INTx_isr
  6930 ;;		_TIMER1_isr
  6931 ;; This function is called by:
  6932 ;;		Interrupt level 2
  6933 ;; This function uses a non-reentrant model
  6934 ;;
  6935                           
  6936                           	psect	intcode
  6937  000008                     __pintcode:
  6938                           	opt stack 0
  6939  000008                     _chkisr:
  6940                           	opt stack 20
  6941                           
  6942                           ;incstack = 0
  6943  000008  CFFA F003          	movff	pclath,??_chkisr
  6944  00000C  CFFB F004          	movff	pclatu,??_chkisr+1
  6945  000010  CFE9 F005          	movff	fsr0l,??_chkisr+2
  6946  000014  ED59  F008         	call	int_func,f	;refresh shadow registers
  6947                           pclatu	equ	0xFFB
  6948                           pclath	equ	0xFFA
  6949                           tblptru	equ	0xFF8
  6950                           tblptrh	equ	0xFF7
  6951                           tblptrl	equ	0xFF6
  6952                           tablat	equ	0xFF5
  6953                           prodh	equ	0xFF4
  6954                           prodl	equ	0xFF3
  6955                           intcon	equ	0xFF2
  6956                           intcon2	equ	0xFF1
  6957                           postinc0	equ	0xFEE
  6958                           fsr0l	equ	0xFE9
  6959                           wreg	equ	0xFE8
  6960                           indf1	equ	0xFE7
  6961                           postinc1	equ	0xFE6
  6962                           postdec1	equ	0xFE5
  6963                           fsr1h	equ	0xFE2
  6964                           fsr1l	equ	0xFE1
  6965                           indf2	equ	0xFDF
  6966                           postinc2	equ	0xFDE
  6967                           postdec2	equ	0xFDD
  6968                           fsr2h	equ	0xFDA
  6969                           fsr2l	equ	0xFD9
  6970                           status	equ	0xFD8
  6971                           
  6972                           	psect	intcode_body
  6973  0010B2                     __pintcode_body:
  6974                           	opt stack 20
  6975  0010B2                     int_func:
  6976                           	opt stack 20
  6977  0010B2  0006               	pop		; remove dummy address from shadow register refresh
  6978  0010B4  CFEA F006          	movff	fsr0h,??_chkisr+3
  6979  0010B8  CFE1 F007          	movff	fsr1l,??_chkisr+4
  6980  0010BC  CFE2 F008          	movff	fsr1h,??_chkisr+5
  6981  0010C0  CFD9 F009          	movff	fsr2l,??_chkisr+6
  6982  0010C4  CFDA F00A          	movff	fsr2h,??_chkisr+7
  6983  0010C8  CFF3 F00B          	movff	prodl,??_chkisr+8
  6984  0010CC  CFF4 F00C          	movff	prodh,??_chkisr+9
  6985  0010D0  CFF6 F00D          	movff	tblptrl,??_chkisr+10
  6986  0010D4  CFF7 F00E          	movff	tblptrh,??_chkisr+11
  6987  0010D8  CFF8 F00F          	movff	tblptru,??_chkisr+12
  6988  0010DC  CFF5 F010          	movff	tablat,??_chkisr+13
  6989                           
  6990                           ;Interrupt.c: 39: if (PIR1bits.TMR1IF == 1) TIMER1_isr();
  6991  0010E0  A09E               	btfss	3998,0,c	;volatile
  6992  0010E2  D003               	goto	i2l2002
  6993  0010E4  ECE8  F00A         	call	_TIMER1_isr	;wreg free
  6994  0010E8  D000               	goto	i2l2002
  6995  0010EA                     i2l2002:
  6996                           
  6997                           ;Interrupt.c: 40: if (INTCONbits.INT0IF == 1) INTx_isr();
  6998  0010EA  A2F2               	btfss	intcon,1,c	;volatile
  6999  0010EC  D003               	goto	i2l49
  7000  0010EE  EC26  F003         	call	_INTx_isr	;wreg free
  7001  0010F2  D000               	goto	i2l49
  7002  0010F4                     i2l49:
  7003  0010F4  C010  FFF5         	movff	??_chkisr+13,tablat
  7004  0010F8  C00F  FFF8         	movff	??_chkisr+12,tblptru
  7005  0010FC  C00E  FFF7         	movff	??_chkisr+11,tblptrh
  7006  001100  C00D  FFF6         	movff	??_chkisr+10,tblptrl
  7007  001104  C00C  FFF4         	movff	??_chkisr+9,prodh
  7008  001108  C00B  FFF3         	movff	??_chkisr+8,prodl
  7009  00110C  C00A  FFDA         	movff	??_chkisr+7,fsr2h
  7010  001110  C009  FFD9         	movff	??_chkisr+6,fsr2l
  7011  001114  C008  FFE2         	movff	??_chkisr+5,fsr1h
  7012  001118  C007  FFE1         	movff	??_chkisr+4,fsr1l
  7013  00111C  C006  FFEA         	movff	??_chkisr+3,fsr0h
  7014  001120  C005  FFE9         	movff	??_chkisr+2,fsr0l
  7015  001124  C004  FFFB         	movff	??_chkisr+1,pclatu
  7016  001128  C003  FFFA         	movff	??_chkisr,pclath
  7017  00112C  0011               	retfie		f
  7018  00112E                     __end_of_chkisr:
  7019                           	opt stack 0
  7020                           pclatu	equ	0xFFB
  7021                           pclath	equ	0xFFA
  7022                           tblptru	equ	0xFF8
  7023                           tblptrh	equ	0xFF7
  7024                           tblptrl	equ	0xFF6
  7025                           tablat	equ	0xFF5
  7026                           prodh	equ	0xFF4
  7027                           prodl	equ	0xFF3
  7028                           intcon	equ	0xFF2
  7029                           intcon2	equ	0xFF1
  7030                           postinc0	equ	0xFEE
  7031                           fsr0h	equ	0xFEA
  7032                           fsr0l	equ	0xFE9
  7033                           wreg	equ	0xFE8
  7034                           indf1	equ	0xFE7
  7035                           postinc1	equ	0xFE6
  7036                           postdec1	equ	0xFE5
  7037                           fsr1h	equ	0xFE2
  7038                           fsr1l	equ	0xFE1
  7039                           indf2	equ	0xFDF
  7040                           postinc2	equ	0xFDE
  7041                           postdec2	equ	0xFDD
  7042                           fsr2h	equ	0xFDA
  7043                           fsr2l	equ	0xFD9
  7044                           status	equ	0xFD8
  7045                           
  7046 ;; *************** function _TIMER1_isr *****************
  7047 ;; Defined at:
  7048 ;;		line 43 in file "Interrupt.c"
  7049 ;; Parameters:    Size  Location     Type
  7050 ;;		None
  7051 ;; Auto vars:     Size  Location     Type
  7052 ;;		None
  7053 ;; Return value:  Size  Location     Type
  7054 ;;		None               void
  7055 ;; Registers used:
  7056 ;;		wreg, status,2
  7057 ;; Tracked objects:
  7058 ;;		On entry : 0/0
  7059 ;;		On exit  : 0/0
  7060 ;;		Unchanged: 0/0
  7061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7062 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;Total ram usage:        0 bytes
  7067 ;; Hardware stack levels used:    1
  7068 ;; This function calls:
  7069 ;;		Nothing
  7070 ;; This function is called by:
  7071 ;;		_chkisr
  7072 ;; This function uses a non-reentrant model
  7073 ;;
  7074                           
  7075                           	psect	text38
  7076  0015D0                     __ptext38:
  7077                           	opt stack 0
  7078  0015D0                     _TIMER1_isr:
  7079                           	opt stack 21
  7080                           
  7081                           ;Interrupt.c: 45: Nec_State = 0;
  7082                           
  7083                           ;incstack = 0
  7084  0015D0  0E00               	movlw	0
  7085  0015D2  6E69               	movwf	_Nec_State,c
  7086                           
  7087                           ;Interrupt.c: 46: INTCON2bits.INTEDG0 = 0;
  7088  0015D4  9CF1               	bcf	intcon2,6,c	;volatile
  7089                           
  7090                           ;Interrupt.c: 47: T1CONbits.TMR1ON = 0;
  7091  0015D6  90CD               	bcf	4045,0,c	;volatile
  7092                           
  7093                           ;Interrupt.c: 48: PIR1bits.TMR1IF = 0;
  7094  0015D8  909E               	bcf	3998,0,c	;volatile
  7095  0015DA  0012               	return		;funcret
  7096  0015DC                     __end_of_TIMER1_isr:
  7097                           	opt stack 0
  7098                           pclatu	equ	0xFFB
  7099                           pclath	equ	0xFFA
  7100                           tblptru	equ	0xFF8
  7101                           tblptrh	equ	0xFF7
  7102                           tblptrl	equ	0xFF6
  7103                           tablat	equ	0xFF5
  7104                           prodh	equ	0xFF4
  7105                           prodl	equ	0xFF3
  7106                           intcon	equ	0xFF2
  7107                           intcon2	equ	0xFF1
  7108                           postinc0	equ	0xFEE
  7109                           fsr0h	equ	0xFEA
  7110                           fsr0l	equ	0xFE9
  7111                           wreg	equ	0xFE8
  7112                           indf1	equ	0xFE7
  7113                           postinc1	equ	0xFE6
  7114                           postdec1	equ	0xFE5
  7115                           fsr1h	equ	0xFE2
  7116                           fsr1l	equ	0xFE1
  7117                           indf2	equ	0xFDF
  7118                           postinc2	equ	0xFDE
  7119                           postdec2	equ	0xFDD
  7120                           fsr2h	equ	0xFDA
  7121                           fsr2l	equ	0xFD9
  7122                           status	equ	0xFD8
  7123                           
  7124 ;; *************** function _INTx_isr *****************
  7125 ;; Defined at:
  7126 ;;		line 57 in file "Interrupt.c"
  7127 ;; Parameters:    Size  Location     Type
  7128 ;;		None
  7129 ;; Auto vars:     Size  Location     Type
  7130 ;;		None
  7131 ;; Return value:  Size  Location     Type
  7132 ;;		None               void
  7133 ;; Registers used:
  7134 ;;		wreg, status,2, status,0, cstack
  7135 ;; Tracked objects:
  7136 ;;		On entry : 0/0
  7137 ;;		On exit  : 0/0
  7138 ;;		Unchanged: 0/0
  7139 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7140 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7141 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7142 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7143 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7144 ;;Total ram usage:        2 bytes
  7145 ;; Hardware stack levels used:    1
  7146 ;; Hardware stack levels required when called:    1
  7147 ;; This function calls:
  7148 ;;		_Reset_Nec_State
  7149 ;; This function is called by:
  7150 ;;		_chkisr
  7151 ;; This function uses a non-reentrant model
  7152 ;;
  7153                           
  7154                           	psect	text39
  7155  00064C                     __ptext39:
  7156                           	opt stack 0
  7157  00064C                     _INTx_isr:
  7158                           	opt stack 20
  7159                           
  7160                           ;Interrupt.c: 59: INTCONbits.INT0IF = 0;
  7161                           
  7162                           ;incstack = 0
  7163  00064C  92F2               	bcf	intcon,1,c	;volatile
  7164                           
  7165                           ;Interrupt.c: 60: if (Nec_State != 0)
  7166  00064E  5069               	movf	_Nec_State,w,c
  7167  000650  B4D8               	btfsc	status,2,c
  7168  000652  D0B9               	goto	i2l1812
  7169                           
  7170                           ;Interrupt.c: 61: {
  7171                           ;Interrupt.c: 62: Time_Elapsed = (TMR1H << 8) | TMR1L;
  7172  000654  50CE               	movf	4046,w,c	;volatile
  7173  000656  CFCF F001          	movff	4047,??_INTx_isr	;volatile
  7174  00065A  6A02               	clrf	(??_INTx_isr+1)& (0+255),c
  7175  00065C  C001  F002         	movff	??_INTx_isr,??_INTx_isr+1
  7176  000660  6A01               	clrf	??_INTx_isr,c
  7177  000662  1001               	iorwf	??_INTx_isr,w,c
  7178  000664  6E62               	movwf	_Time_Elapsed,c
  7179  000666  5002               	movf	??_INTx_isr+1,w,c
  7180  000668  6E63               	movwf	_Time_Elapsed+1,c
  7181                           
  7182                           ;Interrupt.c: 63: TMR1H = 0;
  7183  00066A  0E00               	movlw	0
  7184  00066C  6ECF               	movwf	4047,c	;volatile
  7185                           
  7186                           ;Interrupt.c: 64: TMR1L = 0;
  7187  00066E  0E00               	movlw	0
  7188  000670  6ECE               	movwf	4046,c	;volatile
  7189                           
  7190                           ;Interrupt.c: 65: }
  7191                           ;Interrupt.c: 67: switch(Nec_State)
  7192  000672  D0A9               	goto	i2l1812
  7193  000674                     i2l1724:
  7194                           
  7195                           ;Interrupt.c: 70: {
  7196                           ;Interrupt.c: 72: TMR1H = 0;
  7197  000674  0E00               	movlw	0
  7198  000676  6ECF               	movwf	4047,c	;volatile
  7199                           
  7200                           ;Interrupt.c: 73: TMR1L = 0;
  7201  000678  0E00               	movlw	0
  7202  00067A  6ECE               	movwf	4046,c	;volatile
  7203                           
  7204                           ;Interrupt.c: 74: PIR1bits.TMR1IF = 0;
  7205  00067C  909E               	bcf	3998,0,c	;volatile
  7206                           
  7207                           ;Interrupt.c: 75: T1CON = 0x90;
  7208  00067E  0E90               	movlw	144
  7209  000680  6ECD               	movwf	4045,c	;volatile
  7210                           
  7211                           ;Interrupt.c: 76: T1CONbits.TMR1ON = 1;
  7212  000682  80CD               	bsf	4045,0,c	;volatile
  7213                           
  7214                           ;Interrupt.c: 77: bit_count = 0;
  7215  000684  0E00               	movlw	0
  7216  000686  6E6B               	movwf	_bit_count,c
  7217                           
  7218                           ;Interrupt.c: 78: Nec_code = 0;
  7219  000688  0E00               	movlw	0
  7220  00068A  6E5C               	movwf	_Nec_code,c
  7221  00068C  0E00               	movlw	0
  7222  00068E  6E5D               	movwf	_Nec_code+1,c
  7223  000690  0E00               	movlw	0
  7224  000692  6E5E               	movwf	_Nec_code+2,c
  7225  000694  0E00               	movlw	0
  7226  000696  6E5F               	movwf	_Nec_code+3,c
  7227                           
  7228                           ;Interrupt.c: 79: Nec_State = 1;
  7229  000698  0E01               	movlw	1
  7230  00069A  6E69               	movwf	_Nec_State,c
  7231                           
  7232                           ;Interrupt.c: 80: PORTE = (PORTE & (~portE_mask)) | (Nec_State & (portE_mask));
  7233  00069C  5069               	movf	_Nec_State,w,c
  7234  00069E  1450               	andwf	_portE_mask,w,c
  7235  0006A0  6E01               	movwf	??_INTx_isr& (0+255),c
  7236  0006A2  5050               	movf	_portE_mask,w,c
  7237  0006A4  0AFF               	xorlw	255
  7238  0006A6  1484               	andwf	3972,w,c	;volatile
  7239  0006A8  1001               	iorwf	??_INTx_isr,w,c
  7240  0006AA  6E84               	movwf	3972,c	;volatile
  7241  0006AC  D08A               	goto	i2l1806
  7242                           
  7243                           ;Interrupt.c: 84: return;
  7244                           
  7245                           ;Interrupt.c: 82: INTCON2bits.INTEDG0 = 1;
  7246  0006AE  D09C               	goto	i2l61
  7247  0006B0                     i2l1736:
  7248                           
  7249                           ;Interrupt.c: 88: {
  7250                           ;Interrupt.c: 89: if(Time_Elapsed >= 8500 && Time_Elapsed <= 9500){
  7251  0006B0  0E34               	movlw	52
  7252  0006B2  5C62               	subwf	_Time_Elapsed,w,c
  7253  0006B4  0E21               	movlw	33
  7254  0006B6  5863               	subwfb	_Time_Elapsed+1,w,c
  7255  0006B8  A0D8               	btfss	status,0,c
  7256  0006BA  D009               	goto	i2l1744
  7257  0006BC  0E1D               	movlw	29
  7258  0006BE  5C62               	subwf	_Time_Elapsed,w,c
  7259  0006C0  0E25               	movlw	37
  7260  0006C2  5863               	subwfb	_Time_Elapsed+1,w,c
  7261  0006C4  B0D8               	btfsc	status,0,c
  7262  0006C6  D003               	goto	i2l1744
  7263                           
  7264                           ;Interrupt.c: 90: Nec_State = 2;
  7265  0006C8  0E02               	movlw	2
  7266  0006CA  6E69               	movwf	_Nec_State,c
  7267  0006CC  D027               	goto	i2l1770
  7268  0006CE                     i2l1744:
  7269                           
  7270                           ;Interrupt.c: 95: else{
  7271                           ;Interrupt.c: 96: Reset_Nec_State();
  7272  0006CE  ECF7  F00A         	call	_Reset_Nec_State	;wreg free
  7273  0006D2  D030               	goto	i2l1774
  7274  0006D4  D02F               	goto	i2l1774
  7275                           
  7276                           ;Interrupt.c: 101: return;
  7277                           
  7278                           ;Interrupt.c: 97: }
  7279                           ;Interrupt.c: 99: INTCON2bits.INTEDG0 = 0;
  7280  0006D6  D088               	goto	i2l61
  7281  0006D8                     i2l1750:
  7282                           
  7283                           ;Interrupt.c: 105: {
  7284                           ;Interrupt.c: 106: if (Time_Elapsed >= 4000 && Time_Elapsed <= 5000) {
  7285  0006D8  0EA0               	movlw	160
  7286  0006DA  5C62               	subwf	_Time_Elapsed,w,c
  7287  0006DC  0E0F               	movlw	15
  7288  0006DE  5863               	subwfb	_Time_Elapsed+1,w,c
  7289  0006E0  A0D8               	btfss	status,0,c
  7290  0006E2  D009               	goto	i2l1758
  7291  0006E4  0E89               	movlw	137
  7292  0006E6  5C62               	subwf	_Time_Elapsed,w,c
  7293  0006E8  0E13               	movlw	19
  7294  0006EA  5863               	subwfb	_Time_Elapsed+1,w,c
  7295  0006EC  B0D8               	btfsc	status,0,c
  7296  0006EE  D003               	goto	i2l1758
  7297  0006F0                     
  7298                           ;Interrupt.c: 107: Nec_State = 3;
  7299  0006F0  0E03               	movlw	3
  7300  0006F2  6E69               	movwf	_Nec_State,c
  7301  0006F4  D05A               	goto	i2l1802
  7302  0006F6                     i2l1758:
  7303                           
  7304                           ;Interrupt.c: 112: Reset_Nec_State();
  7305  0006F6  ECF7  F00A         	call	_Reset_Nec_State	;wreg free
  7306  0006FA  D063               	goto	i2l1806
  7307  0006FC  D062               	goto	i2l1806
  7308                           
  7309                           ;Interrupt.c: 117: return;
  7310                           
  7311                           ;Interrupt.c: 113: }
  7312                           ;Interrupt.c: 115: INTCON2bits.INTEDG0 = 1;
  7313  0006FE  D074               	goto	i2l61
  7314  000700                     i2l1764:
  7315                           
  7316                           ;Interrupt.c: 121: {
  7317                           ;Interrupt.c: 122: if (Time_Elapsed >= 400 && Time_Elapsed <= 700) {
  7318  000700  0E90               	movlw	144
  7319  000702  5C62               	subwf	_Time_Elapsed,w,c
  7320  000704  0E01               	movlw	1
  7321  000706  5863               	subwfb	_Time_Elapsed+1,w,c
  7322  000708  A0D8               	btfss	status,0,c
  7323  00070A  D011               	goto	i2l1772
  7324  00070C  0EBD               	movlw	189
  7325  00070E  5C62               	subwf	_Time_Elapsed,w,c
  7326  000710  0E02               	movlw	2
  7327  000712  5863               	subwfb	_Time_Elapsed+1,w,c
  7328  000714  B0D8               	btfsc	status,0,c
  7329  000716  D00B               	goto	i2l1772
  7330                           
  7331                           ;Interrupt.c: 123: Nec_State = 4;
  7332  000718  0E04               	movlw	4
  7333  00071A  D7D7               	goto	L5
  7334  00071C                     i2l1770:
  7335                           
  7336                           ;Interrupt.c: 125: PORTE = (PORTE & (~portE_mask)) | (Nec_State & (portE_mask));
  7337  00071C  5069               	movf	_Nec_State,w,c
  7338  00071E  1450               	andwf	_portE_mask,w,c
  7339  000720  6E01               	movwf	??_INTx_isr& (0+255),c
  7340  000722  5050               	movf	_portE_mask,w,c
  7341  000724  0AFF               	xorlw	255
  7342  000726  1484               	andwf	3972,w,c	;volatile
  7343  000728  1001               	iorwf	??_INTx_isr,w,c
  7344  00072A  6E84               	movwf	3972,c	;volatile
  7345                           
  7346                           ;Interrupt.c: 127: } else {
  7347  00072C  D003               	goto	i2l1774
  7348  00072E                     i2l1772:
  7349                           
  7350                           ;Interrupt.c: 128: Reset_Nec_State();
  7351  00072E  ECF7  F00A         	call	_Reset_Nec_State	;wreg free
  7352  000732  D000               	goto	i2l1774
  7353  000734                     i2l1774:
  7354                           
  7355                           ;Interrupt.c: 129: }
  7356                           ;Interrupt.c: 131: INTCON2bits.INTEDG0 = 0;
  7357  000734  9CF1               	bcf	intcon2,6,c	;volatile
  7358                           
  7359                           ;Interrupt.c: 133: return;
  7360  000736  D058               	goto	i2l61
  7361  000738                     i2l1778:
  7362                           
  7363                           ;Interrupt.c: 137: {
  7364                           ;Interrupt.c: 138: if (Time_Elapsed >= 400 && Time_Elapsed <= 1800) {
  7365  000738  0E90               	movlw	144
  7366  00073A  5C62               	subwf	_Time_Elapsed,w,c
  7367  00073C  0E01               	movlw	1
  7368  00073E  5863               	subwfb	_Time_Elapsed+1,w,c
  7369  000740  A0D8               	btfss	status,0,c
  7370  000742  D03C               	goto	i2l1804
  7371  000744  0E09               	movlw	9
  7372  000746  5C62               	subwf	_Time_Elapsed,w,c
  7373  000748  0E07               	movlw	7
  7374  00074A  5863               	subwfb	_Time_Elapsed+1,w,c
  7375  00074C  B0D8               	btfsc	status,0,c
  7376  00074E  D036               	goto	i2l1804
  7377                           
  7378                           ;Interrupt.c: 140: Nec_code = Nec_code << 1;
  7379  000750  90D8               	bcf	status,0,c
  7380  000752  345C               	rlcf	_Nec_code,w,c
  7381  000754  6E5C               	movwf	_Nec_code,c
  7382  000756  345D               	rlcf	_Nec_code+1,w,c
  7383  000758  6E5D               	movwf	_Nec_code+1,c
  7384  00075A  345E               	rlcf	_Nec_code+2,w,c
  7385  00075C  6E5E               	movwf	_Nec_code+2,c
  7386  00075E  345F               	rlcf	_Nec_code+3,w,c
  7387  000760  6E5F               	movwf	_Nec_code+3,c
  7388                           
  7389                           ;Interrupt.c: 142: Time_Elapsed > 1000 ? Nec_code++ : 0;
  7390  000762  0EE9               	movlw	233
  7391  000764  5C62               	subwf	_Time_Elapsed,w,c
  7392  000766  0E03               	movlw	3
  7393  000768  5863               	subwfb	_Time_Elapsed+1,w,c
  7394  00076A  A0D8               	btfss	status,0,c
  7395  00076C  D007               	goto	i2l1786
  7396  00076E  0E01               	movlw	1
  7397  000770  265C               	addwf	_Nec_code,f,c
  7398  000772  0E00               	movlw	0
  7399  000774  225D               	addwfc	_Nec_code+1,f,c
  7400  000776  225E               	addwfc	_Nec_code+2,f,c
  7401  000778  225F               	addwfc	_Nec_code+3,f,c
  7402  00077A  D000               	goto	i2l1786
  7403  00077C                     i2l1786:
  7404                           
  7405                           ;Interrupt.c: 144: bit_count++;
  7406  00077C  2A6B               	incf	_bit_count,f,c
  7407                           
  7408                           ;Interrupt.c: 146: if (bit_count > 31){
  7409  00077E  0E1F               	movlw	31
  7410  000780  646B               	cpfsgt	_bit_count,c
  7411  000782  D7B6               	goto	L6
  7412                           
  7413                           ;Interrupt.c: 147: Nec_Button = Nec_code >> 8;
  7414  000784  C05D  F068         	movff	_Nec_code+1,_Nec_Button
  7415                           
  7416                           ;Interrupt.c: 148: Nec_State = 0;
  7417  000788  0E00               	movlw	0
  7418  00078A  6E69               	movwf	_Nec_State,c
  7419                           
  7420                           ;Interrupt.c: 150: PORTE = (PORTE & (~portE_mask)) | (Nec_State & (portE_mask));
  7421  00078C  5069               	movf	_Nec_State,w,c
  7422  00078E  1450               	andwf	_portE_mask,w,c
  7423  000790  6E01               	movwf	??_INTx_isr& (0+255),c
  7424  000792  5050               	movf	_portE_mask,w,c
  7425  000794  0AFF               	xorlw	255
  7426  000796  1484               	andwf	3972,w,c	;volatile
  7427  000798  1001               	iorwf	??_INTx_isr,w,c
  7428  00079A  6E84               	movwf	3972,c	;volatile
  7429                           
  7430                           ;Interrupt.c: 152: Nec_OK = 1;
  7431  00079C  0E00               	movlw	0
  7432  00079E  6E61               	movwf	_Nec_OK+1,c
  7433  0007A0  0E01               	movlw	1
  7434  0007A2  6E60               	movwf	_Nec_OK,c
  7435                           
  7436                           ;Interrupt.c: 154: INT0IE = 0;
  7437  0007A4  98F2               	bcf	intcon,4,c	;volatile
  7438                           
  7439                           ;Interrupt.c: 155: }
  7440  0007A6  D00D               	goto	i2l1806
  7441  0007A8  D7A3               	goto	L6
  7442  0007AA                     i2l1802:
  7443                           
  7444                           ;Interrupt.c: 159: PORTE = (PORTE & (~portE_mask)) | (Nec_State & (portE_mask));
  7445  0007AA  5069               	movf	_Nec_State,w,c
  7446  0007AC  1450               	andwf	_portE_mask,w,c
  7447  0007AE  6E01               	movwf	??_INTx_isr& (0+255),c
  7448  0007B0  5050               	movf	_portE_mask,w,c
  7449  0007B2  0AFF               	xorlw	255
  7450  0007B4  1484               	andwf	3972,w,c	;volatile
  7451  0007B6  1001               	iorwf	??_INTx_isr,w,c
  7452  0007B8  6E84               	movwf	3972,c	;volatile
  7453                           
  7454                           ;Interrupt.c: 160: }
  7455                           ;Interrupt.c: 162: }
  7456  0007BA  D003               	goto	i2l1806
  7457  0007BC                     i2l1804:
  7458                           
  7459                           ;Interrupt.c: 164: else {
  7460                           ;Interrupt.c: 165: Reset_Nec_State();
  7461  0007BC  ECF7  F00A         	call	_Reset_Nec_State	;wreg free
  7462  0007C0  D000               	goto	i2l1806
  7463  0007C2                     i2l1806:
  7464                           
  7465                           ;Interrupt.c: 166: }
  7466                           ;Interrupt.c: 168: INTCON2bits.INTEDG0 = 1;
  7467  0007C2  8CF1               	bsf	intcon2,6,c	;volatile
  7468                           
  7469                           ;Interrupt.c: 171: }
  7470                           ;Interrupt.c: 172: }
  7471                           
  7472                           ;Interrupt.c: 170: return;
  7473  0007C4  D011               	goto	i2l61
  7474  0007C6                     i2l1812:
  7475  0007C6  5069               	movf	_Nec_State,w,c
  7476                           
  7477                           ; Switch size 1, requested type "space"
  7478                           ; Number of cases is 5, Range of values is 0 to 4
  7479                           ; switch strategies available:
  7480                           ; Name         Instructions Cycles
  7481                           ; simple_byte           16     9 (average)
  7482                           ;	Chosen strategy is simple_byte
  7483  0007C8  0A00               	xorlw	0	; case 0
  7484  0007CA  B4D8               	btfsc	status,2,c
  7485  0007CC  D753               	goto	i2l1724
  7486  0007CE  0A01               	xorlw	1	; case 1
  7487  0007D0  B4D8               	btfsc	status,2,c
  7488  0007D2  D76E               	goto	i2l1736
  7489  0007D4  0A03               	xorlw	3	; case 2
  7490  0007D6  B4D8               	btfsc	status,2,c
  7491  0007D8  D77F               	goto	i2l1750
  7492  0007DA  0A01               	xorlw	1	; case 3
  7493  0007DC  B4D8               	btfsc	status,2,c
  7494  0007DE  D790               	goto	i2l1764
  7495  0007E0  0A07               	xorlw	7	; case 4
  7496  0007E2  B4D8               	btfsc	status,2,c
  7497  0007E4  D7A9               	goto	i2l1778
  7498  0007E6  D000               	goto	i2l61
  7499  0007E8                     i2l61:
  7500  0007E8  0012               	return		;funcret
  7501  0007EA                     __end_of_INTx_isr:
  7502                           	opt stack 0
  7503                           pclatu	equ	0xFFB
  7504                           pclath	equ	0xFFA
  7505                           tblptru	equ	0xFF8
  7506                           tblptrh	equ	0xFF7
  7507                           tblptrl	equ	0xFF6
  7508                           tablat	equ	0xFF5
  7509                           prodh	equ	0xFF4
  7510                           prodl	equ	0xFF3
  7511                           intcon	equ	0xFF2
  7512                           intcon2	equ	0xFF1
  7513                           postinc0	equ	0xFEE
  7514                           fsr0h	equ	0xFEA
  7515                           fsr0l	equ	0xFE9
  7516                           wreg	equ	0xFE8
  7517                           indf1	equ	0xFE7
  7518                           postinc1	equ	0xFE6
  7519                           postdec1	equ	0xFE5
  7520                           fsr1h	equ	0xFE2
  7521                           fsr1l	equ	0xFE1
  7522                           indf2	equ	0xFDF
  7523                           postinc2	equ	0xFDE
  7524                           postdec2	equ	0xFDD
  7525                           fsr2h	equ	0xFDA
  7526                           fsr2l	equ	0xFD9
  7527                           status	equ	0xFD8
  7528                           
  7529 ;; *************** function _Reset_Nec_State *****************
  7530 ;; Defined at:
  7531 ;;		line 51 in file "Interrupt.c"
  7532 ;; Parameters:    Size  Location     Type
  7533 ;;		None
  7534 ;; Auto vars:     Size  Location     Type
  7535 ;;		None
  7536 ;; Return value:  Size  Location     Type
  7537 ;;		None               void
  7538 ;; Registers used:
  7539 ;;		wreg, status,2
  7540 ;; Tracked objects:
  7541 ;;		On entry : 0/0
  7542 ;;		On exit  : 0/0
  7543 ;;		Unchanged: 0/0
  7544 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7545 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7546 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7547 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7548 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;Total ram usage:        0 bytes
  7550 ;; Hardware stack levels used:    1
  7551 ;; This function calls:
  7552 ;;		Nothing
  7553 ;; This function is called by:
  7554 ;;		_INTx_isr
  7555 ;; This function uses a non-reentrant model
  7556 ;;
  7557                           
  7558                           	psect	text40
  7559  0015EE                     __ptext40:
  7560                           	opt stack 0
  7561  0015EE                     _Reset_Nec_State:
  7562                           	opt stack 20
  7563                           
  7564                           ;Interrupt.c: 53: Nec_State = 0;
  7565                           
  7566                           ;incstack = 0
  7567  0015EE  0E00               	movlw	0
  7568  0015F0  6E69               	movwf	_Nec_State,c
  7569                           
  7570                           ;Interrupt.c: 54: T1CONbits.TMR1ON = 0;
  7571  0015F2  90CD               	bcf	4045,0,c	;volatile
  7572  0015F4  0012               	return		;funcret
  7573  0015F6                     __end_of_Reset_Nec_State:
  7574                           	opt stack 0
  7575                           pclatu	equ	0xFFB
  7576                           pclath	equ	0xFFA
  7577                           tblptru	equ	0xFF8
  7578                           tblptrh	equ	0xFF7
  7579                           tblptrl	equ	0xFF6
  7580                           tablat	equ	0xFF5
  7581                           prodh	equ	0xFF4
  7582                           prodl	equ	0xFF3
  7583                           intcon	equ	0xFF2
  7584                           intcon2	equ	0xFF1
  7585                           postinc0	equ	0xFEE
  7586                           fsr0h	equ	0xFEA
  7587                           fsr0l	equ	0xFE9
  7588                           wreg	equ	0xFE8
  7589                           indf1	equ	0xFE7
  7590                           postinc1	equ	0xFE6
  7591                           postdec1	equ	0xFE5
  7592                           fsr1h	equ	0xFE2
  7593                           fsr1l	equ	0xFE1
  7594                           indf2	equ	0xFDF
  7595                           postinc2	equ	0xFDE
  7596                           postdec2	equ	0xFDD
  7597                           fsr2h	equ	0xFDA
  7598                           fsr2l	equ	0xFD9
  7599                           status	equ	0xFD8
  7600                           pclatu	equ	0xFFB
  7601                           pclath	equ	0xFFA
  7602                           tblptru	equ	0xFF8
  7603                           tblptrh	equ	0xFF7
  7604                           tblptrl	equ	0xFF6
  7605                           tablat	equ	0xFF5
  7606                           prodh	equ	0xFF4
  7607                           prodl	equ	0xFF3
  7608                           intcon	equ	0xFF2
  7609                           intcon2	equ	0xFF1
  7610                           postinc0	equ	0xFEE
  7611                           fsr0h	equ	0xFEA
  7612                           fsr0l	equ	0xFE9
  7613                           wreg	equ	0xFE8
  7614                           indf1	equ	0xFE7
  7615                           postinc1	equ	0xFE6
  7616                           postdec1	equ	0xFE5
  7617                           fsr1h	equ	0xFE2
  7618                           fsr1l	equ	0xFE1
  7619                           indf2	equ	0xFDF
  7620                           postinc2	equ	0xFDE
  7621                           postdec2	equ	0xFDD
  7622                           fsr2h	equ	0xFDA
  7623                           fsr2l	equ	0xFD9
  7624                           status	equ	0xFD8
  7625                           
  7626                           	psect	rparam
  7627  0000                     pclatu	equ	0xFFB
  7628                           pclath	equ	0xFFA
  7629                           tblptru	equ	0xFF8
  7630                           tblptrh	equ	0xFF7
  7631                           tblptrl	equ	0xFF6
  7632                           tablat	equ	0xFF5
  7633                           prodh	equ	0xFF4
  7634                           prodl	equ	0xFF3
  7635                           intcon	equ	0xFF2
  7636                           intcon2	equ	0xFF1
  7637                           postinc0	equ	0xFEE
  7638                           fsr0h	equ	0xFEA
  7639                           fsr0l	equ	0xFE9
  7640                           wreg	equ	0xFE8
  7641                           indf1	equ	0xFE7
  7642                           postinc1	equ	0xFE6
  7643                           postdec1	equ	0xFE5
  7644                           fsr1h	equ	0xFE2
  7645                           fsr1l	equ	0xFE1
  7646                           indf2	equ	0xFDF
  7647                           postinc2	equ	0xFDE
  7648                           postdec2	equ	0xFDD
  7649                           fsr2h	equ	0xFDA
  7650                           fsr2l	equ	0xFD9
  7651                           status	equ	0xFD8


Data Sizes:
    Strings     66
    Constant    493
    Data        252
    BSS         49
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     70     109
    BANK0           128     16     110
    BANK1           256      0     168
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), txt1(BANK1[84]), Timing_Txt(COMRAM[10]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), txt1(BANK1[84]), Timing_Txt(COMRAM[10]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 8
		 -> STR_1(CODE[8]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_3(CODE[22]), STR_2(CODE[19]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 

    RGB_LED	PTR volatile unsigned char [3] size(2) Largest target is 1
		 -> PORTA(SFR[1]), PORTB(SFR[1]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 84
		 -> NULL(NULL[0]), txt1(BANK1[84]), Timing_Txt(COMRAM[10]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _main->_drawtext
    _main->_fillCircle
    _printf->___lwmod
    ___lwmod->___lwdiv
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _Initialize_LCD_Screen->_drawtext
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _write_data->_spiwrite
    _write_command->_spiwrite
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Init_UART->_OpenUSART

Critical Paths under _chkisr in COMRAM

    _chkisr->_INTx_isr

Critical Paths under _main in BANK0

    _main->_drawtext
    _Initialize_LCD_Screen->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0   57129
                                             66 COMRAM     4     4      0
                                              7 BANK0      9     9      0
                    _Activate_Buzzer
                  _Deactivate_Buzzer
               _Enable_INT_Interrupt
                     _Init_Interrupt
                          _Init_UART
              _Initialize_LCD_Screen
                       _Wait_One_Sec
                         _drawCircle
                           _drawtext
                         _fillCircle
                             _printf
 ---------------------------------------------------------------------------------
 (1) _printf                                              22    18      4    1490
                                             28 COMRAM    13     9      4
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                             16 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     287
                                             23 COMRAM     5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     418
                                             16 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (1) _fillCircle                                           8     0      8    9328
                                             58 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (2) _fillCircleHelper                                    24    12     12    5207
                                             34 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (1) _drawCircle                                          20    12      8    7204
                                             27 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (1) _Wait_One_Sec                                         0     0      0       0
                   _Wait_Half_Second
 ---------------------------------------------------------------------------------
 (2) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD_Screen                                0     0      0   24033
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                           _drawtext
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _strcpy                                               6     2      4     203
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2396
                                             35 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2288
                                             23 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (1) _drawtext                                            17     9      8   14242
                                             56 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (2) _strlen                                               6     4      2     207
                                             16 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) _drawChar                                            11     4      7   12168
                                             45 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (3) _fillRect                                            11     6      5    4404
                                             34 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastVLine                                       11     7      4    3534
                                             23 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (3) _drawPixel                                            4     1      3    4879
                                             23 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (4) _setAddrWindow                                        4     1      3    1178
                                             19 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4968
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    2354
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    2354
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (5) _write_data                                           1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (5) _write_command                                        1     1      0      65
                                             18 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (4) _spiwrite                                             2     2      0      34
                                             16 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    2224
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    2224
                                             22 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    1016
                                             16 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     284
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     284
                                             16 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_Interrupt                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Enable_INT_Interrupt                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _chkisr                                              14    14      0       0
                                              2 COMRAM    14    14      0
                           _INTx_isr
                         _TIMER1_isr
 ---------------------------------------------------------------------------------
 (10) _TIMER1_isr                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (10) _INTx_isr                                            2     2      0       0
                                              0 COMRAM     2     2      0
                    _Reset_Nec_State
 ---------------------------------------------------------------------------------
 (11) _Reset_Nec_State                                     0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Activate_Buzzer
   _Deactivate_Buzzer
   _Enable_INT_Interrupt
   _Init_Interrupt
   _Init_UART
     _OpenUSART
   _Initialize_LCD_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Wait_One_Sec
     _Wait_Half_Second
   _drawCircle
     _drawPixel
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_data
         _spiwrite
   _drawtext
     _drawChar
       ___wmul
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
       _fillRect
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _strlen
   _fillCircle
     _drawFastVLine
       _setAddrWindow
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _spiwrite
     _fillCircleHelper
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch

 _chkisr (ROOT)
   _INTx_isr
     _Reset_Nec_State
   _TIMER1_isr

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      A8       7       65.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     10      6E       5       85.9%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     46      6D       1       85.8%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     183      34        0.0%
DATA                 0      0     183       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Oct 28 18:12:14 2025

                     drawCircle@f 002A                       drawCircle@r 0020  
                     drawCircle@x 002C                       drawCircle@y 002E  
                     _SSPSTATbits 000FC7                      drawCircle@x0 001C  
                    drawCircle@y0 001E               ___wmul@multiplicand 0013  
                             l214 093E                               l223 0894  
                             l216 0818                               l138 1296  
                             l402 1520                               l251 0E5E  
                             l148 1564                               l252 0DCA  
                             l254 0E3A                               l262 0560  
                             l255 0E5C                               l192 149E  
                             l280 09AE                               l198 102E  
                             l369 15C6                               l538 02E6  
                             l563 049C                               l591 1174  
                             l592 1176                               l593 1180  
                             l594 1182                               l587 115A  
                             l596 119C                               l599 14F0  
               ?_Wait_Half_Second 0001                               _PR2 000FCB  
               _Deactivate_Buzzer 15E6                               _nbr 0064  
                             _off 004D                               _txt 0066  
                             prod 000FF3                               wreg 000FE8  
              ??_Wait_Half_Second 0011                ?_Deactivate_Buzzer 0001  
                 ??_fillRectangle 001D                      __CFG_LVP$OFF 000000  
         _TFT_GreenTab_Initialize 14A0                      __CFG_WDT$OFF 000000  
                  drawFastVLine@h 0019                              l1117 11F0  
                            l1127 132E                              l3000 032E  
                            l3010 0362                              l3002 0332  
                            l1156 13FE                              l3020 0378  
                            l3014 0368                              l3006 033E  
                            l3030 03A2                              l3040 0414  
                            l3024 039C                              l3016 036C  
                            l3032 03B4                              l3050 0474  
                            l3036 03C8                              l3052 0480  
                  drawFastVLine@x 0022                    drawFastVLine@y 0018  
                            l3038 03D0                              l3046 045A  
                            l3048 046C                              l4150 0094  
                            l3432 0FF0                              l3600 0888  
                            l3442 1016                              l3610 08B6  
                            l3602 088C                              l4162 00CA  
                            l4154 00A8                              l4138 0064  
                            l3444 1024                              l3428 0FB8  
                            l3620 0932                              l3612 08DE  
                            l4180 0198                              l3470 1480  
                            l4158 00C2                              l3632 13CC  
                            l3712 0BB4                              l2824 11B4  
                            l3482 135E                              l3618 090A  
                            l3626 093A                              l3634 13D2  
                            l3650 0E02                              l2826 11BE  
                            l4186 01A8                              l2772 1152  
                            l2764 1140                              l3580 07FA  
                            l3724 0C04                              l3644 0D94  
                            l2836 11E4                              l2828 11C6  
                            l2852 1322                              l2844 12FA  
                            l4188 01AE                              l3478 1342  
                            l3590 081C                              l3670 0E48  
                            l3662 0E30                              l2686 1448  
                            l3750 0994                              l2846 1304  
                            l2784 116C                              l2776 115E  
                            l2768 114A                              l3584 0806  
                            l3736 0C74                              l3728 0C22  
                            l2688 1452                              l3808 0546  
                            l2848 130C                              l3594 0824  
                            l3738 0C7C                              l3666 0E3E  
                            l3770 0A62                              l3588 0814  
                            l3676 0E58                              l3836 0636  
                            l2980 02B0                              l3598 0854  
                            l3766 0A10                              l2974 0296  
                            l3784 0F66                              l2984 02B8  
                            l2978 02A6                              l2996 0314  
                            STR_1 FFF6                              STR_2 FFD2  
                            STR_3 FFBC                              STR_4 FFE5  
                            u2240 0FE6                              u2400 08EC  
                            u2540 0BDE                              u2470 0DC2  
                            u2480 0DF8                              u2904 020C  
                            u2905 0206                              u2914 0260  
                            u2915 025A                              i2l61 07E8  
                            i2l49 10F4                              _TRMT 007D61  
             ??_Deactivate_Buzzer 0011                              _main 001C  
                            _font FDCF                              _nums 012A  
                            fsr0h 000FEA                              _txt1 0154  
                            fsr1h 000FE2                              fsr0l 000FE9  
                            fsr2h 000FDA                              indf1 000FE7  
                            fsr1l 000FE1                              indf2 000FDF  
                            fsr2l 000FD9                              _wrap 0051  
                            pclat 000FFA                __size_of_LCD_Reset 0012  
                            prodh 000FF4                              prodl 000FF3  
                            start 0018              _Enable_INT_Interrupt 15F6  
                 ??_drawFastVLine 001C                      ___param_bank 000010  
                 _Reset_Nec_State 15EE                       ?_TIMER1_isr 0001  
       __end_of_Deactivate_Buzzer 15EE                   drawFastVLine@hi 0020  
                 drawFastVLine@lo 0021                             ?_main 0001  
                 drawCircle@ddF_x 0026                   drawCircle@ddF_y 0028  
                           _T0CON 000FD5                             _T1CON 000FCD  
                           _T2CON 000FCA                             _T3CON 000FB1  
                 __end_of___lwdiv 11FA                   __end_of___lwmod 1338  
                 drawCircle@color 0022                             _RCSTA 000FAB  
                           _TMR0H 000FD7                             _TMR1H 000FCF  
                           _TMR0L 000FD6                             _TMR1L 000FCE  
                           _SPBRG 000FAF                             _PORTA 000F80  
                           _PORTB 000F81                             _PORTC 000F82  
                           _PORTE 000F84                             _TRISA 000F92  
                           _TRISB 000F93                             _TRISC 000F94  
                           _TRISD 000F95                             _TRISE 000F96  
                           _TXREG 000FAD                             _TXSTA 000FAC  
                           _Rcmd1 0A78                             _Rcmd3 0C92  
                           _nRBPU 007F8F                        _Nec_Button 0068  
                __end_of_INTx_isr 07EA                   __end_of_dpowers FFB4  
                           _color 0080                             _font2 FECE  
           fillCircleHelper@ddF_x 0031             fillCircleHelper@ddF_y 0033  
           fillCircleHelper@delta 002B                             _putch 15C2  
           fillCircleHelper@color 002D                             main@i 0043  
                  __CFG_BOREN$OFF 000000                             tablat 000FF5  
                           status 000FD8             ?_Enable_INT_Interrupt 0001  
                 write_data@data_ 0013                   __initialization 1030  
                    __end_of_main 028C                      __end_of_font FECE  
                __end_of_Rcmd2red 143E                            ??_main 00E5  
                   __activetblptr 000002                 __end_of_LCD_Reset 1590  
       ??_TFT_GreenTab_Initialize 001D                    _Init_Interrupt 1528  
                          ?_Rcmd1 0001                            ?_Rcmd3 0001  
                          _ADCON0 000FC2                            _ADCON1 000FC1  
                          _ADCON2 000FC0                            _ADRESH 000FC4  
                          _ADRESL 000FC3                            _CCPR2L 000FBB  
                          ?_putch 0001                            _INT0IE 007F94  
                          i2l2002 10EA                            i2l1802 07AA  
                          i2l1804 07BC                            i2l1724 0674  
                          i2l1812 07C6                            i2l1806 07C2  
                          i2l1750 06D8                            i2l1744 06CE  
                          i2l1736 06B0                            i2l1770 071C  
                          i2l1772 072E                            i2l1764 0700  
                          i2l1774 0734                            i2l1758 06F6  
                          i2l1786 077C                            i2l1778 0738  
                          _OSCCON 000FD3                __size_of_Init_UART 0014  
             __size_of_TIMER1_isr 000C                            _SPBRGH 000FB0  
         __end_of_Reset_Nec_State 15F6                            _SSPBUF 000FC9  
                __end_of_delay_ms 129E                            _Nec_OK 0060  
                __end_of_fillRect 1382                  __end_of_drawChar 0940  
              __size_of_OpenUSART 0070          __size_of_Activate_Buzzer 0012  
                          ___wmul 14CA         __size_of_fillCircleHelper 0138  
                __end_of_drawtext 0C92                            _chkisr 0008  
                       ??___lwdiv 0015                            _array1 00AA  
                       ??___lwmod 001C                            _color2 0100  
                          _buffer 00BF                            clear_0 1036  
                          clear_1 1042                        _Timing_Txt 0052  
      __size_of_Deactivate_Buzzer 0008                            _printf 028C  
                    drawtext@size 0040                            _strcpy 143E  
                          _strlen 13C2            __end_of_Init_Interrupt 1540  
         ??_Initialize_LCD_Screen 0043                      __pdataCOMRAM 0047  
                    __mediumconst FDCE                            tblptrh 000FF7  
                          tblptrl 000FF6                            tblptru 000FF8  
                          putch@c 0011                  __end_of_spiwrite 156A  
                      __accesstop 0080           __end_of__initialization 10A8  
          ??_Enable_INT_Interrupt 0011                     ___rparam_used 000001  
                   __end_of_Rcmd1 0B88                     __end_of_Rcmd3 0D84  
                  __pcstackCOMRAM 0001                      __pidataBANK0 1382  
                    __pidataBANK1 0E60                         ?_INTx_isr 0001  
                   __end_of_font2 FFAA                     __end_of_putch 15D0  
               __end_of_Init_UART 157E                    drawPixel@color 0019  
                 ?_Init_Interrupt 0001            __size_of_write_command 0010  
      fillCircleHelper@cornername 0029                           ??_Rcmd1 001D  
                         ??_Rcmd3 001D                __size_of_drawPixel 0030  
               __end_of_OpenUSART 119E                           ??_putch 0011  
                      __pbssBANK0 00BF                         ?_Rcmd2red 0001  
       __size_of_Wait_Half_Second 001A                   spiwrite@spidata 0012  
                ?_Reset_Nec_State 0001                     ?_Wait_One_Sec 0001  
                         ?___wmul 0011                        ??_INTx_isr 0001  
                         ?_chkisr 0001            __size_of_setAddrWindow 004E  
                         _CCP2CON 000FBA                      ??_TIMER1_isr 0001  
                      _fillCircle 11FA                           ?_printf 001D  
                         ?_strcpy 0011                           ?_strlen 0011  
               ??_Activate_Buzzer 0011                        _fillScreen 14F2  
                      _drawCircle 049E                           _RGB_LED 0047  
                       ?_delay_ms 0017                         ?_fillRect 0023  
                       ?_drawChar 002E                           _SSPCON1 000FC6  
                         _SSPSTAT 000FC7             __end_of_fillRectangle 0E60  
                       ?_drawtext 0039                        ??_Rcmd2red 0014  
                  ??_Wait_One_Sec 0011                __end_of_TIMER1_isr 15DC  
                   _write_command 15B2                           __Hparam 0000  
                         __Lparam 0000                 __end_of_drawPixel 14A0  
           __end_of_drawFastVLine 1030                  _fillCircleHelper 0940  
                 __size_of___wmul 0028                           ___lwdiv 119E  
                         ___lwmod 12EC                   __size_of_chkisr 1126  
                       ?_spiwrite 0001                           __pcinit 1030  
                         __ramtop 1000                           __ptext0 001C  
                         __ptext1 028C                           __ptext2 15C2  
                         __ptext3 12EC                           __ptext4 119E  
                         __ptext5 11FA                           __ptext6 0940  
                         __ptext7 049E                           __ptext8 15DC  
                         __ptext9 150E                   __size_of_printf 0212  
                       _T0CONbits 000FD5                   __size_of_strcpy 0032  
                 __size_of_strlen 003E                 __end_of_hexpowers FFBC  
                       _T1CONbits 000FCD                           _dpowers FFAA  
                       _T3CONbits 000FB1                        ??_delay_ms 0019  
                   drawtext@_text 003A                     drawtext@color 003C  
                      ??_fillRect 0028                        ??_drawChar 0035  
                       _LCD_Reset 157E                     _setAddrWindow 129E  
                  __pintcode_body 10B2                        delay_ms@ms 0017  
            end_of_initialization 10A8                        ??_drawtext 0041  
                  ?_write_command 0001                     __Lmediumconst FDCE  
                         int_func 10B2                         _RCSTAbits 000FAB  
                         printf@c 0029                           printf@f 001D  
                         postdec1 000FE5                           postdec2 000FDD  
                         postinc0 000FEE                           postinc1 000FE6  
                         postinc2 000FDE                        _portE_mask 0050  
                      ??_spiwrite 0011                           strlen@s 0011  
                 fillCircle@color 0041                       ?_fillCircle 003B  
                drawtext@cursor_x 00E4                  drawtext@cursor_y 00E3  
                       _PORTCbits 000F82                         _PORTDbits 000F83  
                     ?_fillScreen 0024                       ?_drawCircle 001C  
  __size_of_Initialize_LCD_Screen 00A0                        drawChar@bg 0032  
   __end_of_Initialize_LCD_Screen 0FA8                         _TRISCbits 000F94  
                  ?_setAddrWindow 0014                        ?_LCD_Reset 0001  
                drawtext@textsize 00DF                        drawPixel@x 001B  
                      drawPixel@y 0018                  _Wait_Half_Second 150E  
                       _TXSTAbits 000FAC                  ??_Init_Interrupt 0011  
                  __end_of___wmul 14F2                     delay_ms@count 001B  
                      _write_data 15A2                     __pidataCOMRAM 1540  
                  __end_of_chkisr 112E          ?_TFT_GreenTab_Initialize 0001  
               __size_of_INTx_isr 019E                         _Nec_State 0069  
                      drawtext@bg 003E              __end_of_Wait_One_Sec 15E6  
                  __end_of_printf 049E                    __end_of_strcpy 1470  
                  __end_of_strlen 1400               start_initialization 1030  
                       _Init_UART 156A                   ??_write_command 0013  
                       _OpenUSART 112E               __size_of_fillCircle 0052  
                __CFG_OSC$INTIO67 000000                 __size_of_Rcmd2red 003E  
             __size_of_fillScreen 001C               __size_of_drawCircle 01AE  
   __size_of_Enable_INT_Interrupt 0006                   _Activate_Buzzer 1590  
                        ??___wmul 0015                          ??_chkisr 0003  
                     __pdataBANK0 0080                       __pdataBANK1 0100  
                 setAddrWindow@x0 0017                   setAddrWindow@x1 0015  
                 setAddrWindow@y0 0014                   setAddrWindow@y1 0016  
                        ??_printf 0021                          ??_strcpy 0015  
                        ??_strlen 0013                       __pbssCOMRAM 005C  
                      ?_Init_UART 0001                   ??_setAddrWindow 0017  
                   __pcstackBANK0 00DE                       ??_LCD_Reset 001D  
        __end_of_fillCircleHelper 0A78                 __size_of_delay_ms 0052  
               __size_of_fillRect 004A                 __size_of_drawChar 0156  
                      ?_OpenUSART 0011                 __size_of_drawtext 010A  
                ___lwdiv@dividend 0011                         _bit_count 006B  
                       __pintcode 0008   __end_of_TFT_GreenTab_Initialize 14CA  
                   __pmediumconst FDCE          __size_of_Reset_Nec_State 0008  
                       __tft_type 006A                          ?___lwdiv 0011  
                        ?___lwmod 0018                drawFastVLine@color 001A  
                     ?_write_data 0001                         _drawPixel 1470  
               __size_of_spiwrite 0014                    __size_of_Rcmd1 0110  
                  __size_of_Rcmd3 00F2                         _hexpowers FFB4  
                ___lwdiv@quotient 0015                    __size_of_putch 000E  
         __end_of_Activate_Buzzer 15A2                    ___wmul@product 0015  
                        _PIE1bits 000F9D                          _PIR1bits 000F9E  
                        _PIR2bits 000FA1                          _INTx_isr 064C  
           __size_of_Wait_One_Sec 000A                         fillRect@h 0025  
                       fillRect@i 002C                         fillRect@w 0024  
                       fillRect@x 002B                         fillRect@y 0023  
                       drawChar@c 002F                         drawChar@i 0038  
                       drawChar@j 0037                      ??_fillCircle 0043  
                       drawChar@x 0036                         drawChar@y 002E  
                      ?_drawPixel 0018            __size_of_fillRectangle 00DC  
                      _ADCON0bits 000FC2          __end_of_Wait_Half_Second 1528  
               ___wmul@multiplier 0011                      ??_fillScreen 0026  
                    ??_drawCircle 0024                        printf@flag 0026  
                      printf@prec 0025                         main@found 0046  
                     ??_Init_UART 0014                       _INTCON2bits 000FF1  
                       copy_data0 105C                         copy_data1 107C  
                       copy_data2 109C                         drawtext@i 00E1  
          __size_of_drawFastVLine 0088                         drawtext@x 00DE  
                       drawtext@y 0039                          _Nec_code 005C  
               write_command@cmd_ 0013                       ??_OpenUSART 0013  
                        _Rcmd2red 1400               __size_of_write_data 0010  
                 OpenUSART@config 0013                      _Time_Elapsed 0062  
              __end_of_fillCircle 124C                      _Wait_One_Sec 15DC  
                        __Hrparam 0000                __end_of_fillScreen 150E  
                        __Lrparam 0000                __end_of_drawCircle 064C  
                __size_of___lwdiv 005C                  __size_of___lwmod 004C  
               ??_Reset_Nec_State 0001                          _delay_ms 124C  
                 ___lwdiv@divisor 0013                   ___lwdiv@counter 0017  
                        __ptext10 0F08                          __ptext11 143E  
                        __ptext20 129E                          __ptext12 14F2  
                        __ptext21 14A0                          __ptext13 0D84  
                        __ptext30 14CA                          __ptext22 0C92  
                        __ptext14 0B88                          __ptext31 156A  
                        __ptext23 1400                          __ptext15 13C2  
                        __ptext40 15EE                          __ptext32 112E  
                        __ptext24 0A78                          __ptext16 07EA  
                        __ptext33 1528                          __ptext25 15A2  
                        __ptext17 1338                          __ptext34 15F6  
                        __ptext26 15B2                          __ptext18 0FA8  
                        __ptext35 15E6                          __ptext27 1556  
                        __ptext19 1470                          __ptext36 1590  
                        __ptext28 157E                          __ptext29 124C  
                        __ptext38 15D0                          __ptext39 064C  
                        _fillRect 1338                          _drawChar 07EA  
           _Initialize_LCD_Screen 0F08  __size_of_TFT_GreenTab_Initialize 002A  
                        _colstart 006C                          _drawtext 0B88  
                      strcpy@from 0013                     _fillRectangle 0D84  
                ?_Activate_Buzzer 0001                     __size_of_main 0270  
                 fillRectangle@hi 0021                   fillRectangle@lo 0022  
                   _drawFastVLine 0FA8                         printf@idx 0022  
                        _spiwrite 1556                         printf@val 0027  
                     ??_drawPixel 001B                          _rowstart 006D  
              fillCircleHelper@x0 0023                fillCircleHelper@y0 0025  
    __end_of_Enable_INT_Interrupt 15FC                        _INTCONbits 000FF2  
                  OpenUSART@spbrg 0011                 ?_fillCircleHelper 0023  
                       spiwrite@x 0011                          intlevel2 0000  
                  ?_fillRectangle 0018                ??_fillCircleHelper 002F  
                ___lwmod@dividend 0018             __end_of_write_command 15C2  
                 fillScreen@color 0024                      fillCircle@x0 003B  
                    fillCircle@y0 003D                    fillRectangle@h 001A  
                  fillRectangle@w 0019                    fillRectangle@x 0023  
                  fillRectangle@y 0018                    ?_drawFastVLine 0018  
                        printf@ap 0023                 fillCircleHelper@f 0035  
               fillCircleHelper@r 0027                 fillCircleHelper@x 0037  
               fillCircleHelper@y 0039                      ??_write_data 0013  
                      _TIMER1_isr 15D0                     fillRect@color 0026  
                 ___lwmod@divisor 001A                          strcpy@cp 0015  
                        strlen@cp 0015                          strcpy@to 0011  
                 ___lwmod@counter 001C           __size_of_Init_Interrupt 0018  
          ?_Initialize_LCD_Screen 0001                       fillCircle@r 003F  
           __end_of_setAddrWindow 12EC                fillRectangle@color 001B  
                   drawChar@color 0030                       main@LED_Sel 0045  
              __end_of_write_data 15B2                      drawChar@line 0035  
                    drawChar@size 0034  
