

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Mon Oct 06 22:36:02 2025

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	text23,global,reloc=2,class=CODE,delta=1
    32                           	psect	text24,global,reloc=2,class=CODE,delta=1
    33                           	psect	text25,global,reloc=2,class=CODE,delta=1
    34                           	psect	text26,global,reloc=2,class=CODE,delta=1
    35                           	psect	text27,global,reloc=2,class=CODE,delta=1
    36                           	psect	text28,global,reloc=2,class=CODE,delta=1
    37                           	psect	text29,global,reloc=2,class=CODE,delta=1
    38                           	psect	text30,global,reloc=2,class=CODE,delta=1
    39                           	psect	text31,global,reloc=2,class=CODE,delta=1
    40                           	psect	text32,global,reloc=2,class=CODE,delta=1
    41                           	psect	text33,global,reloc=2,class=CODE,delta=1
    42                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    43                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    44  0000                     
    45                           	psect	smallconst
    46  001000                     __psmallconst:
    47                           	opt stack 0
    48  001000  00                 	db	0
    49  001001                     _dpowers:
    50                           	opt stack 0
    51  001001  0001               	dw	1
    52  001003  0000               	dw	0
    53  001005  000A               	dw	10
    54  001007  0000               	dw	0
    55  001009  0064               	dw	100
    56  00100B  0000               	dw	0
    57  00100D  03E8               	dw	1000
    58  00100F  0000               	dw	0
    59  001011  2710               	dw	10000
    60  001013  0000               	dw	0
    61  001015  86A0               	dw	34464
    62  001017  0001               	dw	1
    63  001019  4240               	dw	16960
    64  00101B  000F               	dw	15
    65  00101D  9680               	dw	38528
    66  00101F  0098               	dw	152
    67  001021  E100               	dw	57600
    68  001023  05F5               	dw	1525
    69  001025  CA00               	dw	51712
    70  001027  3B9A               	dw	15258
    71  001029                     __end_of_dpowers:
    72                           	opt stack 0
    73  001029                     __npowers_:
    74                           	opt stack 0
    75  001029  00                 	db	0
    76  00102A  80                 	db	128
    77  00102B  3F                 	db	63
    78  00102C  CD                 	db	205
    79  00102D  CC                 	db	204
    80  00102E  3D                 	db	61
    81  00102F  D7                 	db	215
    82  001030  23                 	db	35
    83  001031  3C                 	db	60
    84  001032  12                 	db	18
    85  001033  83                 	db	131
    86  001034  3A                 	db	58
    87  001035  B7                 	db	183
    88  001036  D1                 	db	209
    89  001037  38                 	db	56
    90  001038  C6                 	db	198
    91  001039  27                 	db	39
    92  00103A  37                 	db	55
    93  00103B  38                 	db	56
    94  00103C  86                 	db	134
    95  00103D  35                 	db	53
    96  00103E  C0                 	db	192
    97  00103F  D6                 	db	214
    98  001040  33                 	db	51
    99  001041  CC                 	db	204
   100  001042  2B                 	db	43
   101  001043  32                 	db	50
   102  001044  70                 	db	112
   103  001045  89                 	db	137
   104  001046  30                 	db	48
   105  001047  E7                 	db	231
   106  001048  DB                 	db	219
   107  001049  2E                 	db	46
   108  00104A  E5                 	db	229
   109  00104B  3C                 	db	60
   110  00104C  1E                 	db	30
   111  00104D  42                 	db	66
   112  00104E  A2                 	db	162
   113  00104F  0D                 	db	13
   114  001050                     __end_of__npowers_:
   115                           	opt stack 0
   116  001050                     __powers_:
   117                           	opt stack 0
   118  001050  00                 	db	0
   119  001051  80                 	db	128
   120  001052  3F                 	db	63
   121  001053  00                 	db	0
   122  001054  20                 	db	32
   123  001055  41                 	db	65
   124  001056  00                 	db	0
   125  001057  C8                 	db	200
   126  001058  42                 	db	66
   127  001059  00                 	db	0
   128  00105A  7A                 	db	122
   129  00105B  44                 	db	68
   130  00105C  40                 	db	64
   131  00105D  1C                 	db	28
   132  00105E  46                 	db	70
   133  00105F  50                 	db	80
   134  001060  C3                 	db	195
   135  001061  47                 	db	71
   136  001062  24                 	db	36
   137  001063  74                 	db	116
   138  001064  49                 	db	73
   139  001065  97                 	db	151
   140  001066  18                 	db	24
   141  001067  4B                 	db	75
   142  001068  BC                 	db	188
   143  001069  BE                 	db	190
   144  00106A  4C                 	db	76
   145  00106B  6B                 	db	107
   146  00106C  6E                 	db	110
   147  00106D  4E                 	db	78
   148  00106E  03                 	db	3
   149  00106F  15                 	db	21
   150  001070  50                 	db	80
   151  001071  79                 	db	121
   152  001072  AD                 	db	173
   153  001073  60                 	db	96
   154  001074  F3                 	db	243
   155  001075  49                 	db	73
   156  001076  71                 	db	113
   157  001077                     __end_of__powers_:
   158                           	opt stack 0
   159  001077                     _segmap:
   160                           	opt stack 0
   161  001077  01                 	db	1
   162  001078  4F                 	db	79
   163  001079  12                 	db	18
   164  00107A  06                 	db	6
   165  00107B  4C                 	db	76
   166  00107C  24                 	db	36
   167  00107D  20                 	db	32
   168  00107E  0F                 	db	15
   169  00107F  00                 	db	0
   170  001080  04                 	db	4
   171  001081                     __end_of_segmap:
   172                           	opt stack 0
   173  001081                     set_D1@F3293:
   174                           	opt stack 0
   175  001081  00                 	db	0
   176  001082  04                 	db	4
   177  001083  02                 	db	2
   178  001084  06                 	db	6
   179  001085  01                 	db	1
   180  001086  05                 	db	5
   181  001087  03                 	db	3
   182  001088  07                 	db	7
   183  001089                     __end_ofset_D1@F3293:
   184                           	opt stack 0
   185  0000                     _ADCON0	set	4034
   186  0000                     _ADCON0bits	set	4034
   187  0000                     _ADCON1	set	4033
   188  0000                     _ADCON2	set	4032
   189  0000                     _ADRESH	set	4036
   190  0000                     _ADRESL	set	4035
   191  0000                     _LATB	set	3978
   192  0000                     _LATCbits	set	3979
   193  0000                     _LATD	set	3980
   194  0000                     _LATEbits	set	3981
   195  0000                     _OSCCON	set	4051
   196  0000                     _PIR1bits	set	3998
   197  0000                     _PORTCbits	set	3970
   198  0000                     _RCSTAbits	set	4011
   199  0000                     _SPBRG	set	4015
   200  0000                     _SPBRGH	set	4016
   201  0000                     _TRISA	set	3986
   202  0000                     _TRISB	set	3987
   203  0000                     _TRISC	set	3988
   204  0000                     _TRISCbits	set	3988
   205  0000                     _TRISD	set	3989
   206  0000                     _TRISE	set	3990
   207  0000                     _TXREG	set	4013
   208  0000                     _TXSTAbits	set	4012
   209  001089                     STR_1:
   210  001089  54                 	db	84	;'T'
   211  00108A  65                 	db	101	;'e'
   212  00108B  6D                 	db	109	;'m'
   213  00108C  70                 	db	112	;'p'
   214  00108D  3D                 	db	61	;'='
   215  00108E  25                 	db	37
   216  00108F  64                 	db	100	;'d'
   217  001090  20                 	db	32
   218  001091  46                 	db	70	;'F'
   219  001092  20                 	db	32
   220  001093  20                 	db	32
   221  001094  56                 	db	86	;'V'
   222  001095  3D                 	db	61	;'='
   223  001096  25                 	db	37
   224  001097  2E                 	db	46
   225  001098  31                 	db	49	;'1'
   226  001099  66                 	db	102	;'f'
   227  00109A  20                 	db	32
   228  00109B  6D                 	db	109	;'m'
   229  00109C  56                 	db	86	;'V'
   230  00109D  20                 	db	32
   231  00109E  20                 	db	32
   232  00109F  4C                 	db	76	;'L'
   233  0010A0  69                 	db	105	;'i'
   234  0010A1  67                 	db	103	;'g'
   235  0010A2  68                 	db	104	;'h'
   236  0010A3  74                 	db	116	;'t'
   237  0010A4  3D                 	db	61	;'='
   238  0010A5  25                 	db	37
   239  0010A6  2E                 	db	46
   240  0010A7  31                 	db	49	;'1'
   241  0010A8  66                 	db	102	;'f'
   242  0010A9  20                 	db	32
   243  0010AA  6D                 	db	109	;'m'
   244  0010AB  56                 	db	86	;'V'
   245  0010AC  0D                 	db	13
   246  0010AD  0A                 	db	10
   247  0010AE  00                 	db	0
   248                           
   249                           ; #config settings
   250  0010AF  00                 	db	0	; dummy byte at the end
   251  0000                     
   252                           	psect	cinit
   253  002F94                     __pcinit:
   254                           	opt stack 0
   255  002F94                     start_initialization:
   256                           	opt stack 0
   257  002F94                     __initialization:
   258                           	opt stack 0
   259  002F94                     end_of_initialization:
   260                           	opt stack 0
   261  002F94                     __end_of__initialization:
   262                           	opt stack 0
   263  002F94  0E00               	movlw	low (__Lmediumconst shr (0+16))
   264  002F96  6EF8               	movwf	tblptru,c
   265  002F98  0100               	movlb	0
   266  002F9A  EF79  F00F         	goto	_main	;jump to C main() function
   267                           tblptru	equ	0xFF8
   268                           
   269                           	psect	cstackCOMRAM
   270  000001                     __pcstackCOMRAM:
   271                           	opt stack 0
   272  000001                     ??_isdigit:
   273  000001                     ?_GET_FULL_ADC:
   274                           	opt stack 0
   275  000001                     ?___awmod:
   276                           	opt stack 0
   277  000001                     ?___ftpack:
   278                           	opt stack 0
   279  000001                     ?___ftneg:
   280                           	opt stack 0
   281  000001                     ?__tdiv_to_l_:
   282                           	opt stack 0
   283  000001                     ?__div_to_l_:
   284                           	opt stack 0
   285  000001                     ?___lldiv:
   286                           	opt stack 0
   287  000001                     putch@c:
   288                           	opt stack 0
   289  000001                     SET_ADCON0@ch:
   290                           	opt stack 0
   291  000001                     DISP_LeftDigit@d:
   292                           	opt stack 0
   293  000001                     DISP_RightDigit@d:
   294                           	opt stack 0
   295  000001                     set_D2@t:
   296                           	opt stack 0
   297  000001                     ___awmod@dividend:
   298                           	opt stack 0
   299  000001                     __div_to_l_@f1:
   300                           	opt stack 0
   301  000001                     ___ftpack@arg:
   302                           	opt stack 0
   303  000001                     __tdiv_to_l_@f1:
   304                           	opt stack 0
   305  000001                     ___ftge@ff1:
   306                           	opt stack 0
   307  000001                     ___ftneg@f1:
   308                           	opt stack 0
   309  000001                     Delay_One_Sec@j:
   310                           	opt stack 0
   311  000001                     ___lldiv@dividend:
   312                           	opt stack 0
   313                           
   314                           ; 4 bytes @ 0x0
   315  000001                     	ds	1
   316  000002                     _isdigit$992:
   317                           	opt stack 0
   318                           
   319                           ; 1 bytes @ 0x1
   320  000002                     	ds	1
   321  000003                     ??_GET_FULL_ADC:
   322  000003                     ??_set_D2:
   323  000003                     isdigit@c:
   324                           	opt stack 0
   325  000003                     ___awmod@divisor:
   326                           	opt stack 0
   327                           
   328                           ; 2 bytes @ 0x2
   329  000003                     	ds	1
   330  000004                     set_D2@c:
   331                           	opt stack 0
   332  000004                     ___ftpack@exp:
   333                           	opt stack 0
   334  000004                     __div_to_l_@f2:
   335                           	opt stack 0
   336  000004                     __tdiv_to_l_@f2:
   337                           	opt stack 0
   338  000004                     ___ftge@ff2:
   339                           	opt stack 0
   340                           
   341                           ; 3 bytes @ 0x3
   342  000004                     	ds	1
   343  000005                     ___awmod@counter:
   344                           	opt stack 0
   345  000005                     ___ftpack@sign:
   346                           	opt stack 0
   347  000005                     ___lldiv@divisor:
   348                           	opt stack 0
   349                           
   350                           ; 4 bytes @ 0x4
   351  000005                     	ds	1
   352  000006                     ??___ftpack:
   353  000006                     ___awmod@sign:
   354                           	opt stack 0
   355                           
   356                           ; 1 bytes @ 0x5
   357  000006                     	ds	1
   358  000007                     ??__tdiv_to_l_:
   359  000007                     ??___ftge:
   360  000007                     ?___awdiv:
   361                           	opt stack 0
   362  000007                     ___awdiv@dividend:
   363                           	opt stack 0
   364  000007                     __div_to_l_@quot:
   365                           	opt stack 0
   366                           
   367                           ; 4 bytes @ 0x6
   368  000007                     	ds	2
   369  000009                     ?___lltoft:
   370                           	opt stack 0
   371  000009                     ?___lwtoft:
   372                           	opt stack 0
   373  000009                     ___awdiv@divisor:
   374                           	opt stack 0
   375  000009                     ___lwtoft@c:
   376                           	opt stack 0
   377  000009                     ___lldiv@quotient:
   378                           	opt stack 0
   379  000009                     ___lltoft@c:
   380                           	opt stack 0
   381                           
   382                           ; 4 bytes @ 0x8
   383  000009                     	ds	1
   384  00000A                     set_D3@mv:
   385                           	opt stack 0
   386  00000A                     __tdiv_to_l_@quot:
   387                           	opt stack 0
   388                           
   389                           ; 4 bytes @ 0x9
   390  00000A                     	ds	1
   391  00000B                     ___awdiv@counter:
   392                           	opt stack 0
   393  00000B                     __div_to_l_@cntr:
   394                           	opt stack 0
   395                           
   396                           ; 1 bytes @ 0xA
   397  00000B                     	ds	1
   398  00000C                     ___awdiv@sign:
   399                           	opt stack 0
   400  00000C                     __div_to_l_@exp1:
   401                           	opt stack 0
   402                           
   403                           ; 1 bytes @ 0xB
   404  00000C                     	ds	1
   405  00000D                     ??___lltoft:
   406  00000D                     ___lldiv@counter:
   407                           	opt stack 0
   408  00000D                     ___awdiv@quotient:
   409                           	opt stack 0
   410                           
   411                           ; 2 bytes @ 0xC
   412  00000D                     	ds	1
   413  00000E                     ?___llmod:
   414                           	opt stack 0
   415  00000E                     __tdiv_to_l_@cntr:
   416                           	opt stack 0
   417  00000E                     ___llmod@dividend:
   418                           	opt stack 0
   419                           
   420                           ; 4 bytes @ 0xD
   421  00000E                     	ds	1
   422  00000F                     ?___wmul:
   423                           	opt stack 0
   424  00000F                     __tdiv_to_l_@exp1:
   425                           	opt stack 0
   426  00000F                     set_D1@tempF:
   427                           	opt stack 0
   428  00000F                     ___wmul@multiplier:
   429                           	opt stack 0
   430                           
   431                           ; 2 bytes @ 0xE
   432  00000F                     	ds	2
   433  000011                     ??_set_D1:
   434  000011                     ___lltoft@exp:
   435                           	opt stack 0
   436  000011                     ___wmul@multiplicand:
   437                           	opt stack 0
   438                           
   439                           ; 2 bytes @ 0x10
   440  000011                     	ds	1
   441  000012                     ___llmod@divisor:
   442                           	opt stack 0
   443  000012                     set_D1@temp_map:
   444                           	opt stack 0
   445                           
   446                           ; 8 bytes @ 0x11
   447  000012                     	ds	1
   448  000013                     ___wmul@product:
   449                           	opt stack 0
   450                           
   451                           ; 2 bytes @ 0x12
   452  000013                     	ds	2
   453  000015                     ?___ftmul:
   454                           	opt stack 0
   455  000015                     ___ftmul@f1:
   456                           	opt stack 0
   457                           
   458                           ; 3 bytes @ 0x14
   459  000015                     	ds	1
   460  000016                     ___llmod@counter:
   461                           	opt stack 0
   462                           
   463                           ; 1 bytes @ 0x15
   464  000016                     	ds	2
   465  000018                     ___ftmul@f2:
   466                           	opt stack 0
   467                           
   468                           ; 3 bytes @ 0x17
   469  000018                     	ds	2
   470  00001A                     _set_D1$611:
   471                           	opt stack 0
   472                           
   473                           ; 2 bytes @ 0x19
   474  00001A                     	ds	1
   475  00001B                     ??___ftmul:
   476                           
   477                           ; 0 bytes @ 0x1A
   478  00001B                     	ds	1
   479  00001C                     set_D1@idx:
   480                           	opt stack 0
   481                           
   482                           ; 1 bytes @ 0x1B
   483  00001C                     	ds	2
   484  00001E                     ___ftmul@exp:
   485                           	opt stack 0
   486                           
   487                           ; 1 bytes @ 0x1D
   488  00001E                     	ds	1
   489  00001F                     ___ftmul@f3_as_product:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0x1E
   493  00001F                     	ds	3
   494  000022                     ___ftmul@cntr:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x21
   498  000022                     	ds	1
   499  000023                     ___ftmul@sign:
   500                           	opt stack 0
   501                           
   502                           ; 1 bytes @ 0x22
   503  000023                     	ds	1
   504  000024                     ?_fround:
   505                           	opt stack 0
   506  000024                     ?_scale:
   507                           	opt stack 0
   508                           
   509                           ; 3 bytes @ 0x23
   510  000024                     	ds	3
   511  000027                     _fround$1241:
   512                           	opt stack 0
   513  000027                     _scale$1242:
   514                           	opt stack 0
   515                           
   516                           ; 3 bytes @ 0x26
   517  000027                     	ds	3
   518  00002A                     scale@scl:
   519                           	opt stack 0
   520  00002A                     _fround$1240:
   521                           	opt stack 0
   522                           
   523                           ; 3 bytes @ 0x29
   524  00002A                     	ds	1
   525  00002B                     ?___fttol:
   526                           	opt stack 0
   527  00002B                     ___fttol@f1:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x2A
   531  00002B                     	ds	2
   532  00002D                     fround@prec:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x2C
   536  00002D                     	ds	1
   537  00002E                     ?___ftadd:
   538                           	opt stack 0
   539  00002E                     ___ftadd@f1:
   540                           	opt stack 0
   541                           
   542                           ; 3 bytes @ 0x2D
   543  00002E                     	ds	1
   544  00002F                     ??___fttol:
   545                           
   546                           ; 0 bytes @ 0x2E
   547  00002F                     	ds	2
   548  000031                     ___ftadd@f2:
   549                           	opt stack 0
   550                           
   551                           ; 3 bytes @ 0x30
   552  000031                     	ds	3
   553  000034                     ??___ftadd:
   554  000034                     ___fttol@sign1:
   555                           	opt stack 0
   556                           
   557                           ; 1 bytes @ 0x33
   558  000034                     	ds	1
   559  000035                     ___fttol@lval:
   560                           	opt stack 0
   561                           
   562                           ; 4 bytes @ 0x34
   563  000035                     	ds	2
   564  000037                     ___ftadd@sign:
   565                           	opt stack 0
   566                           
   567                           ; 1 bytes @ 0x36
   568  000037                     	ds	1
   569  000038                     ___ftadd@exp2:
   570                           	opt stack 0
   571                           
   572                           ; 1 bytes @ 0x37
   573  000038                     	ds	1
   574  000039                     ___ftadd@exp1:
   575                           	opt stack 0
   576  000039                     ___fttol@exp1:
   577                           	opt stack 0
   578                           
   579                           ; 1 bytes @ 0x38
   580  000039                     	ds	1
   581  00003A                     ?___ftdiv:
   582                           	opt stack 0
   583  00003A                     ?___ftsub:
   584                           	opt stack 0
   585  00003A                     ___ftdiv@f1:
   586                           	opt stack 0
   587  00003A                     ___ftsub@f1:
   588                           	opt stack 0
   589                           
   590                           ; 3 bytes @ 0x39
   591  00003A                     	ds	3
   592  00003D                     ___ftdiv@f2:
   593                           	opt stack 0
   594  00003D                     ___ftsub@f2:
   595                           	opt stack 0
   596                           
   597                           ; 3 bytes @ 0x3C
   598  00003D                     	ds	3
   599  000040                     ??___ftdiv:
   600  000040                     ?_printf:
   601                           	opt stack 0
   602  000040                     printf@f:
   603                           	opt stack 0
   604                           
   605                           ; 2 bytes @ 0x3F
   606  000040                     	ds	3
   607  000043                     ___ftdiv@cntr:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x42
   611  000043                     	ds	1
   612  000044                     ___ftdiv@f3:
   613                           	opt stack 0
   614                           
   615                           ; 3 bytes @ 0x43
   616  000044                     	ds	3
   617  000047                     ___ftdiv@exp:
   618                           	opt stack 0
   619                           
   620                           ; 1 bytes @ 0x46
   621  000047                     	ds	1
   622  000048                     ___ftdiv@sign:
   623                           	opt stack 0
   624                           
   625                           ; 1 bytes @ 0x47
   626  000048                     	ds	2
   627  00004A                     ??_printf:
   628                           
   629                           ; 0 bytes @ 0x49
   630  00004A                     	ds	6
   631  000050                     _printf$1243:
   632                           	opt stack 0
   633                           
   634                           ; 3 bytes @ 0x4F
   635  000050                     	ds	3
   636  000053                     printf@ap:
   637                           	opt stack 0
   638                           
   639                           ; 2 bytes @ 0x52
   640  000053                     	ds	2
   641  000055                     printf@flag:
   642                           	opt stack 0
   643                           
   644                           ; 2 bytes @ 0x54
   645  000055                     	ds	2
   646  000057                     printf@exp:
   647                           	opt stack 0
   648                           
   649                           ; 2 bytes @ 0x56
   650  000057                     	ds	2
   651  000059                     printf@tmpval:
   652                           	opt stack 0
   653                           
   654                           ; 4 bytes @ 0x58
   655  000059                     	ds	4
   656  00005D                     printf@val:
   657                           	opt stack 0
   658                           
   659                           ; 4 bytes @ 0x5C
   660  00005D                     	ds	4
   661  000061                     printf@prec:
   662                           	opt stack 0
   663                           
   664                           ; 2 bytes @ 0x60
   665  000061                     	ds	2
   666  000063                     printf@fval:
   667                           	opt stack 0
   668                           
   669                           ; 3 bytes @ 0x62
   670  000063                     	ds	3
   671  000066                     printf@c:
   672                           	opt stack 0
   673                           
   674                           ; 1 bytes @ 0x65
   675  000066                     	ds	1
   676  000067                     main@tC:
   677                           	opt stack 0
   678                           
   679                           ; 3 bytes @ 0x66
   680  000067                     	ds	3
   681  00006A                     main@tF:
   682                           	opt stack 0
   683                           
   684                           ; 3 bytes @ 0x69
   685  00006A                     	ds	3
   686  00006D                     main@steps:
   687                           	opt stack 0
   688                           
   689                           ; 2 bytes @ 0x6C
   690  00006D                     	ds	2
   691  00006F                     main@lsteps:
   692                           	opt stack 0
   693                           
   694                           ; 2 bytes @ 0x6E
   695  00006F                     	ds	2
   696  000071                     main@mv:
   697                           	opt stack 0
   698                           
   699                           ; 3 bytes @ 0x70
   700  000071                     	ds	3
   701  000074                     main@lmv:
   702                           	opt stack 0
   703                           
   704                           ; 3 bytes @ 0x73
   705  000074                     	ds	3
   706  000077                     main@tempF:
   707                           	opt stack 0
   708                           
   709                           ; 2 bytes @ 0x76
   710  000077                     	ds	2
   711                           tblptru	equ	0xFF8
   712                           
   713 ;;
   714 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   715 ;;
   716 ;; *************** function _main *****************
   717 ;; Defined at:
   718 ;;		line 130 in file "lab5.c"
   719 ;; Parameters:    Size  Location     Type
   720 ;;		None
   721 ;; Auto vars:     Size  Location     Type
   722 ;;  lmv             3  115[COMRAM] float 
   723 ;;  mv              3  112[COMRAM] float 
   724 ;;  tF              3  105[COMRAM] float 
   725 ;;  tC              3  102[COMRAM] float 
   726 ;;  tempF           2  118[COMRAM] int 
   727 ;;  lsteps          2  110[COMRAM] unsigned int 
   728 ;;  steps           2  108[COMRAM] unsigned int 
   729 ;; Return value:  Size  Location     Type
   730 ;;		None               void
   731 ;; Registers used:
   732 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   733 ;; Tracked objects:
   734 ;;		On entry : 0/0
   735 ;;		On exit  : 0/0
   736 ;;		Unchanged: 0/0
   737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   738 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   739 ;;      Locals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   741 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   742 ;;Total ram usage:       18 bytes
   743 ;; Hardware stack levels required when called:    4
   744 ;; This function calls:
   745 ;;		_DISP_LeftDigit
   746 ;;		_DISP_RightDigit
   747 ;;		_Delay_One_Sec
   748 ;;		_GET_FULL_ADC
   749 ;;		_INIT_ADC
   750 ;;		_INIT_TRIS
   751 ;;		_SET_ADCON0
   752 ;;		___awdiv
   753 ;;		___awmod
   754 ;;		___ftadd
   755 ;;		___ftdiv
   756 ;;		___ftmul
   757 ;;		___ftneg
   758 ;;		___fttol
   759 ;;		___lwtoft
   760 ;;		_init_UART
   761 ;;		_printf
   762 ;;		_set_D1
   763 ;;		_set_D2
   764 ;;		_set_D3
   765 ;; This function is called by:
   766 ;;		Startup code after reset
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770                           	psect	text0
   771  001EF2                     __ptext0:
   772                           	opt stack 0
   773  001EF2                     _main:
   774                           	opt stack 27
   775                           
   776                           ;lab5.c: 131: init_UART();
   777                           
   778                           ;incstack = 0
   779  001EF2  EC77  F017         	call	_init_UART	;wreg free
   780                           
   781                           ;lab5.c: 132: INIT_ADC();
   782  001EF6  ECC3  F017         	call	_INIT_ADC	;wreg free
   783                           
   784                           ;lab5.c: 133: INIT_TRIS();
   785  001EFA  ECAB  F017         	call	_INIT_TRIS	;wreg free
   786  001EFE  D000               	goto	l2750
   787  001F00                     l2750:
   788                           
   789                           ;lab5.c: 137: SET_ADCON0(0);
   790  001F00  0E00               	movlw	0
   791  001F02  ECBC  F017         	call	_SET_ADCON0
   792                           
   793                           ;lab5.c: 138: unsigned int steps = GET_FULL_ADC();
   794  001F06  EC9F  F017         	call	_GET_FULL_ADC	;wreg free
   795  001F0A  C001  F06D         	movff	?_GET_FULL_ADC,main@steps
   796  001F0E  C002  F06E         	movff	?_GET_FULL_ADC+1,main@steps+1
   797                           
   798                           ;lab5.c: 139: float mv = (steps*5000.0)/1023.0;
   799  001F12  0E40               	movlw	64
   800  001F14  6E18               	movwf	___ftmul@f2,c
   801  001F16  0E9C               	movlw	156
   802  001F18  6E19               	movwf	___ftmul@f2+1,c
   803  001F1A  0E45               	movlw	69
   804  001F1C  6E1A               	movwf	___ftmul@f2+2,c
   805  001F1E  C06D  F009         	movff	main@steps,___lwtoft@c
   806  001F22  C06E  F00A         	movff	main@steps+1,___lwtoft@c+1
   807  001F26  EC41  F017         	call	___lwtoft	;wreg free
   808  001F2A  C009  F015         	movff	?___lwtoft,___ftmul@f1
   809  001F2E  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
   810  001F32  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
   811  001F36  EC79  F012         	call	___ftmul	;wreg free
   812  001F3A  C015  F03A         	movff	?___ftmul,___ftdiv@f1
   813  001F3E  C016  F03B         	movff	?___ftmul+1,___ftdiv@f1+1
   814  001F42  C017  F03C         	movff	?___ftmul+2,___ftdiv@f1+2
   815  001F46  0EC0               	movlw	192
   816  001F48  6E3D               	movwf	___ftdiv@f2,c
   817  001F4A  0E7F               	movlw	127
   818  001F4C  6E3E               	movwf	___ftdiv@f2+1,c
   819  001F4E  0E44               	movlw	68
   820  001F50  6E3F               	movwf	___ftdiv@f2+2,c
   821  001F52  ECD9  F013         	call	___ftdiv	;wreg free
   822  001F56  C03A  F071         	movff	?___ftdiv,main@mv
   823  001F5A  C03B  F072         	movff	?___ftdiv+1,main@mv+1
   824  001F5E  C03C  F073         	movff	?___ftdiv+2,main@mv+2
   825                           
   826                           ;lab5.c: 140: float tC = (1035.0 - mv)/5.5;
   827  001F62  0E60               	movlw	96
   828  001F64  6E31               	movwf	___ftadd@f2,c
   829  001F66  0E81               	movlw	129
   830  001F68  6E32               	movwf	___ftadd@f2+1,c
   831  001F6A  0E44               	movlw	68
   832  001F6C  6E33               	movwf	___ftadd@f2+2,c
   833  001F6E  C071  F001         	movff	main@mv,___ftneg@f1
   834  001F72  C072  F002         	movff	main@mv+1,___ftneg@f1+1
   835  001F76  C073  F003         	movff	main@mv+2,___ftneg@f1+2
   836  001F7A  EC54  F017         	call	___ftneg	;wreg free
   837  001F7E  C001  F02E         	movff	?___ftneg,___ftadd@f1
   838  001F82  C002  F02F         	movff	?___ftneg+1,___ftadd@f1+1
   839  001F86  C003  F030         	movff	?___ftneg+2,___ftadd@f1+2
   840  001F8A  EC8A  F010         	call	___ftadd	;wreg free
   841  001F8E  C02E  F03A         	movff	?___ftadd,___ftdiv@f1
   842  001F92  C02F  F03B         	movff	?___ftadd+1,___ftdiv@f1+1
   843  001F96  C030  F03C         	movff	?___ftadd+2,___ftdiv@f1+2
   844  001F9A  0E00               	movlw	0
   845  001F9C  6E3D               	movwf	___ftdiv@f2,c
   846  001F9E  0EB0               	movlw	176
   847  001FA0  6E3E               	movwf	___ftdiv@f2+1,c
   848  001FA2  0E40               	movlw	64
   849  001FA4  6E3F               	movwf	___ftdiv@f2+2,c
   850  001FA6  ECD9  F013         	call	___ftdiv	;wreg free
   851  001FAA  C03A  F067         	movff	?___ftdiv,main@tC
   852  001FAE  C03B  F068         	movff	?___ftdiv+1,main@tC+1
   853  001FB2  C03C  F069         	movff	?___ftdiv+2,main@tC+2
   854                           
   855                           ;lab5.c: 141: float tF = tC*1.8 + 32.0;
   856  001FB6  0E66               	movlw	102
   857  001FB8  6E18               	movwf	___ftmul@f2,c
   858  001FBA  0EE6               	movlw	230
   859  001FBC  6E19               	movwf	___ftmul@f2+1,c
   860  001FBE  0E3F               	movlw	63
   861  001FC0  6E1A               	movwf	___ftmul@f2+2,c
   862  001FC2  C067  F015         	movff	main@tC,___ftmul@f1
   863  001FC6  C068  F016         	movff	main@tC+1,___ftmul@f1+1
   864  001FCA  C069  F017         	movff	main@tC+2,___ftmul@f1+2
   865  001FCE  EC79  F012         	call	___ftmul	;wreg free
   866  001FD2  C015  F02E         	movff	?___ftmul,___ftadd@f1
   867  001FD6  C016  F02F         	movff	?___ftmul+1,___ftadd@f1+1
   868  001FDA  C017  F030         	movff	?___ftmul+2,___ftadd@f1+2
   869  001FDE  0E00               	movlw	0
   870  001FE0  6E31               	movwf	___ftadd@f2,c
   871  001FE2  0E00               	movlw	0
   872  001FE4  6E32               	movwf	___ftadd@f2+1,c
   873  001FE6  0E42               	movlw	66
   874  001FE8  6E33               	movwf	___ftadd@f2+2,c
   875  001FEA  EC8A  F010         	call	___ftadd	;wreg free
   876  001FEE  C02E  F06A         	movff	?___ftadd,main@tF
   877  001FF2  C02F  F06B         	movff	?___ftadd+1,main@tF+1
   878  001FF6  C030  F06C         	movff	?___ftadd+2,main@tF+2
   879                           
   880                           ;lab5.c: 142: int tempF = (int)tF;
   881  001FFA  C06A  F02B         	movff	main@tF,___fttol@f1
   882  001FFE  C06B  F02C         	movff	main@tF+1,___fttol@f1+1
   883  002002  C06C  F02D         	movff	main@tF+2,___fttol@f1+2
   884  002006  ECF5  F012         	call	___fttol	;wreg free
   885  00200A  C02B  F077         	movff	?___fttol,main@tempF
   886  00200E  C02C  F078         	movff	?___fttol+1,main@tempF+1
   887                           
   888                           ;lab5.c: 143: if(tempF<0) tempF=0;
   889  002012  AE78               	btfss	main@tempF+1,7,c
   890  002014  D005               	goto	l2758
   891  002016  0E00               	movlw	0
   892  002018  6E78               	movwf	main@tempF+1,c
   893  00201A  0E00               	movlw	0
   894  00201C  6E77               	movwf	main@tempF,c
   895  00201E  D000               	goto	l2758
   896  002020                     l2758:
   897                           
   898                           ;lab5.c: 145: DISP_LeftDigit(tempF/10);
   899  002020  C077  F007         	movff	main@tempF,___awdiv@dividend
   900  002024  C078  F008         	movff	main@tempF+1,___awdiv@dividend+1
   901  002028  0E00               	movlw	0
   902  00202A  6E0A               	movwf	___awdiv@divisor+1,c
   903  00202C  0E0A               	movlw	10
   904  00202E  6E09               	movwf	___awdiv@divisor,c
   905  002030  EC68  F015         	call	___awdiv	;wreg free
   906  002034  5007               	movf	?___awdiv,w,c
   907  002036  EC92  F017         	call	_DISP_LeftDigit
   908                           
   909                           ;lab5.c: 146: DISP_RightDigit(tempF%10);
   910  00203A  C077  F001         	movff	main@tempF,___awmod@dividend
   911  00203E  C078  F002         	movff	main@tempF+1,___awmod@dividend+1
   912  002042  0E00               	movlw	0
   913  002044  6E04               	movwf	___awmod@divisor+1,c
   914  002046  0E0A               	movlw	10
   915  002048  6E03               	movwf	___awmod@divisor,c
   916  00204A  EC44  F016         	call	___awmod	;wreg free
   917  00204E  5001               	movf	?___awmod,w,c
   918  002050  EC85  F017         	call	_DISP_RightDigit
   919                           
   920                           ;lab5.c: 148: set_D1(tempF);
   921  002054  C077  F00F         	movff	main@tempF,set_D1@tempF
   922  002058  C078  F010         	movff	main@tempF+1,set_D1@tempF+1
   923  00205C  EC4A  F014         	call	_set_D1	;wreg free
   924                           
   925                           ;lab5.c: 149: set_D2(tempF);
   926  002060  C077  F001         	movff	main@tempF,set_D2@t
   927  002064  C078  F002         	movff	main@tempF+1,set_D2@t+1
   928  002068  EC68  F013         	call	_set_D2	;wreg free
   929                           
   930                           ;lab5.c: 152: SET_ADCON0(1);
   931  00206C  0E01               	movlw	1
   932  00206E  ECBC  F017         	call	_SET_ADCON0
   933                           
   934                           ;lab5.c: 153: unsigned int lsteps = GET_FULL_ADC();
   935  002072  EC9F  F017         	call	_GET_FULL_ADC	;wreg free
   936  002076  C001  F06F         	movff	?_GET_FULL_ADC,main@lsteps
   937  00207A  C002  F070         	movff	?_GET_FULL_ADC+1,main@lsteps+1
   938                           
   939                           ;lab5.c: 154: float lmv = (lsteps*5000.0)/1023.0;
   940  00207E  0E40               	movlw	64
   941  002080  6E18               	movwf	___ftmul@f2,c
   942  002082  0E9C               	movlw	156
   943  002084  6E19               	movwf	___ftmul@f2+1,c
   944  002086  0E45               	movlw	69
   945  002088  6E1A               	movwf	___ftmul@f2+2,c
   946  00208A  C06F  F009         	movff	main@lsteps,___lwtoft@c
   947  00208E  C070  F00A         	movff	main@lsteps+1,___lwtoft@c+1
   948  002092  EC41  F017         	call	___lwtoft	;wreg free
   949  002096  C009  F015         	movff	?___lwtoft,___ftmul@f1
   950  00209A  C00A  F016         	movff	?___lwtoft+1,___ftmul@f1+1
   951  00209E  C00B  F017         	movff	?___lwtoft+2,___ftmul@f1+2
   952  0020A2  EC79  F012         	call	___ftmul	;wreg free
   953  0020A6  C015  F03A         	movff	?___ftmul,___ftdiv@f1
   954  0020AA  C016  F03B         	movff	?___ftmul+1,___ftdiv@f1+1
   955  0020AE  C017  F03C         	movff	?___ftmul+2,___ftdiv@f1+2
   956  0020B2  0EC0               	movlw	192
   957  0020B4  6E3D               	movwf	___ftdiv@f2,c
   958  0020B6  0E7F               	movlw	127
   959  0020B8  6E3E               	movwf	___ftdiv@f2+1,c
   960  0020BA  0E44               	movlw	68
   961  0020BC  6E3F               	movwf	___ftdiv@f2+2,c
   962  0020BE  ECD9  F013         	call	___ftdiv	;wreg free
   963  0020C2  C03A  F074         	movff	?___ftdiv,main@lmv
   964  0020C6  C03B  F075         	movff	?___ftdiv+1,main@lmv+1
   965  0020CA  C03C  F076         	movff	?___ftdiv+2,main@lmv+2
   966                           
   967                           ;lab5.c: 155: set_D3(lmv);
   968  0020CE  C074  F00A         	movff	main@lmv,set_D3@mv
   969  0020D2  C075  F00B         	movff	main@lmv+1,set_D3@mv+1
   970  0020D6  C076  F00C         	movff	main@lmv+2,set_D3@mv+2
   971  0020DA  EC16  F015         	call	_set_D3	;wreg free
   972                           
   973                           ;lab5.c: 158: printf("Temp=%d F  V=%.1f mV  Light=%.1f mV\r\n", tempF, mv, lmv);
   974  0020DE  0E89               	movlw	low STR_1
   975  0020E0  6E40               	movwf	printf@f,c
   976  0020E2  0E10               	movlw	high STR_1
   977  0020E4  6E41               	movwf	printf@f+1,c
   978  0020E6  C077  F042         	movff	main@tempF,?_printf+2
   979  0020EA  C078  F043         	movff	main@tempF+1,?_printf+3
   980  0020EE  C071  F044         	movff	main@mv,?_printf+4
   981  0020F2  C072  F045         	movff	main@mv+1,?_printf+5
   982  0020F6  C073  F046         	movff	main@mv+2,?_printf+6
   983  0020FA  C074  F047         	movff	main@lmv,?_printf+7
   984  0020FE  C075  F048         	movff	main@lmv+1,?_printf+8
   985  002102  C076  F049         	movff	main@lmv+2,?_printf+9
   986  002106  EC58  F008         	call	_printf	;wreg free
   987                           
   988                           ;lab5.c: 160: Delay_One_Sec();
   989  00210A  EC0F  F017         	call	_Delay_One_Sec	;wreg free
   990  00210E  D6F8               	goto	l2750
   991  002110  EF00  F000         	goto	start
   992  002114                     __end_of_main:
   993                           	opt stack 0
   994                           tblptru	equ	0xFF8
   995                           
   996 ;; *************** function _set_D3 *****************
   997 ;; Defined at:
   998 ;;		line 121 in file "lab5.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;  mv              3    9[COMRAM] float 
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;		None
  1003 ;; Return value:  Size  Location     Type
  1004 ;;		None               void
  1005 ;; Registers used:
  1006 ;;		wreg, status,2, status,0, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1012 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1015 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1016 ;;Total ram usage:        3 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; Hardware stack levels required when called:    1
  1019 ;; This function calls:
  1020 ;;		___ftge
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           	psect	text1
  1027  002A2C                     __ptext1:
  1028                           	opt stack 0
  1029  002A2C                     _set_D3:
  1030                           	opt stack 29
  1031                           
  1032                           ;lab5.c: 122: if(mv<2600) {LATEbits.LATE0=1; LATEbits.LATE1=1; LATEbits.LATE2=1;}
  1033                           
  1034                           ;incstack = 0
  1035  002A2C  C00A  F001         	movff	set_D3@mv,___ftge@ff1
  1036  002A30  C00B  F002         	movff	set_D3@mv+1,___ftge@ff1+1
  1037  002A34  C00C  F003         	movff	set_D3@mv+2,___ftge@ff1+2
  1038  002A38  0E80               	movlw	128
  1039  002A3A  6E04               	movwf	___ftge@ff2,c
  1040  002A3C  0E22               	movlw	34
  1041  002A3E  6E05               	movwf	___ftge@ff2+1,c
  1042  002A40  0E45               	movlw	69
  1043  002A42  6E06               	movwf	___ftge@ff2+2,c
  1044  002A44  ECB3  F015         	call	___ftge	;wreg free
  1045  002A48  B0D8               	btfsc	status,0,c
  1046  002A4A  D002               	goto	l2472
  1047  002A4C  808D               	bsf	3981,0,c	;volatile
  1048  002A4E  D011               	goto	L1
  1049  002A50                     l2472:
  1050                           
  1051                           ;lab5.c: 123: else if(mv<2900) {LATEbits.LATE0=0;LATEbits.LATE1=1; LATEbits.LATE2=1;}
  1052  002A50  C00A  F001         	movff	set_D3@mv,___ftge@ff1
  1053  002A54  C00B  F002         	movff	set_D3@mv+1,___ftge@ff1+1
  1054  002A58  C00C  F003         	movff	set_D3@mv+2,___ftge@ff1+2
  1055  002A5C  0E40               	movlw	64
  1056  002A5E  6E04               	movwf	___ftge@ff2,c
  1057  002A60  0E35               	movlw	53
  1058  002A62  6E05               	movwf	___ftge@ff2+1,c
  1059  002A64  0E45               	movlw	69
  1060  002A66  6E06               	movwf	___ftge@ff2+2,c
  1061  002A68  ECB3  F015         	call	___ftge	;wreg free
  1062  002A6C  B0D8               	btfsc	status,0,c
  1063  002A6E  D004               	goto	l2476
  1064  002A70  908D               	bcf	3981,0,c	;volatile
  1065  002A72                     L1:
  1066  002A72  828D               	bsf	3981,1,c	;volatile
  1067  002A74  848D               	bsf	3981,2,c	;volatile
  1068  002A76  D02B               	goto	l126
  1069  002A78                     l2476:
  1070                           
  1071                           ;lab5.c: 124: else if(mv<3200) {LATEbits.LATE0=1; LATEbits.LATE1=1; LATEbits.LATE2=0;}
  1072  002A78  C00A  F001         	movff	set_D3@mv,___ftge@ff1
  1073  002A7C  C00B  F002         	movff	set_D3@mv+1,___ftge@ff1+1
  1074  002A80  C00C  F003         	movff	set_D3@mv+2,___ftge@ff1+2
  1075  002A84  0E00               	movlw	0
  1076  002A86  6E04               	movwf	___ftge@ff2,c
  1077  002A88  0E48               	movlw	72
  1078  002A8A  6E05               	movwf	___ftge@ff2+1,c
  1079  002A8C  0E45               	movlw	69
  1080  002A8E  6E06               	movwf	___ftge@ff2+2,c
  1081  002A90  ECB3  F015         	call	___ftge	;wreg free
  1082  002A94  B0D8               	btfsc	status,0,c
  1083  002A96  D003               	goto	l2480
  1084  002A98  808D               	bsf	3981,0,c	;volatile
  1085  002A9A  828D               	bsf	3981,1,c	;volatile
  1086  002A9C  D012               	goto	L2
  1087  002A9E                     l2480:
  1088                           
  1089                           ;lab5.c: 125: else if(mv<3600) {LATEbits.LATE0=1; LATEbits.LATE1=0;LATEbits.LATE2=0;}
  1090  002A9E  C00A  F001         	movff	set_D3@mv,___ftge@ff1
  1091  002AA2  C00B  F002         	movff	set_D3@mv+1,___ftge@ff1+1
  1092  002AA6  C00C  F003         	movff	set_D3@mv+2,___ftge@ff1+2
  1093  002AAA  0E00               	movlw	0
  1094  002AAC  6E04               	movwf	___ftge@ff2,c
  1095  002AAE  0E61               	movlw	97
  1096  002AB0  6E05               	movwf	___ftge@ff2+1,c
  1097  002AB2  0E45               	movlw	69
  1098  002AB4  6E06               	movwf	___ftge@ff2+2,c
  1099  002AB6  ECB3  F015         	call	___ftge	;wreg free
  1100  002ABA  B0D8               	btfsc	status,0,c
  1101  002ABC  D004               	goto	l124
  1102  002ABE  808D               	bsf	3981,0,c	;volatile
  1103  002AC0  D003               	goto	L3
  1104  002AC2                     L2:
  1105  002AC2  948D               	bcf	3981,2,c	;volatile
  1106  002AC4  D004               	goto	l126
  1107  002AC6                     l124:
  1108                           
  1109                           ;lab5.c: 126: else {LATEbits.LATE0=0;LATEbits.LATE1=0;LATEbits.LATE2=0;}
  1110  002AC6  908D               	bcf	3981,0,c	;volatile
  1111  002AC8                     L3:
  1112  002AC8  928D               	bcf	3981,1,c	;volatile
  1113  002ACA  D7FB               	goto	L2
  1114  002ACC  D000               	goto	l126
  1115  002ACE                     l126:
  1116  002ACE  0012               	return		;funcret
  1117  002AD0                     __end_of_set_D3:
  1118                           	opt stack 0
  1119                           tblptru	equ	0xFF8
  1120                           status	equ	0xFD8
  1121                           
  1122 ;; *************** function _set_D2 *****************
  1123 ;; Defined at:
  1124 ;;		line 105 in file "lab5.c"
  1125 ;; Parameters:    Size  Location     Type
  1126 ;;  t               2    0[COMRAM] int 
  1127 ;; Auto vars:     Size  Location     Type
  1128 ;;  c               1    3[COMRAM] unsigned char 
  1129 ;; Return value:  Size  Location     Type
  1130 ;;		None               void
  1131 ;; Registers used:
  1132 ;;		wreg, status,2, status,0
  1133 ;; Tracked objects:
  1134 ;;		On entry : 0/0
  1135 ;;		On exit  : 0/0
  1136 ;;		Unchanged: 0/0
  1137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1138 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1139 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1140 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1141 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1142 ;;Total ram usage:        4 bytes
  1143 ;; Hardware stack levels used:    1
  1144 ;; This function calls:
  1145 ;;		Nothing
  1146 ;; This function is called by:
  1147 ;;		_main
  1148 ;; This function uses a non-reentrant model
  1149 ;;
  1150                           
  1151                           	psect	text2
  1152  0026D0                     __ptext2:
  1153                           	opt stack 0
  1154  0026D0                     _set_D2:
  1155                           	opt stack 30
  1156                           
  1157                           ;lab5.c: 106: unsigned char c;
  1158                           ;lab5.c: 107: if(t<35) c=0b000;
  1159                           
  1160                           ;incstack = 0
  1161  0026D0  BE02               	btfsc	set_D2@t+1,7,c
  1162  0026D2  D006               	goto	l2434
  1163  0026D4  5002               	movf	set_D2@t+1,w,c
  1164  0026D6  E106               	bnz	l2436
  1165  0026D8  0E23               	movlw	35
  1166  0026DA  5C01               	subwf	set_D2@t,w,c
  1167  0026DC  B0D8               	btfsc	status,0,c
  1168  0026DE  D002               	goto	l2436
  1169  0026E0                     l2434:
  1170  0026E0  0E00               	movlw	0
  1171  0026E2  D03D               	goto	L10
  1172  0026E4                     l2436:
  1173                           
  1174                           ;lab5.c: 108: else if(t<=45) c=0b001;
  1175  0026E4  BE02               	btfsc	set_D2@t+1,7,c
  1176  0026E6  D006               	goto	l2438
  1177  0026E8  5002               	movf	set_D2@t+1,w,c
  1178  0026EA  E106               	bnz	l2440
  1179  0026EC  0E2E               	movlw	46
  1180  0026EE  5C01               	subwf	set_D2@t,w,c
  1181  0026F0  B0D8               	btfsc	status,0,c
  1182  0026F2  D002               	goto	l2440
  1183  0026F4                     l2438:
  1184  0026F4  0E01               	movlw	1
  1185  0026F6  D033               	goto	L10
  1186  0026F8                     l2440:
  1187                           
  1188                           ;lab5.c: 109: else if(t<=55) c=0b010;
  1189  0026F8  BE02               	btfsc	set_D2@t+1,7,c
  1190  0026FA  D006               	goto	l2442
  1191  0026FC  5002               	movf	set_D2@t+1,w,c
  1192  0026FE  E106               	bnz	l2444
  1193  002700  0E38               	movlw	56
  1194  002702  5C01               	subwf	set_D2@t,w,c
  1195  002704  B0D8               	btfsc	status,0,c
  1196  002706  D002               	goto	l2444
  1197  002708                     l2442:
  1198  002708  0E02               	movlw	2
  1199  00270A  D029               	goto	L10
  1200  00270C                     l2444:
  1201                           
  1202                           ;lab5.c: 110: else if(t<=65) c=0b011;
  1203  00270C  BE02               	btfsc	set_D2@t+1,7,c
  1204  00270E  D006               	goto	l2446
  1205  002710  5002               	movf	set_D2@t+1,w,c
  1206  002712  E106               	bnz	l2448
  1207  002714  0E42               	movlw	66
  1208  002716  5C01               	subwf	set_D2@t,w,c
  1209  002718  B0D8               	btfsc	status,0,c
  1210  00271A  D002               	goto	l2448
  1211  00271C                     l2446:
  1212  00271C  0E03               	movlw	3
  1213  00271E  D01F               	goto	L10
  1214  002720                     l2448:
  1215                           
  1216                           ;lab5.c: 111: else if(t<=75) c=0b100;
  1217  002720  BE02               	btfsc	set_D2@t+1,7,c
  1218  002722  D006               	goto	l2450
  1219  002724  5002               	movf	set_D2@t+1,w,c
  1220  002726  E106               	bnz	l2452
  1221  002728  0E4C               	movlw	76
  1222  00272A  5C01               	subwf	set_D2@t,w,c
  1223  00272C  B0D8               	btfsc	status,0,c
  1224  00272E  D002               	goto	l2452
  1225  002730                     l2450:
  1226  002730  0E04               	movlw	4
  1227  002732  D015               	goto	L10
  1228  002734                     l2452:
  1229                           
  1230                           ;lab5.c: 112: else if(t<=78) c=0b101;
  1231  002734  BE02               	btfsc	set_D2@t+1,7,c
  1232  002736  D006               	goto	l2454
  1233  002738  5002               	movf	set_D2@t+1,w,c
  1234  00273A  E106               	bnz	l2456
  1235  00273C  0E4F               	movlw	79
  1236  00273E  5C01               	subwf	set_D2@t,w,c
  1237  002740  B0D8               	btfsc	status,0,c
  1238  002742  D002               	goto	l2456
  1239  002744                     l2454:
  1240  002744  0E05               	movlw	5
  1241  002746  D00B               	goto	L10
  1242  002748                     l2456:
  1243                           
  1244                           ;lab5.c: 113: else if(t<=82) c=0b110;
  1245  002748  BE02               	btfsc	set_D2@t+1,7,c
  1246  00274A  D006               	goto	l2458
  1247  00274C  5002               	movf	set_D2@t+1,w,c
  1248  00274E  E106               	bnz	l2460
  1249  002750  0E53               	movlw	83
  1250  002752  5C01               	subwf	set_D2@t,w,c
  1251  002754  B0D8               	btfsc	status,0,c
  1252  002756  D002               	goto	l2460
  1253  002758                     l2458:
  1254  002758  0E06               	movlw	6
  1255  00275A  D001               	goto	L10
  1256  00275C                     l2460:
  1257                           
  1258                           ;lab5.c: 114: else c=0b111;
  1259  00275C  0E07               	movlw	7
  1260  00275E                     L10:
  1261  00275E  6E04               	movwf	set_D2@c,c
  1262  002760  D000               	goto	l2462
  1263  002762                     l2462:
  1264                           
  1265                           ;lab5.c: 115: LATCbits.LATC3 = c & 1;
  1266  002762  C004  F003         	movff	set_D2@c,??_set_D2
  1267  002766  0E01               	movlw	1
  1268  002768  1603               	andwf	??_set_D2,f,c
  1269  00276A  4603               	rlncf	??_set_D2,f,c
  1270  00276C  4603               	rlncf	??_set_D2,f,c
  1271  00276E  4603               	rlncf	??_set_D2,f,c
  1272  002770  508B               	movf	3979,w,c	;volatile
  1273  002772  1803               	xorwf	??_set_D2,w,c
  1274  002774  0BF7               	andlw	-9
  1275  002776  1803               	xorwf	??_set_D2,w,c
  1276  002778  6E8B               	movwf	3979,c	;volatile
  1277                           
  1278                           ;lab5.c: 116: LATCbits.LATC4 = (c>>1)&1;
  1279  00277A  C004  F003         	movff	set_D2@c,??_set_D2
  1280  00277E  90D8               	bcf	status,0,c
  1281  002780  3203               	rrcf	??_set_D2,f,c
  1282  002782  0E01               	movlw	1
  1283  002784  1603               	andwf	??_set_D2,f,c
  1284  002786  3A03               	swapf	??_set_D2,f,c
  1285  002788  508B               	movf	3979,w,c	;volatile
  1286  00278A  1803               	xorwf	??_set_D2,w,c
  1287  00278C  0BEF               	andlw	-17
  1288  00278E  1803               	xorwf	??_set_D2,w,c
  1289  002790  6E8B               	movwf	3979,c	;volatile
  1290                           
  1291                           ;lab5.c: 117: LATCbits.LATC5 = (c>>2)&1;
  1292  002792  C004  F003         	movff	set_D2@c,??_set_D2
  1293  002796  90D8               	bcf	status,0,c
  1294  002798  3203               	rrcf	??_set_D2,f,c
  1295  00279A  90D8               	bcf	status,0,c
  1296  00279C  3203               	rrcf	??_set_D2,f,c
  1297  00279E  0E01               	movlw	1
  1298  0027A0  1603               	andwf	??_set_D2,f,c
  1299  0027A2  3A03               	swapf	??_set_D2,f,c
  1300  0027A4  4603               	rlncf	??_set_D2,f,c
  1301  0027A6  508B               	movf	3979,w,c	;volatile
  1302  0027A8  1803               	xorwf	??_set_D2,w,c
  1303  0027AA  0BDF               	andlw	-33
  1304  0027AC  1803               	xorwf	??_set_D2,w,c
  1305  0027AE  6E8B               	movwf	3979,c	;volatile
  1306  0027B0  0012               	return		;funcret
  1307  0027B2                     __end_of_set_D2:
  1308                           	opt stack 0
  1309                           tblptru	equ	0xFF8
  1310                           status	equ	0xFD8
  1311                           
  1312 ;; *************** function _set_D1 *****************
  1313 ;; Defined at:
  1314 ;;		line 89 in file "lab5.c"
  1315 ;; Parameters:    Size  Location     Type
  1316 ;;  tempF           2   14[COMRAM] int 
  1317 ;; Auto vars:     Size  Location     Type
  1318 ;;  temp_map        8   17[COMRAM] const unsigned char [8]
  1319 ;;  idx             1   27[COMRAM] unsigned char 
  1320 ;; Return value:  Size  Location     Type
  1321 ;;		None               void
  1322 ;; Registers used:
  1323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1324 ;; Tracked objects:
  1325 ;;		On entry : 0/0
  1326 ;;		On exit  : 0/0
  1327 ;;		Unchanged: 0/0
  1328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1329 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1330 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1332 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1333 ;;Total ram usage:       14 bytes
  1334 ;; Hardware stack levels used:    1
  1335 ;; Hardware stack levels required when called:    1
  1336 ;; This function calls:
  1337 ;;		___awdiv
  1338 ;; This function is called by:
  1339 ;;		_main
  1340 ;; This function uses a non-reentrant model
  1341 ;;
  1342                           
  1343                           	psect	text3
  1344  002894                     __ptext3:
  1345                           	opt stack 0
  1346  002894                     _set_D1:
  1347                           	opt stack 29
  1348                           
  1349                           ;lab5.c: 90: const unsigned char temp_map[] = {
  1350                           ;lab5.c: 91: 0b000,
  1351                           ;lab5.c: 92: 0b100,
  1352                           ;lab5.c: 93: 0b010,
  1353                           ;lab5.c: 94: 0b110,
  1354                           ;lab5.c: 95: 0b001,
  1355                           ;lab5.c: 96: 0b101,
  1356                           ;lab5.c: 97: 0b011,
  1357                           ;lab5.c: 98: 0b111
  1358                           ;lab5.c: 99: };
  1359                           
  1360                           ;incstack = 0
  1361  002894  0E81               	movlw	low set_D1@F3293
  1362  002896  6EF6               	movwf	tblptrl,c
  1363  002898                     	if	1	;There is more than 1 active tblptr byte
  1364  002898  0E10               	movlw	high set_D1@F3293
  1365  00289A  6EF7               	movwf	tblptrh,c
  1366  00289C                     	endif
  1367  00289C                     	if	0	;There are less than 3 active tblptr bytes
  1368  00289C                     	endif
  1369  00289C  EE20  F012         	lfsr	2,set_D1@temp_map
  1370  0028A0  0E07               	movlw	7
  1371  0028A2                     u2480:
  1372  0028A2  0009               	tblrd		*+
  1373  0028A4  CFF5 FFDE          	movff	tablat,postinc2
  1374  0028A8  06E8               	decf	wreg,f,c
  1375  0028AA  E2FB               	bc	u2480
  1376                           
  1377                           ;lab5.c: 100: unsigned char idx = (tempF<70) ? tempF/10 : 7;
  1378  0028AC  BE10               	btfsc	set_D1@tempF+1,7,c
  1379  0028AE  D00B               	goto	l2422
  1380  0028B0  5010               	movf	set_D1@tempF+1,w,c
  1381  0028B2  E104               	bnz	u2490
  1382  0028B4  0E46               	movlw	70
  1383  0028B6  5C0F               	subwf	set_D1@tempF,w,c
  1384  0028B8  A0D8               	btfss	status,0,c
  1385  0028BA  D005               	goto	l2422
  1386  0028BC                     u2490:
  1387  0028BC  0E00               	movlw	0
  1388  0028BE  6E1B               	movwf	_set_D1$611+1,c
  1389  0028C0  0E07               	movlw	7
  1390  0028C2  6E1A               	movwf	_set_D1$611,c
  1391  0028C4  D00F               	goto	l2424
  1392  0028C6                     l2422:
  1393  0028C6  C00F  F007         	movff	set_D1@tempF,___awdiv@dividend
  1394  0028CA  C010  F008         	movff	set_D1@tempF+1,___awdiv@dividend+1
  1395  0028CE  0E00               	movlw	0
  1396  0028D0  6E0A               	movwf	___awdiv@divisor+1,c
  1397  0028D2  0E0A               	movlw	10
  1398  0028D4  6E09               	movwf	___awdiv@divisor,c
  1399  0028D6  EC68  F015         	call	___awdiv	;wreg free
  1400  0028DA  C007  F01A         	movff	?___awdiv,_set_D1$611
  1401  0028DE  C008  F01B         	movff	?___awdiv+1,_set_D1$611+1
  1402  0028E2  D000               	goto	l2424
  1403  0028E4                     l2424:
  1404  0028E4  C01A  F01C         	movff	_set_D1$611,set_D1@idx
  1405  0028E8  D000               	goto	l2426
  1406  0028EA                     l2426:
  1407  0028EA  501C               	movf	set_D1@idx,w,c
  1408  0028EC  0D01               	mullw	1
  1409  0028EE  0E12               	movlw	low set_D1@temp_map
  1410  0028F0  24F3               	addwf	prodl,w,c
  1411  0028F2  6ED9               	movwf	fsr2l,c
  1412  0028F4  0E00               	movlw	high set_D1@temp_map
  1413  0028F6  20F4               	addwfc	prodh,w,c
  1414  0028F8  6EDA               	movwf	fsr2h,c
  1415  0028FA  50DF               	movf	indf2,w,c
  1416  0028FC  6E11               	movwf	??_set_D1& (0+255),c
  1417  0028FE  90D8               	bcf	status,0,c
  1418  002900  3211               	rrcf	??_set_D1,f,c
  1419  002902  90D8               	bcf	status,0,c
  1420  002904  3211               	rrcf	??_set_D1,f,c
  1421  002906  0E01               	movlw	1
  1422  002908  1611               	andwf	??_set_D1,f,c
  1423  00290A  5082               	movf	3970,w,c	;volatile
  1424  00290C  1811               	xorwf	??_set_D1,w,c
  1425  00290E  0BFE               	andlw	-2
  1426  002910  1811               	xorwf	??_set_D1,w,c
  1427  002912  6E82               	movwf	3970,c	;volatile
  1428  002914  501C               	movf	set_D1@idx,w,c
  1429  002916  0D01               	mullw	1
  1430  002918  0E12               	movlw	low set_D1@temp_map
  1431  00291A  24F3               	addwf	prodl,w,c
  1432  00291C  6ED9               	movwf	fsr2l,c
  1433  00291E  0E00               	movlw	high set_D1@temp_map
  1434  002920  20F4               	addwfc	prodh,w,c
  1435  002922  6EDA               	movwf	fsr2h,c
  1436  002924  50DF               	movf	indf2,w,c
  1437  002926  6E11               	movwf	??_set_D1& (0+255),c
  1438  002928  90D8               	bcf	status,0,c
  1439  00292A  3211               	rrcf	??_set_D1,f,c
  1440  00292C  0E01               	movlw	1
  1441  00292E  1611               	andwf	??_set_D1,f,c
  1442  002930  4611               	rlncf	??_set_D1,f,c
  1443  002932  5082               	movf	3970,w,c	;volatile
  1444  002934  1811               	xorwf	??_set_D1,w,c
  1445  002936  0BFD               	andlw	-3
  1446  002938  1811               	xorwf	??_set_D1,w,c
  1447  00293A  6E82               	movwf	3970,c	;volatile
  1448  00293C  501C               	movf	set_D1@idx,w,c
  1449  00293E  0D01               	mullw	1
  1450  002940  0E12               	movlw	low set_D1@temp_map
  1451  002942  24F3               	addwf	prodl,w,c
  1452  002944  6ED9               	movwf	fsr2l,c
  1453  002946  0E00               	movlw	high set_D1@temp_map
  1454  002948  20F4               	addwfc	prodh,w,c
  1455  00294A  6EDA               	movwf	fsr2h,c
  1456  00294C  50DF               	movf	indf2,w,c
  1457  00294E  6E11               	movwf	??_set_D1& (0+255),c
  1458  002950  0E01               	movlw	1
  1459  002952  1611               	andwf	??_set_D1,f,c
  1460  002954  4611               	rlncf	??_set_D1,f,c
  1461  002956  4611               	rlncf	??_set_D1,f,c
  1462  002958  5082               	movf	3970,w,c	;volatile
  1463  00295A  1811               	xorwf	??_set_D1,w,c
  1464  00295C  0BFB               	andlw	-5
  1465  00295E  1811               	xorwf	??_set_D1,w,c
  1466  002960  6E82               	movwf	3970,c	;volatile
  1467  002962  D000               	goto	l98
  1468  002964                     l98:
  1469  002964  0012               	return		;funcret
  1470  002966                     __end_of_set_D1:
  1471                           	opt stack 0
  1472                           tblptru	equ	0xFF8
  1473                           tblptrh	equ	0xFF7
  1474                           tblptrl	equ	0xFF6
  1475                           tablat	equ	0xFF5
  1476                           prodh	equ	0xFF4
  1477                           prodl	equ	0xFF3
  1478                           wreg	equ	0xFE8
  1479                           indf2	equ	0xFDF
  1480                           postinc2	equ	0xFDE
  1481                           fsr2h	equ	0xFDA
  1482                           fsr2l	equ	0xFD9
  1483                           status	equ	0xFD8
  1484                           
  1485 ;; *************** function _printf *****************
  1486 ;; Defined at:
  1487 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  1488 ;; Parameters:    Size  Location     Type
  1489 ;;  f               2   63[COMRAM] PTR const unsigned char 
  1490 ;;		 -> STR_1(38), 
  1491 ;; Auto vars:     Size  Location     Type
  1492 ;;  val             4   92[COMRAM] unsigned long 
  1493 ;;  tmpval          4   88[COMRAM] struct .
  1494 ;;  fval            3   98[COMRAM] struct .
  1495 ;;  cp              3    0        PTR const unsigned char 
  1496 ;;  prec            2   96[COMRAM] int 
  1497 ;;  exp             2   86[COMRAM] int 
  1498 ;;  flag            2   84[COMRAM] unsigned short 
  1499 ;;  ap              2   82[COMRAM] PTR void [1]
  1500 ;;		 -> ?_printf(2), 
  1501 ;;  len             2    0        unsigned int 
  1502 ;;  width           2    0        int 
  1503 ;;  c               1  101[COMRAM] char 
  1504 ;;  d               1    0        unsigned char 
  1505 ;; Return value:  Size  Location     Type
  1506 ;;                  2   63[COMRAM] int 
  1507 ;; Registers used:
  1508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1509 ;; Tracked objects:
  1510 ;;		On entry : 0/0
  1511 ;;		On exit  : 0/0
  1512 ;;		Unchanged: 0/0
  1513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1514 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1515 ;;      Locals:        23       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1516 ;;      Temps:          6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1517 ;;      Totals:        39       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1518 ;;Total ram usage:       39 bytes
  1519 ;; Hardware stack levels used:    1
  1520 ;; Hardware stack levels required when called:    3
  1521 ;; This function calls:
  1522 ;;		___awdiv
  1523 ;;		___ftadd
  1524 ;;		___ftge
  1525 ;;		___ftmul
  1526 ;;		___ftneg
  1527 ;;		___ftsub
  1528 ;;		___fttol
  1529 ;;		___lldiv
  1530 ;;		___llmod
  1531 ;;		___lltoft
  1532 ;;		___wmul
  1533 ;;		__div_to_l_
  1534 ;;		__tdiv_to_l_
  1535 ;;		_fround
  1536 ;;		_isdigit
  1537 ;;		_putch
  1538 ;;		_scale
  1539 ;; This function is called by:
  1540 ;;		_main
  1541 ;; This function uses a non-reentrant model
  1542 ;;
  1543                           
  1544                           	psect	text4
  1545  0010B0                     __ptext4:
  1546                           	opt stack 0
  1547  0010B0                     _printf:
  1548                           	opt stack 27
  1549                           
  1550                           ;doprnt.c: 466: va_list ap;
  1551                           ;doprnt.c: 499: signed char c;
  1552                           ;doprnt.c: 501: int width;
  1553                           ;doprnt.c: 504: int prec;
  1554                           ;doprnt.c: 508: unsigned short flag;
  1555                           ;doprnt.c: 515: char d;
  1556                           ;doprnt.c: 516: double fval;
  1557                           ;doprnt.c: 517: int exp;
  1558                           ;doprnt.c: 523: union {
  1559                           ;doprnt.c: 524: unsigned long vd;
  1560                           ;doprnt.c: 525: double integ;
  1561                           ;doprnt.c: 526: } tmpval;
  1562                           ;doprnt.c: 528: unsigned long val;
  1563                           ;doprnt.c: 529: unsigned len;
  1564                           ;doprnt.c: 530: const char * cp;
  1565                           ;doprnt.c: 533: *ap = __va_start();
  1566                           
  1567                           ;incstack = 0
  1568  0010B0  0E42               	movlw	low (?_printf+2)
  1569  0010B2  6E53               	movwf	printf@ap,c
  1570  0010B4  0E00               	movlw	high (?_printf+2)
  1571  0010B6  6E54               	movwf	printf@ap+1,c
  1572                           
  1573                           ;doprnt.c: 536: while(c = *f++) {
  1574  0010B8  D3FA               	goto	l2696
  1575  0010BA                     l2486:
  1576                           
  1577                           ;doprnt.c: 538: if(c != '%')
  1578  0010BA  0E25               	movlw	37
  1579  0010BC  1866               	xorwf	printf@c,w,c
  1580  0010BE  B4D8               	btfsc	status,2,c
  1581  0010C0  D004               	goto	l2490
  1582                           
  1583                           ;doprnt.c: 540: {
  1584                           ;doprnt.c: 541: (putch(c) );
  1585  0010C2  5066               	movf	printf@c,w,c
  1586  0010C4  ECB5  F017         	call	_putch
  1587                           
  1588                           ;doprnt.c: 542: continue;
  1589  0010C8  D3F2               	goto	l2696
  1590  0010CA                     l2490:
  1591                           
  1592                           ;doprnt.c: 543: }
  1593                           ;doprnt.c: 548: flag = 0;
  1594  0010CA  0E00               	movlw	0
  1595  0010CC  6E56               	movwf	printf@flag+1,c
  1596  0010CE  0E00               	movlw	0
  1597  0010D0  6E55               	movwf	printf@flag,c
  1598                           
  1599                           ;doprnt.c: 611: if(*f == '.') {
  1600  0010D2  C040  FFF6         	movff	printf@f,tblptrl
  1601  0010D6  C041  FFF7         	movff	printf@f+1,tblptrh
  1602  0010DA                     	if	0	;tblptru may be non-zero
  1603  0010DA                     	endif
  1604  0010DA                     	if	0	;tblptru may be non-zero
  1605  0010DA                     	endif
  1606  0010DA  0008               	tblrd		*
  1607  0010DC  50F5               	movf	tablat,w,c
  1608  0010DE  0A2E               	xorlw	46
  1609  0010E0  A4D8               	btfss	status,2,c
  1610  0010E2  D030               	goto	l2504
  1611                           
  1612                           ;doprnt.c: 612: flag |= 0x4000;
  1613  0010E4  8C56               	bsf	printf@flag+1,6,c
  1614                           
  1615                           ;doprnt.c: 613: f++;
  1616  0010E6  4A40               	infsnz	printf@f,f,c
  1617  0010E8  2A41               	incf	printf@f+1,f,c
  1618                           
  1619                           ;doprnt.c: 620: {
  1620                           ;doprnt.c: 621: prec = 0;
  1621  0010EA  0E00               	movlw	0
  1622  0010EC  6E62               	movwf	printf@prec+1,c
  1623  0010EE  0E00               	movlw	0
  1624  0010F0  6E61               	movwf	printf@prec,c
  1625                           
  1626                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1627  0010F2  D01C               	goto	l2502
  1628  0010F4                     l2498:
  1629                           
  1630                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1631  0010F4  C061  F00F         	movff	printf@prec,___wmul@multiplier
  1632  0010F8  C062  F010         	movff	printf@prec+1,___wmul@multiplier+1
  1633  0010FC  0E00               	movlw	0
  1634  0010FE  6E12               	movwf	___wmul@multiplicand+1,c
  1635  001100  0E0A               	movlw	10
  1636  001102  6E11               	movwf	___wmul@multiplicand,c
  1637  001104  EC2D  F017         	call	___wmul	;wreg free
  1638  001108  C040  FFF6         	movff	printf@f,tblptrl
  1639  00110C  C041  FFF7         	movff	printf@f+1,tblptrh
  1640  001110                     	if	0	;tblptru may be non-zero
  1641  001110                     	endif
  1642  001110                     	if	0	;tblptru may be non-zero
  1643  001110                     	endif
  1644  001110  0008               	tblrd		*
  1645  001112  50F5               	movf	tablat,w,c
  1646  001114  260F               	addwf	?___wmul,f,c
  1647  001116  0E00               	movlw	0
  1648  001118  2210               	addwfc	?___wmul+1,f,c
  1649  00111A  0ED0               	movlw	208
  1650  00111C  240F               	addwf	?___wmul,w,c
  1651  00111E  6E61               	movwf	printf@prec,c
  1652  001120  0EFF               	movlw	255
  1653  001122  2010               	addwfc	?___wmul+1,w,c
  1654  001124  6E62               	movwf	printf@prec+1,c
  1655  001126  4A40               	infsnz	printf@f,f,c
  1656  001128  2A41               	incf	printf@f+1,f,c
  1657  00112A  D000               	goto	l2502
  1658  00112C                     l2502:
  1659  00112C  C040  FFF6         	movff	printf@f,tblptrl
  1660  001130  C041  FFF7         	movff	printf@f+1,tblptrh
  1661  001134                     	if	0	;tblptru may be non-zero
  1662  001134                     	endif
  1663  001134                     	if	0	;tblptru may be non-zero
  1664  001134                     	endif
  1665  001134  0008               	tblrd		*
  1666  001136  50F5               	movf	tablat,w,c
  1667  001138  EC66  F017         	call	_isdigit
  1668  00113C  A0D8               	btfss	status,0,c
  1669  00113E  D00D               	goto	l2512
  1670  001140  D7D9               	goto	l2498
  1671                           
  1672                           ;doprnt.c: 624: }
  1673                           ;doprnt.c: 625: } else {
  1674  001142  D00B               	goto	l2512
  1675  001144                     l2504:
  1676                           
  1677                           ;doprnt.c: 626: prec = 0;
  1678  001144  0E00               	movlw	0
  1679  001146  6E62               	movwf	printf@prec+1,c
  1680  001148  0E00               	movlw	0
  1681  00114A  6E61               	movwf	printf@prec,c
  1682                           
  1683                           ;doprnt.c: 628: flag |= 0x1000;
  1684  00114C  8856               	bsf	printf@flag+1,4,c
  1685                           
  1686                           ;doprnt.c: 630: }
  1687                           ;doprnt.c: 635: switch(c = *f++) {
  1688  00114E  D005               	goto	l2512
  1689                           
  1690                           ;doprnt.c: 638: goto alldone;
  1691                           
  1692                           ;doprnt.c: 637: case 0:
  1693  001150  D3BD               	goto	l237
  1694  001152                     l2508:
  1695                           
  1696                           ;doprnt.c: 663: flag |= 0x400;
  1697  001152  8456               	bsf	printf@flag+1,2,c
  1698                           
  1699                           ;doprnt.c: 698: case 'i':
  1700                           ;doprnt.c: 699: break;
  1701                           
  1702                           ;doprnt.c: 697: case 'd':
  1703                           
  1704                           ;doprnt.c: 664: break;
  1705  001154  D018               	goto	l2514
  1706                           
  1707                           ;doprnt.c: 813: continue;
  1708                           
  1709                           ;doprnt.c: 802: default:
  1710  001156  D3AB               	goto	l2696
  1711                           
  1712                           ;doprnt.c: 822: }
  1713  001158  D016               	goto	l2514
  1714  00115A                     l2512:
  1715  00115A  C040  FFF6         	movff	printf@f,tblptrl
  1716  00115E  C041  FFF7         	movff	printf@f+1,tblptrh
  1717  001162  4A40               	infsnz	printf@f,f,c
  1718  001164  2A41               	incf	printf@f+1,f,c
  1719  001166                     	if	0	;tblptru may be non-zero
  1720  001166                     	endif
  1721  001166                     	if	0	;tblptru may be non-zero
  1722  001166                     	endif
  1723  001166  0008               	tblrd		*
  1724  001168  CFF5 F066          	movff	tablat,printf@c
  1725  00116C  5066               	movf	printf@c,w,c
  1726                           
  1727                           ; Switch size 1, requested type "space"
  1728                           ; Number of cases is 4, Range of values is 0 to 105
  1729                           ; switch strategies available:
  1730                           ; Name         Instructions Cycles
  1731                           ; simple_byte           13     7 (average)
  1732                           ;	Chosen strategy is simple_byte
  1733  00116E  0A00               	xorlw	0	; case 0
  1734  001170  B4D8               	btfsc	status,2,c
  1735  001172  D3AC               	goto	l237
  1736  001174  0A64               	xorlw	100	; case 100
  1737  001176  B4D8               	btfsc	status,2,c
  1738  001178  D006               	goto	l2514
  1739  00117A  0A02               	xorlw	2	; case 102
  1740  00117C  B4D8               	btfsc	status,2,c
  1741  00117E  D7E9               	goto	l2508
  1742  001180  0A0F               	xorlw	15	; case 105
  1743  001182  A4D8               	btfss	status,2,c
  1744  001184  D394               	goto	l2696
  1745  001186                     l2514:
  1746                           
  1747                           ;doprnt.c: 825: if(flag & (0x700)) {
  1748  001186  0E07               	movlw	7
  1749  001188  1456               	andwf	printf@flag+1,w,c
  1750  00118A  B4D8               	btfsc	status,2,c
  1751  00118C  D2CD               	goto	l2648
  1752                           
  1753                           ;doprnt.c: 827: if(flag & 0x1000)
  1754  00118E  A856               	btfss	printf@flag+1,4,c
  1755  001190  D005               	goto	l2520
  1756                           
  1757                           ;doprnt.c: 829: prec = 6;
  1758  001192  0E00               	movlw	0
  1759  001194  6E62               	movwf	printf@prec+1,c
  1760  001196  0E06               	movlw	6
  1761  001198  6E61               	movwf	printf@prec,c
  1762  00119A  D000               	goto	l2520
  1763  00119C                     l2520:
  1764                           
  1765                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1766  00119C  C053  FFD9         	movff	printf@ap,fsr2l
  1767  0011A0  C054  FFDA         	movff	printf@ap+1,fsr2h
  1768  0011A4  CFDE F063          	movff	postinc2,printf@fval
  1769  0011A8  CFDE F064          	movff	postinc2,printf@fval+1
  1770  0011AC  CFDD F065          	movff	postdec2,printf@fval+2
  1771  0011B0  0E03               	movlw	3
  1772  0011B2  2653               	addwf	printf@ap,f,c
  1773  0011B4  0E00               	movlw	0
  1774  0011B6  2254               	addwfc	printf@ap+1,f,c
  1775                           
  1776                           ;doprnt.c: 831: if(fval < 0.0) {
  1777  0011B8  AE65               	btfss	printf@fval+2,7,c
  1778  0011BA  D011               	goto	l2530
  1779                           
  1780                           ;doprnt.c: 832: fval = -fval;
  1781  0011BC  C063  F001         	movff	printf@fval,___ftneg@f1
  1782  0011C0  C064  F002         	movff	printf@fval+1,___ftneg@f1+1
  1783  0011C4  C065  F003         	movff	printf@fval+2,___ftneg@f1+2
  1784  0011C8  EC54  F017         	call	___ftneg	;wreg free
  1785  0011CC  C001  F063         	movff	?___ftneg,printf@fval
  1786  0011D0  C002  F064         	movff	?___ftneg+1,printf@fval+1
  1787  0011D4  C003  F065         	movff	?___ftneg+2,printf@fval+2
  1788                           
  1789                           ;doprnt.c: 833: flag |= 0x03;
  1790  0011D8  0E03               	movlw	3
  1791  0011DA  1255               	iorwf	printf@flag,f,c
  1792  0011DC  D000               	goto	l2530
  1793  0011DE                     l2530:
  1794                           
  1795                           ;doprnt.c: 834: }
  1796                           ;doprnt.c: 835: exp = 0;
  1797  0011DE  0E00               	movlw	0
  1798  0011E0  6E58               	movwf	printf@exp+1,c
  1799  0011E2  0E00               	movlw	0
  1800  0011E4  6E57               	movwf	printf@exp,c
  1801                           
  1802                           ;doprnt.c: 836: if( fval!=0) {
  1803  0011E6  5063               	movf	printf@fval,w,c
  1804  0011E8  1064               	iorwf	printf@fval+1,w,c
  1805  0011EA  1065               	iorwf	printf@fval+2,w,c
  1806  0011EC  B4D8               	btfsc	status,2,c
  1807  0011EE  D085               	goto	l2558
  1808                           
  1809                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1810  0011F0  0E82               	movlw	130
  1811  0011F2  6E4A               	movwf	??_printf& (0+255),c
  1812  0011F4  0EFF               	movlw	255
  1813  0011F6  6E4B               	movwf	(??_printf+1)& (0+255),c
  1814  0011F8  C063  F04C         	movff	printf@fval,??_printf+2
  1815  0011FC  C064  F04D         	movff	printf@fval+1,??_printf+3
  1816  001200  C065  F04E         	movff	printf@fval+2,??_printf+4
  1817  001204  C066  F04F         	movff	printf@fval+3,??_printf+5
  1818  001208  0E10               	movlw	16
  1819  00120A  D005               	goto	u2680
  1820  00120C                     u2685:
  1821  00120C  90D8               	bcf	status,0,c
  1822  00120E  324F               	rrcf	??_printf+5,f,c
  1823  001210  324E               	rrcf	??_printf+4,f,c
  1824  001212  324D               	rrcf	??_printf+3,f,c
  1825  001214  324C               	rrcf	??_printf+2,f,c
  1826  001216                     u2680:
  1827  001216  2EE8               	decfsz	wreg,f,c
  1828  001218  D7F9               	goto	u2685
  1829  00121A  504C               	movf	??_printf+2,w,c
  1830  00121C  244A               	addwf	??_printf,w,c
  1831  00121E  6E57               	movwf	printf@exp,c
  1832  001220  0E00               	movlw	0
  1833  001222  204B               	addwfc	??_printf+1,w,c
  1834  001224  6E58               	movwf	printf@exp+1,c
  1835                           
  1836                           ;doprnt.c: 838: exp--;
  1837  001226  0657               	decf	printf@exp,f,c
  1838  001228  A0D8               	btfss	status,0,c
  1839  00122A  0658               	decf	printf@exp+1,f,c
  1840                           
  1841                           ;doprnt.c: 839: exp *= 3;
  1842  00122C  C057  F00F         	movff	printf@exp,___wmul@multiplier
  1843  001230  C058  F010         	movff	printf@exp+1,___wmul@multiplier+1
  1844  001234  0E00               	movlw	0
  1845  001236  6E12               	movwf	___wmul@multiplicand+1,c
  1846  001238  0E03               	movlw	3
  1847  00123A  6E11               	movwf	___wmul@multiplicand,c
  1848  00123C  EC2D  F017         	call	___wmul	;wreg free
  1849  001240  C00F  F057         	movff	?___wmul,printf@exp
  1850  001244  C010  F058         	movff	?___wmul+1,printf@exp+1
  1851                           
  1852                           ;doprnt.c: 840: exp /= 10;
  1853  001248  C057  F007         	movff	printf@exp,___awdiv@dividend
  1854  00124C  C058  F008         	movff	printf@exp+1,___awdiv@dividend+1
  1855  001250  0E00               	movlw	0
  1856  001252  6E0A               	movwf	___awdiv@divisor+1,c
  1857  001254  0E0A               	movlw	10
  1858  001256  6E09               	movwf	___awdiv@divisor,c
  1859  001258  EC68  F015         	call	___awdiv	;wreg free
  1860  00125C  C007  F057         	movff	?___awdiv,printf@exp
  1861  001260  C008  F058         	movff	?___awdiv+1,printf@exp+1
  1862                           
  1863                           ;doprnt.c: 841: if(exp < 0)
  1864  001264  AE58               	btfss	printf@exp+1,7,c
  1865  001266  D004               	goto	l2546
  1866                           
  1867                           ;doprnt.c: 842: exp--;
  1868  001268  0657               	decf	printf@exp,f,c
  1869  00126A  A0D8               	btfss	status,0,c
  1870  00126C  0658               	decf	printf@exp+1,f,c
  1871  00126E  D000               	goto	l2546
  1872  001270                     l2546:
  1873                           
  1874                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1875  001270  5057               	movf	printf@exp,w,c
  1876  001272  0800               	sublw	0
  1877  001274  EC67  F00C         	call	_scale
  1878  001278  C024  F059         	movff	?_scale,printf@tmpval
  1879  00127C  C025  F05A         	movff	?_scale+1,printf@tmpval+1
  1880  001280  C026  F05B         	movff	?_scale+2,printf@tmpval+2
  1881                           
  1882                           ;doprnt.c: 847: tmpval.integ *= fval;
  1883  001284  C059  F015         	movff	printf@tmpval,___ftmul@f1
  1884  001288  C05A  F016         	movff	printf@tmpval+1,___ftmul@f1+1
  1885  00128C  C05B  F017         	movff	printf@tmpval+2,___ftmul@f1+2
  1886  001290  C063  F018         	movff	printf@fval,___ftmul@f2
  1887  001294  C064  F019         	movff	printf@fval+1,___ftmul@f2+1
  1888  001298  C065  F01A         	movff	printf@fval+2,___ftmul@f2+2
  1889  00129C  EC79  F012         	call	___ftmul	;wreg free
  1890  0012A0  C015  F059         	movff	?___ftmul,printf@tmpval
  1891  0012A4  C016  F05A         	movff	?___ftmul+1,printf@tmpval+1
  1892  0012A8  C017  F05B         	movff	?___ftmul+2,printf@tmpval+2
  1893                           
  1894                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1895  0012AC  C059  F001         	movff	printf@tmpval,___ftge@ff1
  1896  0012B0  C05A  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1897  0012B4  C05B  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1898  0012B8  0E00               	movlw	0
  1899  0012BA  6E04               	movwf	___ftge@ff2,c
  1900  0012BC  0E80               	movlw	128
  1901  0012BE  6E05               	movwf	___ftge@ff2+1,c
  1902  0012C0  0E3F               	movlw	63
  1903  0012C2  6E06               	movwf	___ftge@ff2+2,c
  1904  0012C4  ECB3  F015         	call	___ftge	;wreg free
  1905  0012C8  B0D8               	btfsc	status,0,c
  1906  0012CA  D004               	goto	l2554
  1907                           
  1908                           ;doprnt.c: 849: exp--;
  1909  0012CC  0657               	decf	printf@exp,f,c
  1910  0012CE  A0D8               	btfss	status,0,c
  1911  0012D0  0658               	decf	printf@exp+1,f,c
  1912  0012D2  D013               	goto	l2558
  1913  0012D4                     l2554:
  1914                           
  1915                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1916  0012D4  C059  F001         	movff	printf@tmpval,___ftge@ff1
  1917  0012D8  C05A  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  1918  0012DC  C05B  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  1919  0012E0  0E00               	movlw	0
  1920  0012E2  6E04               	movwf	___ftge@ff2,c
  1921  0012E4  0E20               	movlw	32
  1922  0012E6  6E05               	movwf	___ftge@ff2+1,c
  1923  0012E8  0E41               	movlw	65
  1924  0012EA  6E06               	movwf	___ftge@ff2+2,c
  1925  0012EC  ECB3  F015         	call	___ftge	;wreg free
  1926  0012F0  A0D8               	btfss	status,0,c
  1927  0012F2  D003               	goto	l2558
  1928                           
  1929                           ;doprnt.c: 851: exp++;
  1930  0012F4  4A57               	infsnz	printf@exp,f,c
  1931  0012F6  2A58               	incf	printf@exp+1,f,c
  1932  0012F8  D000               	goto	l2558
  1933  0012FA                     l2558:
  1934                           
  1935                           ;doprnt.c: 852: }
  1936                           ;doprnt.c: 1112: if(prec <= 12)
  1937  0012FA  BE62               	btfsc	printf@prec+1,7,c
  1938  0012FC  D006               	goto	l2560
  1939  0012FE  5062               	movf	printf@prec+1,w,c
  1940  001300  E11C               	bnz	l2562
  1941  001302  0E0D               	movlw	13
  1942  001304  5C61               	subwf	printf@prec,w,c
  1943  001306  B0D8               	btfsc	status,0,c
  1944  001308  D018               	goto	l2562
  1945  00130A                     l2560:
  1946                           
  1947                           ;doprnt.c: 1113: fval += fround(prec);
  1948  00130A  C063  F02E         	movff	printf@fval,___ftadd@f1
  1949  00130E  C064  F02F         	movff	printf@fval+1,___ftadd@f1+1
  1950  001312  C065  F030         	movff	printf@fval+2,___ftadd@f1+2
  1951  001316  5061               	movf	printf@prec,w,c
  1952  001318  EC57  F00E         	call	_fround
  1953  00131C  C024  F031         	movff	?_fround,___ftadd@f2
  1954  001320  C025  F032         	movff	?_fround+1,___ftadd@f2+1
  1955  001324  C026  F033         	movff	?_fround+2,___ftadd@f2+2
  1956  001328  EC8A  F010         	call	___ftadd	;wreg free
  1957  00132C  C02E  F063         	movff	?___ftadd,printf@fval
  1958  001330  C02F  F064         	movff	?___ftadd+1,printf@fval+1
  1959  001334  C030  F065         	movff	?___ftadd+2,printf@fval+2
  1960  001338  D000               	goto	l2562
  1961  00133A                     l2562:
  1962                           
  1963                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1964  00133A  BE58               	btfsc	printf@exp+1,7,c
  1965  00133C  D006               	goto	l2564
  1966  00133E  5058               	movf	printf@exp+1,w,c
  1967  001340  E120               	bnz	l2570
  1968  001342  0E0A               	movlw	10
  1969  001344  5C57               	subwf	printf@exp,w,c
  1970  001346  B0D8               	btfsc	status,0,c
  1971  001348  D01C               	goto	l2570
  1972  00134A                     l2564:
  1973  00134A  5063               	movf	printf@fval,w,c
  1974  00134C  1064               	iorwf	printf@fval+1,w,c
  1975  00134E  1065               	iorwf	printf@fval+2,w,c
  1976  001350  B4D8               	btfsc	status,2,c
  1977  001352  D06D               	goto	l2584
  1978  001354  C063  F02B         	movff	printf@fval,___fttol@f1
  1979  001358  C064  F02C         	movff	printf@fval+1,___fttol@f1+1
  1980  00135C  C065  F02D         	movff	printf@fval+2,___fttol@f1+2
  1981  001360  ECF5  F012         	call	___fttol	;wreg free
  1982  001364  502B               	movf	?___fttol,w,c
  1983  001366  102C               	iorwf	?___fttol+1,w,c
  1984  001368  102D               	iorwf	?___fttol+2,w,c
  1985  00136A  102E               	iorwf	?___fttol+3,w,c
  1986  00136C  B4D8               	btfsc	status,2,c
  1987  00136E  BE58               	btfsc	printf@exp+1,7,c
  1988  001370  D05E               	goto	l2584
  1989  001372  5058               	movf	printf@exp+1,w,c
  1990  001374  E106               	bnz	l2570
  1991  001376  0E02               	movlw	2
  1992  001378  5C57               	subwf	printf@exp,w,c
  1993  00137A  B0D8               	btfsc	status,0,c
  1994  00137C  D002               	goto	l2570
  1995  00137E  D057               	goto	l2584
  1996  001380  D000               	goto	l2570
  1997  001382                     l2570:
  1998                           
  1999                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  2000  001382  C059  F001         	movff	printf@tmpval,___ftge@ff1
  2001  001386  C05A  F002         	movff	printf@tmpval+1,___ftge@ff1+1
  2002  00138A  C05B  F003         	movff	printf@tmpval+2,___ftge@ff1+2
  2003  00138E  0E70               	movlw	112
  2004  001390  6E04               	movwf	___ftge@ff2,c
  2005  001392  0E89               	movlw	137
  2006  001394  6E05               	movwf	___ftge@ff2+1,c
  2007  001396  0E40               	movlw	64
  2008  001398  6E06               	movwf	___ftge@ff2+2,c
  2009  00139A  ECB3  F015         	call	___ftge	;wreg free
  2010  00139E  B0D8               	btfsc	status,0,c
  2011  0013A0  D002               	goto	l2574
  2012                           
  2013                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  2014  0013A2  0EF7               	movlw	247
  2015  0013A4  D001               	goto	L11
  2016  0013A6                     l2574:
  2017                           
  2018                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  2019  0013A6  0EF8               	movlw	248
  2020  0013A8                     L11:
  2021  0013A8  2657               	addwf	printf@exp,f,c
  2022  0013AA  0EFF               	movlw	255
  2023  0013AC  2258               	addwfc	printf@exp+1,f,c
  2024  0013AE  D000               	goto	l2576
  2025  0013B0                     l2576:
  2026                           
  2027                           ;doprnt.c: 1124: }
  2028                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  2029  0013B0  5057               	movf	printf@exp,w,c
  2030  0013B2  EC67  F00C         	call	_scale
  2031  0013B6  C024  F059         	movff	?_scale,printf@tmpval
  2032  0013BA  C025  F05A         	movff	?_scale+1,printf@tmpval+1
  2033  0013BE  C026  F05B         	movff	?_scale+2,printf@tmpval+2
  2034                           
  2035                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  2036  0013C2  D017               	goto	l2580
  2037  0013C4  C063  F001         	movff	printf@fval,__div_to_l_@f1
  2038  0013C8  C064  F002         	movff	printf@fval+1,__div_to_l_@f1+1
  2039  0013CC  C065  F003         	movff	printf@fval+2,__div_to_l_@f1+2
  2040  0013D0  C059  F004         	movff	printf@tmpval,__div_to_l_@f2
  2041  0013D4  C05A  F005         	movff	printf@tmpval+1,__div_to_l_@f2+1
  2042  0013D8  C05B  F006         	movff	printf@tmpval+2,__div_to_l_@f2+2
  2043  0013DC  ECF4  F011         	call	__div_to_l_	;wreg free
  2044  0013E0  C001  F05D         	movff	?__div_to_l_,printf@val
  2045  0013E4  C002  F05E         	movff	?__div_to_l_+1,printf@val+1
  2046  0013E8  C003  F05F         	movff	?__div_to_l_+2,printf@val+2
  2047  0013EC  C004  F060         	movff	?__div_to_l_+3,printf@val+3
  2048  0013F0  D017               	goto	l2582
  2049  0013F2                     l2580:
  2050  0013F2  C063  F001         	movff	printf@fval,__tdiv_to_l_@f1
  2051  0013F6  C064  F002         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  2052  0013FA  C065  F003         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  2053  0013FE  C059  F004         	movff	printf@tmpval,__tdiv_to_l_@f2
  2054  001402  C05A  F005         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  2055  001406  C05B  F006         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  2056  00140A  EC6C  F011         	call	__tdiv_to_l_	;wreg free
  2057  00140E  C001  F05D         	movff	?__tdiv_to_l_,printf@val
  2058  001412  C002  F05E         	movff	?__tdiv_to_l_+1,printf@val+1
  2059  001416  C003  F05F         	movff	?__tdiv_to_l_+2,printf@val+2
  2060  00141A  C004  F060         	movff	?__tdiv_to_l_+3,printf@val+3
  2061  00141E  D000               	goto	l2582
  2062  001420                     l2582:
  2063                           
  2064                           ;doprnt.c: 1129: fval = 0.0;
  2065  001420  0E00               	movlw	0
  2066  001422  6E63               	movwf	printf@fval,c
  2067  001424  0E00               	movlw	0
  2068  001426  6E64               	movwf	printf@fval+1,c
  2069  001428  0E00               	movlw	0
  2070  00142A  6E65               	movwf	printf@fval+2,c
  2071                           
  2072                           ;doprnt.c: 1130: } else {
  2073  00142C  D033               	goto	l2588
  2074  00142E                     l2584:
  2075                           
  2076                           ;doprnt.c: 1131: val = (unsigned long)fval;
  2077  00142E  C063  F02B         	movff	printf@fval,___fttol@f1
  2078  001432  C064  F02C         	movff	printf@fval+1,___fttol@f1+1
  2079  001436  C065  F02D         	movff	printf@fval+2,___fttol@f1+2
  2080  00143A  ECF5  F012         	call	___fttol	;wreg free
  2081  00143E  C02B  F05D         	movff	?___fttol,printf@val
  2082  001442  C02C  F05E         	movff	?___fttol+1,printf@val+1
  2083  001446  C02D  F05F         	movff	?___fttol+2,printf@val+2
  2084  00144A  C02E  F060         	movff	?___fttol+3,printf@val+3
  2085                           
  2086                           ;doprnt.c: 1132: fval -= (double)val;
  2087  00144E  C063  F03A         	movff	printf@fval,___ftsub@f1
  2088  001452  C064  F03B         	movff	printf@fval+1,___ftsub@f1+1
  2089  001456  C065  F03C         	movff	printf@fval+2,___ftsub@f1+2
  2090  00145A  C05D  F009         	movff	printf@val,___lltoft@c
  2091  00145E  C05E  F00A         	movff	printf@val+1,___lltoft@c+1
  2092  001462  C05F  F00B         	movff	printf@val+2,___lltoft@c+2
  2093  001466  C060  F00C         	movff	printf@val+3,___lltoft@c+3
  2094  00146A  ECBD  F016         	call	___lltoft	;wreg free
  2095  00146E  C009  F03D         	movff	?___lltoft,___ftsub@f2
  2096  001472  C00A  F03E         	movff	?___lltoft+1,___ftsub@f2+1
  2097  001476  C00B  F03F         	movff	?___lltoft+2,___ftsub@f2+2
  2098  00147A  ECED  F016         	call	___ftsub	;wreg free
  2099  00147E  C03A  F063         	movff	?___ftsub,printf@fval
  2100  001482  C03B  F064         	movff	?___ftsub+1,printf@fval+1
  2101  001486  C03C  F065         	movff	?___ftsub+2,printf@fval+2
  2102                           
  2103                           ;doprnt.c: 1133: exp = 0;
  2104  00148A  0E00               	movlw	0
  2105  00148C  6E58               	movwf	printf@exp+1,c
  2106  00148E  0E00               	movlw	0
  2107  001490  6E57               	movwf	printf@exp,c
  2108  001492  D000               	goto	l2588
  2109  001494                     l2588:
  2110                           
  2111                           ;doprnt.c: 1134: }
  2112                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  2113  001494  0E01               	movlw	1
  2114  001496  6E66               	movwf	printf@c,c
  2115  001498                     l2590:
  2116  001498  0E0A               	movlw	10
  2117  00149A  1866               	xorwf	printf@c,w,c
  2118  00149C  B4D8               	btfsc	status,2,c
  2119  00149E  D01C               	goto	l2602
  2120  0014A0  D001               	goto	l2594
  2121  0014A2  D01A               	goto	l2602
  2122  0014A4                     l2594:
  2123                           
  2124                           ;doprnt.c: 1137: if(val < dpowers[c])
  2125  0014A4  5066               	movf	printf@c,w,c
  2126  0014A6  0D04               	mullw	4
  2127  0014A8  0E01               	movlw	low _dpowers
  2128  0014AA  24F3               	addwf	prodl,w,c
  2129  0014AC  6EF6               	movwf	tblptrl,c
  2130  0014AE  0E10               	movlw	high _dpowers
  2131  0014B0  20F4               	addwfc	prodh,w,c
  2132  0014B2  6EF7               	movwf	tblptrh,c
  2133  0014B4                     	if	0	;There are less than 3 active tblptr bytes
  2134  0014B4                     	endif
  2135  0014B4  0009               	tblrd		*+
  2136  0014B6  50F5               	movf	tablat,w,c
  2137  0014B8  5C5D               	subwf	printf@val,w,c
  2138  0014BA  0009               	tblrd		*+
  2139  0014BC  50F5               	movf	tablat,w,c
  2140  0014BE  585E               	subwfb	printf@val+1,w,c
  2141  0014C0  0009               	tblrd		*+
  2142  0014C2  50F5               	movf	tablat,w,c
  2143  0014C4  585F               	subwfb	printf@val+2,w,c
  2144  0014C6  0009               	tblrd		*+
  2145  0014C8  50F5               	movf	tablat,w,c
  2146  0014CA  5860               	subwfb	printf@val+3,w,c
  2147  0014CC  A0D8               	btfss	status,0,c
  2148  0014CE  D004               	goto	l2602
  2149  0014D0  D001               	goto	l2598
  2150                           
  2151                           ;doprnt.c: 1138: break;
  2152  0014D2  D002               	goto	l2602
  2153  0014D4                     l2598:
  2154  0014D4  2A66               	incf	printf@c,f,c
  2155  0014D6  D7E0               	goto	l2590
  2156  0014D8                     l2602:
  2157                           
  2158                           ;doprnt.c: 1175: {
  2159                           ;doprnt.c: 1188: if(flag & 0x03)
  2160  0014D8  0E03               	movlw	3
  2161  0014DA  1455               	andwf	printf@flag,w,c
  2162  0014DC  6E4A               	movwf	??_printf& (0+255),c
  2163  0014DE  0E00               	movlw	0
  2164  0014E0  1456               	andwf	printf@flag+1,w,c
  2165  0014E2  6E4B               	movwf	(??_printf+1)& (0+255),c
  2166  0014E4  504A               	movf	??_printf,w,c
  2167  0014E6  104B               	iorwf	??_printf+1,w,c
  2168  0014E8  B4D8               	btfsc	status,2,c
  2169  0014EA  D049               	goto	l2612
  2170                           
  2171                           ;doprnt.c: 1190: (putch('-') );
  2172  0014EC  0E2D               	movlw	45
  2173  0014EE  ECB5  F017         	call	_putch
  2174                           
  2175                           ;doprnt.c: 1195: }
  2176                           ;doprnt.c: 1196: while(c--) {
  2177  0014F2  D045               	goto	l2612
  2178  0014F4                     l2606:
  2179                           
  2180                           ;doprnt.c: 1200: {
  2181                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  2182  0014F4  C05D  F001         	movff	printf@val,___lldiv@dividend
  2183  0014F8  C05E  F002         	movff	printf@val+1,___lldiv@dividend+1
  2184  0014FC  C05F  F003         	movff	printf@val+2,___lldiv@dividend+2
  2185  001500  C060  F004         	movff	printf@val+3,___lldiv@dividend+3
  2186  001504  5066               	movf	printf@c,w,c
  2187  001506  0D04               	mullw	4
  2188  001508  0E01               	movlw	low _dpowers
  2189  00150A  24F3               	addwf	prodl,w,c
  2190  00150C  6EF6               	movwf	tblptrl,c
  2191  00150E  0E10               	movlw	high _dpowers
  2192  001510  20F4               	addwfc	prodh,w,c
  2193  001512  6EF7               	movwf	tblptrh,c
  2194  001514                     	if	0	;There are less than 3 active tblptr bytes
  2195  001514                     	endif
  2196  001514  0009               	tblrd		*+
  2197  001516  CFF5 F005          	movff	tablat,___lldiv@divisor
  2198  00151A  0009               	tblrd		*+
  2199  00151C  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2200  001520  0009               	tblrd		*+
  2201  001522  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2202  001526  000A               	tblrd		*-
  2203  001528  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2204  00152C  ECFE  F015         	call	___lldiv	;wreg free
  2205  001530  C001  F059         	movff	?___lldiv,printf@tmpval
  2206  001534  C002  F05A         	movff	?___lldiv+1,printf@tmpval+1
  2207  001538  C003  F05B         	movff	?___lldiv+2,printf@tmpval+2
  2208  00153C  C004  F05C         	movff	?___lldiv+3,printf@tmpval+3
  2209                           
  2210                           ;doprnt.c: 1202: tmpval.vd %= 10;
  2211  001540  C059  F00E         	movff	printf@tmpval,___llmod@dividend
  2212  001544  C05A  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2213  001548  C05B  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2214  00154C  C05C  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2215  001550  0E0A               	movlw	10
  2216  001552  6E12               	movwf	___llmod@divisor,c
  2217  001554  0E00               	movlw	0
  2218  001556  6E13               	movwf	___llmod@divisor+1,c
  2219  001558  0E00               	movlw	0
  2220  00155A  6E14               	movwf	___llmod@divisor+2,c
  2221  00155C  0E00               	movlw	0
  2222  00155E  6E15               	movwf	___llmod@divisor+3,c
  2223  001560  EC85  F016         	call	___llmod	;wreg free
  2224  001564  C00E  F059         	movff	?___llmod,printf@tmpval
  2225  001568  C00F  F05A         	movff	?___llmod+1,printf@tmpval+1
  2226  00156C  C010  F05B         	movff	?___llmod+2,printf@tmpval+2
  2227  001570  C011  F05C         	movff	?___llmod+3,printf@tmpval+3
  2228                           
  2229                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  2230  001574  5059               	movf	printf@tmpval,w,c
  2231  001576  0F30               	addlw	48
  2232  001578  ECB5  F017         	call	_putch
  2233  00157C  D000               	goto	l2612
  2234  00157E                     l2612:
  2235  00157E  0666               	decf	printf@c,f,c
  2236  001580  2866               	incf	printf@c,w,c
  2237  001582  B4D8               	btfsc	status,2,c
  2238  001584  D009               	goto	l2618
  2239  001586  D7B6               	goto	l2606
  2240                           
  2241                           ;doprnt.c: 1204: }
  2242                           ;doprnt.c: 1206: }
  2243                           ;doprnt.c: 1207: while(exp > 0) {
  2244  001588  D007               	goto	l2618
  2245  00158A                     l2614:
  2246                           
  2247                           ;doprnt.c: 1208: (putch('0') );
  2248  00158A  0E30               	movlw	48
  2249  00158C  ECB5  F017         	call	_putch
  2250                           
  2251                           ;doprnt.c: 1209: exp--;
  2252  001590  0657               	decf	printf@exp,f,c
  2253  001592  A0D8               	btfss	status,0,c
  2254  001594  0658               	decf	printf@exp+1,f,c
  2255  001596  D000               	goto	l2618
  2256  001598                     l2618:
  2257  001598  BE58               	btfsc	printf@exp+1,7,c
  2258  00159A  D005               	goto	l2620
  2259  00159C  5058               	movf	printf@exp+1,w,c
  2260  00159E  E1F5               	bnz	l2614
  2261  0015A0  0457               	decf	printf@exp,w,c
  2262  0015A2  B0D8               	btfsc	status,0,c
  2263  0015A4  D7F2               	goto	l2614
  2264  0015A6                     l2620:
  2265                           
  2266                           ;doprnt.c: 1210: }
  2267                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  2268  0015A6  BE62               	btfsc	printf@prec+1,7,c
  2269  0015A8  D009               	goto	l215
  2270  0015AA  5062               	movf	printf@prec+1,w,c
  2271  0015AC  E104               	bnz	u2840
  2272  0015AE  0E09               	movlw	9
  2273  0015B0  5C61               	subwf	printf@prec,w,c
  2274  0015B2  A0D8               	btfss	status,0,c
  2275  0015B4  D003               	goto	l215
  2276  0015B6                     u2840:
  2277                           
  2278                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  2279  0015B6  0E08               	movlw	8
  2280  0015B8  6E66               	movwf	printf@c,c
  2281  0015BA  D003               	goto	l2624
  2282  0015BC                     l215:
  2283                           
  2284                           ;doprnt.c: 1213: else
  2285                           ;doprnt.c: 1214: c = prec;
  2286  0015BC  C061  F066         	movff	printf@prec,printf@c
  2287  0015C0  D000               	goto	l2624
  2288  0015C2                     l2624:
  2289                           
  2290                           ;doprnt.c: 1215: prec -= c;
  2291  0015C2  5066               	movf	printf@c,w,c
  2292  0015C4  5E61               	subwf	printf@prec,f,c
  2293  0015C6  0E00               	movlw	0
  2294  0015C8  BE66               	btfsc	printf@c,7,c
  2295  0015CA  0EFF               	movlw	255
  2296  0015CC  5A62               	subwfb	printf@prec+1,f,c
  2297                           
  2298                           ;doprnt.c: 1219: if(c)
  2299  0015CE  5066               	movf	printf@c,w,c
  2300  0015D0  B4D8               	btfsc	status,2,c
  2301  0015D2  D004               	goto	l2630
  2302                           
  2303                           ;doprnt.c: 1221: (putch('.') );
  2304  0015D4  0E2E               	movlw	46
  2305  0015D6  ECB5  F017         	call	_putch
  2306  0015DA  D000               	goto	l2630
  2307  0015DC                     l2630:
  2308                           
  2309                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2310  0015DC  5066               	movf	printf@c,w,c
  2311  0015DE  EC67  F00C         	call	_scale
  2312  0015E2  C024  F050         	movff	?_scale,_printf$1243
  2313  0015E6  C025  F051         	movff	?_scale+1,_printf$1243+1
  2314  0015EA  C026  F052         	movff	?_scale+2,_printf$1243+2
  2315                           
  2316                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  2317  0015EE  C063  F018         	movff	printf@fval,___ftmul@f2
  2318  0015F2  C064  F019         	movff	printf@fval+1,___ftmul@f2+1
  2319  0015F6  C065  F01A         	movff	printf@fval+2,___ftmul@f2+2
  2320  0015FA  C050  F015         	movff	_printf$1243,___ftmul@f1
  2321  0015FE  C051  F016         	movff	_printf$1243+1,___ftmul@f1+1
  2322  001602  C052  F017         	movff	_printf$1243+2,___ftmul@f1+2
  2323  001606  EC79  F012         	call	___ftmul	;wreg free
  2324  00160A  C015  F02B         	movff	?___ftmul,___fttol@f1
  2325  00160E  C016  F02C         	movff	?___ftmul+1,___fttol@f1+1
  2326  001612  C017  F02D         	movff	?___ftmul+2,___fttol@f1+2
  2327  001616  ECF5  F012         	call	___fttol	;wreg free
  2328  00161A  C02B  F05D         	movff	?___fttol,printf@val
  2329  00161E  C02C  F05E         	movff	?___fttol+1,printf@val+1
  2330  001622  C02D  F05F         	movff	?___fttol+2,printf@val+2
  2331  001626  C02E  F060         	movff	?___fttol+3,printf@val+3
  2332                           
  2333                           ;doprnt.c: 1228: while(c--) {
  2334  00162A  D06B               	goto	l2640
  2335  00162C                     l2634:
  2336                           
  2337                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  2338  00162C  C05D  F001         	movff	printf@val,___lldiv@dividend
  2339  001630  C05E  F002         	movff	printf@val+1,___lldiv@dividend+1
  2340  001634  C05F  F003         	movff	printf@val+2,___lldiv@dividend+2
  2341  001638  C060  F004         	movff	printf@val+3,___lldiv@dividend+3
  2342  00163C  5066               	movf	printf@c,w,c
  2343  00163E  0D04               	mullw	4
  2344  001640  0E01               	movlw	low _dpowers
  2345  001642  24F3               	addwf	prodl,w,c
  2346  001644  6EF6               	movwf	tblptrl,c
  2347  001646  0E10               	movlw	high _dpowers
  2348  001648  20F4               	addwfc	prodh,w,c
  2349  00164A  6EF7               	movwf	tblptrh,c
  2350  00164C                     	if	0	;There are less than 3 active tblptr bytes
  2351  00164C                     	endif
  2352  00164C  0009               	tblrd		*+
  2353  00164E  CFF5 F005          	movff	tablat,___lldiv@divisor
  2354  001652  0009               	tblrd		*+
  2355  001654  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2356  001658  0009               	tblrd		*+
  2357  00165A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2358  00165E  000A               	tblrd		*-
  2359  001660  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2360  001664  ECFE  F015         	call	___lldiv	;wreg free
  2361  001668  C001  F059         	movff	?___lldiv,printf@tmpval
  2362  00166C  C002  F05A         	movff	?___lldiv+1,printf@tmpval+1
  2363  001670  C003  F05B         	movff	?___lldiv+2,printf@tmpval+2
  2364  001674  C004  F05C         	movff	?___lldiv+3,printf@tmpval+3
  2365                           
  2366                           ;doprnt.c: 1230: tmpval.vd %= 10;
  2367  001678  C059  F00E         	movff	printf@tmpval,___llmod@dividend
  2368  00167C  C05A  F00F         	movff	printf@tmpval+1,___llmod@dividend+1
  2369  001680  C05B  F010         	movff	printf@tmpval+2,___llmod@dividend+2
  2370  001684  C05C  F011         	movff	printf@tmpval+3,___llmod@dividend+3
  2371  001688  0E0A               	movlw	10
  2372  00168A  6E12               	movwf	___llmod@divisor,c
  2373  00168C  0E00               	movlw	0
  2374  00168E  6E13               	movwf	___llmod@divisor+1,c
  2375  001690  0E00               	movlw	0
  2376  001692  6E14               	movwf	___llmod@divisor+2,c
  2377  001694  0E00               	movlw	0
  2378  001696  6E15               	movwf	___llmod@divisor+3,c
  2379  001698  EC85  F016         	call	___llmod	;wreg free
  2380  00169C  C00E  F059         	movff	?___llmod,printf@tmpval
  2381  0016A0  C00F  F05A         	movff	?___llmod+1,printf@tmpval+1
  2382  0016A4  C010  F05B         	movff	?___llmod+2,printf@tmpval+2
  2383  0016A8  C011  F05C         	movff	?___llmod+3,printf@tmpval+3
  2384                           
  2385                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  2386  0016AC  5059               	movf	printf@tmpval,w,c
  2387  0016AE  0F30               	addlw	48
  2388  0016B0  ECB5  F017         	call	_putch
  2389                           
  2390                           ;doprnt.c: 1232: val %= dpowers[c];
  2391  0016B4  C05D  F00E         	movff	printf@val,___llmod@dividend
  2392  0016B8  C05E  F00F         	movff	printf@val+1,___llmod@dividend+1
  2393  0016BC  C05F  F010         	movff	printf@val+2,___llmod@dividend+2
  2394  0016C0  C060  F011         	movff	printf@val+3,___llmod@dividend+3
  2395  0016C4  5066               	movf	printf@c,w,c
  2396  0016C6  0D04               	mullw	4
  2397  0016C8  0E01               	movlw	low _dpowers
  2398  0016CA  24F3               	addwf	prodl,w,c
  2399  0016CC  6EF6               	movwf	tblptrl,c
  2400  0016CE  0E10               	movlw	high _dpowers
  2401  0016D0  20F4               	addwfc	prodh,w,c
  2402  0016D2  6EF7               	movwf	tblptrh,c
  2403  0016D4                     	if	0	;There are less than 3 active tblptr bytes
  2404  0016D4                     	endif
  2405  0016D4  0009               	tblrd		*+
  2406  0016D6  CFF5 F012          	movff	tablat,___llmod@divisor
  2407  0016DA  0009               	tblrd		*+
  2408  0016DC  CFF5 F013          	movff	tablat,___llmod@divisor+1
  2409  0016E0  0009               	tblrd		*+
  2410  0016E2  CFF5 F014          	movff	tablat,___llmod@divisor+2
  2411  0016E6  000A               	tblrd		*-
  2412  0016E8  CFF5 F015          	movff	tablat,___llmod@divisor+3
  2413  0016EC  EC85  F016         	call	___llmod	;wreg free
  2414  0016F0  C00E  F05D         	movff	?___llmod,printf@val
  2415  0016F4  C00F  F05E         	movff	?___llmod+1,printf@val+1
  2416  0016F8  C010  F05F         	movff	?___llmod+2,printf@val+2
  2417  0016FC  C011  F060         	movff	?___llmod+3,printf@val+3
  2418  001700  D000               	goto	l2640
  2419  001702                     l2640:
  2420  001702  0666               	decf	printf@c,f,c
  2421  001704  2866               	incf	printf@c,w,c
  2422  001706  B4D8               	btfsc	status,2,c
  2423  001708  D009               	goto	l2646
  2424  00170A  D790               	goto	l2634
  2425                           
  2426                           ;doprnt.c: 1233: }
  2427                           ;doprnt.c: 1235: while(prec) {
  2428  00170C  D007               	goto	l2646
  2429  00170E                     l2642:
  2430                           
  2431                           ;doprnt.c: 1236: (putch('0') );
  2432  00170E  0E30               	movlw	48
  2433  001710  ECB5  F017         	call	_putch
  2434                           
  2435                           ;doprnt.c: 1237: prec--;
  2436  001714  0661               	decf	printf@prec,f,c
  2437  001716  A0D8               	btfss	status,0,c
  2438  001718  0662               	decf	printf@prec+1,f,c
  2439  00171A  D000               	goto	l2646
  2440  00171C                     l2646:
  2441  00171C  5061               	movf	printf@prec,w,c
  2442  00171E  1062               	iorwf	printf@prec+1,w,c
  2443  001720  B4D8               	btfsc	status,2,c
  2444  001722  D0C5               	goto	l2696
  2445  001724  D7F4               	goto	l2642
  2446                           
  2447                           ;doprnt.c: 1238: }
  2448                           ;doprnt.c: 1245: continue;
  2449  001726  D0C3               	goto	l2696
  2450  001728                     l2648:
  2451                           
  2452                           ;doprnt.c: 1246: }
  2453                           ;doprnt.c: 1253: {
  2454                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  2455  001728  C053  FFD9         	movff	printf@ap,fsr2l
  2456  00172C  C054  FFDA         	movff	printf@ap+1,fsr2h
  2457  001730  CFDE F05D          	movff	postinc2,printf@val
  2458  001734  CFDD F05E          	movff	postdec2,printf@val+1
  2459  001738  0E00               	movlw	0
  2460  00173A  BE5E               	btfsc	printf@val+1,7,c
  2461  00173C  0EFF               	movlw	-1
  2462  00173E  6E5F               	movwf	printf@val+2,c
  2463  001740  6E60               	movwf	printf@val+3,c
  2464  001742  0E02               	movlw	2
  2465  001744  2653               	addwf	printf@ap,f,c
  2466  001746  0E00               	movlw	0
  2467  001748  2254               	addwfc	printf@ap+1,f,c
  2468                           
  2469                           ;doprnt.c: 1261: if((long)val < 0) {
  2470  00174A  AE60               	btfss	printf@val+3,7,c
  2471  00174C  D00B               	goto	l2658
  2472                           
  2473                           ;doprnt.c: 1262: flag |= 0x03;
  2474  00174E  0E03               	movlw	3
  2475  001750  1255               	iorwf	printf@flag,f,c
  2476                           
  2477                           ;doprnt.c: 1263: val = -val;
  2478  001752  1E60               	comf	printf@val+3,f,c
  2479  001754  1E5F               	comf	printf@val+2,f,c
  2480  001756  1E5E               	comf	printf@val+1,f,c
  2481  001758  6C5D               	negf	printf@val,c
  2482  00175A  0E00               	movlw	0
  2483  00175C  225E               	addwfc	printf@val+1,f,c
  2484  00175E  225F               	addwfc	printf@val+2,f,c
  2485  001760  2260               	addwfc	printf@val+3,f,c
  2486  001762  D000               	goto	l2658
  2487  001764                     l2658:
  2488                           
  2489                           ;doprnt.c: 1264: }
  2490                           ;doprnt.c: 1266: }
  2491                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  2492  001764  5061               	movf	printf@prec,w,c
  2493  001766  1062               	iorwf	printf@prec+1,w,c
  2494  001768  A4D8               	btfss	status,2,c
  2495  00176A  D009               	goto	l2664
  2496  00176C  505D               	movf	printf@val,w,c
  2497  00176E  105E               	iorwf	printf@val+1,w,c
  2498  001770  105F               	iorwf	printf@val+2,w,c
  2499  001772  1060               	iorwf	printf@val+3,w,c
  2500  001774  A4D8               	btfss	status,2,c
  2501  001776  D003               	goto	l2664
  2502                           
  2503                           ;doprnt.c: 1291: prec++;
  2504  001778  4A61               	infsnz	printf@prec,f,c
  2505  00177A  2A62               	incf	printf@prec+1,f,c
  2506  00177C  D000               	goto	l2664
  2507  00177E                     l2664:
  2508                           
  2509                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  2510  00177E  0E01               	movlw	1
  2511  001780  6E66               	movwf	printf@c,c
  2512  001782                     l2666:
  2513  001782  0E0A               	movlw	10
  2514  001784  1866               	xorwf	printf@c,w,c
  2515  001786  B4D8               	btfsc	status,2,c
  2516  001788  D01C               	goto	l2678
  2517  00178A  D001               	goto	l2670
  2518  00178C  D01A               	goto	l2678
  2519  00178E                     l2670:
  2520                           
  2521                           ;doprnt.c: 1306: if(val < dpowers[c])
  2522  00178E  5066               	movf	printf@c,w,c
  2523  001790  0D04               	mullw	4
  2524  001792  0E01               	movlw	low _dpowers
  2525  001794  24F3               	addwf	prodl,w,c
  2526  001796  6EF6               	movwf	tblptrl,c
  2527  001798  0E10               	movlw	high _dpowers
  2528  00179A  20F4               	addwfc	prodh,w,c
  2529  00179C  6EF7               	movwf	tblptrh,c
  2530  00179E                     	if	0	;There are less than 3 active tblptr bytes
  2531  00179E                     	endif
  2532  00179E  0009               	tblrd		*+
  2533  0017A0  50F5               	movf	tablat,w,c
  2534  0017A2  5C5D               	subwf	printf@val,w,c
  2535  0017A4  0009               	tblrd		*+
  2536  0017A6  50F5               	movf	tablat,w,c
  2537  0017A8  585E               	subwfb	printf@val+1,w,c
  2538  0017AA  0009               	tblrd		*+
  2539  0017AC  50F5               	movf	tablat,w,c
  2540  0017AE  585F               	subwfb	printf@val+2,w,c
  2541  0017B0  0009               	tblrd		*+
  2542  0017B2  50F5               	movf	tablat,w,c
  2543  0017B4  5860               	subwfb	printf@val+3,w,c
  2544  0017B6  A0D8               	btfss	status,0,c
  2545  0017B8  D004               	goto	l2678
  2546  0017BA  D001               	goto	l2674
  2547                           
  2548                           ;doprnt.c: 1307: break;
  2549  0017BC  D002               	goto	l2678
  2550  0017BE                     l2674:
  2551  0017BE  2A66               	incf	printf@c,f,c
  2552  0017C0  D7E0               	goto	l2666
  2553  0017C2                     l2678:
  2554                           
  2555                           ;doprnt.c: 1339: if(c < prec)
  2556  0017C2  0E80               	movlw	128
  2557  0017C4  BE66               	btfsc	printf@c,7,c
  2558  0017C6  0E7F               	movlw	127
  2559  0017C8  6E4A               	movwf	??_printf& (0+255),c
  2560  0017CA  5061               	movf	printf@prec,w,c
  2561  0017CC  5C66               	subwf	printf@c,w,c
  2562  0017CE  5062               	movf	printf@prec+1,w,c
  2563  0017D0  0A80               	xorlw	128
  2564  0017D2  584A               	subwfb	??_printf& (0+255),w,c
  2565  0017D4  B0D8               	btfsc	status,0,c
  2566  0017D6  D003               	goto	l2682
  2567                           
  2568                           ;doprnt.c: 1340: c = prec;
  2569  0017D8  C061  F066         	movff	printf@prec,printf@c
  2570  0017DC  D011               	goto	l2686
  2571  0017DE                     l2682:
  2572                           
  2573                           ;doprnt.c: 1341: else if(prec < c)
  2574  0017DE  5062               	movf	printf@prec+1,w,c
  2575  0017E0  0A80               	xorlw	128
  2576  0017E2  6E4A               	movwf	??_printf& (0+255),c
  2577  0017E4  5066               	movf	printf@c,w,c
  2578  0017E6  5C61               	subwf	printf@prec,w,c
  2579  0017E8  0E80               	movlw	128
  2580  0017EA  BE66               	btfsc	printf@c,7,c
  2581  0017EC  0E7F               	movlw	127
  2582  0017EE  584A               	subwfb	??_printf& (0+255),w,c
  2583  0017F0  B0D8               	btfsc	status,0,c
  2584  0017F2  D006               	goto	l2686
  2585                           
  2586                           ;doprnt.c: 1342: prec = c;
  2587  0017F4  5066               	movf	printf@c,w,c
  2588  0017F6  6E61               	movwf	printf@prec,c
  2589  0017F8  6A62               	clrf	printf@prec+1,c
  2590  0017FA  BE61               	btfsc	printf@prec,7,c
  2591  0017FC  0662               	decf	printf@prec+1,f,c
  2592  0017FE  D000               	goto	l2686
  2593  001800                     l2686:
  2594                           
  2595                           ;doprnt.c: 1422: {
  2596                           ;doprnt.c: 1438: if(flag & 0x03)
  2597  001800  0E03               	movlw	3
  2598  001802  1455               	andwf	printf@flag,w,c
  2599  001804  6E4A               	movwf	??_printf& (0+255),c
  2600  001806  0E00               	movlw	0
  2601  001808  1456               	andwf	printf@flag+1,w,c
  2602  00180A  6E4B               	movwf	(??_printf+1)& (0+255),c
  2603  00180C  504A               	movf	??_printf,w,c
  2604  00180E  104B               	iorwf	??_printf+1,w,c
  2605  001810  B4D8               	btfsc	status,2,c
  2606  001812  D043               	goto	l2694
  2607                           
  2608                           ;doprnt.c: 1439: (putch('-') );
  2609  001814  0E2D               	movlw	45
  2610  001816  ECB5  F017         	call	_putch
  2611                           
  2612                           ;doprnt.c: 1469: }
  2613                           ;doprnt.c: 1474: while(prec--) {
  2614  00181A  D03F               	goto	l2694
  2615  00181C                     l2690:
  2616                           
  2617                           ;doprnt.c: 1478: {
  2618                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  2619  00181C  C061  F04A         	movff	printf@prec,??_printf
  2620  001820  C062  F04B         	movff	printf@prec+1,??_printf+1
  2621  001824  90D8               	bcf	status,0,c
  2622  001826  364A               	rlcf	??_printf,f,c
  2623  001828  364B               	rlcf	??_printf+1,f,c
  2624  00182A  90D8               	bcf	status,0,c
  2625  00182C  364A               	rlcf	??_printf,f,c
  2626  00182E  364B               	rlcf	??_printf+1,f,c
  2627  001830  0E01               	movlw	low _dpowers
  2628  001832  244A               	addwf	??_printf,w,c
  2629  001834  6EF6               	movwf	tblptrl,c
  2630  001836  0E10               	movlw	high _dpowers
  2631  001838  204B               	addwfc	??_printf+1,w,c
  2632  00183A  6EF7               	movwf	tblptrh,c
  2633  00183C                     	if	0	;There are less than 3 active tblptr bytes
  2634  00183C                     	endif
  2635  00183C  0009               	tblrd		*+
  2636  00183E  CFF5 F005          	movff	tablat,___lldiv@divisor
  2637  001842  0009               	tblrd		*+
  2638  001844  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  2639  001848  0009               	tblrd		*+
  2640  00184A  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  2641  00184E  000A               	tblrd		*-
  2642  001850  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  2643  001854  C05D  F001         	movff	printf@val,___lldiv@dividend
  2644  001858  C05E  F002         	movff	printf@val+1,___lldiv@dividend+1
  2645  00185C  C05F  F003         	movff	printf@val+2,___lldiv@dividend+2
  2646  001860  C060  F004         	movff	printf@val+3,___lldiv@dividend+3
  2647  001864  ECFE  F015         	call	___lldiv	;wreg free
  2648  001868  C001  F00E         	movff	?___lldiv,___llmod@dividend
  2649  00186C  C002  F00F         	movff	?___lldiv+1,___llmod@dividend+1
  2650  001870  C003  F010         	movff	?___lldiv+2,___llmod@dividend+2
  2651  001874  C004  F011         	movff	?___lldiv+3,___llmod@dividend+3
  2652  001878  0E0A               	movlw	10
  2653  00187A  6E12               	movwf	___llmod@divisor,c
  2654  00187C  0E00               	movlw	0
  2655  00187E  6E13               	movwf	___llmod@divisor+1,c
  2656  001880  0E00               	movlw	0
  2657  001882  6E14               	movwf	___llmod@divisor+2,c
  2658  001884  0E00               	movlw	0
  2659  001886  6E15               	movwf	___llmod@divisor+3,c
  2660  001888  EC85  F016         	call	___llmod	;wreg free
  2661  00188C  500E               	movf	?___llmod,w,c
  2662  00188E  0F30               	addlw	48
  2663  001890  6E66               	movwf	printf@c,c
  2664                           
  2665                           ;doprnt.c: 1523: }
  2666                           ;doprnt.c: 1524: (putch(c) );
  2667  001892  5066               	movf	printf@c,w,c
  2668  001894  ECB5  F017         	call	_putch
  2669  001898  D000               	goto	l2694
  2670  00189A                     l2694:
  2671  00189A  0661               	decf	printf@prec,f,c
  2672  00189C  A0D8               	btfss	status,0,c
  2673  00189E  0662               	decf	printf@prec+1,f,c
  2674  0018A0  2861               	incf	printf@prec,w,c
  2675  0018A2  E1BC               	bnz	l2690
  2676  0018A4  2862               	incf	printf@prec+1,w,c
  2677  0018A6  B4D8               	btfsc	status,2,c
  2678  0018A8  D002               	goto	l2696
  2679  0018AA  D7B8               	goto	l2690
  2680  0018AC  D000               	goto	l2696
  2681  0018AE                     l2696:
  2682  0018AE  C040  FFF6         	movff	printf@f,tblptrl
  2683  0018B2  C041  FFF7         	movff	printf@f+1,tblptrh
  2684  0018B6  4A40               	infsnz	printf@f,f,c
  2685  0018B8  2A41               	incf	printf@f+1,f,c
  2686  0018BA                     	if	0	;tblptru may be non-zero
  2687  0018BA                     	endif
  2688  0018BA                     	if	0	;tblptru may be non-zero
  2689  0018BA                     	endif
  2690  0018BA  0008               	tblrd		*
  2691  0018BC  CFF5 F066          	movff	tablat,printf@c
  2692  0018C0  5066               	movf	printf@c,w,c
  2693  0018C2  B4D8               	btfsc	status,2,c
  2694  0018C4  D003               	goto	l237
  2695  0018C6  EF5D  F008         	goto	l2486
  2696  0018CA  D000               	goto	l237
  2697  0018CC                     l237:
  2698  0018CC  0012               	return		;funcret
  2699  0018CE                     __end_of_printf:
  2700                           	opt stack 0
  2701                           tblptru	equ	0xFF8
  2702                           tblptrh	equ	0xFF7
  2703                           tblptrl	equ	0xFF6
  2704                           tablat	equ	0xFF5
  2705                           prodh	equ	0xFF4
  2706                           prodl	equ	0xFF3
  2707                           wreg	equ	0xFE8
  2708                           indf2	equ	0xFDF
  2709                           postinc2	equ	0xFDE
  2710                           postdec2	equ	0xFDD
  2711                           fsr2h	equ	0xFDA
  2712                           fsr2l	equ	0xFD9
  2713                           status	equ	0xFD8
  2714                           
  2715 ;; *************** function _scale *****************
  2716 ;; Defined at:
  2717 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2718 ;; Parameters:    Size  Location     Type
  2719 ;;  scl             1    wreg     char 
  2720 ;; Auto vars:     Size  Location     Type
  2721 ;;  scl             1   41[COMRAM] char 
  2722 ;; Return value:  Size  Location     Type
  2723 ;;                  3   35[COMRAM] char 
  2724 ;; Registers used:
  2725 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2726 ;; Tracked objects:
  2727 ;;		On entry : 0/0
  2728 ;;		On exit  : 0/0
  2729 ;;		Unchanged: 0/0
  2730 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2731 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2732 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2733 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2734 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2735 ;;Total ram usage:        7 bytes
  2736 ;; Hardware stack levels used:    1
  2737 ;; Hardware stack levels required when called:    2
  2738 ;; This function calls:
  2739 ;;		___awdiv
  2740 ;;		___awmod
  2741 ;;		___ftmul
  2742 ;;		___wmul
  2743 ;; This function is called by:
  2744 ;;		_printf
  2745 ;; This function uses a non-reentrant model
  2746 ;;
  2747                           
  2748                           	psect	text5
  2749  0018CE                     __ptext5:
  2750                           	opt stack 0
  2751  0018CE                     _scale:
  2752                           	opt stack 27
  2753                           
  2754                           ;incstack = 0
  2755                           ;scale@scl stored from wreg
  2756  0018CE  6E2A               	movwf	scale@scl,c
  2757                           
  2758                           ;doprnt.c: 428: if(scl < 0) {
  2759  0018D0  AE2A               	btfss	scale@scl,7,c
  2760  0018D2  D0EF               	goto	l2140
  2761                           
  2762                           ;doprnt.c: 429: scl = -scl;
  2763  0018D4  6C2A               	negf	scale@scl,c
  2764                           
  2765                           ;doprnt.c: 430: if(scl>=110)
  2766  0018D6  502A               	movf	scale@scl,w,c
  2767  0018D8  0A80               	xorlw	128
  2768  0018DA  0F12               	addlw	-238
  2769  0018DC  A0D8               	btfss	status,0,c
  2770  0018DE  D08D               	goto	l2130
  2771                           
  2772                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2773  0018E0  0E00               	movlw	0
  2774  0018E2  6E12               	movwf	___wmul@multiplicand+1,c
  2775  0018E4  0E03               	movlw	3
  2776  0018E6  6E11               	movwf	___wmul@multiplicand,c
  2777  0018E8  0E00               	movlw	0
  2778  0018EA  6E0A               	movwf	___awdiv@divisor+1,c
  2779  0018EC  0E0A               	movlw	10
  2780  0018EE  6E09               	movwf	___awdiv@divisor,c
  2781  0018F0  0E00               	movlw	0
  2782  0018F2  6E04               	movwf	___awmod@divisor+1,c
  2783  0018F4  0E64               	movlw	100
  2784  0018F6  6E03               	movwf	___awmod@divisor,c
  2785  0018F8  502A               	movf	scale@scl,w,c
  2786  0018FA  6E01               	movwf	___awmod@dividend,c
  2787  0018FC  6A02               	clrf	___awmod@dividend+1,c
  2788  0018FE  BE01               	btfsc	___awmod@dividend,7,c
  2789  001900  0602               	decf	___awmod@dividend+1,f,c
  2790  001902  EC44  F016         	call	___awmod	;wreg free
  2791  001906  C001  F007         	movff	?___awmod,___awdiv@dividend
  2792  00190A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2793  00190E  EC68  F015         	call	___awdiv	;wreg free
  2794  001912  0E09               	movlw	9
  2795  001914  2407               	addwf	?___awdiv,w,c
  2796  001916  6E0F               	movwf	___wmul@multiplier,c
  2797  001918  0E00               	movlw	0
  2798  00191A  2008               	addwfc	?___awdiv+1,w,c
  2799  00191C  6E10               	movwf	___wmul@multiplier+1,c
  2800  00191E  EC2D  F017         	call	___wmul	;wreg free
  2801  001922  0E29               	movlw	low __npowers_
  2802  001924  240F               	addwf	?___wmul,w,c
  2803  001926  6EF6               	movwf	tblptrl,c
  2804  001928  0E10               	movlw	high __npowers_
  2805  00192A  2010               	addwfc	?___wmul+1,w,c
  2806  00192C  6EF7               	movwf	tblptrh,c
  2807  00192E                     	if	0	;There are less than 3 active tblptr bytes
  2808  00192E                     	endif
  2809  00192E  0009               	tblrd		*+
  2810  001930  CFF5 F018          	movff	tablat,___ftmul@f2
  2811  001934  0009               	tblrd		*+
  2812  001936  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2813  00193A  000A               	tblrd		*-
  2814  00193C  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2815  001940  0E00               	movlw	0
  2816  001942  6E0A               	movwf	___awdiv@divisor+1,c
  2817  001944  0E64               	movlw	100
  2818  001946  6E09               	movwf	___awdiv@divisor,c
  2819  001948  502A               	movf	scale@scl,w,c
  2820  00194A  6E07               	movwf	___awdiv@dividend,c
  2821  00194C  6A08               	clrf	___awdiv@dividend+1,c
  2822  00194E  BE07               	btfsc	___awdiv@dividend,7,c
  2823  001950  0608               	decf	___awdiv@dividend+1,f,c
  2824  001952  EC68  F015         	call	___awdiv	;wreg free
  2825  001956  0E12               	movlw	18
  2826  001958  2407               	addwf	?___awdiv,w,c
  2827  00195A  6E0F               	movwf	___wmul@multiplier,c
  2828  00195C  0E00               	movlw	0
  2829  00195E  2008               	addwfc	?___awdiv+1,w,c
  2830  001960  6E10               	movwf	___wmul@multiplier+1,c
  2831  001962  0E00               	movlw	0
  2832  001964  6E12               	movwf	___wmul@multiplicand+1,c
  2833  001966  0E03               	movlw	3
  2834  001968  6E11               	movwf	___wmul@multiplicand,c
  2835  00196A  EC2D  F017         	call	___wmul	;wreg free
  2836  00196E  0E29               	movlw	low __npowers_
  2837  001970  240F               	addwf	?___wmul,w,c
  2838  001972  6EF6               	movwf	tblptrl,c
  2839  001974  0E10               	movlw	high __npowers_
  2840  001976  2010               	addwfc	?___wmul+1,w,c
  2841  001978  6EF7               	movwf	tblptrh,c
  2842  00197A                     	if	0	;There are less than 3 active tblptr bytes
  2843  00197A                     	endif
  2844  00197A  0009               	tblrd		*+
  2845  00197C  CFF5 F015          	movff	tablat,___ftmul@f1
  2846  001980  0009               	tblrd		*+
  2847  001982  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2848  001986  000A               	tblrd		*-
  2849  001988  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2850  00198C  EC79  F012         	call	___ftmul	;wreg free
  2851  001990  C015  F027         	movff	?___ftmul,_scale$1242
  2852  001994  C016  F028         	movff	?___ftmul+1,_scale$1242+1
  2853  001998  C017  F029         	movff	?___ftmul+2,_scale$1242+2
  2854                           
  2855                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2856  00199C  C027  F015         	movff	_scale$1242,___ftmul@f1
  2857  0019A0  C028  F016         	movff	_scale$1242+1,___ftmul@f1+1
  2858  0019A4  C029  F017         	movff	_scale$1242+2,___ftmul@f1+2
  2859  0019A8  0E00               	movlw	0
  2860  0019AA  6E12               	movwf	___wmul@multiplicand+1,c
  2861  0019AC  0E03               	movlw	3
  2862  0019AE  6E11               	movwf	___wmul@multiplicand,c
  2863  0019B0  0E00               	movlw	0
  2864  0019B2  6E04               	movwf	___awmod@divisor+1,c
  2865  0019B4  0E0A               	movlw	10
  2866  0019B6  6E03               	movwf	___awmod@divisor,c
  2867  0019B8  502A               	movf	scale@scl,w,c
  2868  0019BA  6E01               	movwf	___awmod@dividend,c
  2869  0019BC  6A02               	clrf	___awmod@dividend+1,c
  2870  0019BE  BE01               	btfsc	___awmod@dividend,7,c
  2871  0019C0  0602               	decf	___awmod@dividend+1,f,c
  2872  0019C2  EC44  F016         	call	___awmod	;wreg free
  2873  0019C6  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2874  0019CA  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2875  0019CE  EC2D  F017         	call	___wmul	;wreg free
  2876  0019D2  0E29               	movlw	low __npowers_
  2877  0019D4  240F               	addwf	?___wmul,w,c
  2878  0019D6  6EF6               	movwf	tblptrl,c
  2879  0019D8  0E10               	movlw	high __npowers_
  2880  0019DA  2010               	addwfc	?___wmul+1,w,c
  2881  0019DC  6EF7               	movwf	tblptrh,c
  2882  0019DE                     	if	0	;There are less than 3 active tblptr bytes
  2883  0019DE                     	endif
  2884  0019DE  0009               	tblrd		*+
  2885  0019E0  CFF5 F018          	movff	tablat,___ftmul@f2
  2886  0019E4  0009               	tblrd		*+
  2887  0019E6  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2888  0019EA  000A               	tblrd		*-
  2889  0019EC  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2890  0019F0  EC79  F012         	call	___ftmul	;wreg free
  2891  0019F4  D141               	goto	L15
  2892  0019F6  D15A               	goto	l162
  2893  0019F8  D054               	goto	l2136
  2894  0019FA                     l2130:
  2895                           
  2896                           ;doprnt.c: 432: else if(scl > 10)
  2897  0019FA  502A               	movf	scale@scl,w,c
  2898  0019FC  0A80               	xorlw	128
  2899  0019FE  0F75               	addlw	-139
  2900  001A00  A0D8               	btfss	status,0,c
  2901  001A02  D04F               	goto	l2136
  2902                           
  2903                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2904  001A04  0E00               	movlw	0
  2905  001A06  6E0A               	movwf	___awdiv@divisor+1,c
  2906  001A08  0E0A               	movlw	10
  2907  001A0A  6E09               	movwf	___awdiv@divisor,c
  2908  001A0C  502A               	movf	scale@scl,w,c
  2909  001A0E  6E07               	movwf	___awdiv@dividend,c
  2910  001A10  6A08               	clrf	___awdiv@dividend+1,c
  2911  001A12  BE07               	btfsc	___awdiv@dividend,7,c
  2912  001A14  0608               	decf	___awdiv@dividend+1,f,c
  2913  001A16  EC68  F015         	call	___awdiv	;wreg free
  2914  001A1A  0E09               	movlw	9
  2915  001A1C  2407               	addwf	?___awdiv,w,c
  2916  001A1E  6E0F               	movwf	___wmul@multiplier,c
  2917  001A20  0E00               	movlw	0
  2918  001A22  2008               	addwfc	?___awdiv+1,w,c
  2919  001A24  6E10               	movwf	___wmul@multiplier+1,c
  2920  001A26  0E00               	movlw	0
  2921  001A28  6E12               	movwf	___wmul@multiplicand+1,c
  2922  001A2A  0E03               	movlw	3
  2923  001A2C  6E11               	movwf	___wmul@multiplicand,c
  2924  001A2E  EC2D  F017         	call	___wmul	;wreg free
  2925  001A32  0E29               	movlw	low __npowers_
  2926  001A34  240F               	addwf	?___wmul,w,c
  2927  001A36  6EF6               	movwf	tblptrl,c
  2928  001A38  0E10               	movlw	high __npowers_
  2929  001A3A  2010               	addwfc	?___wmul+1,w,c
  2930  001A3C  6EF7               	movwf	tblptrh,c
  2931  001A3E                     	if	0	;There are less than 3 active tblptr bytes
  2932  001A3E                     	endif
  2933  001A3E  0009               	tblrd		*+
  2934  001A40  CFF5 F015          	movff	tablat,___ftmul@f1
  2935  001A44  0009               	tblrd		*+
  2936  001A46  CFF5 F016          	movff	tablat,___ftmul@f1+1
  2937  001A4A  000A               	tblrd		*-
  2938  001A4C  CFF5 F017          	movff	tablat,___ftmul@f1+2
  2939  001A50  0E00               	movlw	0
  2940  001A52  6E12               	movwf	___wmul@multiplicand+1,c
  2941  001A54  0E03               	movlw	3
  2942  001A56  6E11               	movwf	___wmul@multiplicand,c
  2943  001A58  0E00               	movlw	0
  2944  001A5A  6E04               	movwf	___awmod@divisor+1,c
  2945  001A5C  0E0A               	movlw	10
  2946  001A5E  6E03               	movwf	___awmod@divisor,c
  2947  001A60  502A               	movf	scale@scl,w,c
  2948  001A62  6E01               	movwf	___awmod@dividend,c
  2949  001A64  6A02               	clrf	___awmod@dividend+1,c
  2950  001A66  BE01               	btfsc	___awmod@dividend,7,c
  2951  001A68  0602               	decf	___awmod@dividend+1,f,c
  2952  001A6A  EC44  F016         	call	___awmod	;wreg free
  2953  001A6E  C001  F00F         	movff	?___awmod,___wmul@multiplier
  2954  001A72  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  2955  001A76  EC2D  F017         	call	___wmul	;wreg free
  2956  001A7A  0E29               	movlw	low __npowers_
  2957  001A7C  240F               	addwf	?___wmul,w,c
  2958  001A7E  6EF6               	movwf	tblptrl,c
  2959  001A80  0E10               	movlw	high __npowers_
  2960  001A82  2010               	addwfc	?___wmul+1,w,c
  2961  001A84  6EF7               	movwf	tblptrh,c
  2962  001A86                     	if	0	;There are less than 3 active tblptr bytes
  2963  001A86                     	endif
  2964  001A86  0009               	tblrd		*+
  2965  001A88  CFF5 F018          	movff	tablat,___ftmul@f2
  2966  001A8C  0009               	tblrd		*+
  2967  001A8E  CFF5 F019          	movff	tablat,___ftmul@f2+1
  2968  001A92  000A               	tblrd		*-
  2969  001A94  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  2970  001A98  EC79  F012         	call	___ftmul	;wreg free
  2971  001A9C  D0ED               	goto	L15
  2972  001A9E  D106               	goto	l162
  2973  001AA0  D000               	goto	l2136
  2974  001AA2                     l2136:
  2975                           
  2976                           ;doprnt.c: 434: return _npowers_[scl];
  2977  001AA2  502A               	movf	scale@scl,w,c
  2978  001AA4  0D03               	mullw	3
  2979  001AA6  0E29               	movlw	low __npowers_
  2980  001AA8  24F3               	addwf	prodl,w,c
  2981  001AAA  6EF6               	movwf	tblptrl,c
  2982  001AAC  0E10               	movlw	high __npowers_
  2983  001AAE  D0F2               	goto	L14
  2984  001AB0  D0FD               	goto	l162
  2985  001AB2                     l2140:
  2986                           
  2987                           ;doprnt.c: 435: }
  2988                           ;doprnt.c: 436: if(scl>=110)
  2989  001AB2  502A               	movf	scale@scl,w,c
  2990  001AB4  0A80               	xorlw	128
  2991  001AB6  0F12               	addlw	-238
  2992  001AB8  A0D8               	btfss	status,0,c
  2993  001ABA  D08D               	goto	l2148
  2994                           
  2995                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2996  001ABC  0E00               	movlw	0
  2997  001ABE  6E12               	movwf	___wmul@multiplicand+1,c
  2998  001AC0  0E03               	movlw	3
  2999  001AC2  6E11               	movwf	___wmul@multiplicand,c
  3000  001AC4  0E00               	movlw	0
  3001  001AC6  6E0A               	movwf	___awdiv@divisor+1,c
  3002  001AC8  0E0A               	movlw	10
  3003  001ACA  6E09               	movwf	___awdiv@divisor,c
  3004  001ACC  0E00               	movlw	0
  3005  001ACE  6E04               	movwf	___awmod@divisor+1,c
  3006  001AD0  0E64               	movlw	100
  3007  001AD2  6E03               	movwf	___awmod@divisor,c
  3008  001AD4  502A               	movf	scale@scl,w,c
  3009  001AD6  6E01               	movwf	___awmod@dividend,c
  3010  001AD8  6A02               	clrf	___awmod@dividend+1,c
  3011  001ADA  BE01               	btfsc	___awmod@dividend,7,c
  3012  001ADC  0602               	decf	___awmod@dividend+1,f,c
  3013  001ADE  EC44  F016         	call	___awmod	;wreg free
  3014  001AE2  C001  F007         	movff	?___awmod,___awdiv@dividend
  3015  001AE6  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3016  001AEA  EC68  F015         	call	___awdiv	;wreg free
  3017  001AEE  0E09               	movlw	9
  3018  001AF0  2407               	addwf	?___awdiv,w,c
  3019  001AF2  6E0F               	movwf	___wmul@multiplier,c
  3020  001AF4  0E00               	movlw	0
  3021  001AF6  2008               	addwfc	?___awdiv+1,w,c
  3022  001AF8  6E10               	movwf	___wmul@multiplier+1,c
  3023  001AFA  EC2D  F017         	call	___wmul	;wreg free
  3024  001AFE  0E50               	movlw	low __powers_
  3025  001B00  240F               	addwf	?___wmul,w,c
  3026  001B02  6EF6               	movwf	tblptrl,c
  3027  001B04  0E10               	movlw	high __powers_
  3028  001B06  2010               	addwfc	?___wmul+1,w,c
  3029  001B08  6EF7               	movwf	tblptrh,c
  3030  001B0A                     	if	0	;There are less than 3 active tblptr bytes
  3031  001B0A                     	endif
  3032  001B0A  0009               	tblrd		*+
  3033  001B0C  CFF5 F018          	movff	tablat,___ftmul@f2
  3034  001B10  0009               	tblrd		*+
  3035  001B12  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3036  001B16  000A               	tblrd		*-
  3037  001B18  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3038  001B1C  0E00               	movlw	0
  3039  001B1E  6E0A               	movwf	___awdiv@divisor+1,c
  3040  001B20  0E64               	movlw	100
  3041  001B22  6E09               	movwf	___awdiv@divisor,c
  3042  001B24  502A               	movf	scale@scl,w,c
  3043  001B26  6E07               	movwf	___awdiv@dividend,c
  3044  001B28  6A08               	clrf	___awdiv@dividend+1,c
  3045  001B2A  BE07               	btfsc	___awdiv@dividend,7,c
  3046  001B2C  0608               	decf	___awdiv@dividend+1,f,c
  3047  001B2E  EC68  F015         	call	___awdiv	;wreg free
  3048  001B32  0E12               	movlw	18
  3049  001B34  2407               	addwf	?___awdiv,w,c
  3050  001B36  6E0F               	movwf	___wmul@multiplier,c
  3051  001B38  0E00               	movlw	0
  3052  001B3A  2008               	addwfc	?___awdiv+1,w,c
  3053  001B3C  6E10               	movwf	___wmul@multiplier+1,c
  3054  001B3E  0E00               	movlw	0
  3055  001B40  6E12               	movwf	___wmul@multiplicand+1,c
  3056  001B42  0E03               	movlw	3
  3057  001B44  6E11               	movwf	___wmul@multiplicand,c
  3058  001B46  EC2D  F017         	call	___wmul	;wreg free
  3059  001B4A  0E50               	movlw	low __powers_
  3060  001B4C  240F               	addwf	?___wmul,w,c
  3061  001B4E  6EF6               	movwf	tblptrl,c
  3062  001B50  0E10               	movlw	high __powers_
  3063  001B52  2010               	addwfc	?___wmul+1,w,c
  3064  001B54  6EF7               	movwf	tblptrh,c
  3065  001B56                     	if	0	;There are less than 3 active tblptr bytes
  3066  001B56                     	endif
  3067  001B56  0009               	tblrd		*+
  3068  001B58  CFF5 F015          	movff	tablat,___ftmul@f1
  3069  001B5C  0009               	tblrd		*+
  3070  001B5E  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3071  001B62  000A               	tblrd		*-
  3072  001B64  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3073  001B68  EC79  F012         	call	___ftmul	;wreg free
  3074  001B6C  C015  F027         	movff	?___ftmul,_scale$1242
  3075  001B70  C016  F028         	movff	?___ftmul+1,_scale$1242+1
  3076  001B74  C017  F029         	movff	?___ftmul+2,_scale$1242+2
  3077                           
  3078                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  3079  001B78  C027  F015         	movff	_scale$1242,___ftmul@f1
  3080  001B7C  C028  F016         	movff	_scale$1242+1,___ftmul@f1+1
  3081  001B80  C029  F017         	movff	_scale$1242+2,___ftmul@f1+2
  3082  001B84  0E00               	movlw	0
  3083  001B86  6E12               	movwf	___wmul@multiplicand+1,c
  3084  001B88  0E03               	movlw	3
  3085  001B8A  6E11               	movwf	___wmul@multiplicand,c
  3086  001B8C  0E00               	movlw	0
  3087  001B8E  6E04               	movwf	___awmod@divisor+1,c
  3088  001B90  0E0A               	movlw	10
  3089  001B92  6E03               	movwf	___awmod@divisor,c
  3090  001B94  502A               	movf	scale@scl,w,c
  3091  001B96  6E01               	movwf	___awmod@dividend,c
  3092  001B98  6A02               	clrf	___awmod@dividend+1,c
  3093  001B9A  BE01               	btfsc	___awmod@dividend,7,c
  3094  001B9C  0602               	decf	___awmod@dividend+1,f,c
  3095  001B9E  EC44  F016         	call	___awmod	;wreg free
  3096  001BA2  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3097  001BA6  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3098  001BAA  EC2D  F017         	call	___wmul	;wreg free
  3099  001BAE  0E50               	movlw	low __powers_
  3100  001BB0  240F               	addwf	?___wmul,w,c
  3101  001BB2  6EF6               	movwf	tblptrl,c
  3102  001BB4  0E10               	movlw	high __powers_
  3103  001BB6  2010               	addwfc	?___wmul+1,w,c
  3104  001BB8  6EF7               	movwf	tblptrh,c
  3105  001BBA                     	if	0	;There are less than 3 active tblptr bytes
  3106  001BBA                     	endif
  3107  001BBA  0009               	tblrd		*+
  3108  001BBC  CFF5 F018          	movff	tablat,___ftmul@f2
  3109  001BC0  0009               	tblrd		*+
  3110  001BC2  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3111  001BC6  000A               	tblrd		*-
  3112  001BC8  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3113  001BCC  EC79  F012         	call	___ftmul	;wreg free
  3114  001BD0  D053               	goto	L15
  3115  001BD2  D06C               	goto	l162
  3116  001BD4  D059               	goto	l2154
  3117  001BD6                     l2148:
  3118                           
  3119                           ;doprnt.c: 438: else if(scl > 10)
  3120  001BD6  502A               	movf	scale@scl,w,c
  3121  001BD8  0A80               	xorlw	128
  3122  001BDA  0F75               	addlw	-139
  3123  001BDC  A0D8               	btfss	status,0,c
  3124  001BDE  D054               	goto	l2154
  3125                           
  3126                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  3127  001BE0  0E00               	movlw	0
  3128  001BE2  6E0A               	movwf	___awdiv@divisor+1,c
  3129  001BE4  0E0A               	movlw	10
  3130  001BE6  6E09               	movwf	___awdiv@divisor,c
  3131  001BE8  502A               	movf	scale@scl,w,c
  3132  001BEA  6E07               	movwf	___awdiv@dividend,c
  3133  001BEC  6A08               	clrf	___awdiv@dividend+1,c
  3134  001BEE  BE07               	btfsc	___awdiv@dividend,7,c
  3135  001BF0  0608               	decf	___awdiv@dividend+1,f,c
  3136  001BF2  EC68  F015         	call	___awdiv	;wreg free
  3137  001BF6  0E09               	movlw	9
  3138  001BF8  2407               	addwf	?___awdiv,w,c
  3139  001BFA  6E0F               	movwf	___wmul@multiplier,c
  3140  001BFC  0E00               	movlw	0
  3141  001BFE  2008               	addwfc	?___awdiv+1,w,c
  3142  001C00  6E10               	movwf	___wmul@multiplier+1,c
  3143  001C02  0E00               	movlw	0
  3144  001C04  6E12               	movwf	___wmul@multiplicand+1,c
  3145  001C06  0E03               	movlw	3
  3146  001C08  6E11               	movwf	___wmul@multiplicand,c
  3147  001C0A  EC2D  F017         	call	___wmul	;wreg free
  3148  001C0E  0E50               	movlw	low __powers_
  3149  001C10  240F               	addwf	?___wmul,w,c
  3150  001C12  6EF6               	movwf	tblptrl,c
  3151  001C14  0E10               	movlw	high __powers_
  3152  001C16  2010               	addwfc	?___wmul+1,w,c
  3153  001C18  6EF7               	movwf	tblptrh,c
  3154  001C1A                     	if	0	;There are less than 3 active tblptr bytes
  3155  001C1A                     	endif
  3156  001C1A  0009               	tblrd		*+
  3157  001C1C  CFF5 F015          	movff	tablat,___ftmul@f1
  3158  001C20  0009               	tblrd		*+
  3159  001C22  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3160  001C26  000A               	tblrd		*-
  3161  001C28  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3162  001C2C  0E00               	movlw	0
  3163  001C2E  6E12               	movwf	___wmul@multiplicand+1,c
  3164  001C30  0E03               	movlw	3
  3165  001C32  6E11               	movwf	___wmul@multiplicand,c
  3166  001C34  0E00               	movlw	0
  3167  001C36  6E04               	movwf	___awmod@divisor+1,c
  3168  001C38  0E0A               	movlw	10
  3169  001C3A  6E03               	movwf	___awmod@divisor,c
  3170  001C3C  502A               	movf	scale@scl,w,c
  3171  001C3E  6E01               	movwf	___awmod@dividend,c
  3172  001C40  6A02               	clrf	___awmod@dividend+1,c
  3173  001C42  BE01               	btfsc	___awmod@dividend,7,c
  3174  001C44  0602               	decf	___awmod@dividend+1,f,c
  3175  001C46  EC44  F016         	call	___awmod	;wreg free
  3176  001C4A  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3177  001C4E  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3178  001C52  EC2D  F017         	call	___wmul	;wreg free
  3179  001C56  0E50               	movlw	low __powers_
  3180  001C58  240F               	addwf	?___wmul,w,c
  3181  001C5A  6EF6               	movwf	tblptrl,c
  3182  001C5C  0E10               	movlw	high __powers_
  3183  001C5E  2010               	addwfc	?___wmul+1,w,c
  3184  001C60  6EF7               	movwf	tblptrh,c
  3185  001C62                     	if	0	;There are less than 3 active tblptr bytes
  3186  001C62                     	endif
  3187  001C62  0009               	tblrd		*+
  3188  001C64  CFF5 F018          	movff	tablat,___ftmul@f2
  3189  001C68  0009               	tblrd		*+
  3190  001C6A  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3191  001C6E  000A               	tblrd		*-
  3192  001C70  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3193  001C74  EC79  F012         	call	___ftmul	;wreg free
  3194  001C78                     L15:
  3195  001C78  C015  F024         	movff	?___ftmul,?_scale
  3196  001C7C  C016  F025         	movff	?___ftmul+1,?_scale+1
  3197  001C80  C017  F026         	movff	?___ftmul+2,?_scale+2
  3198  001C84  D013               	goto	l162
  3199  001C86  D000               	goto	l2154
  3200  001C88                     l2154:
  3201                           
  3202                           ;doprnt.c: 440: return _powers_[scl];
  3203  001C88  502A               	movf	scale@scl,w,c
  3204  001C8A  0D03               	mullw	3
  3205  001C8C  0E50               	movlw	low __powers_
  3206  001C8E  24F3               	addwf	prodl,w,c
  3207  001C90  6EF6               	movwf	tblptrl,c
  3208  001C92  0E10               	movlw	high __powers_
  3209  001C94                     L14:
  3210  001C94  20F4               	addwfc	prodh,w,c
  3211  001C96  6EF7               	movwf	tblptrh,c
  3212  001C98                     	if	0	;There are less than 3 active tblptr bytes
  3213  001C98                     	endif
  3214  001C98  0009               	tblrd		*+
  3215  001C9A  CFF5 F024          	movff	tablat,?_scale
  3216  001C9E  0009               	tblrd		*+
  3217  001CA0  CFF5 F025          	movff	tablat,?_scale+1
  3218  001CA4  000A               	tblrd		*-
  3219  001CA6  CFF5 F026          	movff	tablat,?_scale+2
  3220  001CAA  D000               	goto	l162
  3221  001CAC                     l162:
  3222  001CAC  0012               	return		;funcret
  3223  001CAE                     __end_of_scale:
  3224                           	opt stack 0
  3225                           tblptru	equ	0xFF8
  3226                           tblptrh	equ	0xFF7
  3227                           tblptrl	equ	0xFF6
  3228                           tablat	equ	0xFF5
  3229                           prodh	equ	0xFF4
  3230                           prodl	equ	0xFF3
  3231                           wreg	equ	0xFE8
  3232                           indf2	equ	0xFDF
  3233                           postinc2	equ	0xFDE
  3234                           postdec2	equ	0xFDD
  3235                           fsr2h	equ	0xFDA
  3236                           fsr2l	equ	0xFD9
  3237                           status	equ	0xFD8
  3238                           
  3239 ;; *************** function _putch *****************
  3240 ;; Defined at:
  3241 ;;		line 25 in file "lab5.c"
  3242 ;; Parameters:    Size  Location     Type
  3243 ;;  c               1    wreg     unsigned char 
  3244 ;; Auto vars:     Size  Location     Type
  3245 ;;  c               1    0[COMRAM] unsigned char 
  3246 ;; Return value:  Size  Location     Type
  3247 ;;		None               void
  3248 ;; Registers used:
  3249 ;;		wreg
  3250 ;; Tracked objects:
  3251 ;;		On entry : 0/0
  3252 ;;		On exit  : 0/0
  3253 ;;		Unchanged: 0/0
  3254 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3255 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3256 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3257 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3258 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3259 ;;Total ram usage:        1 bytes
  3260 ;; Hardware stack levels used:    1
  3261 ;; This function calls:
  3262 ;;		Nothing
  3263 ;; This function is called by:
  3264 ;;		_printf
  3265 ;; This function uses a non-reentrant model
  3266 ;;
  3267                           
  3268                           	psect	text6
  3269  002F6A                     __ptext6:
  3270                           	opt stack 0
  3271  002F6A                     _putch:
  3272                           	opt stack 29
  3273                           
  3274                           ;incstack = 0
  3275                           ;putch@c stored from wreg
  3276  002F6A  6E01               	movwf	putch@c,c
  3277  002F6C  D000               	goto	l56
  3278  002F6E                     l56:
  3279  002F6E  A89E               	btfss	3998,4,c	;volatile
  3280  002F70  D7FE               	goto	l56
  3281  002F72  C001  FFAD         	movff	putch@c,4013	;volatile
  3282  002F76  0012               	return		;funcret
  3283  002F78                     __end_of_putch:
  3284                           	opt stack 0
  3285                           tblptru	equ	0xFF8
  3286                           tblptrh	equ	0xFF7
  3287                           tblptrl	equ	0xFF6
  3288                           tablat	equ	0xFF5
  3289                           prodh	equ	0xFF4
  3290                           prodl	equ	0xFF3
  3291                           wreg	equ	0xFE8
  3292                           indf2	equ	0xFDF
  3293                           postinc2	equ	0xFDE
  3294                           postdec2	equ	0xFDD
  3295                           fsr2h	equ	0xFDA
  3296                           fsr2l	equ	0xFD9
  3297                           status	equ	0xFD8
  3298                           
  3299 ;; *************** function _isdigit *****************
  3300 ;; Defined at:
  3301 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\isdigit.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;  c               1    wreg     unsigned char 
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;  c               1    2[COMRAM] unsigned char 
  3306 ;; Return value:  Size  Location     Type
  3307 ;;		None               void
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3315 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3316 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3317 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3318 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;Total ram usage:        3 bytes
  3320 ;; Hardware stack levels used:    1
  3321 ;; This function calls:
  3322 ;;		Nothing
  3323 ;; This function is called by:
  3324 ;;		_printf
  3325 ;; This function uses a non-reentrant model
  3326 ;;
  3327                           
  3328                           	psect	text7
  3329  002ECC                     __ptext7:
  3330                           	opt stack 0
  3331  002ECC                     _isdigit:
  3332                           	opt stack 29
  3333                           
  3334                           ;incstack = 0
  3335                           ;isdigit@c stored from wreg
  3336  002ECC  6E03               	movwf	isdigit@c,c
  3337  002ECE  0E00               	movlw	0
  3338  002ED0  6E02               	movwf	_isdigit$992,c
  3339  002ED2  0E3A               	movlw	58
  3340  002ED4  6003               	cpfslt	isdigit@c,c
  3341  002ED6  D006               	goto	l2166
  3342  002ED8  0E2F               	movlw	47
  3343  002EDA  6403               	cpfsgt	isdigit@c,c
  3344  002EDC  D003               	goto	l2166
  3345  002EDE  0E01               	movlw	1
  3346  002EE0  6E02               	movwf	_isdigit$992,c
  3347  002EE2  D000               	goto	l2166
  3348  002EE4                     l2166:
  3349  002EE4  C002  F001         	movff	_isdigit$992,??_isdigit
  3350  002EE8  3001               	rrcf	??_isdigit,w,c
  3351  002EEA  D000               	goto	l705
  3352  002EEC                     l705:
  3353  002EEC  0012               	return		;funcret
  3354  002EEE                     __end_of_isdigit:
  3355                           	opt stack 0
  3356                           tblptru	equ	0xFF8
  3357                           tblptrh	equ	0xFF7
  3358                           tblptrl	equ	0xFF6
  3359                           tablat	equ	0xFF5
  3360                           prodh	equ	0xFF4
  3361                           prodl	equ	0xFF3
  3362                           wreg	equ	0xFE8
  3363                           indf2	equ	0xFDF
  3364                           postinc2	equ	0xFDE
  3365                           postdec2	equ	0xFDD
  3366                           fsr2h	equ	0xFDA
  3367                           fsr2l	equ	0xFD9
  3368                           status	equ	0xFD8
  3369                           
  3370 ;; *************** function _fround *****************
  3371 ;; Defined at:
  3372 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\doprnt.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;  prec            1    wreg     unsigned char 
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;  prec            1   44[COMRAM] unsigned char 
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  3   35[COMRAM] unsigned char 
  3379 ;; Registers used:
  3380 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3386 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3387 ;;      Locals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3389 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3390 ;;Total ram usage:       10 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    2
  3393 ;; This function calls:
  3394 ;;		___awdiv
  3395 ;;		___awmod
  3396 ;;		___ftmul
  3397 ;;		___wmul
  3398 ;; This function is called by:
  3399 ;;		_printf
  3400 ;; This function uses a non-reentrant model
  3401 ;;
  3402                           
  3403                           	psect	text8
  3404  001CAE                     __ptext8:
  3405                           	opt stack 0
  3406  001CAE                     _fround:
  3407                           	opt stack 27
  3408                           
  3409                           ;incstack = 0
  3410                           ;fround@prec stored from wreg
  3411  001CAE  6E2D               	movwf	fround@prec,c
  3412                           
  3413                           ;doprnt.c: 413: if(prec>=110)
  3414  001CB0  0E6D               	movlw	109
  3415  001CB2  642D               	cpfsgt	fround@prec,c
  3416  001CB4  D09B               	goto	l2108
  3417                           
  3418                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3419  001CB6  0E00               	movlw	0
  3420  001CB8  6E12               	movwf	___wmul@multiplicand+1,c
  3421  001CBA  0E03               	movlw	3
  3422  001CBC  6E11               	movwf	___wmul@multiplicand,c
  3423  001CBE  0E00               	movlw	0
  3424  001CC0  6E0A               	movwf	___awdiv@divisor+1,c
  3425  001CC2  0E0A               	movlw	10
  3426  001CC4  6E09               	movwf	___awdiv@divisor,c
  3427  001CC6  0E00               	movlw	0
  3428  001CC8  6E04               	movwf	___awmod@divisor+1,c
  3429  001CCA  0E64               	movlw	100
  3430  001CCC  6E03               	movwf	___awmod@divisor,c
  3431  001CCE  C02D  F001         	movff	fround@prec,___awmod@dividend
  3432  001CD2  6A02               	clrf	___awmod@dividend+1,c
  3433  001CD4  EC44  F016         	call	___awmod	;wreg free
  3434  001CD8  C001  F007         	movff	?___awmod,___awdiv@dividend
  3435  001CDC  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  3436  001CE0  EC68  F015         	call	___awdiv	;wreg free
  3437  001CE4  0E09               	movlw	9
  3438  001CE6  2407               	addwf	?___awdiv,w,c
  3439  001CE8  6E0F               	movwf	___wmul@multiplier,c
  3440  001CEA  0E00               	movlw	0
  3441  001CEC  2008               	addwfc	?___awdiv+1,w,c
  3442  001CEE  6E10               	movwf	___wmul@multiplier+1,c
  3443  001CF0  EC2D  F017         	call	___wmul	;wreg free
  3444  001CF4  0E29               	movlw	low __npowers_
  3445  001CF6  240F               	addwf	?___wmul,w,c
  3446  001CF8  6EF6               	movwf	tblptrl,c
  3447  001CFA  0E10               	movlw	high __npowers_
  3448  001CFC  2010               	addwfc	?___wmul+1,w,c
  3449  001CFE  6EF7               	movwf	tblptrh,c
  3450  001D00                     	if	0	;There are less than 3 active tblptr bytes
  3451  001D00                     	endif
  3452  001D00  0009               	tblrd		*+
  3453  001D02  CFF5 F018          	movff	tablat,___ftmul@f2
  3454  001D06  0009               	tblrd		*+
  3455  001D08  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3456  001D0C  000A               	tblrd		*-
  3457  001D0E  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3458  001D12  0E00               	movlw	0
  3459  001D14  6E0A               	movwf	___awdiv@divisor+1,c
  3460  001D16  0E64               	movlw	100
  3461  001D18  6E09               	movwf	___awdiv@divisor,c
  3462  001D1A  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3463  001D1E  6A08               	clrf	___awdiv@dividend+1,c
  3464  001D20  EC68  F015         	call	___awdiv	;wreg free
  3465  001D24  0E12               	movlw	18
  3466  001D26  2407               	addwf	?___awdiv,w,c
  3467  001D28  6E0F               	movwf	___wmul@multiplier,c
  3468  001D2A  0E00               	movlw	0
  3469  001D2C  2008               	addwfc	?___awdiv+1,w,c
  3470  001D2E  6E10               	movwf	___wmul@multiplier+1,c
  3471  001D30  0E00               	movlw	0
  3472  001D32  6E12               	movwf	___wmul@multiplicand+1,c
  3473  001D34  0E03               	movlw	3
  3474  001D36  6E11               	movwf	___wmul@multiplicand,c
  3475  001D38  EC2D  F017         	call	___wmul	;wreg free
  3476  001D3C  0E29               	movlw	low __npowers_
  3477  001D3E  240F               	addwf	?___wmul,w,c
  3478  001D40  6EF6               	movwf	tblptrl,c
  3479  001D42  0E10               	movlw	high __npowers_
  3480  001D44  2010               	addwfc	?___wmul+1,w,c
  3481  001D46  6EF7               	movwf	tblptrh,c
  3482  001D48                     	if	0	;There are less than 3 active tblptr bytes
  3483  001D48                     	endif
  3484  001D48  0009               	tblrd		*+
  3485  001D4A  CFF5 F015          	movff	tablat,___ftmul@f1
  3486  001D4E  0009               	tblrd		*+
  3487  001D50  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3488  001D54  000A               	tblrd		*-
  3489  001D56  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3490  001D5A  EC79  F012         	call	___ftmul	;wreg free
  3491  001D5E  C015  F02A         	movff	?___ftmul,_fround$1240
  3492  001D62  C016  F02B         	movff	?___ftmul+1,_fround$1240+1
  3493  001D66  C017  F02C         	movff	?___ftmul+2,_fround$1240+2
  3494                           
  3495                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3496  001D6A  0E00               	movlw	0
  3497  001D6C  6E12               	movwf	___wmul@multiplicand+1,c
  3498  001D6E  0E03               	movlw	3
  3499  001D70  6E11               	movwf	___wmul@multiplicand,c
  3500  001D72  0E00               	movlw	0
  3501  001D74  6E04               	movwf	___awmod@divisor+1,c
  3502  001D76  0E0A               	movlw	10
  3503  001D78  6E03               	movwf	___awmod@divisor,c
  3504  001D7A  C02D  F001         	movff	fround@prec,___awmod@dividend
  3505  001D7E  6A02               	clrf	___awmod@dividend+1,c
  3506  001D80  EC44  F016         	call	___awmod	;wreg free
  3507  001D84  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3508  001D88  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3509  001D8C  EC2D  F017         	call	___wmul	;wreg free
  3510  001D90  0E29               	movlw	low __npowers_
  3511  001D92  240F               	addwf	?___wmul,w,c
  3512  001D94  6EF6               	movwf	tblptrl,c
  3513  001D96  0E10               	movlw	high __npowers_
  3514  001D98  2010               	addwfc	?___wmul+1,w,c
  3515  001D9A  6EF7               	movwf	tblptrh,c
  3516  001D9C                     	if	0	;There are less than 3 active tblptr bytes
  3517  001D9C                     	endif
  3518  001D9C  0009               	tblrd		*+
  3519  001D9E  CFF5 F018          	movff	tablat,___ftmul@f2
  3520  001DA2  0009               	tblrd		*+
  3521  001DA4  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3522  001DA8  000A               	tblrd		*-
  3523  001DAA  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3524  001DAE  C02A  F015         	movff	_fround$1240,___ftmul@f1
  3525  001DB2  C02B  F016         	movff	_fround$1240+1,___ftmul@f1+1
  3526  001DB6  C02C  F017         	movff	_fround$1240+2,___ftmul@f1+2
  3527  001DBA  EC79  F012         	call	___ftmul	;wreg free
  3528  001DBE  C015  F027         	movff	?___ftmul,_fround$1241
  3529  001DC2  C016  F028         	movff	?___ftmul+1,_fround$1241+1
  3530  001DC6  C017  F029         	movff	?___ftmul+2,_fround$1241+2
  3531                           
  3532                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  3533  001DCA  C027  F015         	movff	_fround$1241,___ftmul@f1
  3534  001DCE  C028  F016         	movff	_fround$1241+1,___ftmul@f1+1
  3535  001DD2  C029  F017         	movff	_fround$1241+2,___ftmul@f1+2
  3536  001DD6  0E00               	movlw	0
  3537  001DD8  6E18               	movwf	___ftmul@f2,c
  3538  001DDA  0E00               	movlw	0
  3539  001DDC  6E19               	movwf	___ftmul@f2+1,c
  3540  001DDE  0E3F               	movlw	63
  3541  001DE0  6E1A               	movwf	___ftmul@f2+2,c
  3542  001DE2  EC79  F012         	call	___ftmul	;wreg free
  3543  001DE6  D07D               	goto	L17
  3544  001DE8  D083               	goto	l155
  3545  001DEA  D062               	goto	l2116
  3546  001DEC                     l2108:
  3547                           
  3548                           ;doprnt.c: 415: else if(prec > 10)
  3549  001DEC  0E0A               	movlw	10
  3550  001DEE  642D               	cpfsgt	fround@prec,c
  3551  001DF0  D05F               	goto	l2116
  3552                           
  3553                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3554  001DF2  0E00               	movlw	0
  3555  001DF4  6E12               	movwf	___wmul@multiplicand+1,c
  3556  001DF6  0E03               	movlw	3
  3557  001DF8  6E11               	movwf	___wmul@multiplicand,c
  3558  001DFA  0E00               	movlw	0
  3559  001DFC  6E04               	movwf	___awmod@divisor+1,c
  3560  001DFE  0E0A               	movlw	10
  3561  001E00  6E03               	movwf	___awmod@divisor,c
  3562  001E02  C02D  F001         	movff	fround@prec,___awmod@dividend
  3563  001E06  6A02               	clrf	___awmod@dividend+1,c
  3564  001E08  EC44  F016         	call	___awmod	;wreg free
  3565  001E0C  C001  F00F         	movff	?___awmod,___wmul@multiplier
  3566  001E10  C002  F010         	movff	?___awmod+1,___wmul@multiplier+1
  3567  001E14  EC2D  F017         	call	___wmul	;wreg free
  3568  001E18  0E29               	movlw	low __npowers_
  3569  001E1A  240F               	addwf	?___wmul,w,c
  3570  001E1C  6EF6               	movwf	tblptrl,c
  3571  001E1E  0E10               	movlw	high __npowers_
  3572  001E20  2010               	addwfc	?___wmul+1,w,c
  3573  001E22  6EF7               	movwf	tblptrh,c
  3574  001E24                     	if	0	;There are less than 3 active tblptr bytes
  3575  001E24                     	endif
  3576  001E24  0009               	tblrd		*+
  3577  001E26  CFF5 F018          	movff	tablat,___ftmul@f2
  3578  001E2A  0009               	tblrd		*+
  3579  001E2C  CFF5 F019          	movff	tablat,___ftmul@f2+1
  3580  001E30  000A               	tblrd		*-
  3581  001E32  CFF5 F01A          	movff	tablat,___ftmul@f2+2
  3582  001E36  0E00               	movlw	0
  3583  001E38  6E0A               	movwf	___awdiv@divisor+1,c
  3584  001E3A  0E0A               	movlw	10
  3585  001E3C  6E09               	movwf	___awdiv@divisor,c
  3586  001E3E  C02D  F007         	movff	fround@prec,___awdiv@dividend
  3587  001E42  6A08               	clrf	___awdiv@dividend+1,c
  3588  001E44  EC68  F015         	call	___awdiv	;wreg free
  3589  001E48  0E09               	movlw	9
  3590  001E4A  2407               	addwf	?___awdiv,w,c
  3591  001E4C  6E0F               	movwf	___wmul@multiplier,c
  3592  001E4E  0E00               	movlw	0
  3593  001E50  2008               	addwfc	?___awdiv+1,w,c
  3594  001E52  6E10               	movwf	___wmul@multiplier+1,c
  3595  001E54  0E00               	movlw	0
  3596  001E56  6E12               	movwf	___wmul@multiplicand+1,c
  3597  001E58  0E03               	movlw	3
  3598  001E5A  6E11               	movwf	___wmul@multiplicand,c
  3599  001E5C  EC2D  F017         	call	___wmul	;wreg free
  3600  001E60  0E29               	movlw	low __npowers_
  3601  001E62  240F               	addwf	?___wmul,w,c
  3602  001E64  6EF6               	movwf	tblptrl,c
  3603  001E66  0E10               	movlw	high __npowers_
  3604  001E68  2010               	addwfc	?___wmul+1,w,c
  3605  001E6A  6EF7               	movwf	tblptrh,c
  3606  001E6C                     	if	0	;There are less than 3 active tblptr bytes
  3607  001E6C                     	endif
  3608  001E6C  0009               	tblrd		*+
  3609  001E6E  CFF5 F015          	movff	tablat,___ftmul@f1
  3610  001E72  0009               	tblrd		*+
  3611  001E74  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3612  001E78  000A               	tblrd		*-
  3613  001E7A  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3614  001E7E  EC79  F012         	call	___ftmul	;wreg free
  3615  001E82  C015  F02A         	movff	?___ftmul,_fround$1240
  3616  001E86  C016  F02B         	movff	?___ftmul+1,_fround$1240+1
  3617  001E8A  C017  F02C         	movff	?___ftmul+2,_fround$1240+2
  3618                           
  3619                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  3620  001E8E  C02A  F015         	movff	_fround$1240,___ftmul@f1
  3621  001E92  C02B  F016         	movff	_fround$1240+1,___ftmul@f1+1
  3622  001E96  C02C  F017         	movff	_fround$1240+2,___ftmul@f1+2
  3623  001E9A  0E00               	movlw	0
  3624  001E9C  6E18               	movwf	___ftmul@f2,c
  3625  001E9E  0E00               	movlw	0
  3626  001EA0  6E19               	movwf	___ftmul@f2+1,c
  3627  001EA2  0E3F               	movlw	63
  3628  001EA4  6E1A               	movwf	___ftmul@f2+2,c
  3629  001EA6  EC79  F012         	call	___ftmul	;wreg free
  3630  001EAA  D01B               	goto	L17
  3631  001EAC  D021               	goto	l155
  3632  001EAE  D000               	goto	l2116
  3633  001EB0                     l2116:
  3634                           
  3635                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  3636  001EB0  502D               	movf	fround@prec,w,c
  3637  001EB2  0D03               	mullw	3
  3638  001EB4  0E29               	movlw	low __npowers_
  3639  001EB6  24F3               	addwf	prodl,w,c
  3640  001EB8  6EF6               	movwf	tblptrl,c
  3641  001EBA  0E10               	movlw	high __npowers_
  3642  001EBC  20F4               	addwfc	prodh,w,c
  3643  001EBE  6EF7               	movwf	tblptrh,c
  3644  001EC0                     	if	0	;There are less than 3 active tblptr bytes
  3645  001EC0                     	endif
  3646  001EC0  0009               	tblrd		*+
  3647  001EC2  CFF5 F015          	movff	tablat,___ftmul@f1
  3648  001EC6  0009               	tblrd		*+
  3649  001EC8  CFF5 F016          	movff	tablat,___ftmul@f1+1
  3650  001ECC  000A               	tblrd		*-
  3651  001ECE  CFF5 F017          	movff	tablat,___ftmul@f1+2
  3652  001ED2  0E00               	movlw	0
  3653  001ED4  6E18               	movwf	___ftmul@f2,c
  3654  001ED6  0E00               	movlw	0
  3655  001ED8  6E19               	movwf	___ftmul@f2+1,c
  3656  001EDA  0E3F               	movlw	63
  3657  001EDC  6E1A               	movwf	___ftmul@f2+2,c
  3658  001EDE  EC79  F012         	call	___ftmul	;wreg free
  3659  001EE2                     L17:
  3660  001EE2  C015  F024         	movff	?___ftmul,?_fround
  3661  001EE6  C016  F025         	movff	?___ftmul+1,?_fround+1
  3662  001EEA  C017  F026         	movff	?___ftmul+2,?_fround+2
  3663  001EEE  D000               	goto	l155
  3664  001EF0                     l155:
  3665  001EF0  0012               	return		;funcret
  3666  001EF2                     __end_of_fround:
  3667                           	opt stack 0
  3668                           tblptru	equ	0xFF8
  3669                           tblptrh	equ	0xFF7
  3670                           tblptrl	equ	0xFF6
  3671                           tablat	equ	0xFF5
  3672                           prodh	equ	0xFF4
  3673                           prodl	equ	0xFF3
  3674                           wreg	equ	0xFE8
  3675                           indf2	equ	0xFDF
  3676                           postinc2	equ	0xFDE
  3677                           postdec2	equ	0xFDD
  3678                           fsr2h	equ	0xFDA
  3679                           fsr2l	equ	0xFD9
  3680                           status	equ	0xFD8
  3681                           
  3682 ;; *************** function ___wmul *****************
  3683 ;; Defined at:
  3684 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3685 ;; Parameters:    Size  Location     Type
  3686 ;;  multiplier      2   14[COMRAM] unsigned int 
  3687 ;;  multiplicand    2   16[COMRAM] unsigned int 
  3688 ;; Auto vars:     Size  Location     Type
  3689 ;;  product         2   18[COMRAM] unsigned int 
  3690 ;; Return value:  Size  Location     Type
  3691 ;;                  2   14[COMRAM] unsigned int 
  3692 ;; Registers used:
  3693 ;;		wreg, status,2, status,0, prodl, prodh
  3694 ;; Tracked objects:
  3695 ;;		On entry : 0/0
  3696 ;;		On exit  : 0/0
  3697 ;;		Unchanged: 0/0
  3698 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3699 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3700 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3702 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3703 ;;Total ram usage:        6 bytes
  3704 ;; Hardware stack levels used:    1
  3705 ;; This function calls:
  3706 ;;		Nothing
  3707 ;; This function is called by:
  3708 ;;		_fround
  3709 ;;		_scale
  3710 ;;		_printf
  3711 ;; This function uses a non-reentrant model
  3712 ;;
  3713                           
  3714                           	psect	text9
  3715  002E5A                     __ptext9:
  3716                           	opt stack 0
  3717  002E5A                     ___wmul:
  3718                           	opt stack 28
  3719                           
  3720                           ;incstack = 0
  3721  002E5A  500F               	movf	___wmul@multiplier,w,c
  3722  002E5C  0211               	mulwf	___wmul@multiplicand,c
  3723  002E5E  CFF3 F013          	movff	prodl,___wmul@product
  3724  002E62  CFF4 F014          	movff	prodh,___wmul@product+1
  3725  002E66  500F               	movf	___wmul@multiplier,w,c
  3726  002E68  0212               	mulwf	___wmul@multiplicand+1,c
  3727  002E6A  50F3               	movf	prodl,w,c
  3728  002E6C  2614               	addwf	___wmul@product+1,f,c
  3729  002E6E  5010               	movf	___wmul@multiplier+1,w,c
  3730  002E70  0211               	mulwf	___wmul@multiplicand,c
  3731  002E72  50F3               	movf	prodl,w,c
  3732  002E74  2614               	addwf	___wmul@product+1,f,c
  3733  002E76  C013  F00F         	movff	___wmul@product,?___wmul
  3734  002E7A  C014  F010         	movff	___wmul@product+1,?___wmul+1
  3735  002E7E  D000               	goto	l240
  3736  002E80                     l240:
  3737  002E80  0012               	return		;funcret
  3738  002E82                     __end_of___wmul:
  3739                           	opt stack 0
  3740                           tblptru	equ	0xFF8
  3741                           tblptrh	equ	0xFF7
  3742                           tblptrl	equ	0xFF6
  3743                           tablat	equ	0xFF5
  3744                           prodh	equ	0xFF4
  3745                           prodl	equ	0xFF3
  3746                           wreg	equ	0xFE8
  3747                           indf2	equ	0xFDF
  3748                           postinc2	equ	0xFDE
  3749                           postdec2	equ	0xFDD
  3750                           fsr2h	equ	0xFDA
  3751                           fsr2l	equ	0xFD9
  3752                           status	equ	0xFD8
  3753                           
  3754 ;; *************** function ___ftmul *****************
  3755 ;; Defined at:
  3756 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3757 ;; Parameters:    Size  Location     Type
  3758 ;;  f1              3   20[COMRAM] float 
  3759 ;;  f2              3   23[COMRAM] float 
  3760 ;; Auto vars:     Size  Location     Type
  3761 ;;  f3_as_produc    3   30[COMRAM] unsigned um
  3762 ;;  sign            1   34[COMRAM] unsigned char 
  3763 ;;  cntr            1   33[COMRAM] unsigned char 
  3764 ;;  exp             1   29[COMRAM] unsigned char 
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  3   20[COMRAM] float 
  3767 ;; Registers used:
  3768 ;;		wreg, status,2, status,0, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3774 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3775 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3776 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3777 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3778 ;;Total ram usage:       15 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    1
  3781 ;; This function calls:
  3782 ;;		___ftpack
  3783 ;; This function is called by:
  3784 ;;		_main
  3785 ;;		_fround
  3786 ;;		_scale
  3787 ;;		_printf
  3788 ;; This function uses a non-reentrant model
  3789 ;;
  3790                           
  3791                           	psect	text10
  3792  0024F2                     __ptext10:
  3793                           	opt stack 0
  3794  0024F2                     ___ftmul:
  3795                           	opt stack 27
  3796                           
  3797                           ;incstack = 0
  3798  0024F2  C017  F01B         	movff	___ftmul@f1+2,??___ftmul
  3799  0024F6  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3800  0024F8  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3801  0024FA  3416               	rlcf	___ftmul@f1+1,w,c
  3802  0024FC  361B               	rlcf	??___ftmul& (0+255),f,c
  3803  0024FE  E301               	bnc	u1831
  3804  002500  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3805  002502                     u1831:
  3806  002502  501B               	movf	??___ftmul,w,c
  3807  002504  6E1E               	movwf	___ftmul@exp,c
  3808  002506  501E               	movf	___ftmul@exp,w,c
  3809  002508  A4D8               	btfss	status,2,c
  3810  00250A  D002               	goto	l1972
  3811  00250C  D00E               	goto	l1974
  3812  00250E  D06C               	goto	l669
  3813  002510                     l1972:
  3814  002510  C01A  F01B         	movff	___ftmul@f2+2,??___ftmul
  3815  002514  6A1C               	clrf	(??___ftmul+1)& (0+255),c
  3816  002516  6A1D               	clrf	(??___ftmul+2)& (0+255),c
  3817  002518  3419               	rlcf	___ftmul@f2+1,w,c
  3818  00251A  361B               	rlcf	??___ftmul& (0+255),f,c
  3819  00251C  E301               	bnc	u1851
  3820  00251E  801C               	bsf	(??___ftmul+1)& (0+255),0,c
  3821  002520                     u1851:
  3822  002520  501B               	movf	??___ftmul,w,c
  3823  002522  6E23               	movwf	___ftmul@sign,c
  3824  002524  5023               	movf	___ftmul@sign,w,c
  3825  002526  A4D8               	btfss	status,2,c
  3826  002528  D007               	goto	l1978
  3827  00252A                     l1974:
  3828  00252A  0E00               	movlw	0
  3829  00252C  6E15               	movwf	?___ftmul,c
  3830  00252E  0E00               	movlw	0
  3831  002530  6E16               	movwf	?___ftmul+1,c
  3832  002532  0E00               	movlw	0
  3833  002534  6E17               	movwf	?___ftmul+2,c
  3834  002536  D058               	goto	l669
  3835  002538                     l1978:
  3836  002538  5023               	movf	___ftmul@sign,w,c
  3837  00253A  0F7B               	addlw	123
  3838  00253C  261E               	addwf	___ftmul@exp,f,c
  3839  00253E  C017  F023         	movff	___ftmul@f1+2,___ftmul@sign
  3840  002542  501A               	movf	___ftmul@f2+2,w,c
  3841  002544  1A23               	xorwf	___ftmul@sign,f,c
  3842  002546  0E80               	movlw	128
  3843  002548  1623               	andwf	___ftmul@sign,f,c
  3844  00254A  8E16               	bsf	___ftmul@f1+1,7,c
  3845  00254C  8E19               	bsf	___ftmul@f2+1,7,c
  3846  00254E  0EFF               	movlw	255
  3847  002550  1618               	andwf	___ftmul@f2,f,c
  3848  002552  0EFF               	movlw	255
  3849  002554  1619               	andwf	___ftmul@f2+1,f,c
  3850  002556  0E00               	movlw	0
  3851  002558  161A               	andwf	___ftmul@f2+2,f,c
  3852  00255A  0E00               	movlw	0
  3853  00255C  6E1F               	movwf	___ftmul@f3_as_product,c
  3854  00255E  0E00               	movlw	0
  3855  002560  6E20               	movwf	___ftmul@f3_as_product+1,c
  3856  002562  0E00               	movlw	0
  3857  002564  6E21               	movwf	___ftmul@f3_as_product+2,c
  3858  002566  0E07               	movlw	7
  3859  002568  6E22               	movwf	___ftmul@cntr,c
  3860  00256A  D000               	goto	l1992
  3861  00256C                     l1992:
  3862  00256C  A015               	btfss	___ftmul@f1,0,c
  3863  00256E  D007               	goto	l1996
  3864  002570  5018               	movf	___ftmul@f2,w,c
  3865  002572  261F               	addwf	___ftmul@f3_as_product,f,c
  3866  002574  5019               	movf	___ftmul@f2+1,w,c
  3867  002576  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3868  002578  501A               	movf	___ftmul@f2+2,w,c
  3869  00257A  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3870  00257C  D000               	goto	l1996
  3871  00257E                     l1996:
  3872  00257E  90D8               	bcf	status,0,c
  3873  002580  3217               	rrcf	___ftmul@f1+2,f,c
  3874  002582  3216               	rrcf	___ftmul@f1+1,f,c
  3875  002584  3215               	rrcf	___ftmul@f1,f,c
  3876  002586  90D8               	bcf	status,0,c
  3877  002588  3618               	rlcf	___ftmul@f2,f,c
  3878  00258A  3619               	rlcf	___ftmul@f2+1,f,c
  3879  00258C  361A               	rlcf	___ftmul@f2+2,f,c
  3880  00258E  2E22               	decfsz	___ftmul@cntr,f,c
  3881  002590  D7ED               	goto	l1992
  3882  002592  D000               	goto	l2000
  3883  002594                     l2000:
  3884  002594  0E09               	movlw	9
  3885  002596  6E22               	movwf	___ftmul@cntr,c
  3886  002598  D000               	goto	l2002
  3887  00259A                     l2002:
  3888  00259A  A015               	btfss	___ftmul@f1,0,c
  3889  00259C  D007               	goto	l2006
  3890  00259E  5018               	movf	___ftmul@f2,w,c
  3891  0025A0  261F               	addwf	___ftmul@f3_as_product,f,c
  3892  0025A2  5019               	movf	___ftmul@f2+1,w,c
  3893  0025A4  2220               	addwfc	___ftmul@f3_as_product+1,f,c
  3894  0025A6  501A               	movf	___ftmul@f2+2,w,c
  3895  0025A8  2221               	addwfc	___ftmul@f3_as_product+2,f,c
  3896  0025AA  D000               	goto	l2006
  3897  0025AC                     l2006:
  3898  0025AC  90D8               	bcf	status,0,c
  3899  0025AE  3217               	rrcf	___ftmul@f1+2,f,c
  3900  0025B0  3216               	rrcf	___ftmul@f1+1,f,c
  3901  0025B2  3215               	rrcf	___ftmul@f1,f,c
  3902  0025B4  90D8               	bcf	status,0,c
  3903  0025B6  3221               	rrcf	___ftmul@f3_as_product+2,f,c
  3904  0025B8  3220               	rrcf	___ftmul@f3_as_product+1,f,c
  3905  0025BA  321F               	rrcf	___ftmul@f3_as_product,f,c
  3906  0025BC  2E22               	decfsz	___ftmul@cntr,f,c
  3907  0025BE  D7ED               	goto	l2002
  3908  0025C0  D000               	goto	l2010
  3909  0025C2                     l2010:
  3910  0025C2  C01F  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3911  0025C6  C020  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3912  0025CA  C021  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3913  0025CE  C01E  F004         	movff	___ftmul@exp,___ftpack@exp
  3914  0025D2  C023  F005         	movff	___ftmul@sign,___ftpack@sign
  3915  0025D6  ECB3  F014         	call	___ftpack	;wreg free
  3916  0025DA  C001  F015         	movff	?___ftpack,?___ftmul
  3917  0025DE  C002  F016         	movff	?___ftpack+1,?___ftmul+1
  3918  0025E2  C003  F017         	movff	?___ftpack+2,?___ftmul+2
  3919  0025E6  D000               	goto	l669
  3920  0025E8                     l669:
  3921  0025E8  0012               	return		;funcret
  3922  0025EA                     __end_of___ftmul:
  3923                           	opt stack 0
  3924                           tblptru	equ	0xFF8
  3925                           tblptrh	equ	0xFF7
  3926                           tblptrl	equ	0xFF6
  3927                           tablat	equ	0xFF5
  3928                           prodh	equ	0xFF4
  3929                           prodl	equ	0xFF3
  3930                           wreg	equ	0xFE8
  3931                           indf2	equ	0xFDF
  3932                           postinc2	equ	0xFDE
  3933                           postdec2	equ	0xFDD
  3934                           fsr2h	equ	0xFDA
  3935                           fsr2l	equ	0xFD9
  3936                           status	equ	0xFD8
  3937                           
  3938 ;; *************** function ___awmod *****************
  3939 ;; Defined at:
  3940 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  3941 ;; Parameters:    Size  Location     Type
  3942 ;;  dividend        2    0[COMRAM] int 
  3943 ;;  divisor         2    2[COMRAM] int 
  3944 ;; Auto vars:     Size  Location     Type
  3945 ;;  sign            1    5[COMRAM] unsigned char 
  3946 ;;  counter         1    4[COMRAM] unsigned char 
  3947 ;; Return value:  Size  Location     Type
  3948 ;;                  2    0[COMRAM] int 
  3949 ;; Registers used:
  3950 ;;		wreg, status,2, status,0
  3951 ;; Tracked objects:
  3952 ;;		On entry : 0/0
  3953 ;;		On exit  : 0/0
  3954 ;;		Unchanged: 0/0
  3955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3956 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3957 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3959 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3960 ;;Total ram usage:        6 bytes
  3961 ;; Hardware stack levels used:    1
  3962 ;; This function calls:
  3963 ;;		Nothing
  3964 ;; This function is called by:
  3965 ;;		_main
  3966 ;;		_fround
  3967 ;;		_scale
  3968 ;; This function uses a non-reentrant model
  3969 ;;
  3970                           
  3971                           	psect	text11
  3972  002C88                     __ptext11:
  3973                           	opt stack 0
  3974  002C88                     ___awmod:
  3975                           	opt stack 28
  3976                           
  3977                           ;incstack = 0
  3978  002C88  0E00               	movlw	0
  3979  002C8A  6E06               	movwf	___awmod@sign,c
  3980  002C8C  AE02               	btfss	___awmod@dividend+1,7,c
  3981  002C8E  D007               	goto	l2066
  3982  002C90  6C01               	negf	___awmod@dividend,c
  3983  002C92  1E02               	comf	___awmod@dividend+1,f,c
  3984  002C94  B0D8               	btfsc	status,0,c
  3985  002C96  2A02               	incf	___awmod@dividend+1,f,c
  3986  002C98  0E01               	movlw	1
  3987  002C9A  6E06               	movwf	___awmod@sign,c
  3988  002C9C  D000               	goto	l2066
  3989  002C9E                     l2066:
  3990  002C9E  AE04               	btfss	___awmod@divisor+1,7,c
  3991  002CA0  D005               	goto	l2070
  3992  002CA2  6C03               	negf	___awmod@divisor,c
  3993  002CA4  1E04               	comf	___awmod@divisor+1,f,c
  3994  002CA6  B0D8               	btfsc	status,0,c
  3995  002CA8  2A04               	incf	___awmod@divisor+1,f,c
  3996  002CAA  D000               	goto	l2070
  3997  002CAC                     l2070:
  3998  002CAC  5003               	movf	___awmod@divisor,w,c
  3999  002CAE  1004               	iorwf	___awmod@divisor+1,w,c
  4000  002CB0  B4D8               	btfsc	status,2,c
  4001  002CB2  D01D               	goto	l2086
  4002  002CB4  0E01               	movlw	1
  4003  002CB6  6E05               	movwf	___awmod@counter,c
  4004  002CB8  D005               	goto	l2076
  4005  002CBA                     l2074:
  4006  002CBA  90D8               	bcf	status,0,c
  4007  002CBC  3603               	rlcf	___awmod@divisor,f,c
  4008  002CBE  3604               	rlcf	___awmod@divisor+1,f,c
  4009  002CC0  2A05               	incf	___awmod@counter,f,c
  4010  002CC2  D000               	goto	l2076
  4011  002CC4                     l2076:
  4012  002CC4  BE04               	btfsc	___awmod@divisor+1,7,c
  4013  002CC6  D002               	goto	l2078
  4014  002CC8  D7F8               	goto	l2074
  4015  002CCA  D000               	goto	l2078
  4016  002CCC                     l2078:
  4017  002CCC  5003               	movf	___awmod@divisor,w,c
  4018  002CCE  5C01               	subwf	___awmod@dividend,w,c
  4019  002CD0  5004               	movf	___awmod@divisor+1,w,c
  4020  002CD2  5802               	subwfb	___awmod@dividend+1,w,c
  4021  002CD4  A0D8               	btfss	status,0,c
  4022  002CD6  D005               	goto	l2082
  4023  002CD8  5003               	movf	___awmod@divisor,w,c
  4024  002CDA  5E01               	subwf	___awmod@dividend,f,c
  4025  002CDC  5004               	movf	___awmod@divisor+1,w,c
  4026  002CDE  5A02               	subwfb	___awmod@dividend+1,f,c
  4027  002CE0  D000               	goto	l2082
  4028  002CE2                     l2082:
  4029  002CE2  90D8               	bcf	status,0,c
  4030  002CE4  3204               	rrcf	___awmod@divisor+1,f,c
  4031  002CE6  3203               	rrcf	___awmod@divisor,f,c
  4032  002CE8  2E05               	decfsz	___awmod@counter,f,c
  4033  002CEA  D7F0               	goto	l2078
  4034  002CEC  D000               	goto	l2086
  4035  002CEE                     l2086:
  4036  002CEE  5006               	movf	___awmod@sign,w,c
  4037  002CF0  B4D8               	btfsc	status,2,c
  4038  002CF2  D005               	goto	l2090
  4039  002CF4  6C01               	negf	___awmod@dividend,c
  4040  002CF6  1E02               	comf	___awmod@dividend+1,f,c
  4041  002CF8  B0D8               	btfsc	status,0,c
  4042  002CFA  2A02               	incf	___awmod@dividend+1,f,c
  4043  002CFC  D000               	goto	l2090
  4044  002CFE                     l2090:
  4045  002CFE  C001  F001         	movff	___awmod@dividend,?___awmod
  4046  002D02  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  4047  002D06  D000               	goto	l446
  4048  002D08                     l446:
  4049  002D08  0012               	return		;funcret
  4050  002D0A                     __end_of___awmod:
  4051                           	opt stack 0
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           wreg	equ	0xFE8
  4059                           indf2	equ	0xFDF
  4060                           postinc2	equ	0xFDE
  4061                           postdec2	equ	0xFDD
  4062                           fsr2h	equ	0xFDA
  4063                           fsr2l	equ	0xFD9
  4064                           status	equ	0xFD8
  4065                           
  4066 ;; *************** function ___awdiv *****************
  4067 ;; Defined at:
  4068 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  4069 ;; Parameters:    Size  Location     Type
  4070 ;;  dividend        2    6[COMRAM] int 
  4071 ;;  divisor         2    8[COMRAM] int 
  4072 ;; Auto vars:     Size  Location     Type
  4073 ;;  quotient        2   12[COMRAM] int 
  4074 ;;  sign            1   11[COMRAM] unsigned char 
  4075 ;;  counter         1   10[COMRAM] unsigned char 
  4076 ;; Return value:  Size  Location     Type
  4077 ;;                  2    6[COMRAM] int 
  4078 ;; Registers used:
  4079 ;;		wreg, status,2, status,0
  4080 ;; Tracked objects:
  4081 ;;		On entry : 0/0
  4082 ;;		On exit  : 0/0
  4083 ;;		Unchanged: 0/0
  4084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4085 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4086 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4088 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4089 ;;Total ram usage:        8 bytes
  4090 ;; Hardware stack levels used:    1
  4091 ;; This function calls:
  4092 ;;		Nothing
  4093 ;; This function is called by:
  4094 ;;		_set_D1
  4095 ;;		_main
  4096 ;;		_fround
  4097 ;;		_scale
  4098 ;;		_printf
  4099 ;; This function uses a non-reentrant model
  4100 ;;
  4101                           
  4102                           	psect	text12
  4103  002AD0                     __ptext12:
  4104                           	opt stack 0
  4105  002AD0                     ___awdiv:
  4106                           	opt stack 29
  4107                           
  4108                           ;incstack = 0
  4109  002AD0  0E00               	movlw	0
  4110  002AD2  6E0C               	movwf	___awdiv@sign,c
  4111  002AD4  AE0A               	btfss	___awdiv@divisor+1,7,c
  4112  002AD6  D007               	goto	l2022
  4113  002AD8  6C09               	negf	___awdiv@divisor,c
  4114  002ADA  1E0A               	comf	___awdiv@divisor+1,f,c
  4115  002ADC  B0D8               	btfsc	status,0,c
  4116  002ADE  2A0A               	incf	___awdiv@divisor+1,f,c
  4117  002AE0  0E01               	movlw	1
  4118  002AE2  6E0C               	movwf	___awdiv@sign,c
  4119  002AE4  D000               	goto	l2022
  4120  002AE6                     l2022:
  4121  002AE6  AE08               	btfss	___awdiv@dividend+1,7,c
  4122  002AE8  D007               	goto	l2028
  4123  002AEA  6C07               	negf	___awdiv@dividend,c
  4124  002AEC  1E08               	comf	___awdiv@dividend+1,f,c
  4125  002AEE  B0D8               	btfsc	status,0,c
  4126  002AF0  2A08               	incf	___awdiv@dividend+1,f,c
  4127  002AF2  0E01               	movlw	1
  4128  002AF4  1A0C               	xorwf	___awdiv@sign,f,c
  4129  002AF6  D000               	goto	l2028
  4130  002AF8                     l2028:
  4131  002AF8  0E00               	movlw	0
  4132  002AFA  6E0E               	movwf	___awdiv@quotient+1,c
  4133  002AFC  0E00               	movlw	0
  4134  002AFE  6E0D               	movwf	___awdiv@quotient,c
  4135  002B00  5009               	movf	___awdiv@divisor,w,c
  4136  002B02  100A               	iorwf	___awdiv@divisor+1,w,c
  4137  002B04  B4D8               	btfsc	status,2,c
  4138  002B06  D021               	goto	l2050
  4139  002B08  0E01               	movlw	1
  4140  002B0A  6E0B               	movwf	___awdiv@counter,c
  4141  002B0C  D005               	goto	l2036
  4142  002B0E                     l2034:
  4143  002B0E  90D8               	bcf	status,0,c
  4144  002B10  3609               	rlcf	___awdiv@divisor,f,c
  4145  002B12  360A               	rlcf	___awdiv@divisor+1,f,c
  4146  002B14  2A0B               	incf	___awdiv@counter,f,c
  4147  002B16  D000               	goto	l2036
  4148  002B18                     l2036:
  4149  002B18  BE0A               	btfsc	___awdiv@divisor+1,7,c
  4150  002B1A  D002               	goto	l2038
  4151  002B1C  D7F8               	goto	l2034
  4152  002B1E  D000               	goto	l2038
  4153  002B20                     l2038:
  4154  002B20  90D8               	bcf	status,0,c
  4155  002B22  360D               	rlcf	___awdiv@quotient,f,c
  4156  002B24  360E               	rlcf	___awdiv@quotient+1,f,c
  4157  002B26  5009               	movf	___awdiv@divisor,w,c
  4158  002B28  5C07               	subwf	___awdiv@dividend,w,c
  4159  002B2A  500A               	movf	___awdiv@divisor+1,w,c
  4160  002B2C  5808               	subwfb	___awdiv@dividend+1,w,c
  4161  002B2E  A0D8               	btfss	status,0,c
  4162  002B30  D006               	goto	l2046
  4163  002B32  5009               	movf	___awdiv@divisor,w,c
  4164  002B34  5E07               	subwf	___awdiv@dividend,f,c
  4165  002B36  500A               	movf	___awdiv@divisor+1,w,c
  4166  002B38  5A08               	subwfb	___awdiv@dividend+1,f,c
  4167  002B3A  800D               	bsf	___awdiv@quotient,0,c
  4168  002B3C  D000               	goto	l2046
  4169  002B3E                     l2046:
  4170  002B3E  90D8               	bcf	status,0,c
  4171  002B40  320A               	rrcf	___awdiv@divisor+1,f,c
  4172  002B42  3209               	rrcf	___awdiv@divisor,f,c
  4173  002B44  2E0B               	decfsz	___awdiv@counter,f,c
  4174  002B46  D7EC               	goto	l2038
  4175  002B48  D000               	goto	l2050
  4176  002B4A                     l2050:
  4177  002B4A  500C               	movf	___awdiv@sign,w,c
  4178  002B4C  B4D8               	btfsc	status,2,c
  4179  002B4E  D005               	goto	l2054
  4180  002B50  6C0D               	negf	___awdiv@quotient,c
  4181  002B52  1E0E               	comf	___awdiv@quotient+1,f,c
  4182  002B54  B0D8               	btfsc	status,0,c
  4183  002B56  2A0E               	incf	___awdiv@quotient+1,f,c
  4184  002B58  D000               	goto	l2054
  4185  002B5A                     l2054:
  4186  002B5A  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  4187  002B5E  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  4188  002B62  D000               	goto	l433
  4189  002B64                     l433:
  4190  002B64  0012               	return		;funcret
  4191  002B66                     __end_of___awdiv:
  4192                           	opt stack 0
  4193                           tblptru	equ	0xFF8
  4194                           tblptrh	equ	0xFF7
  4195                           tblptrl	equ	0xFF6
  4196                           tablat	equ	0xFF5
  4197                           prodh	equ	0xFF4
  4198                           prodl	equ	0xFF3
  4199                           wreg	equ	0xFE8
  4200                           indf2	equ	0xFDF
  4201                           postinc2	equ	0xFDE
  4202                           postdec2	equ	0xFDD
  4203                           fsr2h	equ	0xFDA
  4204                           fsr2l	equ	0xFD9
  4205                           status	equ	0xFD8
  4206                           
  4207 ;; *************** function __tdiv_to_l_ *****************
  4208 ;; Defined at:
  4209 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  4210 ;; Parameters:    Size  Location     Type
  4211 ;;  f1              3    0[COMRAM] float 
  4212 ;;  f2              3    3[COMRAM] float 
  4213 ;; Auto vars:     Size  Location     Type
  4214 ;;  quot            4    9[COMRAM] unsigned long 
  4215 ;;  exp1            1   14[COMRAM] unsigned char 
  4216 ;;  cntr            1   13[COMRAM] unsigned char 
  4217 ;; Return value:  Size  Location     Type
  4218 ;;                  4    0[COMRAM] unsigned long 
  4219 ;; Registers used:
  4220 ;;		wreg, status,2, status,0
  4221 ;; Tracked objects:
  4222 ;;		On entry : 0/0
  4223 ;;		On exit  : 0/0
  4224 ;;		Unchanged: 0/0
  4225 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4226 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4227 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4228 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4229 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4230 ;;Total ram usage:       15 bytes
  4231 ;; Hardware stack levels used:    1
  4232 ;; This function calls:
  4233 ;;		Nothing
  4234 ;; This function is called by:
  4235 ;;		_printf
  4236 ;; This function uses a non-reentrant model
  4237 ;;
  4238                           
  4239                           	psect	text13
  4240  0022D8                     __ptext13:
  4241                           	opt stack 0
  4242  0022D8                     __tdiv_to_l_:
  4243                           	opt stack 29
  4244                           
  4245                           ;incstack = 0
  4246  0022D8  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  4247  0022DC  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4248  0022DE  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4249  0022E0  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  4250  0022E2  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4251  0022E4  E301               	bnc	u2111
  4252  0022E6  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4253  0022E8                     u2111:
  4254  0022E8  5007               	movf	??__tdiv_to_l_,w,c
  4255  0022EA  6E0F               	movwf	__tdiv_to_l_@exp1,c
  4256  0022EC  500F               	movf	__tdiv_to_l_@exp1,w,c
  4257  0022EE  A4D8               	btfss	status,2,c
  4258  0022F0  D002               	goto	l2176
  4259  0022F2  D05D               	goto	l2218
  4260  0022F4  D078               	goto	l645
  4261  0022F6                     l2176:
  4262  0022F6  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  4263  0022FA  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  4264  0022FC  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  4265  0022FE  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  4266  002300  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  4267  002302  E301               	bnc	u2131
  4268  002304  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  4269  002306                     u2131:
  4270  002306  5007               	movf	??__tdiv_to_l_,w,c
  4271  002308  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4272  00230A  500E               	movf	__tdiv_to_l_@cntr,w,c
  4273  00230C  A4D8               	btfss	status,2,c
  4274  00230E  D002               	goto	l2182
  4275  002310  D04E               	goto	l2218
  4276  002312  D069               	goto	l645
  4277  002314                     l2182:
  4278  002314  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  4279  002316  0EFF               	movlw	255
  4280  002318  1601               	andwf	__tdiv_to_l_@f1,f,c
  4281  00231A  0EFF               	movlw	255
  4282  00231C  1602               	andwf	__tdiv_to_l_@f1+1,f,c
  4283  00231E  0E00               	movlw	0
  4284  002320  1603               	andwf	__tdiv_to_l_@f1+2,f,c
  4285  002322  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  4286  002324  0EFF               	movlw	255
  4287  002326  1604               	andwf	__tdiv_to_l_@f2,f,c
  4288  002328  0EFF               	movlw	255
  4289  00232A  1605               	andwf	__tdiv_to_l_@f2+1,f,c
  4290  00232C  0E00               	movlw	0
  4291  00232E  1606               	andwf	__tdiv_to_l_@f2+2,f,c
  4292  002330  0E00               	movlw	0
  4293  002332  6E0A               	movwf	__tdiv_to_l_@quot,c
  4294  002334  0E00               	movlw	0
  4295  002336  6E0B               	movwf	__tdiv_to_l_@quot+1,c
  4296  002338  0E00               	movlw	0
  4297  00233A  6E0C               	movwf	__tdiv_to_l_@quot+2,c
  4298  00233C  0E00               	movlw	0
  4299  00233E  6E0D               	movwf	__tdiv_to_l_@quot+3,c
  4300  002340  0E7F               	movlw	127
  4301  002342  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4302  002344  500E               	movf	__tdiv_to_l_@cntr,w,c
  4303  002346  0F98               	addlw	152
  4304  002348  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  4305  00234A  0E18               	movlw	24
  4306  00234C  6E0E               	movwf	__tdiv_to_l_@cntr,c
  4307  00234E                     l647:
  4308  00234E  90D8               	bcf	status,0,c
  4309  002350  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4310  002352  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4311  002354  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4312  002356  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4313  002358  5004               	movf	__tdiv_to_l_@f2,w,c
  4314  00235A  5C01               	subwf	__tdiv_to_l_@f1,w,c
  4315  00235C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4316  00235E  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  4317  002360  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4318  002362  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  4319  002364  A0D8               	btfss	status,0,c
  4320  002366  D007               	goto	l648
  4321  002368  5004               	movf	__tdiv_to_l_@f2,w,c
  4322  00236A  5E01               	subwf	__tdiv_to_l_@f1,f,c
  4323  00236C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  4324  00236E  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  4325  002370  5006               	movf	__tdiv_to_l_@f2+2,w,c
  4326  002372  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  4327  002374  800A               	bsf	__tdiv_to_l_@quot,0,c
  4328  002376                     l648:
  4329  002376  90D8               	bcf	status,0,c
  4330  002378  3601               	rlcf	__tdiv_to_l_@f1,f,c
  4331  00237A  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  4332  00237C  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  4333  00237E  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  4334  002380  D7E6               	goto	l647
  4335  002382  D000               	goto	l2204
  4336  002384                     l2204:
  4337  002384  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  4338  002386  D010               	goto	l2216
  4339  002388  500F               	movf	__tdiv_to_l_@exp1,w,c
  4340  00238A  0A80               	xorlw	128
  4341  00238C  0F97               	addlw	151
  4342  00238E  B0D8               	btfsc	status,0,c
  4343  002390  D003               	goto	l2212
  4344  002392  D00D               	goto	l2218
  4345  002394  D028               	goto	l645
  4346  002396  D000               	goto	l2212
  4347  002398                     l2212:
  4348  002398  90D8               	bcf	status,0,c
  4349  00239A  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  4350  00239C  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  4351  00239E  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  4352  0023A0  320A               	rrcf	__tdiv_to_l_@quot,f,c
  4353  0023A2  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  4354  0023A4  D7F9               	goto	l2212
  4355  0023A6  D017               	goto	l654
  4356  0023A8                     l2216:
  4357  0023A8  0E17               	movlw	23
  4358  0023AA  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  4359  0023AC  D011               	goto	l2224
  4360  0023AE                     l2218:
  4361  0023AE  0E00               	movlw	0
  4362  0023B0  6E01               	movwf	?__tdiv_to_l_,c
  4363  0023B2  0E00               	movlw	0
  4364  0023B4  6E02               	movwf	?__tdiv_to_l_+1,c
  4365  0023B6  0E00               	movlw	0
  4366  0023B8  6E03               	movwf	?__tdiv_to_l_+2,c
  4367  0023BA  0E00               	movlw	0
  4368  0023BC  6E04               	movwf	?__tdiv_to_l_+3,c
  4369  0023BE  D013               	goto	l645
  4370  0023C0  D007               	goto	l2224
  4371  0023C2                     l2222:
  4372  0023C2  90D8               	bcf	status,0,c
  4373  0023C4  360A               	rlcf	__tdiv_to_l_@quot,f,c
  4374  0023C6  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  4375  0023C8  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  4376  0023CA  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  4377  0023CC  060F               	decf	__tdiv_to_l_@exp1,f,c
  4378  0023CE  D000               	goto	l2224
  4379  0023D0                     l2224:
  4380  0023D0  500F               	movf	__tdiv_to_l_@exp1,w,c
  4381  0023D2  A4D8               	btfss	status,2,c
  4382  0023D4  D7F6               	goto	l2222
  4383  0023D6                     l654:
  4384  0023D6  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  4385  0023DA  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  4386  0023DE  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  4387  0023E2  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  4388  0023E6                     l645:
  4389  0023E6  0012               	return		;funcret
  4390  0023E8                     __end_of__tdiv_to_l_:
  4391                           	opt stack 0
  4392                           tblptru	equ	0xFF8
  4393                           tblptrh	equ	0xFF7
  4394                           tblptrl	equ	0xFF6
  4395                           tablat	equ	0xFF5
  4396                           prodh	equ	0xFF4
  4397                           prodl	equ	0xFF3
  4398                           wreg	equ	0xFE8
  4399                           indf2	equ	0xFDF
  4400                           postinc2	equ	0xFDE
  4401                           postdec2	equ	0xFDD
  4402                           fsr2h	equ	0xFDA
  4403                           fsr2l	equ	0xFD9
  4404                           status	equ	0xFD8
  4405                           
  4406 ;; *************** function __div_to_l_ *****************
  4407 ;; Defined at:
  4408 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fldivl.c"
  4409 ;; Parameters:    Size  Location     Type
  4410 ;;  f1              3    0[COMRAM] unsigned long 
  4411 ;;  f2              3    3[COMRAM] unsigned long 
  4412 ;; Auto vars:     Size  Location     Type
  4413 ;;  quot            4    6[COMRAM] unsigned long 
  4414 ;;  exp1            1   11[COMRAM] unsigned char 
  4415 ;;  cntr            1   10[COMRAM] unsigned char 
  4416 ;; Return value:  Size  Location     Type
  4417 ;;                  4    0[COMRAM] unsigned long 
  4418 ;; Registers used:
  4419 ;;		wreg, status,2, status,0
  4420 ;; Tracked objects:
  4421 ;;		On entry : 0/0
  4422 ;;		On exit  : 0/0
  4423 ;;		Unchanged: 0/0
  4424 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4425 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4426 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4427 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4428 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;Total ram usage:       12 bytes
  4430 ;; Hardware stack levels used:    1
  4431 ;; This function calls:
  4432 ;;		Nothing
  4433 ;; This function is called by:
  4434 ;;		_printf
  4435 ;; This function uses a non-reentrant model
  4436 ;;
  4437                           
  4438                           	psect	text14
  4439  0023E8                     __ptext14:
  4440                           	opt stack 0
  4441  0023E8                     __div_to_l_:
  4442                           	opt stack 29
  4443                           
  4444                           ;incstack = 0
  4445  0023E8  3403               	rlcf	__div_to_l_@f1+2,w,c
  4446  0023EA  3404               	rlcf	__div_to_l_@f1+3,w,c
  4447  0023EC  6E0C               	movwf	__div_to_l_@exp1,c
  4448  0023EE  500C               	movf	__div_to_l_@exp1,w,c
  4449  0023F0  A4D8               	btfss	status,2,c
  4450  0023F2  D002               	goto	l2232
  4451  0023F4  D061               	goto	l2278
  4452  0023F6  D07C               	goto	l524
  4453  0023F8                     l2232:
  4454  0023F8  3406               	rlcf	__div_to_l_@f2+2,w,c
  4455  0023FA  3407               	rlcf	__div_to_l_@f2+3,w,c
  4456  0023FC  6E0B               	movwf	__div_to_l_@cntr,c
  4457  0023FE  500B               	movf	__div_to_l_@cntr,w,c
  4458  002400  A4D8               	btfss	status,2,c
  4459  002402  D002               	goto	l2238
  4460  002404  D059               	goto	l2278
  4461  002406  D074               	goto	l524
  4462  002408                     l2238:
  4463  002408  8E03               	bsf	__div_to_l_@f1+2,7,c
  4464  00240A  0EFF               	movlw	255
  4465  00240C  1601               	andwf	__div_to_l_@f1,f,c
  4466  00240E  0EFF               	movlw	255
  4467  002410  1602               	andwf	__div_to_l_@f1+1,f,c
  4468  002412  0EFF               	movlw	255
  4469  002414  1603               	andwf	__div_to_l_@f1+2,f,c
  4470  002416  0E00               	movlw	0
  4471  002418  1604               	andwf	__div_to_l_@f1+3,f,c
  4472  00241A  8E06               	bsf	__div_to_l_@f2+2,7,c
  4473  00241C  0EFF               	movlw	255
  4474  00241E  1604               	andwf	__div_to_l_@f2,f,c
  4475  002420  0EFF               	movlw	255
  4476  002422  1605               	andwf	__div_to_l_@f2+1,f,c
  4477  002424  0EFF               	movlw	255
  4478  002426  1606               	andwf	__div_to_l_@f2+2,f,c
  4479  002428  0E00               	movlw	0
  4480  00242A  1607               	andwf	__div_to_l_@f2+3,f,c
  4481  00242C  0E00               	movlw	0
  4482  00242E  6E07               	movwf	__div_to_l_@quot,c
  4483  002430  0E00               	movlw	0
  4484  002432  6E08               	movwf	__div_to_l_@quot+1,c
  4485  002434  0E00               	movlw	0
  4486  002436  6E09               	movwf	__div_to_l_@quot+2,c
  4487  002438  0E00               	movlw	0
  4488  00243A  6E0A               	movwf	__div_to_l_@quot+3,c
  4489  00243C  0E7F               	movlw	127
  4490  00243E  5E0C               	subwf	__div_to_l_@exp1,f,c
  4491  002440  500B               	movf	__div_to_l_@cntr,w,c
  4492  002442  0FA0               	addlw	160
  4493  002444  5E0C               	subwf	__div_to_l_@exp1,f,c
  4494  002446  0E20               	movlw	32
  4495  002448  6E0B               	movwf	__div_to_l_@cntr,c
  4496  00244A  D000               	goto	l2252
  4497  00244C                     l2252:
  4498  00244C  90D8               	bcf	status,0,c
  4499  00244E  3607               	rlcf	__div_to_l_@quot,f,c
  4500  002450  3608               	rlcf	__div_to_l_@quot+1,f,c
  4501  002452  3609               	rlcf	__div_to_l_@quot+2,f,c
  4502  002454  360A               	rlcf	__div_to_l_@quot+3,f,c
  4503  002456  5004               	movf	__div_to_l_@f2,w,c
  4504  002458  5C01               	subwf	__div_to_l_@f1,w,c
  4505  00245A  5005               	movf	__div_to_l_@f2+1,w,c
  4506  00245C  5802               	subwfb	__div_to_l_@f1+1,w,c
  4507  00245E  5006               	movf	__div_to_l_@f2+2,w,c
  4508  002460  5803               	subwfb	__div_to_l_@f1+2,w,c
  4509  002462  5007               	movf	__div_to_l_@f2+3,w,c
  4510  002464  5804               	subwfb	__div_to_l_@f1+3,w,c
  4511  002466  A0D8               	btfss	status,0,c
  4512  002468  D00A               	goto	l2260
  4513  00246A  5004               	movf	__div_to_l_@f2,w,c
  4514  00246C  5E01               	subwf	__div_to_l_@f1,f,c
  4515  00246E  5005               	movf	__div_to_l_@f2+1,w,c
  4516  002470  5A02               	subwfb	__div_to_l_@f1+1,f,c
  4517  002472  5006               	movf	__div_to_l_@f2+2,w,c
  4518  002474  5A03               	subwfb	__div_to_l_@f1+2,f,c
  4519  002476  5007               	movf	__div_to_l_@f2+3,w,c
  4520  002478  5A04               	subwfb	__div_to_l_@f1+3,f,c
  4521  00247A  8007               	bsf	__div_to_l_@quot,0,c
  4522  00247C  D000               	goto	l2260
  4523  00247E                     l2260:
  4524  00247E  90D8               	bcf	status,0,c
  4525  002480  3601               	rlcf	__div_to_l_@f1,f,c
  4526  002482  3602               	rlcf	__div_to_l_@f1+1,f,c
  4527  002484  3603               	rlcf	__div_to_l_@f1+2,f,c
  4528  002486  3604               	rlcf	__div_to_l_@f1+3,f,c
  4529  002488  2E0B               	decfsz	__div_to_l_@cntr,f,c
  4530  00248A  D7E0               	goto	l2252
  4531  00248C  D000               	goto	l2264
  4532  00248E                     l2264:
  4533  00248E  AE0C               	btfss	__div_to_l_@exp1,7,c
  4534  002490  D010               	goto	l2276
  4535  002492  500C               	movf	__div_to_l_@exp1,w,c
  4536  002494  0A80               	xorlw	128
  4537  002496  0F9F               	addlw	159
  4538  002498  B0D8               	btfsc	status,0,c
  4539  00249A  D003               	goto	l2272
  4540  00249C  D00D               	goto	l2278
  4541  00249E  D028               	goto	l524
  4542  0024A0  D000               	goto	l2272
  4543  0024A2                     l2272:
  4544  0024A2  90D8               	bcf	status,0,c
  4545  0024A4  320A               	rrcf	__div_to_l_@quot+3,f,c
  4546  0024A6  3209               	rrcf	__div_to_l_@quot+2,f,c
  4547  0024A8  3208               	rrcf	__div_to_l_@quot+1,f,c
  4548  0024AA  3207               	rrcf	__div_to_l_@quot,f,c
  4549  0024AC  3E0C               	incfsz	__div_to_l_@exp1,f,c
  4550  0024AE  D7F9               	goto	l2272
  4551  0024B0  D017               	goto	l533
  4552  0024B2                     l2276:
  4553  0024B2  0E1F               	movlw	31
  4554  0024B4  640C               	cpfsgt	__div_to_l_@exp1,c
  4555  0024B6  D011               	goto	l2284
  4556  0024B8                     l2278:
  4557  0024B8  0E00               	movlw	0
  4558  0024BA  6E01               	movwf	?__div_to_l_,c
  4559  0024BC  0E00               	movlw	0
  4560  0024BE  6E02               	movwf	?__div_to_l_+1,c
  4561  0024C0  0E00               	movlw	0
  4562  0024C2  6E03               	movwf	?__div_to_l_+2,c
  4563  0024C4  0E00               	movlw	0
  4564  0024C6  6E04               	movwf	?__div_to_l_+3,c
  4565  0024C8  D013               	goto	l524
  4566  0024CA  D007               	goto	l2284
  4567  0024CC                     l2282:
  4568  0024CC  90D8               	bcf	status,0,c
  4569  0024CE  3607               	rlcf	__div_to_l_@quot,f,c
  4570  0024D0  3608               	rlcf	__div_to_l_@quot+1,f,c
  4571  0024D2  3609               	rlcf	__div_to_l_@quot+2,f,c
  4572  0024D4  360A               	rlcf	__div_to_l_@quot+3,f,c
  4573  0024D6  060C               	decf	__div_to_l_@exp1,f,c
  4574  0024D8  D000               	goto	l2284
  4575  0024DA                     l2284:
  4576  0024DA  500C               	movf	__div_to_l_@exp1,w,c
  4577  0024DC  A4D8               	btfss	status,2,c
  4578  0024DE  D7F6               	goto	l2282
  4579  0024E0                     l533:
  4580  0024E0  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  4581  0024E4  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  4582  0024E8  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  4583  0024EC  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  4584  0024F0                     l524:
  4585  0024F0  0012               	return		;funcret
  4586  0024F2                     __end_of__div_to_l_:
  4587                           	opt stack 0
  4588                           tblptru	equ	0xFF8
  4589                           tblptrh	equ	0xFF7
  4590                           tblptrl	equ	0xFF6
  4591                           tablat	equ	0xFF5
  4592                           prodh	equ	0xFF4
  4593                           prodl	equ	0xFF3
  4594                           wreg	equ	0xFE8
  4595                           indf2	equ	0xFDF
  4596                           postinc2	equ	0xFDE
  4597                           postdec2	equ	0xFDD
  4598                           fsr2h	equ	0xFDA
  4599                           fsr2l	equ	0xFD9
  4600                           status	equ	0xFD8
  4601                           
  4602 ;; *************** function ___lltoft *****************
  4603 ;; Defined at:
  4604 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lltoft.c"
  4605 ;; Parameters:    Size  Location     Type
  4606 ;;  c               4    8[COMRAM] unsigned long 
  4607 ;; Auto vars:     Size  Location     Type
  4608 ;;  exp             1   16[COMRAM] unsigned char 
  4609 ;; Return value:  Size  Location     Type
  4610 ;;                  3    8[COMRAM] float 
  4611 ;; Registers used:
  4612 ;;		wreg, status,2, status,0, cstack
  4613 ;; Tracked objects:
  4614 ;;		On entry : 0/0
  4615 ;;		On exit  : 0/0
  4616 ;;		Unchanged: 0/0
  4617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4618 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4620 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4621 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4622 ;;Total ram usage:        9 bytes
  4623 ;; Hardware stack levels used:    1
  4624 ;; Hardware stack levels required when called:    1
  4625 ;; This function calls:
  4626 ;;		___ftpack
  4627 ;; This function is called by:
  4628 ;;		_printf
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text15
  4633  002D7A                     __ptext15:
  4634                           	opt stack 0
  4635  002D7A                     ___lltoft:
  4636                           	opt stack 28
  4637                           
  4638                           ;incstack = 0
  4639  002D7A  0E8E               	movlw	142
  4640  002D7C  6E11               	movwf	___lltoft@exp,c
  4641  002D7E  D007               	goto	l2404
  4642  002D80                     l2402:
  4643  002D80  90D8               	bcf	status,0,c
  4644  002D82  320C               	rrcf	___lltoft@c+3,f,c
  4645  002D84  320B               	rrcf	___lltoft@c+2,f,c
  4646  002D86  320A               	rrcf	___lltoft@c+1,f,c
  4647  002D88  3209               	rrcf	___lltoft@c,f,c
  4648  002D8A  2A11               	incf	___lltoft@exp,f,c
  4649  002D8C  D000               	goto	l2404
  4650  002D8E                     l2404:
  4651  002D8E  0E00               	movlw	0
  4652  002D90  1409               	andwf	___lltoft@c,w,c
  4653  002D92  6E0D               	movwf	??___lltoft& (0+255),c
  4654  002D94  0E00               	movlw	0
  4655  002D96  140A               	andwf	___lltoft@c+1,w,c
  4656  002D98  6E0E               	movwf	(??___lltoft+1)& (0+255),c
  4657  002D9A  0E00               	movlw	0
  4658  002D9C  140B               	andwf	___lltoft@c+2,w,c
  4659  002D9E  6E0F               	movwf	(??___lltoft+2)& (0+255),c
  4660  002DA0  0EFF               	movlw	255
  4661  002DA2  140C               	andwf	___lltoft@c+3,w,c
  4662  002DA4  6E10               	movwf	(??___lltoft+3)& (0+255),c
  4663  002DA6  500D               	movf	??___lltoft,w,c
  4664  002DA8  100E               	iorwf	??___lltoft+1,w,c
  4665  002DAA  100F               	iorwf	??___lltoft+2,w,c
  4666  002DAC  1010               	iorwf	??___lltoft+3,w,c
  4667  002DAE  A4D8               	btfss	status,2,c
  4668  002DB0  D7E7               	goto	l2402
  4669  002DB2  C009  F001         	movff	___lltoft@c,___ftpack@arg
  4670  002DB6  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  4671  002DBA  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  4672  002DBE  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  4673  002DC2  0E00               	movlw	0
  4674  002DC4  6E05               	movwf	___ftpack@sign,c
  4675  002DC6  ECB3  F014         	call	___ftpack	;wreg free
  4676  002DCA  C001  F009         	movff	?___ftpack,?___lltoft
  4677  002DCE  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  4678  002DD2  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  4679  002DD6  D000               	goto	l764
  4680  002DD8                     l764:
  4681  002DD8  0012               	return		;funcret
  4682  002DDA                     __end_of___lltoft:
  4683                           	opt stack 0
  4684                           tblptru	equ	0xFF8
  4685                           tblptrh	equ	0xFF7
  4686                           tblptrl	equ	0xFF6
  4687                           tablat	equ	0xFF5
  4688                           prodh	equ	0xFF4
  4689                           prodl	equ	0xFF3
  4690                           wreg	equ	0xFE8
  4691                           indf2	equ	0xFDF
  4692                           postinc2	equ	0xFDE
  4693                           postdec2	equ	0xFDD
  4694                           fsr2h	equ	0xFDA
  4695                           fsr2l	equ	0xFD9
  4696                           status	equ	0xFD8
  4697                           
  4698 ;; *************** function ___llmod *****************
  4699 ;; Defined at:
  4700 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\llmod.c"
  4701 ;; Parameters:    Size  Location     Type
  4702 ;;  dividend        4   13[COMRAM] unsigned long 
  4703 ;;  divisor         4   17[COMRAM] unsigned long 
  4704 ;; Auto vars:     Size  Location     Type
  4705 ;;  counter         1   21[COMRAM] unsigned char 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  4   13[COMRAM] unsigned long 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, status,0
  4710 ;; Tracked objects:
  4711 ;;		On entry : 0/0
  4712 ;;		On exit  : 0/0
  4713 ;;		Unchanged: 0/0
  4714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4715 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4716 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4717 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4718 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4719 ;;Total ram usage:        9 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; This function calls:
  4722 ;;		Nothing
  4723 ;; This function is called by:
  4724 ;;		_printf
  4725 ;; This function uses a non-reentrant model
  4726 ;;
  4727                           
  4728                           	psect	text16
  4729  002D0A                     __ptext16:
  4730                           	opt stack 0
  4731  002D0A                     ___llmod:
  4732                           	opt stack 29
  4733                           
  4734                           ;incstack = 0
  4735  002D0A  5012               	movf	___llmod@divisor,w,c
  4736  002D0C  1013               	iorwf	___llmod@divisor+1,w,c
  4737  002D0E  1014               	iorwf	___llmod@divisor+2,w,c
  4738  002D10  1015               	iorwf	___llmod@divisor+3,w,c
  4739  002D12  B4D8               	btfsc	status,2,c
  4740  002D14  D029               	goto	l744
  4741  002D16  0E01               	movlw	1
  4742  002D18  6E16               	movwf	___llmod@counter,c
  4743  002D1A  D007               	goto	l2390
  4744  002D1C                     l2388:
  4745  002D1C  90D8               	bcf	status,0,c
  4746  002D1E  3612               	rlcf	___llmod@divisor,f,c
  4747  002D20  3613               	rlcf	___llmod@divisor+1,f,c
  4748  002D22  3614               	rlcf	___llmod@divisor+2,f,c
  4749  002D24  3615               	rlcf	___llmod@divisor+3,f,c
  4750  002D26  2A16               	incf	___llmod@counter,f,c
  4751  002D28  D000               	goto	l2390
  4752  002D2A                     l2390:
  4753  002D2A  BE15               	btfsc	___llmod@divisor+3,7,c
  4754  002D2C  D002               	goto	l2392
  4755  002D2E  D7F6               	goto	l2388
  4756  002D30  D000               	goto	l2392
  4757  002D32                     l2392:
  4758  002D32  5012               	movf	___llmod@divisor,w,c
  4759  002D34  5C0E               	subwf	___llmod@dividend,w,c
  4760  002D36  5013               	movf	___llmod@divisor+1,w,c
  4761  002D38  580F               	subwfb	___llmod@dividend+1,w,c
  4762  002D3A  5014               	movf	___llmod@divisor+2,w,c
  4763  002D3C  5810               	subwfb	___llmod@dividend+2,w,c
  4764  002D3E  5015               	movf	___llmod@divisor+3,w,c
  4765  002D40  5811               	subwfb	___llmod@dividend+3,w,c
  4766  002D42  A0D8               	btfss	status,0,c
  4767  002D44  D009               	goto	l2396
  4768  002D46  5012               	movf	___llmod@divisor,w,c
  4769  002D48  5E0E               	subwf	___llmod@dividend,f,c
  4770  002D4A  5013               	movf	___llmod@divisor+1,w,c
  4771  002D4C  5A0F               	subwfb	___llmod@dividend+1,f,c
  4772  002D4E  5014               	movf	___llmod@divisor+2,w,c
  4773  002D50  5A10               	subwfb	___llmod@dividend+2,f,c
  4774  002D52  5015               	movf	___llmod@divisor+3,w,c
  4775  002D54  5A11               	subwfb	___llmod@dividend+3,f,c
  4776  002D56  D000               	goto	l2396
  4777  002D58                     l2396:
  4778  002D58  90D8               	bcf	status,0,c
  4779  002D5A  3215               	rrcf	___llmod@divisor+3,f,c
  4780  002D5C  3214               	rrcf	___llmod@divisor+2,f,c
  4781  002D5E  3213               	rrcf	___llmod@divisor+1,f,c
  4782  002D60  3212               	rrcf	___llmod@divisor,f,c
  4783  002D62  2E16               	decfsz	___llmod@counter,f,c
  4784  002D64  D7E6               	goto	l2392
  4785  002D66  D000               	goto	l744
  4786  002D68                     l744:
  4787  002D68  C00E  F00E         	movff	___llmod@dividend,?___llmod
  4788  002D6C  C00F  F00F         	movff	___llmod@dividend+1,?___llmod+1
  4789  002D70  C010  F010         	movff	___llmod@dividend+2,?___llmod+2
  4790  002D74  C011  F011         	movff	___llmod@dividend+3,?___llmod+3
  4791  002D78  0012               	return		;funcret
  4792  002D7A                     __end_of___llmod:
  4793                           	opt stack 0
  4794                           tblptru	equ	0xFF8
  4795                           tblptrh	equ	0xFF7
  4796                           tblptrl	equ	0xFF6
  4797                           tablat	equ	0xFF5
  4798                           prodh	equ	0xFF4
  4799                           prodl	equ	0xFF3
  4800                           wreg	equ	0xFE8
  4801                           indf2	equ	0xFDF
  4802                           postinc2	equ	0xFDE
  4803                           postdec2	equ	0xFDD
  4804                           fsr2h	equ	0xFDA
  4805                           fsr2l	equ	0xFD9
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function ___lldiv *****************
  4809 ;; Defined at:
  4810 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lldiv.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  dividend        4    0[COMRAM] unsigned long 
  4813 ;;  divisor         4    4[COMRAM] unsigned long 
  4814 ;; Auto vars:     Size  Location     Type
  4815 ;;  quotient        4    8[COMRAM] unsigned long 
  4816 ;;  counter         1   12[COMRAM] unsigned char 
  4817 ;; Return value:  Size  Location     Type
  4818 ;;                  4    0[COMRAM] unsigned long 
  4819 ;; Registers used:
  4820 ;;		wreg, status,2, status,0
  4821 ;; Tracked objects:
  4822 ;;		On entry : 0/0
  4823 ;;		On exit  : 0/0
  4824 ;;		Unchanged: 0/0
  4825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4826 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4827 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;Total ram usage:       13 bytes
  4831 ;; Hardware stack levels used:    1
  4832 ;; This function calls:
  4833 ;;		Nothing
  4834 ;; This function is called by:
  4835 ;;		_printf
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838                           
  4839                           	psect	text17
  4840  002BFC                     __ptext17:
  4841                           	opt stack 0
  4842  002BFC                     ___lldiv:
  4843                           	opt stack 29
  4844                           
  4845                           ;incstack = 0
  4846  002BFC  0E00               	movlw	0
  4847  002BFE  6E09               	movwf	___lldiv@quotient,c
  4848  002C00  0E00               	movlw	0
  4849  002C02  6E0A               	movwf	___lldiv@quotient+1,c
  4850  002C04  0E00               	movlw	0
  4851  002C06  6E0B               	movwf	___lldiv@quotient+2,c
  4852  002C08  0E00               	movlw	0
  4853  002C0A  6E0C               	movwf	___lldiv@quotient+3,c
  4854  002C0C  5005               	movf	___lldiv@divisor,w,c
  4855  002C0E  1006               	iorwf	___lldiv@divisor+1,w,c
  4856  002C10  1007               	iorwf	___lldiv@divisor+2,w,c
  4857  002C12  1008               	iorwf	___lldiv@divisor+3,w,c
  4858  002C14  B4D8               	btfsc	status,2,c
  4859  002C16  D02F               	goto	l734
  4860  002C18  0E01               	movlw	1
  4861  002C1A  6E0D               	movwf	___lldiv@counter,c
  4862  002C1C  D007               	goto	l2370
  4863  002C1E                     l2368:
  4864  002C1E  90D8               	bcf	status,0,c
  4865  002C20  3605               	rlcf	___lldiv@divisor,f,c
  4866  002C22  3606               	rlcf	___lldiv@divisor+1,f,c
  4867  002C24  3607               	rlcf	___lldiv@divisor+2,f,c
  4868  002C26  3608               	rlcf	___lldiv@divisor+3,f,c
  4869  002C28  2A0D               	incf	___lldiv@counter,f,c
  4870  002C2A  D000               	goto	l2370
  4871  002C2C                     l2370:
  4872  002C2C  BE08               	btfsc	___lldiv@divisor+3,7,c
  4873  002C2E  D002               	goto	l2372
  4874  002C30  D7F6               	goto	l2368
  4875  002C32  D000               	goto	l2372
  4876  002C34                     l2372:
  4877  002C34  90D8               	bcf	status,0,c
  4878  002C36  3609               	rlcf	___lldiv@quotient,f,c
  4879  002C38  360A               	rlcf	___lldiv@quotient+1,f,c
  4880  002C3A  360B               	rlcf	___lldiv@quotient+2,f,c
  4881  002C3C  360C               	rlcf	___lldiv@quotient+3,f,c
  4882  002C3E  5005               	movf	___lldiv@divisor,w,c
  4883  002C40  5C01               	subwf	___lldiv@dividend,w,c
  4884  002C42  5006               	movf	___lldiv@divisor+1,w,c
  4885  002C44  5802               	subwfb	___lldiv@dividend+1,w,c
  4886  002C46  5007               	movf	___lldiv@divisor+2,w,c
  4887  002C48  5803               	subwfb	___lldiv@dividend+2,w,c
  4888  002C4A  5008               	movf	___lldiv@divisor+3,w,c
  4889  002C4C  5804               	subwfb	___lldiv@dividend+3,w,c
  4890  002C4E  A0D8               	btfss	status,0,c
  4891  002C50  D00A               	goto	l2380
  4892  002C52  5005               	movf	___lldiv@divisor,w,c
  4893  002C54  5E01               	subwf	___lldiv@dividend,f,c
  4894  002C56  5006               	movf	___lldiv@divisor+1,w,c
  4895  002C58  5A02               	subwfb	___lldiv@dividend+1,f,c
  4896  002C5A  5007               	movf	___lldiv@divisor+2,w,c
  4897  002C5C  5A03               	subwfb	___lldiv@dividend+2,f,c
  4898  002C5E  5008               	movf	___lldiv@divisor+3,w,c
  4899  002C60  5A04               	subwfb	___lldiv@dividend+3,f,c
  4900  002C62  8009               	bsf	___lldiv@quotient,0,c
  4901  002C64  D000               	goto	l2380
  4902  002C66                     l2380:
  4903  002C66  90D8               	bcf	status,0,c
  4904  002C68  3208               	rrcf	___lldiv@divisor+3,f,c
  4905  002C6A  3207               	rrcf	___lldiv@divisor+2,f,c
  4906  002C6C  3206               	rrcf	___lldiv@divisor+1,f,c
  4907  002C6E  3205               	rrcf	___lldiv@divisor,f,c
  4908  002C70  2E0D               	decfsz	___lldiv@counter,f,c
  4909  002C72  D7E0               	goto	l2372
  4910  002C74  D000               	goto	l734
  4911  002C76                     l734:
  4912  002C76  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4913  002C7A  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4914  002C7E  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4915  002C82  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4916  002C86  0012               	return		;funcret
  4917  002C88                     __end_of___lldiv:
  4918                           	opt stack 0
  4919                           tblptru	equ	0xFF8
  4920                           tblptrh	equ	0xFF7
  4921                           tblptrl	equ	0xFF6
  4922                           tablat	equ	0xFF5
  4923                           prodh	equ	0xFF4
  4924                           prodl	equ	0xFF3
  4925                           wreg	equ	0xFE8
  4926                           indf2	equ	0xFDF
  4927                           postinc2	equ	0xFDE
  4928                           postdec2	equ	0xFDD
  4929                           fsr2h	equ	0xFDA
  4930                           fsr2l	equ	0xFD9
  4931                           status	equ	0xFD8
  4932                           
  4933 ;; *************** function ___fttol *****************
  4934 ;; Defined at:
  4935 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  4936 ;; Parameters:    Size  Location     Type
  4937 ;;  f1              3   42[COMRAM] float 
  4938 ;; Auto vars:     Size  Location     Type
  4939 ;;  lval            4   52[COMRAM] unsigned long 
  4940 ;;  exp1            1   56[COMRAM] unsigned char 
  4941 ;;  sign1           1   51[COMRAM] unsigned char 
  4942 ;; Return value:  Size  Location     Type
  4943 ;;                  4   42[COMRAM] long 
  4944 ;; Registers used:
  4945 ;;		wreg, status,2, status,0
  4946 ;; Tracked objects:
  4947 ;;		On entry : 0/0
  4948 ;;		On exit  : 0/0
  4949 ;;		Unchanged: 0/0
  4950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4951 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4952 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4953 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4954 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4955 ;;Total ram usage:       15 bytes
  4956 ;; Hardware stack levels used:    1
  4957 ;; This function calls:
  4958 ;;		Nothing
  4959 ;; This function is called by:
  4960 ;;		_main
  4961 ;;		_printf
  4962 ;; This function uses a non-reentrant model
  4963 ;;
  4964                           
  4965                           	psect	text18
  4966  0025EA                     __ptext18:
  4967                           	opt stack 0
  4968  0025EA                     ___fttol:
  4969                           	opt stack 29
  4970                           
  4971                           ;incstack = 0
  4972  0025EA  C02D  F02F         	movff	___fttol@f1+2,??___fttol
  4973  0025EE  6A30               	clrf	(??___fttol+1)& (0+255),c
  4974  0025F0  6A31               	clrf	(??___fttol+2)& (0+255),c
  4975  0025F2  342C               	rlcf	___fttol@f1+1,w,c
  4976  0025F4  362F               	rlcf	??___fttol& (0+255),f,c
  4977  0025F6  E301               	bnc	u2321
  4978  0025F8  8030               	bsf	(??___fttol+1)& (0+255),0,c
  4979  0025FA                     u2321:
  4980  0025FA  502F               	movf	??___fttol,w,c
  4981  0025FC  6E39               	movwf	___fttol@exp1,c
  4982  0025FE  5039               	movf	___fttol@exp1,w,c
  4983  002600  A4D8               	btfss	status,2,c
  4984  002602  D002               	goto	l2322
  4985  002604  D039               	goto	l2346
  4986  002606  D063               	goto	l690
  4987  002608                     l2322:
  4988  002608  0E17               	movlw	23
  4989  00260A  6E2F               	movwf	??___fttol& (0+255),c
  4990  00260C  C02B  F030         	movff	___fttol@f1,??___fttol+1
  4991  002610  C02C  F031         	movff	___fttol@f1+1,??___fttol+2
  4992  002614  C02D  F032         	movff	___fttol@f1+2,??___fttol+3
  4993  002618  282F               	incf	??___fttol,w,c
  4994  00261A  6E33               	movwf	(??___fttol+4)& (0+255),c
  4995  00261C  D004               	goto	u2340
  4996  00261E                     u2345:
  4997  00261E  90D8               	bcf	status,0,c
  4998  002620  3232               	rrcf	??___fttol+3,f,c
  4999  002622  3231               	rrcf	??___fttol+2,f,c
  5000  002624  3230               	rrcf	??___fttol+1,f,c
  5001  002626                     u2340:
  5002  002626  2E33               	decfsz	(??___fttol+4)& (0+255),f,c
  5003  002628  D7FA               	goto	u2345
  5004  00262A  5030               	movf	??___fttol+1,w,c
  5005  00262C  6E34               	movwf	___fttol@sign1,c
  5006  00262E  8E2C               	bsf	___fttol@f1+1,7,c
  5007  002630  0EFF               	movlw	255
  5008  002632  162B               	andwf	___fttol@f1,f,c
  5009  002634  0EFF               	movlw	255
  5010  002636  162C               	andwf	___fttol@f1+1,f,c
  5011  002638  0E00               	movlw	0
  5012  00263A  162D               	andwf	___fttol@f1+2,f,c
  5013  00263C  502B               	movf	___fttol@f1,w,c
  5014  00263E  6E35               	movwf	___fttol@lval,c
  5015  002640  502C               	movf	___fttol@f1+1,w,c
  5016  002642  6E36               	movwf	___fttol@lval+1,c
  5017  002644  502D               	movf	___fttol@f1+2,w,c
  5018  002646  6E37               	movwf	___fttol@lval+2,c
  5019  002648  6A38               	clrf	___fttol@lval+3,c
  5020  00264A  0E8E               	movlw	142
  5021  00264C  5E39               	subwf	___fttol@exp1,f,c
  5022  00264E  AE39               	btfss	___fttol@exp1,7,c
  5023  002650  D010               	goto	l2344
  5024  002652  5039               	movf	___fttol@exp1,w,c
  5025  002654  0A80               	xorlw	128
  5026  002656  0F8F               	addlw	143
  5027  002658  B0D8               	btfsc	status,0,c
  5028  00265A  D003               	goto	l2340
  5029  00265C  D00D               	goto	l2346
  5030  00265E  D037               	goto	l690
  5031  002660  D000               	goto	l2340
  5032  002662                     l2340:
  5033  002662  90D8               	bcf	status,0,c
  5034  002664  3238               	rrcf	___fttol@lval+3,f,c
  5035  002666  3237               	rrcf	___fttol@lval+2,f,c
  5036  002668  3236               	rrcf	___fttol@lval+1,f,c
  5037  00266A  3235               	rrcf	___fttol@lval,f,c
  5038  00266C  3E39               	incfsz	___fttol@exp1,f,c
  5039  00266E  D7F9               	goto	l2340
  5040  002670  D019               	goto	l2354
  5041  002672                     l2344:
  5042  002672  0E17               	movlw	23
  5043  002674  6439               	cpfsgt	___fttol@exp1,c
  5044  002676  D011               	goto	l2352
  5045  002678                     l2346:
  5046  002678  0E00               	movlw	0
  5047  00267A  6E2B               	movwf	?___fttol,c
  5048  00267C  0E00               	movlw	0
  5049  00267E  6E2C               	movwf	?___fttol+1,c
  5050  002680  0E00               	movlw	0
  5051  002682  6E2D               	movwf	?___fttol+2,c
  5052  002684  0E00               	movlw	0
  5053  002686  6E2E               	movwf	?___fttol+3,c
  5054  002688  D022               	goto	l690
  5055  00268A  D007               	goto	l2352
  5056  00268C                     l2350:
  5057  00268C  90D8               	bcf	status,0,c
  5058  00268E  3635               	rlcf	___fttol@lval,f,c
  5059  002690  3636               	rlcf	___fttol@lval+1,f,c
  5060  002692  3637               	rlcf	___fttol@lval+2,f,c
  5061  002694  3638               	rlcf	___fttol@lval+3,f,c
  5062  002696  0639               	decf	___fttol@exp1,f,c
  5063  002698  D000               	goto	l2352
  5064  00269A                     l2352:
  5065  00269A  5039               	movf	___fttol@exp1,w,c
  5066  00269C  B4D8               	btfsc	status,2,c
  5067  00269E  D002               	goto	l2354
  5068  0026A0  D7F5               	goto	l2350
  5069  0026A2  D000               	goto	l2354
  5070  0026A4                     l2354:
  5071  0026A4  5034               	movf	___fttol@sign1,w,c
  5072  0026A6  B4D8               	btfsc	status,2,c
  5073  0026A8  D009               	goto	l2358
  5074  0026AA  1E38               	comf	___fttol@lval+3,f,c
  5075  0026AC  1E37               	comf	___fttol@lval+2,f,c
  5076  0026AE  1E36               	comf	___fttol@lval+1,f,c
  5077  0026B0  6C35               	negf	___fttol@lval,c
  5078  0026B2  0E00               	movlw	0
  5079  0026B4  2236               	addwfc	___fttol@lval+1,f,c
  5080  0026B6  2237               	addwfc	___fttol@lval+2,f,c
  5081  0026B8  2238               	addwfc	___fttol@lval+3,f,c
  5082  0026BA  D000               	goto	l2358
  5083  0026BC                     l2358:
  5084  0026BC  C035  F02B         	movff	___fttol@lval,?___fttol
  5085  0026C0  C036  F02C         	movff	___fttol@lval+1,?___fttol+1
  5086  0026C4  C037  F02D         	movff	___fttol@lval+2,?___fttol+2
  5087  0026C8  C038  F02E         	movff	___fttol@lval+3,?___fttol+3
  5088  0026CC  D000               	goto	l690
  5089  0026CE                     l690:
  5090  0026CE  0012               	return		;funcret
  5091  0026D0                     __end_of___fttol:
  5092                           	opt stack 0
  5093                           tblptru	equ	0xFF8
  5094                           tblptrh	equ	0xFF7
  5095                           tblptrl	equ	0xFF6
  5096                           tablat	equ	0xFF5
  5097                           prodh	equ	0xFF4
  5098                           prodl	equ	0xFF3
  5099                           wreg	equ	0xFE8
  5100                           indf2	equ	0xFDF
  5101                           postinc2	equ	0xFDE
  5102                           postdec2	equ	0xFDD
  5103                           fsr2h	equ	0xFDA
  5104                           fsr2l	equ	0xFD9
  5105                           status	equ	0xFD8
  5106                           
  5107 ;; *************** function ___ftsub *****************
  5108 ;; Defined at:
  5109 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftsub.c"
  5110 ;; Parameters:    Size  Location     Type
  5111 ;;  f1              3   57[COMRAM] float 
  5112 ;;  f2              3   60[COMRAM] float 
  5113 ;; Auto vars:     Size  Location     Type
  5114 ;;		None
  5115 ;; Return value:  Size  Location     Type
  5116 ;;                  3   57[COMRAM] float 
  5117 ;; Registers used:
  5118 ;;		wreg, status,2, status,0, cstack
  5119 ;; Tracked objects:
  5120 ;;		On entry : 0/0
  5121 ;;		On exit  : 0/0
  5122 ;;		Unchanged: 0/0
  5123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5124 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5127 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5128 ;;Total ram usage:        6 bytes
  5129 ;; Hardware stack levels used:    1
  5130 ;; Hardware stack levels required when called:    2
  5131 ;; This function calls:
  5132 ;;		___ftadd
  5133 ;; This function is called by:
  5134 ;;		_printf
  5135 ;; This function uses a non-reentrant model
  5136 ;;
  5137                           
  5138                           	psect	text19
  5139  002DDA                     __ptext19:
  5140                           	opt stack 0
  5141  002DDA                     ___ftsub:
  5142                           	opt stack 27
  5143                           
  5144                           ;incstack = 0
  5145  002DDA  503D               	movf	___ftsub@f2,w,c
  5146  002DDC  103E               	iorwf	___ftsub@f2+1,w,c
  5147  002DDE  103F               	iorwf	___ftsub@f2+2,w,c
  5148  002DE0  B4D8               	btfsc	status,2,c
  5149  002DE2  D007               	goto	l2290
  5150  002DE4  0E00               	movlw	0
  5151  002DE6  1A3D               	xorwf	___ftsub@f2,f,c
  5152  002DE8  0E00               	movlw	0
  5153  002DEA  1A3E               	xorwf	___ftsub@f2+1,f,c
  5154  002DEC  0E80               	movlw	128
  5155  002DEE  1A3F               	xorwf	___ftsub@f2+2,f,c
  5156  002DF0  D000               	goto	l2290
  5157  002DF2                     l2290:
  5158  002DF2  C03A  F02E         	movff	___ftsub@f1,___ftadd@f1
  5159  002DF6  C03B  F02F         	movff	___ftsub@f1+1,___ftadd@f1+1
  5160  002DFA  C03C  F030         	movff	___ftsub@f1+2,___ftadd@f1+2
  5161  002DFE  C03D  F031         	movff	___ftsub@f2,___ftadd@f2
  5162  002E02  C03E  F032         	movff	___ftsub@f2+1,___ftadd@f2+1
  5163  002E06  C03F  F033         	movff	___ftsub@f2+2,___ftadd@f2+2
  5164  002E0A  EC8A  F010         	call	___ftadd	;wreg free
  5165  002E0E  C02E  F03A         	movff	?___ftadd,?___ftsub
  5166  002E12  C02F  F03B         	movff	?___ftadd+1,?___ftsub+1
  5167  002E16  C030  F03C         	movff	?___ftadd+2,?___ftsub+2
  5168  002E1A  D000               	goto	l686
  5169  002E1C                     l686:
  5170  002E1C  0012               	return		;funcret
  5171  002E1E                     __end_of___ftsub:
  5172                           	opt stack 0
  5173                           tblptru	equ	0xFF8
  5174                           tblptrh	equ	0xFF7
  5175                           tblptrl	equ	0xFF6
  5176                           tablat	equ	0xFF5
  5177                           prodh	equ	0xFF4
  5178                           prodl	equ	0xFF3
  5179                           wreg	equ	0xFE8
  5180                           indf2	equ	0xFDF
  5181                           postinc2	equ	0xFDE
  5182                           postdec2	equ	0xFDD
  5183                           fsr2h	equ	0xFDA
  5184                           fsr2l	equ	0xFD9
  5185                           status	equ	0xFD8
  5186                           
  5187 ;; *************** function ___ftadd *****************
  5188 ;; Defined at:
  5189 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftadd.c"
  5190 ;; Parameters:    Size  Location     Type
  5191 ;;  f1              3   45[COMRAM] float 
  5192 ;;  f2              3   48[COMRAM] float 
  5193 ;; Auto vars:     Size  Location     Type
  5194 ;;  exp1            1   56[COMRAM] unsigned char 
  5195 ;;  exp2            1   55[COMRAM] unsigned char 
  5196 ;;  sign            1   54[COMRAM] unsigned char 
  5197 ;; Return value:  Size  Location     Type
  5198 ;;                  3   45[COMRAM] float 
  5199 ;; Registers used:
  5200 ;;		wreg, status,2, status,0, cstack
  5201 ;; Tracked objects:
  5202 ;;		On entry : 0/0
  5203 ;;		On exit  : 0/0
  5204 ;;		Unchanged: 0/0
  5205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5206 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5207 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5208 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5209 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5210 ;;Total ram usage:       12 bytes
  5211 ;; Hardware stack levels used:    1
  5212 ;; Hardware stack levels required when called:    1
  5213 ;; This function calls:
  5214 ;;		___ftpack
  5215 ;; This function is called by:
  5216 ;;		_main
  5217 ;;		_printf
  5218 ;;		___ftsub
  5219 ;; This function uses a non-reentrant model
  5220 ;;
  5221                           
  5222                           	psect	text20
  5223  002114                     __ptext20:
  5224                           	opt stack 0
  5225  002114                     ___ftadd:
  5226                           	opt stack 27
  5227                           
  5228                           ;incstack = 0
  5229  002114  C030  F034         	movff	___ftadd@f1+2,??___ftadd
  5230  002118  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5231  00211A  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5232  00211C  342F               	rlcf	___ftadd@f1+1,w,c
  5233  00211E  3634               	rlcf	??___ftadd& (0+255),f,c
  5234  002120  E301               	bnc	u1621
  5235  002122  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5236  002124                     u1621:
  5237  002124  5034               	movf	??___ftadd,w,c
  5238  002126  6E39               	movwf	___ftadd@exp1,c
  5239  002128  C033  F034         	movff	___ftadd@f2+2,??___ftadd
  5240  00212C  6A35               	clrf	(??___ftadd+1)& (0+255),c
  5241  00212E  6A36               	clrf	(??___ftadd+2)& (0+255),c
  5242  002130  3432               	rlcf	___ftadd@f2+1,w,c
  5243  002132  3634               	rlcf	??___ftadd& (0+255),f,c
  5244  002134  E301               	bnc	u1631
  5245  002136  8035               	bsf	(??___ftadd+1)& (0+255),0,c
  5246  002138                     u1631:
  5247  002138  5034               	movf	??___ftadd,w,c
  5248  00213A  6E38               	movwf	___ftadd@exp2,c
  5249  00213C  5039               	movf	___ftadd@exp1,w,c
  5250  00213E  B4D8               	btfsc	status,2,c
  5251  002140  D00B               	goto	l605
  5252  002142  5038               	movf	___ftadd@exp2,w,c
  5253  002144  5C39               	subwf	___ftadd@exp1,w,c
  5254  002146  B0D8               	btfsc	status,0,c
  5255  002148  D00E               	goto	l1904
  5256  00214A  5039               	movf	___ftadd@exp1,w,c
  5257  00214C  0800               	sublw	0
  5258  00214E  2438               	addwf	___ftadd@exp2,w,c
  5259  002150  6E34               	movwf	??___ftadd& (0+255),c
  5260  002152  0E18               	movlw	24
  5261  002154  6434               	cpfsgt	??___ftadd,c
  5262  002156  D007               	goto	l1904
  5263  002158                     l605:
  5264  002158  C031  F02E         	movff	___ftadd@f2,?___ftadd
  5265  00215C  C032  F02F         	movff	___ftadd@f2+1,?___ftadd+1
  5266  002160  C033  F030         	movff	___ftadd@f2+2,?___ftadd+2
  5267  002164  D0B8               	goto	l606
  5268  002166                     l1904:
  5269  002166  5038               	movf	___ftadd@exp2,w,c
  5270  002168  B4D8               	btfsc	status,2,c
  5271  00216A  D00B               	goto	l609
  5272  00216C  5039               	movf	___ftadd@exp1,w,c
  5273  00216E  5C38               	subwf	___ftadd@exp2,w,c
  5274  002170  B0D8               	btfsc	status,0,c
  5275  002172  D00E               	goto	l1910
  5276  002174  5038               	movf	___ftadd@exp2,w,c
  5277  002176  0800               	sublw	0
  5278  002178  2439               	addwf	___ftadd@exp1,w,c
  5279  00217A  6E34               	movwf	??___ftadd& (0+255),c
  5280  00217C  0E18               	movlw	24
  5281  00217E  6434               	cpfsgt	??___ftadd,c
  5282  002180  D007               	goto	l1910
  5283  002182                     l609:
  5284  002182  C02E  F02E         	movff	___ftadd@f1,?___ftadd
  5285  002186  C02F  F02F         	movff	___ftadd@f1+1,?___ftadd+1
  5286  00218A  C030  F030         	movff	___ftadd@f1+2,?___ftadd+2
  5287  00218E  D0A3               	goto	l606
  5288  002190                     l1910:
  5289  002190  0E06               	movlw	6
  5290  002192  6E37               	movwf	___ftadd@sign,c
  5291  002194  AE30               	btfss	___ftadd@f1+2,7,c
  5292  002196  D002               	goto	l1916
  5293  002198  8E37               	bsf	___ftadd@sign,7,c
  5294  00219A  D000               	goto	l1916
  5295  00219C                     l1916:
  5296  00219C  BE33               	btfsc	___ftadd@f2+2,7,c
  5297  00219E  8C37               	bsf	___ftadd@sign,6,c
  5298  0021A0  8E2F               	bsf	___ftadd@f1+1,7,c
  5299  0021A2  0EFF               	movlw	255
  5300  0021A4  162E               	andwf	___ftadd@f1,f,c
  5301  0021A6  0EFF               	movlw	255
  5302  0021A8  162F               	andwf	___ftadd@f1+1,f,c
  5303  0021AA  0E00               	movlw	0
  5304  0021AC  1630               	andwf	___ftadd@f1+2,f,c
  5305  0021AE  8E32               	bsf	___ftadd@f2+1,7,c
  5306  0021B0  0EFF               	movlw	255
  5307  0021B2  1631               	andwf	___ftadd@f2,f,c
  5308  0021B4  0EFF               	movlw	255
  5309  0021B6  1632               	andwf	___ftadd@f2+1,f,c
  5310  0021B8  0E00               	movlw	0
  5311  0021BA  1633               	andwf	___ftadd@f2+2,f,c
  5312  0021BC  5038               	movf	___ftadd@exp2,w,c
  5313  0021BE  5C39               	subwf	___ftadd@exp1,w,c
  5314  0021C0  B0D8               	btfsc	status,0,c
  5315  0021C2  D01E               	goto	l1936
  5316  0021C4                     l1926:
  5317  0021C4  90D8               	bcf	status,0,c
  5318  0021C6  3631               	rlcf	___ftadd@f2,f,c
  5319  0021C8  3632               	rlcf	___ftadd@f2+1,f,c
  5320  0021CA  3633               	rlcf	___ftadd@f2+2,f,c
  5321  0021CC  0638               	decf	___ftadd@exp2,f,c
  5322  0021CE  5039               	movf	___ftadd@exp1,w,c
  5323  0021D0  1838               	xorwf	___ftadd@exp2,w,c
  5324  0021D2  B4D8               	btfsc	status,2,c
  5325  0021D4  D00F               	goto	l1934
  5326  0021D6  0637               	decf	___ftadd@sign,f,c
  5327  0021D8  C037  F034         	movff	___ftadd@sign,??___ftadd
  5328  0021DC  0E07               	movlw	7
  5329  0021DE  1634               	andwf	??___ftadd,f,c
  5330  0021E0  B4D8               	btfsc	status,2,c
  5331  0021E2  D008               	goto	l1934
  5332  0021E4  D7EF               	goto	l1926
  5333  0021E6  D006               	goto	l1934
  5334  0021E8                     l1932:
  5335  0021E8  90D8               	bcf	status,0,c
  5336  0021EA  3230               	rrcf	___ftadd@f1+2,f,c
  5337  0021EC  322F               	rrcf	___ftadd@f1+1,f,c
  5338  0021EE  322E               	rrcf	___ftadd@f1,f,c
  5339  0021F0  2A39               	incf	___ftadd@exp1,f,c
  5340  0021F2  D000               	goto	l1934
  5341  0021F4                     l1934:
  5342  0021F4  5038               	movf	___ftadd@exp2,w,c
  5343  0021F6  1839               	xorwf	___ftadd@exp1,w,c
  5344  0021F8  B4D8               	btfsc	status,2,c
  5345  0021FA  D024               	goto	l620
  5346  0021FC  D7F5               	goto	l1932
  5347  0021FE  D022               	goto	l620
  5348  002200                     l1936:
  5349  002200  5039               	movf	___ftadd@exp1,w,c
  5350  002202  5C38               	subwf	___ftadd@exp2,w,c
  5351  002204  B0D8               	btfsc	status,0,c
  5352  002206  D01E               	goto	l620
  5353  002208                     l1938:
  5354  002208  90D8               	bcf	status,0,c
  5355  00220A  362E               	rlcf	___ftadd@f1,f,c
  5356  00220C  362F               	rlcf	___ftadd@f1+1,f,c
  5357  00220E  3630               	rlcf	___ftadd@f1+2,f,c
  5358  002210  0639               	decf	___ftadd@exp1,f,c
  5359  002212  5039               	movf	___ftadd@exp1,w,c
  5360  002214  1838               	xorwf	___ftadd@exp2,w,c
  5361  002216  B4D8               	btfsc	status,2,c
  5362  002218  D00F               	goto	l1946
  5363  00221A  0637               	decf	___ftadd@sign,f,c
  5364  00221C  C037  F034         	movff	___ftadd@sign,??___ftadd
  5365  002220  0E07               	movlw	7
  5366  002222  1634               	andwf	??___ftadd,f,c
  5367  002224  B4D8               	btfsc	status,2,c
  5368  002226  D008               	goto	l1946
  5369  002228  D7EF               	goto	l1938
  5370  00222A  D006               	goto	l1946
  5371  00222C                     l1944:
  5372  00222C  90D8               	bcf	status,0,c
  5373  00222E  3233               	rrcf	___ftadd@f2+2,f,c
  5374  002230  3232               	rrcf	___ftadd@f2+1,f,c
  5375  002232  3231               	rrcf	___ftadd@f2,f,c
  5376  002234  2A38               	incf	___ftadd@exp2,f,c
  5377  002236  D000               	goto	l1946
  5378  002238                     l1946:
  5379  002238  5038               	movf	___ftadd@exp2,w,c
  5380  00223A  1839               	xorwf	___ftadd@exp1,w,c
  5381  00223C  B4D8               	btfsc	status,2,c
  5382  00223E  D002               	goto	l620
  5383  002240  D7F5               	goto	l1944
  5384  002242  D000               	goto	l620
  5385  002244                     l620:
  5386  002244  AE37               	btfss	___ftadd@sign,7,c
  5387  002246  D00C               	goto	l629
  5388  002248  0EFF               	movlw	255
  5389  00224A  1A2E               	xorwf	___ftadd@f1,f,c
  5390  00224C  0EFF               	movlw	255
  5391  00224E  1A2F               	xorwf	___ftadd@f1+1,f,c
  5392  002250  0EFF               	movlw	255
  5393  002252  1A30               	xorwf	___ftadd@f1+2,f,c
  5394  002254  0E01               	movlw	1
  5395  002256  262E               	addwf	___ftadd@f1,f,c
  5396  002258  0E00               	movlw	0
  5397  00225A  222F               	addwfc	___ftadd@f1+1,f,c
  5398  00225C  0E00               	movlw	0
  5399  00225E  2230               	addwfc	___ftadd@f1+2,f,c
  5400  002260                     l629:
  5401  002260  AC37               	btfss	___ftadd@sign,6,c
  5402  002262  D00D               	goto	l1952
  5403  002264  0EFF               	movlw	255
  5404  002266  1A31               	xorwf	___ftadd@f2,f,c
  5405  002268  0EFF               	movlw	255
  5406  00226A  1A32               	xorwf	___ftadd@f2+1,f,c
  5407  00226C  0EFF               	movlw	255
  5408  00226E  1A33               	xorwf	___ftadd@f2+2,f,c
  5409  002270  0E01               	movlw	1
  5410  002272  2631               	addwf	___ftadd@f2,f,c
  5411  002274  0E00               	movlw	0
  5412  002276  2232               	addwfc	___ftadd@f2+1,f,c
  5413  002278  0E00               	movlw	0
  5414  00227A  2233               	addwfc	___ftadd@f2+2,f,c
  5415  00227C  D000               	goto	l1952
  5416  00227E                     l1952:
  5417  00227E  0E00               	movlw	0
  5418  002280  6E37               	movwf	___ftadd@sign,c
  5419  002282  502E               	movf	___ftadd@f1,w,c
  5420  002284  2631               	addwf	___ftadd@f2,f,c
  5421  002286  502F               	movf	___ftadd@f1+1,w,c
  5422  002288  2232               	addwfc	___ftadd@f2+1,f,c
  5423  00228A  5030               	movf	___ftadd@f1+2,w,c
  5424  00228C  2233               	addwfc	___ftadd@f2+2,f,c
  5425  00228E  AE33               	btfss	___ftadd@f2+2,7,c
  5426  002290  D00F               	goto	l1962
  5427  002292  0EFF               	movlw	255
  5428  002294  1A31               	xorwf	___ftadd@f2,f,c
  5429  002296  0EFF               	movlw	255
  5430  002298  1A32               	xorwf	___ftadd@f2+1,f,c
  5431  00229A  0EFF               	movlw	255
  5432  00229C  1A33               	xorwf	___ftadd@f2+2,f,c
  5433  00229E  0E01               	movlw	1
  5434  0022A0  2631               	addwf	___ftadd@f2,f,c
  5435  0022A2  0E00               	movlw	0
  5436  0022A4  2232               	addwfc	___ftadd@f2+1,f,c
  5437  0022A6  0E00               	movlw	0
  5438  0022A8  2233               	addwfc	___ftadd@f2+2,f,c
  5439  0022AA  0E01               	movlw	1
  5440  0022AC  6E37               	movwf	___ftadd@sign,c
  5441  0022AE  D000               	goto	l1962
  5442  0022B0                     l1962:
  5443  0022B0  C031  F001         	movff	___ftadd@f2,___ftpack@arg
  5444  0022B4  C032  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  5445  0022B8  C033  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  5446  0022BC  C039  F004         	movff	___ftadd@exp1,___ftpack@exp
  5447  0022C0  C037  F005         	movff	___ftadd@sign,___ftpack@sign
  5448  0022C4  ECB3  F014         	call	___ftpack	;wreg free
  5449  0022C8  C001  F02E         	movff	?___ftpack,?___ftadd
  5450  0022CC  C002  F02F         	movff	?___ftpack+1,?___ftadd+1
  5451  0022D0  C003  F030         	movff	?___ftpack+2,?___ftadd+2
  5452  0022D4  D000               	goto	l606
  5453  0022D6                     l606:
  5454  0022D6  0012               	return		;funcret
  5455  0022D8                     __end_of___ftadd:
  5456                           	opt stack 0
  5457                           tblptru	equ	0xFF8
  5458                           tblptrh	equ	0xFF7
  5459                           tblptrl	equ	0xFF6
  5460                           tablat	equ	0xFF5
  5461                           prodh	equ	0xFF4
  5462                           prodl	equ	0xFF3
  5463                           wreg	equ	0xFE8
  5464                           indf2	equ	0xFDF
  5465                           postinc2	equ	0xFDE
  5466                           postdec2	equ	0xFDD
  5467                           fsr2h	equ	0xFDA
  5468                           fsr2l	equ	0xFD9
  5469                           status	equ	0xFD8
  5470                           
  5471 ;; *************** function ___ftneg *****************
  5472 ;; Defined at:
  5473 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftneg.c"
  5474 ;; Parameters:    Size  Location     Type
  5475 ;;  f1              3    0[COMRAM] float 
  5476 ;; Auto vars:     Size  Location     Type
  5477 ;;		None
  5478 ;; Return value:  Size  Location     Type
  5479 ;;                  3    0[COMRAM] float 
  5480 ;; Registers used:
  5481 ;;		wreg, status,2, status,0
  5482 ;; Tracked objects:
  5483 ;;		On entry : 0/0
  5484 ;;		On exit  : 0/0
  5485 ;;		Unchanged: 0/0
  5486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5487 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5490 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5491 ;;Total ram usage:        3 bytes
  5492 ;; Hardware stack levels used:    1
  5493 ;; This function calls:
  5494 ;;		Nothing
  5495 ;; This function is called by:
  5496 ;;		_main
  5497 ;;		_printf
  5498 ;; This function uses a non-reentrant model
  5499 ;;
  5500                           
  5501                           	psect	text21
  5502  002EA8                     __ptext21:
  5503                           	opt stack 0
  5504  002EA8                     ___ftneg:
  5505                           	opt stack 29
  5506                           
  5507                           ;incstack = 0
  5508  002EA8  5001               	movf	___ftneg@f1,w,c
  5509  002EAA  1002               	iorwf	___ftneg@f1+1,w,c
  5510  002EAC  1003               	iorwf	___ftneg@f1+2,w,c
  5511  002EAE  B4D8               	btfsc	status,2,c
  5512  002EB0  D006               	goto	l679
  5513  002EB2  0E00               	movlw	0
  5514  002EB4  1A01               	xorwf	___ftneg@f1,f,c
  5515  002EB6  0E00               	movlw	0
  5516  002EB8  1A02               	xorwf	___ftneg@f1+1,f,c
  5517  002EBA  0E80               	movlw	128
  5518  002EBC  1A03               	xorwf	___ftneg@f1+2,f,c
  5519  002EBE                     l679:
  5520  002EBE  C001  F001         	movff	___ftneg@f1,?___ftneg
  5521  002EC2  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  5522  002EC6  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  5523  002ECA  0012               	return		;funcret
  5524  002ECC                     __end_of___ftneg:
  5525                           	opt stack 0
  5526                           tblptru	equ	0xFF8
  5527                           tblptrh	equ	0xFF7
  5528                           tblptrl	equ	0xFF6
  5529                           tablat	equ	0xFF5
  5530                           prodh	equ	0xFF4
  5531                           prodl	equ	0xFF3
  5532                           wreg	equ	0xFE8
  5533                           indf2	equ	0xFDF
  5534                           postinc2	equ	0xFDE
  5535                           postdec2	equ	0xFDD
  5536                           fsr2h	equ	0xFDA
  5537                           fsr2l	equ	0xFD9
  5538                           status	equ	0xFD8
  5539                           
  5540 ;; *************** function ___ftge *****************
  5541 ;; Defined at:
  5542 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  5543 ;; Parameters:    Size  Location     Type
  5544 ;;  ff1             3    0[COMRAM] float 
  5545 ;;  ff2             3    3[COMRAM] float 
  5546 ;; Auto vars:     Size  Location     Type
  5547 ;;		None
  5548 ;; Return value:  Size  Location     Type
  5549 ;;		None               void
  5550 ;; Registers used:
  5551 ;;		wreg, status,2, status,0
  5552 ;; Tracked objects:
  5553 ;;		On entry : 0/0
  5554 ;;		On exit  : 0/0
  5555 ;;		Unchanged: 0/0
  5556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5557 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5559 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5560 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5561 ;;Total ram usage:        9 bytes
  5562 ;; Hardware stack levels used:    1
  5563 ;; This function calls:
  5564 ;;		Nothing
  5565 ;; This function is called by:
  5566 ;;		_set_D3
  5567 ;;		_printf
  5568 ;; This function uses a non-reentrant model
  5569 ;;
  5570                           
  5571                           	psect	text22
  5572  002B66                     __ptext22:
  5573                           	opt stack 0
  5574  002B66                     ___ftge:
  5575                           	opt stack 29
  5576                           
  5577                           ;incstack = 0
  5578  002B66  AE03               	btfss	___ftge@ff1+2,7,c
  5579  002B68  D017               	goto	l2298
  5580  002B6A  C001  F007         	movff	___ftge@ff1,??___ftge
  5581  002B6E  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
  5582  002B72  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
  5583  002B76  1E07               	comf	??___ftge,f,c
  5584  002B78  1E08               	comf	??___ftge+1,f,c
  5585  002B7A  1E09               	comf	??___ftge+2,f,c
  5586  002B7C  2A07               	incf	??___ftge,f,c
  5587  002B7E  0E00               	movlw	0
  5588  002B80  2208               	addwfc	??___ftge+1,f,c
  5589  002B82  2209               	addwfc	??___ftge+2,f,c
  5590  002B84  0E00               	movlw	0
  5591  002B86  2407               	addwf	??___ftge,w,c
  5592  002B88  6E01               	movwf	___ftge@ff1,c
  5593  002B8A  0E00               	movlw	0
  5594  002B8C  2008               	addwfc	??___ftge+1,w,c
  5595  002B8E  6E02               	movwf	___ftge@ff1+1,c
  5596  002B90  0E80               	movlw	128
  5597  002B92  2009               	addwfc	??___ftge+2,w,c
  5598  002B94  6E03               	movwf	___ftge@ff1+2,c
  5599  002B96  D000               	goto	l2298
  5600  002B98                     l2298:
  5601  002B98  AE06               	btfss	___ftge@ff2+2,7,c
  5602  002B9A  D017               	goto	l2302
  5603  002B9C  C004  F007         	movff	___ftge@ff2,??___ftge
  5604  002BA0  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
  5605  002BA4  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
  5606  002BA8  1E07               	comf	??___ftge,f,c
  5607  002BAA  1E08               	comf	??___ftge+1,f,c
  5608  002BAC  1E09               	comf	??___ftge+2,f,c
  5609  002BAE  2A07               	incf	??___ftge,f,c
  5610  002BB0  0E00               	movlw	0
  5611  002BB2  2208               	addwfc	??___ftge+1,f,c
  5612  002BB4  2209               	addwfc	??___ftge+2,f,c
  5613  002BB6  0E00               	movlw	0
  5614  002BB8  2407               	addwf	??___ftge,w,c
  5615  002BBA  6E04               	movwf	___ftge@ff2,c
  5616  002BBC  0E00               	movlw	0
  5617  002BBE  2008               	addwfc	??___ftge+1,w,c
  5618  002BC0  6E05               	movwf	___ftge@ff2+1,c
  5619  002BC2  0E80               	movlw	128
  5620  002BC4  2009               	addwfc	??___ftge+2,w,c
  5621  002BC6  6E06               	movwf	___ftge@ff2+2,c
  5622  002BC8  D000               	goto	l2302
  5623  002BCA                     l2302:
  5624  002BCA  0E00               	movlw	0
  5625  002BCC  1A01               	xorwf	___ftge@ff1,f,c
  5626  002BCE  0E00               	movlw	0
  5627  002BD0  1A02               	xorwf	___ftge@ff1+1,f,c
  5628  002BD2  0E80               	movlw	128
  5629  002BD4  1A03               	xorwf	___ftge@ff1+2,f,c
  5630  002BD6  0E00               	movlw	0
  5631  002BD8  1A04               	xorwf	___ftge@ff2,f,c
  5632  002BDA  0E00               	movlw	0
  5633  002BDC  1A05               	xorwf	___ftge@ff2+1,f,c
  5634  002BDE  0E80               	movlw	128
  5635  002BE0  1A06               	xorwf	___ftge@ff2+2,f,c
  5636  002BE2  5004               	movf	___ftge@ff2,w,c
  5637  002BE4  5C01               	subwf	___ftge@ff1,w,c
  5638  002BE6  5005               	movf	___ftge@ff2+1,w,c
  5639  002BE8  5802               	subwfb	___ftge@ff1+1,w,c
  5640  002BEA  5006               	movf	___ftge@ff2+2,w,c
  5641  002BEC  5803               	subwfb	___ftge@ff1+2,w,c
  5642  002BEE  B0D8               	btfsc	status,0,c
  5643  002BF0  D002               	goto	l2308
  5644  002BF2  90D8               	bcf	status,0,c
  5645  002BF4  D002               	goto	l663
  5646  002BF6                     l2308:
  5647  002BF6  80D8               	bsf	status,0,c
  5648  002BF8  D000               	goto	l663
  5649  002BFA                     l663:
  5650  002BFA  0012               	return		;funcret
  5651  002BFC                     __end_of___ftge:
  5652                           	opt stack 0
  5653                           tblptru	equ	0xFF8
  5654                           tblptrh	equ	0xFF7
  5655                           tblptrl	equ	0xFF6
  5656                           tablat	equ	0xFF5
  5657                           prodh	equ	0xFF4
  5658                           prodl	equ	0xFF3
  5659                           wreg	equ	0xFE8
  5660                           indf2	equ	0xFDF
  5661                           postinc2	equ	0xFDE
  5662                           postdec2	equ	0xFDD
  5663                           fsr2h	equ	0xFDA
  5664                           fsr2l	equ	0xFD9
  5665                           status	equ	0xFD8
  5666                           
  5667 ;; *************** function _init_UART *****************
  5668 ;; Defined at:
  5669 ;;		line 11 in file "lab5.c"
  5670 ;; Parameters:    Size  Location     Type
  5671 ;;		None
  5672 ;; Auto vars:     Size  Location     Type
  5673 ;;		None
  5674 ;; Return value:  Size  Location     Type
  5675 ;;		None               void
  5676 ;; Registers used:
  5677 ;;		wreg, status,2
  5678 ;; Tracked objects:
  5679 ;;		On entry : 0/0
  5680 ;;		On exit  : 0/0
  5681 ;;		Unchanged: 0/0
  5682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5687 ;;Total ram usage:        0 bytes
  5688 ;; Hardware stack levels used:    1
  5689 ;; This function calls:
  5690 ;;		Nothing
  5691 ;; This function is called by:
  5692 ;;		_main
  5693 ;; This function uses a non-reentrant model
  5694 ;;
  5695                           
  5696                           	psect	text23
  5697  002EEE                     __ptext23:
  5698                           	opt stack 0
  5699  002EEE                     _init_UART:
  5700                           	opt stack 30
  5701                           
  5702                           ;lab5.c: 12: OSCCON = 0x60;
  5703                           
  5704                           ;incstack = 0
  5705  002EEE  0E60               	movlw	96
  5706  002EF0  6ED3               	movwf	4051,c	;volatile
  5707                           
  5708                           ;lab5.c: 13: TRISCbits.TRISC6 = 0;
  5709  002EF2  9C94               	bcf	3988,6,c	;volatile
  5710                           
  5711                           ;lab5.c: 14: TRISCbits.TRISC7 = 1;
  5712  002EF4  8E94               	bsf	3988,7,c	;volatile
  5713                           
  5714                           ;lab5.c: 16: TXSTAbits.SYNC = 0;
  5715  002EF6  98AC               	bcf	4012,4,c	;volatile
  5716                           
  5717                           ;lab5.c: 17: TXSTAbits.BRGH = 1;
  5718  002EF8  84AC               	bsf	4012,2,c	;volatile
  5719                           
  5720                           ;lab5.c: 18: RCSTAbits.SPEN = 1;
  5721  002EFA  8EAB               	bsf	4011,7,c	;volatile
  5722                           
  5723                           ;lab5.c: 19: RCSTAbits.CREN = 1;
  5724  002EFC  88AB               	bsf	4011,4,c	;volatile
  5725                           
  5726                           ;lab5.c: 20: TXSTAbits.TXEN = 1;
  5727  002EFE  8AAC               	bsf	4012,5,c	;volatile
  5728                           
  5729                           ;lab5.c: 22: SPBRG = 25;
  5730  002F00  0E19               	movlw	25
  5731  002F02  6EAF               	movwf	4015,c	;volatile
  5732                           
  5733                           ;lab5.c: 23: SPBRGH = 0;
  5734  002F04  0E00               	movlw	0
  5735  002F06  6EB0               	movwf	4016,c	;volatile
  5736  002F08  0012               	return		;funcret
  5737  002F0A                     __end_of_init_UART:
  5738                           	opt stack 0
  5739                           tblptru	equ	0xFF8
  5740                           tblptrh	equ	0xFF7
  5741                           tblptrl	equ	0xFF6
  5742                           tablat	equ	0xFF5
  5743                           prodh	equ	0xFF4
  5744                           prodl	equ	0xFF3
  5745                           wreg	equ	0xFE8
  5746                           indf2	equ	0xFDF
  5747                           postinc2	equ	0xFDE
  5748                           postdec2	equ	0xFDD
  5749                           fsr2h	equ	0xFDA
  5750                           fsr2l	equ	0xFD9
  5751                           status	equ	0xFD8
  5752                           
  5753 ;; *************** function ___lwtoft *****************
  5754 ;; Defined at:
  5755 ;;		line 28 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\lwtoft.c"
  5756 ;; Parameters:    Size  Location     Type
  5757 ;;  c               2    8[COMRAM] unsigned int 
  5758 ;; Auto vars:     Size  Location     Type
  5759 ;;		None
  5760 ;; Return value:  Size  Location     Type
  5761 ;;                  3    8[COMRAM] float 
  5762 ;; Registers used:
  5763 ;;		wreg, status,2, status,0, cstack
  5764 ;; Tracked objects:
  5765 ;;		On entry : 0/0
  5766 ;;		On exit  : 0/0
  5767 ;;		Unchanged: 0/0
  5768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5769 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5772 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5773 ;;Total ram usage:        3 bytes
  5774 ;; Hardware stack levels used:    1
  5775 ;; Hardware stack levels required when called:    1
  5776 ;; This function calls:
  5777 ;;		___ftpack
  5778 ;; This function is called by:
  5779 ;;		_main
  5780 ;; This function uses a non-reentrant model
  5781 ;;
  5782                           
  5783                           	psect	text24
  5784  002E82                     __ptext24:
  5785                           	opt stack 0
  5786  002E82                     ___lwtoft:
  5787                           	opt stack 29
  5788                           
  5789                           ;incstack = 0
  5790  002E82  C009  F001         	movff	___lwtoft@c,___ftpack@arg
  5791  002E86  C00A  F002         	movff	___lwtoft@c+1,___ftpack@arg+1
  5792  002E8A  6A03               	clrf	___ftpack@arg+2,c
  5793  002E8C  0E8E               	movlw	142
  5794  002E8E  6E04               	movwf	___ftpack@exp,c
  5795  002E90  0E00               	movlw	0
  5796  002E92  6E05               	movwf	___ftpack@sign,c
  5797  002E94  ECB3  F014         	call	___ftpack	;wreg free
  5798  002E98  C001  F009         	movff	?___ftpack,?___lwtoft
  5799  002E9C  C002  F00A         	movff	?___ftpack+1,?___lwtoft+1
  5800  002EA0  C003  F00B         	movff	?___ftpack+2,?___lwtoft+2
  5801  002EA4  D000               	goto	l824
  5802  002EA6                     l824:
  5803  002EA6  0012               	return		;funcret
  5804  002EA8                     __end_of___lwtoft:
  5805                           	opt stack 0
  5806                           tblptru	equ	0xFF8
  5807                           tblptrh	equ	0xFF7
  5808                           tblptrl	equ	0xFF6
  5809                           tablat	equ	0xFF5
  5810                           prodh	equ	0xFF4
  5811                           prodl	equ	0xFF3
  5812                           wreg	equ	0xFE8
  5813                           indf2	equ	0xFDF
  5814                           postinc2	equ	0xFDE
  5815                           postdec2	equ	0xFDD
  5816                           fsr2h	equ	0xFDA
  5817                           fsr2l	equ	0xFD9
  5818                           status	equ	0xFD8
  5819                           
  5820 ;; *************** function ___ftdiv *****************
  5821 ;; Defined at:
  5822 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5823 ;; Parameters:    Size  Location     Type
  5824 ;;  f1              3   57[COMRAM] float 
  5825 ;;  f2              3   60[COMRAM] float 
  5826 ;; Auto vars:     Size  Location     Type
  5827 ;;  f3              3   67[COMRAM] float 
  5828 ;;  sign            1   71[COMRAM] unsigned char 
  5829 ;;  exp             1   70[COMRAM] unsigned char 
  5830 ;;  cntr            1   66[COMRAM] unsigned char 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;                  3   57[COMRAM] float 
  5833 ;; Registers used:
  5834 ;;		wreg, status,2, status,0, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5840 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;Total ram usage:       15 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    1
  5847 ;; This function calls:
  5848 ;;		___ftpack
  5849 ;; This function is called by:
  5850 ;;		_main
  5851 ;; This function uses a non-reentrant model
  5852 ;;
  5853                           
  5854                           	psect	text25
  5855  0027B2                     __ptext25:
  5856                           	opt stack 0
  5857  0027B2                     ___ftdiv:
  5858                           	opt stack 29
  5859                           
  5860                           ;incstack = 0
  5861  0027B2  C03C  F040         	movff	___ftdiv@f1+2,??___ftdiv
  5862  0027B6  6A41               	clrf	(??___ftdiv+1)& (0+255),c
  5863  0027B8  6A42               	clrf	(??___ftdiv+2)& (0+255),c
  5864  0027BA  343B               	rlcf	___ftdiv@f1+1,w,c
  5865  0027BC  3640               	rlcf	??___ftdiv& (0+255),f,c
  5866  0027BE  E301               	bnc	u2991
  5867  0027C0  8041               	bsf	(??___ftdiv+1)& (0+255),0,c
  5868  0027C2                     u2991:
  5869  0027C2  5040               	movf	??___ftdiv,w,c
  5870  0027C4  6E47               	movwf	___ftdiv@exp,c
  5871  0027C6  5047               	movf	___ftdiv@exp,w,c
  5872  0027C8  A4D8               	btfss	status,2,c
  5873  0027CA  D002               	goto	l2704
  5874  0027CC  D00E               	goto	l2706
  5875  0027CE  D061               	goto	l637
  5876  0027D0                     l2704:
  5877  0027D0  C03F  F040         	movff	___ftdiv@f2+2,??___ftdiv
  5878  0027D4  6A41               	clrf	(??___ftdiv+1)& (0+255),c
  5879  0027D6  6A42               	clrf	(??___ftdiv+2)& (0+255),c
  5880  0027D8  343E               	rlcf	___ftdiv@f2+1,w,c
  5881  0027DA  3640               	rlcf	??___ftdiv& (0+255),f,c
  5882  0027DC  E301               	bnc	u3011
  5883  0027DE  8041               	bsf	(??___ftdiv+1)& (0+255),0,c
  5884  0027E0                     u3011:
  5885  0027E0  5040               	movf	??___ftdiv,w,c
  5886  0027E2  6E48               	movwf	___ftdiv@sign,c
  5887  0027E4  5048               	movf	___ftdiv@sign,w,c
  5888  0027E6  A4D8               	btfss	status,2,c
  5889  0027E8  D007               	goto	l2710
  5890  0027EA                     l2706:
  5891  0027EA  0E00               	movlw	0
  5892  0027EC  6E3A               	movwf	?___ftdiv,c
  5893  0027EE  0E00               	movlw	0
  5894  0027F0  6E3B               	movwf	?___ftdiv+1,c
  5895  0027F2  0E00               	movlw	0
  5896  0027F4  6E3C               	movwf	?___ftdiv+2,c
  5897  0027F6  D04D               	goto	l637
  5898  0027F8                     l2710:
  5899  0027F8  0E00               	movlw	0
  5900  0027FA  6E44               	movwf	___ftdiv@f3,c
  5901  0027FC  0E00               	movlw	0
  5902  0027FE  6E45               	movwf	___ftdiv@f3+1,c
  5903  002800  0E00               	movlw	0
  5904  002802  6E46               	movwf	___ftdiv@f3+2,c
  5905  002804  5048               	movf	___ftdiv@sign,w,c
  5906  002806  0F89               	addlw	137
  5907  002808  5E47               	subwf	___ftdiv@exp,f,c
  5908  00280A  C03C  F048         	movff	___ftdiv@f1+2,___ftdiv@sign
  5909  00280E  503F               	movf	___ftdiv@f2+2,w,c
  5910  002810  1A48               	xorwf	___ftdiv@sign,f,c
  5911  002812  0E80               	movlw	128
  5912  002814  1648               	andwf	___ftdiv@sign,f,c
  5913  002816  8E3B               	bsf	___ftdiv@f1+1,7,c
  5914  002818  0EFF               	movlw	255
  5915  00281A  163A               	andwf	___ftdiv@f1,f,c
  5916  00281C  0EFF               	movlw	255
  5917  00281E  163B               	andwf	___ftdiv@f1+1,f,c
  5918  002820  0E00               	movlw	0
  5919  002822  163C               	andwf	___ftdiv@f1+2,f,c
  5920  002824  8E3E               	bsf	___ftdiv@f2+1,7,c
  5921  002826  0EFF               	movlw	255
  5922  002828  163D               	andwf	___ftdiv@f2,f,c
  5923  00282A  0EFF               	movlw	255
  5924  00282C  163E               	andwf	___ftdiv@f2+1,f,c
  5925  00282E  0E00               	movlw	0
  5926  002830  163F               	andwf	___ftdiv@f2+2,f,c
  5927  002832  0E18               	movlw	24
  5928  002834  6E43               	movwf	___ftdiv@cntr,c
  5929  002836  D000               	goto	l2730
  5930  002838                     l2730:
  5931  002838  90D8               	bcf	status,0,c
  5932  00283A  3644               	rlcf	___ftdiv@f3,f,c
  5933  00283C  3645               	rlcf	___ftdiv@f3+1,f,c
  5934  00283E  3646               	rlcf	___ftdiv@f3+2,f,c
  5935  002840  503D               	movf	___ftdiv@f2,w,c
  5936  002842  5C3A               	subwf	___ftdiv@f1,w,c
  5937  002844  503E               	movf	___ftdiv@f2+1,w,c
  5938  002846  583B               	subwfb	___ftdiv@f1+1,w,c
  5939  002848  503F               	movf	___ftdiv@f2+2,w,c
  5940  00284A  583C               	subwfb	___ftdiv@f1+2,w,c
  5941  00284C  A0D8               	btfss	status,0,c
  5942  00284E  D007               	goto	l640
  5943  002850  503D               	movf	___ftdiv@f2,w,c
  5944  002852  5E3A               	subwf	___ftdiv@f1,f,c
  5945  002854  503E               	movf	___ftdiv@f2+1,w,c
  5946  002856  5A3B               	subwfb	___ftdiv@f1+1,f,c
  5947  002858  503F               	movf	___ftdiv@f2+2,w,c
  5948  00285A  5A3C               	subwfb	___ftdiv@f1+2,f,c
  5949  00285C  8044               	bsf	___ftdiv@f3,0,c
  5950  00285E                     l640:
  5951  00285E  90D8               	bcf	status,0,c
  5952  002860  363A               	rlcf	___ftdiv@f1,f,c
  5953  002862  363B               	rlcf	___ftdiv@f1+1,f,c
  5954  002864  363C               	rlcf	___ftdiv@f1+2,f,c
  5955  002866  2E43               	decfsz	___ftdiv@cntr,f,c
  5956  002868  D7E7               	goto	l2730
  5957  00286A  D000               	goto	l2740
  5958  00286C                     l2740:
  5959  00286C  C044  F001         	movff	___ftdiv@f3,___ftpack@arg
  5960  002870  C045  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5961  002874  C046  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5962  002878  C047  F004         	movff	___ftdiv@exp,___ftpack@exp
  5963  00287C  C048  F005         	movff	___ftdiv@sign,___ftpack@sign
  5964  002880  ECB3  F014         	call	___ftpack	;wreg free
  5965  002884  C001  F03A         	movff	?___ftpack,?___ftdiv
  5966  002888  C002  F03B         	movff	?___ftpack+1,?___ftdiv+1
  5967  00288C  C003  F03C         	movff	?___ftpack+2,?___ftdiv+2
  5968  002890  D000               	goto	l637
  5969  002892                     l637:
  5970  002892  0012               	return		;funcret
  5971  002894                     __end_of___ftdiv:
  5972                           	opt stack 0
  5973                           tblptru	equ	0xFF8
  5974                           tblptrh	equ	0xFF7
  5975                           tblptrl	equ	0xFF6
  5976                           tablat	equ	0xFF5
  5977                           prodh	equ	0xFF4
  5978                           prodl	equ	0xFF3
  5979                           wreg	equ	0xFE8
  5980                           indf2	equ	0xFDF
  5981                           postinc2	equ	0xFDE
  5982                           postdec2	equ	0xFDD
  5983                           fsr2h	equ	0xFDA
  5984                           fsr2l	equ	0xFD9
  5985                           status	equ	0xFD8
  5986                           
  5987 ;; *************** function ___ftpack *****************
  5988 ;; Defined at:
  5989 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  5990 ;; Parameters:    Size  Location     Type
  5991 ;;  arg             3    0[COMRAM] unsigned um
  5992 ;;  exp             1    3[COMRAM] unsigned char 
  5993 ;;  sign            1    4[COMRAM] unsigned char 
  5994 ;; Auto vars:     Size  Location     Type
  5995 ;;		None
  5996 ;; Return value:  Size  Location     Type
  5997 ;;                  3    0[COMRAM] float 
  5998 ;; Registers used:
  5999 ;;		wreg, status,2, status,0
  6000 ;; Tracked objects:
  6001 ;;		On entry : 0/0
  6002 ;;		On exit  : 0/0
  6003 ;;		Unchanged: 0/0
  6004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6005 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;Total ram usage:        8 bytes
  6010 ;; Hardware stack levels used:    1
  6011 ;; This function calls:
  6012 ;;		Nothing
  6013 ;; This function is called by:
  6014 ;;		___ftadd
  6015 ;;		___ftdiv
  6016 ;;		___ftmul
  6017 ;;		___lltoft
  6018 ;;		___lwtoft
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text26
  6023  002966                     __ptext26:
  6024                           	opt stack 0
  6025  002966                     ___ftpack:
  6026                           	opt stack 27
  6027                           
  6028                           ;incstack = 0
  6029  002966  5004               	movf	___ftpack@exp,w,c
  6030  002968  B4D8               	btfsc	status,2,c
  6031  00296A  D005               	goto	l1858
  6032  00296C  5001               	movf	___ftpack@arg,w,c
  6033  00296E  1002               	iorwf	___ftpack@arg+1,w,c
  6034  002970  1003               	iorwf	___ftpack@arg+2,w,c
  6035  002972  A4D8               	btfss	status,2,c
  6036  002974  D00E               	goto	l1864
  6037  002976                     l1858:
  6038  002976  0E00               	movlw	0
  6039  002978  6E01               	movwf	?___ftpack,c
  6040  00297A  0E00               	movlw	0
  6041  00297C  6E02               	movwf	?___ftpack+1,c
  6042  00297E  0E00               	movlw	0
  6043  002980  6E03               	movwf	?___ftpack+2,c
  6044  002982  D053               	goto	l565
  6045  002984  D006               	goto	l1864
  6046  002986                     l1862:
  6047  002986  2A04               	incf	___ftpack@exp,f,c
  6048  002988  90D8               	bcf	status,0,c
  6049  00298A  3203               	rrcf	___ftpack@arg+2,f,c
  6050  00298C  3202               	rrcf	___ftpack@arg+1,f,c
  6051  00298E  3201               	rrcf	___ftpack@arg,f,c
  6052  002990  D000               	goto	l1864
  6053  002992                     l1864:
  6054  002992  0E00               	movlw	0
  6055  002994  1401               	andwf	___ftpack@arg,w,c
  6056  002996  6E06               	movwf	??___ftpack& (0+255),c
  6057  002998  0E00               	movlw	0
  6058  00299A  1402               	andwf	___ftpack@arg+1,w,c
  6059  00299C  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6060  00299E  0EFE               	movlw	254
  6061  0029A0  1403               	andwf	___ftpack@arg+2,w,c
  6062  0029A2  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6063  0029A4  5006               	movf	??___ftpack,w,c
  6064  0029A6  1007               	iorwf	??___ftpack+1,w,c
  6065  0029A8  1008               	iorwf	??___ftpack+2,w,c
  6066  0029AA  B4D8               	btfsc	status,2,c
  6067  0029AC  D00E               	goto	l1870
  6068  0029AE  D7EB               	goto	l1862
  6069  0029B0  D00C               	goto	l1870
  6070  0029B2                     l1866:
  6071  0029B2  2A04               	incf	___ftpack@exp,f,c
  6072  0029B4  0E01               	movlw	1
  6073  0029B6  2601               	addwf	___ftpack@arg,f,c
  6074  0029B8  0E00               	movlw	0
  6075  0029BA  2202               	addwfc	___ftpack@arg+1,f,c
  6076  0029BC  0E00               	movlw	0
  6077  0029BE  2203               	addwfc	___ftpack@arg+2,f,c
  6078  0029C0  90D8               	bcf	status,0,c
  6079  0029C2  3203               	rrcf	___ftpack@arg+2,f,c
  6080  0029C4  3202               	rrcf	___ftpack@arg+1,f,c
  6081  0029C6  3201               	rrcf	___ftpack@arg,f,c
  6082  0029C8  D000               	goto	l1870
  6083  0029CA                     l1870:
  6084  0029CA  0E00               	movlw	0
  6085  0029CC  1401               	andwf	___ftpack@arg,w,c
  6086  0029CE  6E06               	movwf	??___ftpack& (0+255),c
  6087  0029D0  0E00               	movlw	0
  6088  0029D2  1402               	andwf	___ftpack@arg+1,w,c
  6089  0029D4  6E07               	movwf	(??___ftpack+1)& (0+255),c
  6090  0029D6  0EFF               	movlw	255
  6091  0029D8  1403               	andwf	___ftpack@arg+2,w,c
  6092  0029DA  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6093  0029DC  5006               	movf	??___ftpack,w,c
  6094  0029DE  1007               	iorwf	??___ftpack+1,w,c
  6095  0029E0  1008               	iorwf	??___ftpack+2,w,c
  6096  0029E2  B4D8               	btfsc	status,2,c
  6097  0029E4  D008               	goto	l1874
  6098  0029E6  D7E5               	goto	l1866
  6099  0029E8  D006               	goto	l1874
  6100  0029EA                     l1872:
  6101  0029EA  0604               	decf	___ftpack@exp,f,c
  6102  0029EC  90D8               	bcf	status,0,c
  6103  0029EE  3601               	rlcf	___ftpack@arg,f,c
  6104  0029F0  3602               	rlcf	___ftpack@arg+1,f,c
  6105  0029F2  3603               	rlcf	___ftpack@arg+2,f,c
  6106  0029F4  D000               	goto	l1874
  6107  0029F6                     l1874:
  6108  0029F6  BE02               	btfsc	___ftpack@arg+1,7,c
  6109  0029F8  D004               	goto	l576
  6110  0029FA  0E02               	movlw	2
  6111  0029FC  6004               	cpfslt	___ftpack@exp,c
  6112  0029FE  D7F5               	goto	l1872
  6113  002A00  D000               	goto	l576
  6114  002A02                     l576:
  6115  002A02  B004               	btfsc	___ftpack@exp,0,c
  6116  002A04  D002               	goto	l1880
  6117  002A06  9E02               	bcf	___ftpack@arg+1,7,c
  6118  002A08  D000               	goto	l1880
  6119  002A0A                     l1880:
  6120  002A0A  90D8               	bcf	status,0,c
  6121  002A0C  3204               	rrcf	___ftpack@exp,f,c
  6122  002A0E  5004               	movf	___ftpack@exp,w,c
  6123  002A10  1203               	iorwf	___ftpack@arg+2,f,c
  6124  002A12  5005               	movf	___ftpack@sign,w,c
  6125  002A14  B4D8               	btfsc	status,2,c
  6126  002A16  D002               	goto	l1886
  6127  002A18  8E03               	bsf	___ftpack@arg+2,7,c
  6128  002A1A  D000               	goto	l1886
  6129  002A1C                     l1886:
  6130  002A1C  C001  F001         	movff	___ftpack@arg,?___ftpack
  6131  002A20  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6132  002A24  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6133  002A28  D000               	goto	l565
  6134  002A2A                     l565:
  6135  002A2A  0012               	return		;funcret
  6136  002A2C                     __end_of___ftpack:
  6137                           	opt stack 0
  6138                           tblptru	equ	0xFF8
  6139                           tblptrh	equ	0xFF7
  6140                           tblptrl	equ	0xFF6
  6141                           tablat	equ	0xFF5
  6142                           prodh	equ	0xFF4
  6143                           prodl	equ	0xFF3
  6144                           wreg	equ	0xFE8
  6145                           indf2	equ	0xFDF
  6146                           postinc2	equ	0xFDE
  6147                           postdec2	equ	0xFDD
  6148                           fsr2h	equ	0xFDA
  6149                           fsr2l	equ	0xFD9
  6150                           status	equ	0xFD8
  6151                           
  6152 ;; *************** function _SET_ADCON0 *****************
  6153 ;; Defined at:
  6154 ;;		line 33 in file "lab5.c"
  6155 ;; Parameters:    Size  Location     Type
  6156 ;;  ch              1    wreg     unsigned char 
  6157 ;; Auto vars:     Size  Location     Type
  6158 ;;  ch              1    0[COMRAM] unsigned char 
  6159 ;; Return value:  Size  Location     Type
  6160 ;;		None               void
  6161 ;; Registers used:
  6162 ;;		wreg, status,2, status,0
  6163 ;; Tracked objects:
  6164 ;;		On entry : 0/0
  6165 ;;		On exit  : 0/0
  6166 ;;		Unchanged: 0/0
  6167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6168 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6169 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6171 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6172 ;;Total ram usage:        1 bytes
  6173 ;; Hardware stack levels used:    1
  6174 ;; This function calls:
  6175 ;;		Nothing
  6176 ;; This function is called by:
  6177 ;;		_main
  6178 ;; This function uses a non-reentrant model
  6179 ;;
  6180                           
  6181                           	psect	text27
  6182  002F78                     __ptext27:
  6183                           	opt stack 0
  6184  002F78                     _SET_ADCON0:
  6185                           	opt stack 30
  6186                           
  6187                           ;incstack = 0
  6188                           ;SET_ADCON0@ch stored from wreg
  6189  002F78  6E01               	movwf	SET_ADCON0@ch,c
  6190  002F7A  4401               	rlncf	SET_ADCON0@ch,w,c
  6191  002F7C  46E8               	rlncf	wreg,f,c
  6192  002F7E  0BFC               	andlw	252
  6193  002F80  0901               	iorlw	1
  6194  002F82  6EC2               	movwf	4034,c	;volatile
  6195  002F84  0012               	return		;funcret
  6196  002F86                     __end_of_SET_ADCON0:
  6197                           	opt stack 0
  6198                           tblptru	equ	0xFF8
  6199                           tblptrh	equ	0xFF7
  6200                           tblptrl	equ	0xFF6
  6201                           tablat	equ	0xFF5
  6202                           prodh	equ	0xFF4
  6203                           prodl	equ	0xFF3
  6204                           wreg	equ	0xFE8
  6205                           indf2	equ	0xFDF
  6206                           postinc2	equ	0xFDE
  6207                           postdec2	equ	0xFDD
  6208                           fsr2h	equ	0xFDA
  6209                           fsr2l	equ	0xFD9
  6210                           status	equ	0xFD8
  6211                           
  6212 ;; *************** function _INIT_TRIS *****************
  6213 ;; Defined at:
  6214 ;;		line 41 in file "lab5.c"
  6215 ;; Parameters:    Size  Location     Type
  6216 ;;		None
  6217 ;; Auto vars:     Size  Location     Type
  6218 ;;		None
  6219 ;; Return value:  Size  Location     Type
  6220 ;;		None               void
  6221 ;; Registers used:
  6222 ;;		wreg, status,2
  6223 ;; Tracked objects:
  6224 ;;		On entry : 0/0
  6225 ;;		On exit  : 0/0
  6226 ;;		Unchanged: 0/0
  6227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6232 ;;Total ram usage:        0 bytes
  6233 ;; Hardware stack levels used:    1
  6234 ;; This function calls:
  6235 ;;		Nothing
  6236 ;; This function is called by:
  6237 ;;		_main
  6238 ;; This function uses a non-reentrant model
  6239 ;;
  6240                           
  6241                           	psect	text28
  6242  002F56                     __ptext28:
  6243                           	opt stack 0
  6244  002F56                     _INIT_TRIS:
  6245                           	opt stack 30
  6246                           
  6247                           ;lab5.c: 42: TRISA = 0xFF;
  6248                           
  6249                           ;incstack = 0
  6250  002F56  6892               	setf	3986,c	;volatile
  6251                           
  6252                           ;lab5.c: 43: TRISB = 0x00;
  6253  002F58  0E00               	movlw	0
  6254  002F5A  6E93               	movwf	3987,c	;volatile
  6255                           
  6256                           ;lab5.c: 44: TRISC = 0x00;
  6257  002F5C  0E00               	movlw	0
  6258  002F5E  6E94               	movwf	3988,c	;volatile
  6259                           
  6260                           ;lab5.c: 45: TRISD = 0x00;
  6261  002F60  0E00               	movlw	0
  6262  002F62  6E95               	movwf	3989,c	;volatile
  6263                           
  6264                           ;lab5.c: 46: TRISE = 0x00;
  6265  002F64  0E00               	movlw	0
  6266  002F66  6E96               	movwf	3990,c	;volatile
  6267  002F68  0012               	return		;funcret
  6268  002F6A                     __end_of_INIT_TRIS:
  6269                           	opt stack 0
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           wreg	equ	0xFE8
  6277                           indf2	equ	0xFDF
  6278                           postinc2	equ	0xFDE
  6279                           postdec2	equ	0xFDD
  6280                           fsr2h	equ	0xFDA
  6281                           fsr2l	equ	0xFD9
  6282                           status	equ	0xFD8
  6283                           
  6284 ;; *************** function _INIT_ADC *****************
  6285 ;; Defined at:
  6286 ;;		line 28 in file "lab5.c"
  6287 ;; Parameters:    Size  Location     Type
  6288 ;;		None
  6289 ;; Auto vars:     Size  Location     Type
  6290 ;;		None
  6291 ;; Return value:  Size  Location     Type
  6292 ;;		None               void
  6293 ;; Registers used:
  6294 ;;		wreg, status,2
  6295 ;; Tracked objects:
  6296 ;;		On entry : 0/0
  6297 ;;		On exit  : 0/0
  6298 ;;		Unchanged: 0/0
  6299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6300 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6302 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6303 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6304 ;;Total ram usage:        0 bytes
  6305 ;; Hardware stack levels used:    1
  6306 ;; This function calls:
  6307 ;;		Nothing
  6308 ;; This function is called by:
  6309 ;;		_main
  6310 ;; This function uses a non-reentrant model
  6311 ;;
  6312                           
  6313                           	psect	text29
  6314  002F86                     __ptext29:
  6315                           	opt stack 0
  6316  002F86                     _INIT_ADC:
  6317                           	opt stack 30
  6318                           
  6319                           ;lab5.c: 29: ADCON0 = 0x01;
  6320                           
  6321                           ;incstack = 0
  6322  002F86  0E01               	movlw	1
  6323  002F88  6EC2               	movwf	4034,c	;volatile
  6324                           
  6325                           ;lab5.c: 30: ADCON1 = 0x0E;
  6326  002F8A  0E0E               	movlw	14
  6327  002F8C  6EC1               	movwf	4033,c	;volatile
  6328                           
  6329                           ;lab5.c: 31: ADCON2 = 0xA9;
  6330  002F8E  0EA9               	movlw	169
  6331  002F90  6EC0               	movwf	4032,c	;volatile
  6332  002F92  0012               	return		;funcret
  6333  002F94                     __end_of_INIT_ADC:
  6334                           	opt stack 0
  6335                           tblptru	equ	0xFF8
  6336                           tblptrh	equ	0xFF7
  6337                           tblptrl	equ	0xFF6
  6338                           tablat	equ	0xFF5
  6339                           prodh	equ	0xFF4
  6340                           prodl	equ	0xFF3
  6341                           wreg	equ	0xFE8
  6342                           indf2	equ	0xFDF
  6343                           postinc2	equ	0xFDE
  6344                           postdec2	equ	0xFDD
  6345                           fsr2h	equ	0xFDA
  6346                           fsr2l	equ	0xFD9
  6347                           status	equ	0xFD8
  6348                           
  6349 ;; *************** function _GET_FULL_ADC *****************
  6350 ;; Defined at:
  6351 ;;		line 34 in file "lab5.c"
  6352 ;; Parameters:    Size  Location     Type
  6353 ;;		None
  6354 ;; Auto vars:     Size  Location     Type
  6355 ;;		None
  6356 ;; Return value:  Size  Location     Type
  6357 ;;                  2    0[COMRAM] unsigned int 
  6358 ;; Registers used:
  6359 ;;		wreg, status,2
  6360 ;; Tracked objects:
  6361 ;;		On entry : 0/0
  6362 ;;		On exit  : 0/0
  6363 ;;		Unchanged: 0/0
  6364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6365 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6369 ;;Total ram usage:        4 bytes
  6370 ;; Hardware stack levels used:    1
  6371 ;; This function calls:
  6372 ;;		Nothing
  6373 ;; This function is called by:
  6374 ;;		_main
  6375 ;; This function uses a non-reentrant model
  6376 ;;
  6377                           
  6378                           	psect	text30
  6379  002F3E                     __ptext30:
  6380                           	opt stack 0
  6381  002F3E                     _GET_FULL_ADC:
  6382                           	opt stack 30
  6383                           
  6384                           ;lab5.c: 35: ADCON0bits.GO = 1;
  6385                           
  6386                           ;incstack = 0
  6387  002F3E  82C2               	bsf	4034,1,c	;volatile
  6388                           
  6389                           ;lab5.c: 36: while(ADCON0bits.DONE);
  6390  002F40  D000               	goto	l68
  6391  002F42                     l68:
  6392  002F42  B2C2               	btfsc	4034,1,c	;volatile
  6393  002F44  D7FE               	goto	l68
  6394                           
  6395                           ;lab5.c: 37: return ((unsigned int)ADRESH<<8) + ADRESL;
  6396  002F46  50C4               	movf	4036,w,c	;volatile
  6397  002F48  6E03               	movwf	??_GET_FULL_ADC& (0+255),c
  6398  002F4A  50C3               	movf	4035,w,c	;volatile
  6399  002F4C  6E01               	movwf	?_GET_FULL_ADC,c
  6400  002F4E  C003  F002         	movff	??_GET_FULL_ADC,?_GET_FULL_ADC+1
  6401  002F52  D000               	goto	l71
  6402  002F54                     l71:
  6403  002F54  0012               	return		;funcret
  6404  002F56                     __end_of_GET_FULL_ADC:
  6405                           	opt stack 0
  6406                           tblptru	equ	0xFF8
  6407                           tblptrh	equ	0xFF7
  6408                           tblptrl	equ	0xFF6
  6409                           tablat	equ	0xFF5
  6410                           prodh	equ	0xFF4
  6411                           prodl	equ	0xFF3
  6412                           wreg	equ	0xFE8
  6413                           indf2	equ	0xFDF
  6414                           postinc2	equ	0xFDE
  6415                           postdec2	equ	0xFDD
  6416                           fsr2h	equ	0xFDA
  6417                           fsr2l	equ	0xFD9
  6418                           status	equ	0xFD8
  6419                           
  6420 ;; *************** function _Delay_One_Sec *****************
  6421 ;; Defined at:
  6422 ;;		line 77 in file "lab5.c"
  6423 ;; Parameters:    Size  Location     Type
  6424 ;;		None
  6425 ;; Auto vars:     Size  Location     Type
  6426 ;;  j               4    0[COMRAM] long 
  6427 ;; Return value:  Size  Location     Type
  6428 ;;		None               void
  6429 ;; Registers used:
  6430 ;;		wreg, status,2, status,0
  6431 ;; Tracked objects:
  6432 ;;		On entry : 0/0
  6433 ;;		On exit  : 0/0
  6434 ;;		Unchanged: 0/0
  6435 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6436 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6437 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6438 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6439 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6440 ;;Total ram usage:        4 bytes
  6441 ;; Hardware stack levels used:    1
  6442 ;; This function calls:
  6443 ;;		Nothing
  6444 ;; This function is called by:
  6445 ;;		_main
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text31
  6450  002E1E                     __ptext31:
  6451                           	opt stack 0
  6452  002E1E                     _Delay_One_Sec:
  6453                           	opt stack 30
  6454                           
  6455                           ;incstack = 0
  6456  002E1E  0E00               	movlw	0
  6457  002E20  6E01               	movwf	Delay_One_Sec@j,c
  6458  002E22  0E00               	movlw	0
  6459  002E24  6E02               	movwf	Delay_One_Sec@j+1,c
  6460  002E26  0E00               	movlw	0
  6461  002E28  6E03               	movwf	Delay_One_Sec@j+2,c
  6462  002E2A  0E00               	movlw	0
  6463  002E2C  6E04               	movwf	Delay_One_Sec@j+3,c
  6464  002E2E                     l1478:
  6465  002E2E  BE04               	btfsc	Delay_One_Sec@j+3,7,c
  6466  002E30  D00B               	goto	l1482
  6467  002E32  5004               	movf	Delay_One_Sec@j+3,w,c
  6468  002E34  1003               	iorwf	Delay_One_Sec@j+2,w,c
  6469  002E36  E110               	bnz	l79
  6470  002E38  0E20               	movlw	32
  6471  002E3A  5C01               	subwf	Delay_One_Sec@j,w,c
  6472  002E3C  0E4E               	movlw	78
  6473  002E3E  5802               	subwfb	Delay_One_Sec@j+1,w,c
  6474  002E40  B0D8               	btfsc	status,0,c
  6475  002E42  D00A               	goto	l79
  6476  002E44  D001               	goto	l1482
  6477  002E46  D008               	goto	l79
  6478  002E48                     l1482:
  6479  002E48  0E01               	movlw	1
  6480  002E4A  2601               	addwf	Delay_One_Sec@j,f,c
  6481  002E4C  0E00               	movlw	0
  6482  002E4E  2202               	addwfc	Delay_One_Sec@j+1,f,c
  6483  002E50  2203               	addwfc	Delay_One_Sec@j+2,f,c
  6484  002E52  2204               	addwfc	Delay_One_Sec@j+3,f,c
  6485  002E54  D7EC               	goto	l1478
  6486  002E56  D000               	goto	l79
  6487  002E58                     l79:
  6488  002E58  0012               	return		;funcret
  6489  002E5A                     __end_of_Delay_One_Sec:
  6490                           	opt stack 0
  6491                           tblptru	equ	0xFF8
  6492                           tblptrh	equ	0xFF7
  6493                           tblptrl	equ	0xFF6
  6494                           tablat	equ	0xFF5
  6495                           prodh	equ	0xFF4
  6496                           prodl	equ	0xFF3
  6497                           wreg	equ	0xFE8
  6498                           indf2	equ	0xFDF
  6499                           postinc2	equ	0xFDE
  6500                           postdec2	equ	0xFDD
  6501                           fsr2h	equ	0xFDA
  6502                           fsr2l	equ	0xFD9
  6503                           status	equ	0xFD8
  6504                           
  6505 ;; *************** function _DISP_RightDigit *****************
  6506 ;; Defined at:
  6507 ;;		line 84 in file "lab5.c"
  6508 ;; Parameters:    Size  Location     Type
  6509 ;;  d               1    wreg     unsigned char 
  6510 ;; Auto vars:     Size  Location     Type
  6511 ;;  d               1    0[COMRAM] unsigned char 
  6512 ;; Return value:  Size  Location     Type
  6513 ;;		None               void
  6514 ;; Registers used:
  6515 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6516 ;; Tracked objects:
  6517 ;;		On entry : 0/0
  6518 ;;		On exit  : 0/0
  6519 ;;		Unchanged: 0/0
  6520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6522 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6524 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6525 ;;Total ram usage:        1 bytes
  6526 ;; Hardware stack levels used:    1
  6527 ;; This function calls:
  6528 ;;		Nothing
  6529 ;; This function is called by:
  6530 ;;		_main
  6531 ;; This function uses a non-reentrant model
  6532 ;;
  6533                           
  6534                           	psect	text32
  6535  002F0A                     __ptext32:
  6536                           	opt stack 0
  6537  002F0A                     _DISP_RightDigit:
  6538                           	opt stack 30
  6539                           
  6540                           ;incstack = 0
  6541                           ;DISP_RightDigit@d stored from wreg
  6542  002F0A  6E01               	movwf	DISP_RightDigit@d,c
  6543  002F0C  5001               	movf	DISP_RightDigit@d,w,c
  6544  002F0E  0D01               	mullw	1
  6545  002F10  0E77               	movlw	low _segmap
  6546  002F12  24F3               	addwf	prodl,w,c
  6547  002F14  6EF6               	movwf	tblptrl,c
  6548  002F16  0E10               	movlw	high _segmap
  6549  002F18  20F4               	addwfc	prodh,w,c
  6550  002F1A  6EF7               	movwf	tblptrh,c
  6551  002F1C                     	if	0	;There are less than 3 active tblptr bytes
  6552  002F1C                     	endif
  6553  002F1C  0008               	tblrd		*
  6554  002F1E  CFF5 FF8A          	movff	tablat,3978	;volatile
  6555  002F22  0012               	return		;funcret
  6556  002F24                     __end_of_DISP_RightDigit:
  6557                           	opt stack 0
  6558                           tblptru	equ	0xFF8
  6559                           tblptrh	equ	0xFF7
  6560                           tblptrl	equ	0xFF6
  6561                           tablat	equ	0xFF5
  6562                           prodh	equ	0xFF4
  6563                           prodl	equ	0xFF3
  6564                           wreg	equ	0xFE8
  6565                           indf2	equ	0xFDF
  6566                           postinc2	equ	0xFDE
  6567                           postdec2	equ	0xFDD
  6568                           fsr2h	equ	0xFDA
  6569                           fsr2l	equ	0xFD9
  6570                           status	equ	0xFD8
  6571                           
  6572 ;; *************** function _DISP_LeftDigit *****************
  6573 ;; Defined at:
  6574 ;;		line 83 in file "lab5.c"
  6575 ;; Parameters:    Size  Location     Type
  6576 ;;  d               1    wreg     unsigned char 
  6577 ;; Auto vars:     Size  Location     Type
  6578 ;;  d               1    0[COMRAM] unsigned char 
  6579 ;; Return value:  Size  Location     Type
  6580 ;;		None               void
  6581 ;; Registers used:
  6582 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  6583 ;; Tracked objects:
  6584 ;;		On entry : 0/0
  6585 ;;		On exit  : 0/0
  6586 ;;		Unchanged: 0/0
  6587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6589 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6591 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6592 ;;Total ram usage:        1 bytes
  6593 ;; Hardware stack levels used:    1
  6594 ;; This function calls:
  6595 ;;		Nothing
  6596 ;; This function is called by:
  6597 ;;		_main
  6598 ;; This function uses a non-reentrant model
  6599 ;;
  6600                           
  6601                           	psect	text33
  6602  002F24                     __ptext33:
  6603                           	opt stack 0
  6604  002F24                     _DISP_LeftDigit:
  6605                           	opt stack 30
  6606                           
  6607                           ;incstack = 0
  6608                           ;DISP_LeftDigit@d stored from wreg
  6609  002F24  6E01               	movwf	DISP_LeftDigit@d,c
  6610  002F26  5001               	movf	DISP_LeftDigit@d,w,c
  6611  002F28  0D01               	mullw	1
  6612  002F2A  0E77               	movlw	low _segmap
  6613  002F2C  24F3               	addwf	prodl,w,c
  6614  002F2E  6EF6               	movwf	tblptrl,c
  6615  002F30  0E10               	movlw	high _segmap
  6616  002F32  20F4               	addwfc	prodh,w,c
  6617  002F34  6EF7               	movwf	tblptrh,c
  6618  002F36                     	if	0	;There are less than 3 active tblptr bytes
  6619  002F36                     	endif
  6620  002F36  0008               	tblrd		*
  6621  002F38  CFF5 FF8C          	movff	tablat,3980	;volatile
  6622  002F3C  0012               	return		;funcret
  6623  002F3E                     __end_of_DISP_LeftDigit:
  6624                           	opt stack 0
  6625                           tblptru	equ	0xFF8
  6626                           tblptrh	equ	0xFF7
  6627                           tblptrl	equ	0xFF6
  6628                           tablat	equ	0xFF5
  6629                           prodh	equ	0xFF4
  6630                           prodl	equ	0xFF3
  6631                           wreg	equ	0xFE8
  6632                           indf2	equ	0xFDF
  6633                           postinc2	equ	0xFDE
  6634                           postdec2	equ	0xFDD
  6635                           fsr2h	equ	0xFDA
  6636                           fsr2l	equ	0xFD9
  6637                           status	equ	0xFD8
  6638                           tblptru	equ	0xFF8
  6639                           tblptrh	equ	0xFF7
  6640                           tblptrl	equ	0xFF6
  6641                           tablat	equ	0xFF5
  6642                           prodh	equ	0xFF4
  6643                           prodl	equ	0xFF3
  6644                           wreg	equ	0xFE8
  6645                           indf2	equ	0xFDF
  6646                           postinc2	equ	0xFDE
  6647                           postdec2	equ	0xFDD
  6648                           fsr2h	equ	0xFDA
  6649                           fsr2l	equ	0xFD9
  6650                           status	equ	0xFD8
  6651                           
  6652                           	psect	rparam
  6653  0000                     tblptru	equ	0xFF8
  6654                           tblptrh	equ	0xFF7
  6655                           tblptrl	equ	0xFF6
  6656                           tablat	equ	0xFF5
  6657                           prodh	equ	0xFF4
  6658                           prodl	equ	0xFF3
  6659                           wreg	equ	0xFE8
  6660                           indf2	equ	0xFDF
  6661                           postinc2	equ	0xFDE
  6662                           postdec2	equ	0xFDD
  6663                           fsr2h	equ	0xFDA
  6664                           fsr2l	equ	0xFD9
  6665                           status	equ	0xFD8


Data Sizes:
    Strings     38
    Constant    136
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    120     120
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 38
		 -> STR_1(CODE[38]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _main->_printf
    _set_D3->___ftge
    _set_D1->___awdiv
    _printf->___ftsub
    _scale->___ftmul
    _fround->___ftmul
    ___wmul->___awdiv
    ___ftmul->___wmul
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    ___lwtoft->___ftpack
    ___ftdiv->___ftadd

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0   67745
                                            102 COMRAM    18    18      0
                     _DISP_LeftDigit
                    _DISP_RightDigit
                      _Delay_One_Sec
                       _GET_FULL_ADC
                           _INIT_ADC
                          _INIT_TRIS
                         _SET_ADCON0
                            ___awdiv
                            ___awmod
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lwtoft
                          _init_UART
                             _printf
                             _set_D1
                             _set_D2
                             _set_D3
 ---------------------------------------------------------------------------------
 (1) _set_D3                                               3     0      3    1184
                                              9 COMRAM     3     0      3
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _set_D2                                               4     2      2     292
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _set_D1                                              14    12      2    2105
                                             14 COMRAM    14    12      2
                            ___awdiv
 ---------------------------------------------------------------------------------
 (1) _printf                                              47    37     10   46270
                                             63 COMRAM    39    29     10
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               10     7      3   10949
                                             35 COMRAM     7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              13    10      3   10751
                                             35 COMRAM    10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4    2335
                                             14 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4713
                                             20 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1576
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              8     4      4    1836
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     671
                                             13 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     546
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     508
                                             42 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3860
                                             57 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3563
                                             45 COMRAM    12     6      6
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     173
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6    1032
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _init_UART                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) ___lwtoft                                             3     0      3    2259
                                              8 COMRAM     3     0      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftdiv                                             15     9      6    2875
                                             57 COMRAM    15     9      6
                            ___ftadd (ARG)
                            ___ftmul (ARG)
                            ___ftneg (ARG)
                           ___ftpack
                           ___lwtoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (1) _SET_ADCON0                                           1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _INIT_TRIS                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _INIT_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _GET_FULL_ADC                                         4     2      2       0
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _Delay_One_Sec                                        4     4      0      30
                                              0 COMRAM     4     4      0
 ---------------------------------------------------------------------------------
 (1) _DISP_RightDigit                                      1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _DISP_LeftDigit                                       1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _DISP_LeftDigit
   _DISP_RightDigit
   _Delay_One_Sec
   _GET_FULL_ADC
   _INIT_ADC
   _INIT_TRIS
   _SET_ADCON0
   ___awdiv
     ___awmod (ARG)
   ___awmod
   ___ftadd
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     _fround (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___ftdiv
     ___ftadd (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
   ___ftmul
     ___awdiv (ARG)
       ___awmod (ARG)
     ___awmod (ARG)
     ___ftpack (ARG)
     ___lwtoft (ARG)
       ___ftpack
     ___wmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
   ___ftneg
   ___fttol
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   ___lwtoft
     ___ftpack
   _init_UART
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___ftneg (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lwtoft (ARG)
         ___ftpack
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___ftmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___ftneg (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lwtoft (ARG)
               ___ftpack
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lwtoft (ARG)
             ___ftpack
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _isdigit
     _putch
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lwtoft (ARG)
           ___ftpack
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _set_D1
     ___awdiv
       ___awmod (ARG)
   _set_D2
   _set_D3
     ___ftge

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     78      78       1       94.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
ABS                  0      0       0      34        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BIGRAM             F7F      0       0      37        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Mon Oct 06 22:36:02 2025

                      l71 2F54                        l56 2F6E                        l68 2F42  
                      l79 2E58                        l98 2964              ___awdiv@sign 000C  
     ___wmul@multiplicand 0011              ___ftadd@exp1 0039              ___ftadd@exp2 0038  
            ___ftadd@sign 0037                       l124 2AC6                       l126 2ACE  
                     l215 15BC                       l240 2E80                       l162 1CAC  
                     l155 1EF0                       l237 18CC                       l433 2B64  
                     l620 2244                       l524 24F0                       l605 2158  
                     l533 24E0                       l606 22D6                       l446 2D08  
                     l640 285E                       l609 2182                       l705 2EEC  
                     l565 2A2A                       l637 2892                       l629 2260  
                     l645 23E6                       l734 2C76                       l654 23D6  
                     l663 2BFA                       l647 234E                       l576 2A02  
                     l824 2EA6                       l744 2D68                       l648 2376  
                     l690 26CE                       l764 2DD8                       l669 25E8  
                     l686 2E1C                       l679 2EBE              ___awmod@sign 0006  
       ??_DISP_RightDigit 0001                       prod 000FF3                       wreg 000FE8  
          ??_GET_FULL_ADC 0003              __CFG_LVP$OFF 000000              ___ftdiv@cntr 0043  
            ___ftdiv@sign 0048              __CFG_WDT$OFF 000000                      l2000 2594  
                    l2010 25C2                      l2002 259A                      l2022 2AE6  
                    l2006 25AC                      l2034 2B0E                      l2050 2B4A  
                    l2130 19FA                      l2212 2398                      l2204 2384  
                    l2036 2B18                      l2028 2AF8                      l2116 1EB0  
                    l2108 1DEC                      l2140 1AB2                      l2302 2BCA  
                    l2222 23C2                      l2054 2B5A                      l2046 2B3E  
                    l2038 2B20                      l2070 2CAC                      l2232 23F8  
                    l2224 23D0                      l2216 23A8                      l2136 1AA2  
                    l2322 2608                      l2402 2D80                      l2218 23AE  
                    l2090 2CFE                      l2082 2CE2                      l2074 2CBA  
                    l2066 2C9E                      l2154 1C88                      l2308 2BF6  
                    l2340 2662                      l2404 2D8E                      l2260 247E  
                    l2252 244C                      l2076 2CC4                      l2148 1BD6  
                    l2350 268C                      l2238 2408                      l2182 2314  
                    l2078 2CCC                      l2086 2CEE                      l2166 2EE4  
                    l2502 112C                      l2422 28C6                      l2352 269A  
                    l2344 2672                      l2272 24A2                      l2264 248E  
                    l2176 22F6                      l2520 119C                      l2512 115A  
                    l2504 1144                      l2424 28E4                      l2440 26F8  
                    l1482 2E48                      l2290 2DF2                      l2346 2678  
                    l2354 26A4                      l2370 2C2C                      l2282 24CC  
                    l2602 14D8                      l2530 11DE                      l2514 1186  
                    l2426 28EA                      l2450 2730                      l2442 2708  
                    l2434 26E0                      l2380 2C66                      l2372 2C34  
                    l2284 24DA                      l2276 24B2                      l2620 15A6  
                    l2612 157E                      l2508 1152                      l2460 275C  
                    l2452 2734                      l2444 270C                      l2436 26E4  
                    l1478 2E2E                      l2710 27F8                      l1910 2190  
                    l2358 26BC                      l2390 2D2A                      l2278 24B8  
                    l2630 15DC                      l2614 158A                      l2606 14F4  
                    l2454 2744                      l2446 271C                      l2438 26F4  
                    l2462 2762                      l2704 27D0                      l1904 2166  
                    l2368 2C1E                      l2392 2D32                      l2640 1702  
                    l2624 15C2                      l2560 130A                      l2456 2748  
                    l2448 2720                      l2480 2A9E                      l2472 2A50  
                    l2730 2838                      l2706 27EA                      l2298 2B98  
                    l2642 170E                      l2634 162C                      l2618 1598  
                    l2570 1382                      l2562 133A                      l2554 12D4  
                    l2546 1270                      l2490 10CA                      l2458 2758  
                    l2740 286C                      l1932 21E8                      l1916 219C  
                    l2396 2D58                      l2388 2D1C                      l2580 13F2  
                    l2564 134A                      l2476 2A78                      l1870 29CA  
                    l1862 2986                      l1934 21F4                      l1926 21C4  
                    l2670 178E                      l2646 171C                      l2590 1498  
                    l2582 1420                      l2574 13A6                      l2558 12FA  
                    l2486 10BA                      l2750 1F00                      l1880 2A0A  
                    l1872 29EA                      l1864 2992                      l1952 227E  
                    l1944 222C                      l1936 2200                      l2664 177E  
                    l2576 13B0                      l2584 142E                      l2648 1728  
                    l1874 29F6                      l1866 29B2                      l1858 2976  
                    l1962 22B0                      l1946 2238                      l1938 2208  
                    l2690 181C                      l2682 17DE                      l2674 17BE  
                    l2666 1782                      l2658 1764                      l2594 14A4  
                    l2498 10F4                      l1972 2510                      l2588 1494  
                    l1886 2A1C                      l1974 252A                      l2694 189A  
                    l2686 1800                      l2678 17C2                      l2598 14D4  
                    l2758 2020                      l1992 256C                      l2696 18AE  
                    l1978 2538                      l1996 257E                      STR_1 1089  
                    u2111 22E8                      u3011 27E0                      u2131 2306  
                    _LATB 000F8A                      _LATD 000F8C                      u2321 25FA  
                    u2340 2626                      u1621 2124                      u1631 2138  
                    u2345 261E                      u1831 2502                      u2480 28A2  
                    u2490 28BC                      u1851 2520              printf@tmpval 0059  
                    u2840 15B6                      u2680 1216                      u2685 120C  
                    u2991 27C2                      _main 1EF2              ___ftpack@arg 0001  
            ___ftpack@exp 0004                      fsr2h 000FDA                      indf2 000FDF  
                    fsr2l 000FD9                      prodh 000FF4                      prodl 000FF3  
                    start 0000        __size_of_INIT_TRIS 0014              ___ftmul@cntr 0022  
            ___param_bank 000010              ___ftmul@sign 0023              ___fttol@exp1 0039  
            ___fttol@lval 0035          __end_of_INIT_ADC 2F94               ?_SET_ADCON0 0001  
                   ?_main 0001           __end_of___awdiv 2B66           __end_of___ftadd 22D8  
         __end_of___awmod 2D0A           __end_of___ftdiv 2894           __end_of___ftneg 2ECC  
         __end_of___lldiv 2C88           __end_of___ftmul 25EA           ___awdiv@divisor 0009  
         __end_of___llmod 2D7A           __end_of___ftsub 2E1E           __end_of___fttol 26D0  
         ___awdiv@counter 000B                     _SPBRG 000FAF                     _TRISA 000F92  
                   _TRISB 000F93                     _TRISC 000F94                     _TRISD 000F95  
                   _TRISE 000F96                     _TXREG 000FAD              ___lltoft@exp 0011  
         __end_of_dpowers 1029                     _scale 18CE           __end_of_isdigit 2EEE  
           ___ftpack@sign 0005                     _putch 2F6A            __CFG_BOREN$OFF 000000  
                   tablat 000FF5                     status 000FD8       __end_ofset_D1@F3293 1089  
         __initialization 2F94              __end_of_main 2114                    ??_main 0067  
           ___fttol@sign1 0034             __activetblptr 000002      __size_of__tdiv_to_l_ 0110  
       __end_of_INIT_TRIS 2F6A                    _ADCON0 000FC2                    _ADCON1 000FC1  
                  _ADCON2 000FC0          ___llmod@dividend 000E                    ?_scale 0024  
                  _ADRESH 000FC4                    _ADRESL 000FC3          ___awdiv@dividend 0007  
                  ?_putch 0001          __end_of___ftpack 2A2C          __end_of___lltoft 2DDA  
        __end_of___lwtoft 2EA8                    _OSCCON 000FD3                    _SPBRGH 000FB0  
     __size_of_SET_ADCON0 000E            set_D1@temp_map 0012          __end_of__powers_ 1077  
    __end_of_GET_FULL_ADC 2F56                    ___ftge 2B66                    ___wmul 2E5A  
               ??___awdiv 000B                 ??___ftadd 0034                 ??___awmod 0005  
               ??___ftdiv 0040                 ??___ftneg 0004                 ??___lldiv 0009  
               ??___ftmul 001B                 ??___llmod 0016                 ??___ftsub 0040  
               ??___fttol 002F                    _fround 1CAE                    _set_D1 2894  
                  _set_D2 26D0                    _set_D3 2A2C          ___awdiv@quotient 000D  
                  _segmap 1077           ___awmod@divisor 0003           ___awmod@counter 0005  
                  _printf 10B0                    main@tC 0067                    main@tF 006A  
                  main@mv 0071     ___ftmul@f3_as_product 001F                 ??_isdigit 0001  
            __mediumconst 0000                    tblptrh 000FF7                    tblptrl 000FF6  
                  tblptru 000FF8                    putch@c 0001               set_D1@F3293 1081  
        DISP_RightDigit@d 0001                __accesstop 0080   __end_of__initialization 2F94  
              ___ftadd@f1 002E                ___ftadd@f2 0031                 ?_INIT_ADC 0001  
              ___ftge@ff1 0001                ___ftge@ff2 0004             ___rparam_used 000001  
              ___ftdiv@f1 003A                ___ftdiv@f2 003D                ___ftdiv@f3 0044  
              ___ftneg@f1 0001                ___ftmul@f1 0015                ___ftmul@f2 0018  
              ___ftsub@f1 003A                ___ftsub@f2 003D                ___fttol@f1 002B  
          __pcstackCOMRAM 0001           _DISP_RightDigit 2F0A               set_D1@tempF 000F  
              ___lltoft@c 0009             __end_of_scale 1CAE             __end_of_putch 2F78  
              ___lwtoft@c 0009                __div_to_l_ 23E8           __div_to_l_@exp1 000C  
         __div_to_l_@cntr 000B                   ??_scale 0027           __div_to_l_@quot 0007  
                 ??_putch 0001            Delay_One_Sec@j 0001        __size_of_init_UART 001C  
              ??_INIT_ADC 0001             __div_to_l_@f1 0001             __div_to_l_@f2 0004  
                 ?___ftge 0001                   ?___wmul 000F    __size_of_Delay_One_Sec 003C  
                 ?_fround 0024                   ?_set_D1 000F                   ?_set_D2 0001  
                 ?_set_D3 000A                 ?___ftpack 0001              ??_SET_ADCON0 0001  
                 ?_printf 0040                 ?___lltoft 0009                 ?___lwtoft 0009  
   __size_of_GET_FULL_ADC 0018   __end_of_DISP_RightDigit 2F24        __end_of_SET_ADCON0 2F86  
       __end_of__npowers_ 1050                   __Hparam 0000                _scale$1242 0027  
                 __Lparam 0000   __size_of_DISP_LeftDigit 001A           __size_of___ftge 0096  
                 ___awdiv 2AD0                   ___ftadd 2114                   ___awmod 2C88  
                 ___ftdiv 27B2                   ___ftneg 2EA8                   ___lldiv 2BFC  
         __size_of___wmul 0028                   ___ftmul 24F2                   ___llmod 2D0A  
                 ___ftsub 2DDA                   ___fttol 25EA              __psmallconst 1000  
                 __pcinit 2F94                ??___ftpack 0006                _set_D1$611 001A  
         __size_of_fround 0244           __size_of_set_D1 00D2                   __ramtop 1000  
         __size_of_set_D2 00E2           __size_of_set_D3 00A4                ??___lltoft 000D  
                 __ptext0 1EF2                   __ptext1 2A2C                   __ptext2 26D0  
                 __ptext3 2894                   __ptext4 10B0                   __ptext5 18CE  
                 __ptext6 2F6A                   __ptext7 2ECC                   __ptext8 1CAE  
                 __ptext9 2E5A           __size_of_printf 081E         __end_of_init_UART 2F0A  
              ??___lwtoft 000C               ?__div_to_l_ 0001                   _dpowers 1001  
                 _isdigit 2ECC          ___awmod@dividend 0001              _GET_FULL_ADC 2F3E  
                 main@lmv 0074      end_of_initialization 2F94             _Delay_One_Sec 2E1E  
               _INIT_TRIS 2F56             __Lmediumconst 0000                   set_D2@c 0004  
                 set_D2@t 0001           ___lldiv@divisor 0005           ___lldiv@counter 000D  
               _RCSTAbits 000FAB                   printf@c 0066                   printf@f 0040  
                 postdec2 000FDD                   postinc2 000FDE            __tdiv_to_l_@f1 0001  
          __tdiv_to_l_@f2 0004           DISP_LeftDigit@d 0001             ??__tdiv_to_l_ 0007  
               _PORTCbits 000F82                 _TRISCbits 000F94            ?_Delay_One_Sec 0001  
              ?_INIT_TRIS 0001               ___ftdiv@exp 0047                 _TXSTAbits 000FAC  
        ?_DISP_RightDigit 0001                main@lsteps 006F       __size_of__div_to_l_ 010A  
       __size_of_INIT_ADC 000E               ___ftmul@exp 001E            __end_of___ftge 2BFC  
          __end_of___wmul 2E82            __end_of_fround 1EF2            __end_of_set_D1 2966  
          __end_of_set_D2 27B2            __end_of_set_D3 2AD0            __end_of_segmap 1081  
          __end_of_printf 18CE       start_initialization 2F94       __end_of__tdiv_to_l_ 23E8  
         ___llmod@divisor 0012          __CFG_OSC$INTIO67 000000           ___llmod@counter 0016  
          _DISP_LeftDigit 2F24                  ??___ftge 0007                  ??___wmul 0013  
                ??_fround 0027                  ??_set_D1 0011                  ??_set_D2 0003  
                ??_set_D3 000D                  ??_printf 004A                fround@prec 002D  
       __size_of___ftpack 00C6         __size_of___lltoft 0060         __size_of___lwtoft 0026  
         ??_Delay_One_Sec 0001               ??_INIT_TRIS 0001    __end_of_DISP_LeftDigit 2F3E  
                ?___awdiv 0007                  ?___ftadd 002E                  ?___awmod 0001  
                ?___ftdiv 003A                  ?___ftneg 0001                  ?___lldiv 0001  
                ?___ftmul 0015                  ?___llmod 000E                  ?___ftsub 003A  
               __npowers_ 1029                  ?___fttol 002B               __tdiv_to_l_ 22D8  
            ??__div_to_l_ 0007               __smallconst 1000                  ?_isdigit 0001  
               _init_UART 2EEE            __size_of_scale 03E0            __size_of_putch 000E  
          ___wmul@product 0013                  _LATCbits 000F8B                  _LATEbits 000F8D  
                _INIT_ADC 2F86           ?_DISP_LeftDigit 0001                  _PIR1bits 000F9E  
      __end_of__div_to_l_ 24F2              SET_ADCON0@ch 0001                _ADCON0bits 000FC2  
       ___wmul@multiplier 000F                printf@flag 0055                printf@fval 0063  
              printf@prec 0061                 main@tempF 0077                 main@steps 006D  
              ?_init_UART 0001                  __Hrparam 0000                  __Lrparam 0000  
        __size_of___awdiv 0096          __size_of___ftadd 01C4          __size_of___awmod 0082  
        __size_of___ftdiv 00E2          __size_of___ftneg 0024          __size_of___lldiv 008C  
        __size_of___ftmul 00F8          __size_of___llmod 0070          __size_of___ftsub 0044  
        __size_of___fttol 00E6                  ___ftpack 2966               _fround$1240 002A  
             _fround$1241 0027                 set_D1@idx 001C                  ___lltoft 2D7A  
             _isdigit$992 0002                  ___lwtoft 2E82          __size_of_isdigit 0022  
                __ptext10 24F2                  __ptext11 2C88                  __ptext20 2114  
                __ptext12 2AD0                  __ptext21 2EA8                  __ptext13 22D8  
                __ptext30 2F3E                  __ptext22 2B66                  __ptext14 23E8  
                __ptext31 2E1E                  __ptext23 2EEE                  __ptext15 2D7A  
                __ptext32 2F0A                  __ptext24 2E82                  __ptext16 2D0A  
                __ptext33 2F24                  __ptext25 27B2                  __ptext17 2BFC  
                __ptext26 2966                  __ptext18 25EA                  __ptext27 2F78  
                __ptext19 2DDA                  __ptext28 2F56                  __ptext29 2F86  
                __powers_ 1050             __size_of_main 0222  __size_of_DISP_RightDigit 001A  
               printf@exp 0057                 printf@val 005D               ??_init_UART 0001  
                isdigit@c 0003                  scale@scl 002A                  set_D3@mv 000A  
        __tdiv_to_l_@exp1 000F          __tdiv_to_l_@cntr 000E          __tdiv_to_l_@quot 000A  
        ___lldiv@dividend 0001                  printf@ap 0053              ?__tdiv_to_l_ 0001  
              _SET_ADCON0 2F78               _printf$1243 0050          ___lldiv@quotient 0009  
           ?_GET_FULL_ADC 0001     __end_of_Delay_One_Sec 2E5A          ??_DISP_LeftDigit 0001  
