

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Oct 21 17:43:49 2025

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    79                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    80  0000                     
    81                           	psect	idataCOMRAM
    82  00282A                     __pidataCOMRAM:
    83                           	opt stack 0
    84                           
    85                           ;initializer for _wrap
    86  00282A  01                 	db	1
    87                           
    88                           ;initializer for _EW_Count
    89  00282B  30                 	db	48
    90  00282C  30                 	db	48
    91  00282D  00                 	db	0
    92                           
    93                           ;initializer for _Light_Sensor_Mode_Txt
    94  00282E  2D                 	db	45
    95  00282F  44                 	db	68
    96  002830  00                 	db	0
    97                           
    98                           ;initializer for _Act_Mode_Txt
    99  002831  44                 	db	68
   100  002832  00                 	db	0
   101                           
   102                           ;initializer for _FlashingR_Txt
   103  002833  30                 	db	48
   104  002834  00                 	db	0
   105                           
   106                           ;initializer for _FlashingS_Txt
   107  002835  30                 	db	48
   108  002836  00                 	db	0
   109                           
   110                           ;initializer for _SW_EWLT_Txt
   111  002837  30                 	db	48
   112  002838  00                 	db	0
   113                           
   114                           ;initializer for _SW_EWPED_Txt
   115  002839  30                 	db	48
   116  00283A  00                 	db	0
   117                           
   118                           ;initializer for _SW_NSLT_Txt
   119  00283B  30                 	db	48
   120  00283C  00                 	db	0
   121                           
   122                           ;initializer for _SW_NSPED_Txt
   123  00283D  30                 	db	48
   124  00283E  00                 	db	0
   125                           
   126                           	psect	idataBANK0
   127  002716                     __pidataBANK0:
   128                           	opt stack 0
   129                           
   130                           ;initializer for _Timing_Txt
   131  002716  53                 	db	83
   132  002717  50                 	db	80
   133  002718  32                 	db	50
   134  002719  34                 	db	52
   135  00271A  2F                 	db	47
   136  00271B  31                 	db	49
   137  00271C  2F                 	db	47
   138  00271D  30                 	db	48
   139  00271E  31                 	db	49
   140  00271F  20                 	db	32
   141  002720  30                 	db	48
   142  002721  30                 	db	48
   143  002722  30                 	db	48
   144  002723  30                 	db	48
   145  002724  30                 	db	48
   146  002725  30                 	db	48
   147  002726  20                 	db	32
   148  002727  30                 	db	48
   149  002728  30                 	db	48
   150  002729  30                 	db	48
   151  00272A  30                 	db	48
   152  00272B  00                 	db	0
   153                           
   154                           ;initializer for _Light_Sensor_Voltage_Txt
   155  00272C  32                 	db	50
   156  00272D  2E                 	db	46
   157  00272E  35                 	db	53
   158  00272F  56                 	db	86
   159  002730  00                 	db	0
   160                           
   161                           ;initializer for _EWLT_Count
   162  002731  30                 	db	48
   163  002732  30                 	db	48
   164  002733  00                 	db	0
   165                           
   166                           ;initializer for _NSLT_Count
   167  002734  30                 	db	48
   168  002735  30                 	db	48
   169  002736  00                 	db	0
   170                           
   171                           ;initializer for _NS_Count
   172  002737  30                 	db	48
   173  002738  30                 	db	48
   174  002739  00                 	db	0
   175                           
   176                           ;initializer for _PED_EW_Count
   177  00273A  30                 	db	48
   178  00273B  30                 	db	48
   179  00273C  00                 	db	0
   180                           
   181                           ;initializer for _PED_NS_Count
   182  00273D  30                 	db	48
   183  00273E  30                 	db	48
   184  00273F  00                 	db	0
   185                           
   186                           	psect	mediumconst
   187  00FDCE                     __pmediumconst:
   188                           	opt stack 0
   189  00FDCE  00                 	db	0
   190  00FDCF                     _font:
   191                           	opt stack 0
   192  00FDCF  00                 	db	0
   193  00FDD0  00                 	db	0
   194  00FDD1  00                 	db	0
   195  00FDD2  00                 	db	0
   196  00FDD3  00                 	db	0
   197  00FDD4  00                 	db	0
   198  00FDD5  00                 	db	0
   199  00FDD6  5F                 	db	95
   200  00FDD7  00                 	db	0
   201  00FDD8  00                 	db	0
   202  00FDD9  00                 	db	0
   203  00FDDA  07                 	db	7
   204  00FDDB  00                 	db	0
   205  00FDDC  07                 	db	7
   206  00FDDD  00                 	db	0
   207  00FDDE  14                 	db	20
   208  00FDDF  7F                 	db	127
   209  00FDE0  14                 	db	20
   210  00FDE1  7F                 	db	127
   211  00FDE2  14                 	db	20
   212  00FDE3  24                 	db	36
   213  00FDE4  2A                 	db	42
   214  00FDE5  7F                 	db	127
   215  00FDE6  2A                 	db	42
   216  00FDE7  12                 	db	18
   217  00FDE8  23                 	db	35
   218  00FDE9  13                 	db	19
   219  00FDEA  08                 	db	8
   220  00FDEB  64                 	db	100
   221  00FDEC  62                 	db	98
   222  00FDED  36                 	db	54
   223  00FDEE  49                 	db	73
   224  00FDEF  56                 	db	86
   225  00FDF0  20                 	db	32
   226  00FDF1  50                 	db	80
   227  00FDF2  00                 	db	0
   228  00FDF3  08                 	db	8
   229  00FDF4  07                 	db	7
   230  00FDF5  03                 	db	3
   231  00FDF6  00                 	db	0
   232  00FDF7  00                 	db	0
   233  00FDF8  1C                 	db	28
   234  00FDF9  22                 	db	34
   235  00FDFA  41                 	db	65
   236  00FDFB  00                 	db	0
   237  00FDFC  00                 	db	0
   238  00FDFD  41                 	db	65
   239  00FDFE  22                 	db	34
   240  00FDFF  1C                 	db	28
   241  00FE00  00                 	db	0
   242  00FE01  2A                 	db	42
   243  00FE02  1C                 	db	28
   244  00FE03  7F                 	db	127
   245  00FE04  1C                 	db	28
   246  00FE05  2A                 	db	42
   247  00FE06  08                 	db	8
   248  00FE07  08                 	db	8
   249  00FE08  3E                 	db	62
   250  00FE09  08                 	db	8
   251  00FE0A  08                 	db	8
   252  00FE0B  00                 	db	0
   253  00FE0C  80                 	db	128
   254  00FE0D  70                 	db	112
   255  00FE0E  30                 	db	48
   256  00FE0F  00                 	db	0
   257  00FE10  08                 	db	8
   258  00FE11  08                 	db	8
   259  00FE12  08                 	db	8
   260  00FE13  08                 	db	8
   261  00FE14  08                 	db	8
   262  00FE15  00                 	db	0
   263  00FE16  00                 	db	0
   264  00FE17  60                 	db	96
   265  00FE18  60                 	db	96
   266  00FE19  00                 	db	0
   267  00FE1A  20                 	db	32
   268  00FE1B  10                 	db	16
   269  00FE1C  08                 	db	8
   270  00FE1D  04                 	db	4
   271  00FE1E  02                 	db	2
   272  00FE1F  3E                 	db	62
   273  00FE20  51                 	db	81
   274  00FE21  49                 	db	73
   275  00FE22  45                 	db	69
   276  00FE23  3E                 	db	62
   277  00FE24  00                 	db	0
   278  00FE25  42                 	db	66
   279  00FE26  7F                 	db	127
   280  00FE27  40                 	db	64
   281  00FE28  00                 	db	0
   282  00FE29  72                 	db	114
   283  00FE2A  49                 	db	73
   284  00FE2B  49                 	db	73
   285  00FE2C  49                 	db	73
   286  00FE2D  46                 	db	70
   287  00FE2E  21                 	db	33
   288  00FE2F  41                 	db	65
   289  00FE30  49                 	db	73
   290  00FE31  4D                 	db	77
   291  00FE32  33                 	db	51
   292  00FE33  18                 	db	24
   293  00FE34  14                 	db	20
   294  00FE35  12                 	db	18
   295  00FE36  7F                 	db	127
   296  00FE37  10                 	db	16
   297  00FE38  27                 	db	39
   298  00FE39  45                 	db	69
   299  00FE3A  45                 	db	69
   300  00FE3B  45                 	db	69
   301  00FE3C  39                 	db	57
   302  00FE3D  3C                 	db	60
   303  00FE3E  4A                 	db	74
   304  00FE3F  49                 	db	73
   305  00FE40  49                 	db	73
   306  00FE41  31                 	db	49
   307  00FE42  41                 	db	65
   308  00FE43  21                 	db	33
   309  00FE44  11                 	db	17
   310  00FE45  09                 	db	9
   311  00FE46  07                 	db	7
   312  00FE47  36                 	db	54
   313  00FE48  49                 	db	73
   314  00FE49  49                 	db	73
   315  00FE4A  49                 	db	73
   316  00FE4B  36                 	db	54
   317  00FE4C  46                 	db	70
   318  00FE4D  49                 	db	73
   319  00FE4E  49                 	db	73
   320  00FE4F  29                 	db	41
   321  00FE50  1E                 	db	30
   322  00FE51  00                 	db	0
   323  00FE52  00                 	db	0
   324  00FE53  14                 	db	20
   325  00FE54  00                 	db	0
   326  00FE55  00                 	db	0
   327  00FE56  00                 	db	0
   328  00FE57  40                 	db	64
   329  00FE58  34                 	db	52
   330  00FE59  00                 	db	0
   331  00FE5A  00                 	db	0
   332  00FE5B  00                 	db	0
   333  00FE5C  08                 	db	8
   334  00FE5D  14                 	db	20
   335  00FE5E  22                 	db	34
   336  00FE5F  41                 	db	65
   337  00FE60  14                 	db	20
   338  00FE61  14                 	db	20
   339  00FE62  14                 	db	20
   340  00FE63  14                 	db	20
   341  00FE64  14                 	db	20
   342  00FE65  00                 	db	0
   343  00FE66  41                 	db	65
   344  00FE67  22                 	db	34
   345  00FE68  14                 	db	20
   346  00FE69  08                 	db	8
   347  00FE6A  02                 	db	2
   348  00FE6B  01                 	db	1
   349  00FE6C  59                 	db	89
   350  00FE6D  09                 	db	9
   351  00FE6E  06                 	db	6
   352  00FE6F  3E                 	db	62
   353  00FE70  41                 	db	65
   354  00FE71  5D                 	db	93
   355  00FE72  59                 	db	89
   356  00FE73  4E                 	db	78
   357  00FE74  7C                 	db	124
   358  00FE75  12                 	db	18
   359  00FE76  11                 	db	17
   360  00FE77  12                 	db	18
   361  00FE78  7C                 	db	124
   362  00FE79  7F                 	db	127
   363  00FE7A  49                 	db	73
   364  00FE7B  49                 	db	73
   365  00FE7C  49                 	db	73
   366  00FE7D  36                 	db	54
   367  00FE7E  3E                 	db	62
   368  00FE7F  41                 	db	65
   369  00FE80  41                 	db	65
   370  00FE81  41                 	db	65
   371  00FE82  22                 	db	34
   372  00FE83  7F                 	db	127
   373  00FE84  41                 	db	65
   374  00FE85  41                 	db	65
   375  00FE86  41                 	db	65
   376  00FE87  3E                 	db	62
   377  00FE88  7F                 	db	127
   378  00FE89  49                 	db	73
   379  00FE8A  49                 	db	73
   380  00FE8B  49                 	db	73
   381  00FE8C  41                 	db	65
   382  00FE8D  7F                 	db	127
   383  00FE8E  09                 	db	9
   384  00FE8F  09                 	db	9
   385  00FE90  09                 	db	9
   386  00FE91  01                 	db	1
   387  00FE92  3E                 	db	62
   388  00FE93  41                 	db	65
   389  00FE94  41                 	db	65
   390  00FE95  51                 	db	81
   391  00FE96  73                 	db	115
   392  00FE97  7F                 	db	127
   393  00FE98  08                 	db	8
   394  00FE99  08                 	db	8
   395  00FE9A  08                 	db	8
   396  00FE9B  7F                 	db	127
   397  00FE9C  00                 	db	0
   398  00FE9D  41                 	db	65
   399  00FE9E  7F                 	db	127
   400  00FE9F  41                 	db	65
   401  00FEA0  00                 	db	0
   402  00FEA1  20                 	db	32
   403  00FEA2  40                 	db	64
   404  00FEA3  41                 	db	65
   405  00FEA4  3F                 	db	63
   406  00FEA5  01                 	db	1
   407  00FEA6  7F                 	db	127
   408  00FEA7  08                 	db	8
   409  00FEA8  14                 	db	20
   410  00FEA9  22                 	db	34
   411  00FEAA  41                 	db	65
   412  00FEAB  7F                 	db	127
   413  00FEAC  40                 	db	64
   414  00FEAD  40                 	db	64
   415  00FEAE  40                 	db	64
   416  00FEAF  40                 	db	64
   417  00FEB0  7F                 	db	127
   418  00FEB1  02                 	db	2
   419  00FEB2  1C                 	db	28
   420  00FEB3  02                 	db	2
   421  00FEB4  7F                 	db	127
   422  00FEB5  7F                 	db	127
   423  00FEB6  04                 	db	4
   424  00FEB7  08                 	db	8
   425  00FEB8  10                 	db	16
   426  00FEB9  7F                 	db	127
   427  00FEBA  3E                 	db	62
   428  00FEBB  41                 	db	65
   429  00FEBC  41                 	db	65
   430  00FEBD  41                 	db	65
   431  00FEBE  3E                 	db	62
   432  00FEBF  7F                 	db	127
   433  00FEC0  09                 	db	9
   434  00FEC1  09                 	db	9
   435  00FEC2  09                 	db	9
   436  00FEC3  06                 	db	6
   437  00FEC4  3E                 	db	62
   438  00FEC5  41                 	db	65
   439  00FEC6  51                 	db	81
   440  00FEC7  21                 	db	33
   441  00FEC8  5E                 	db	94
   442  00FEC9  7F                 	db	127
   443  00FECA  09                 	db	9
   444  00FECB  19                 	db	25
   445  00FECC  29                 	db	41
   446  00FECD  46                 	db	70
   447  00FECE                     __end_of_font:
   448                           	opt stack 0
   449  00FECE                     _font2:
   450                           	opt stack 0
   451  00FECE  26                 	db	38
   452  00FECF  49                 	db	73
   453  00FED0  49                 	db	73
   454  00FED1  49                 	db	73
   455  00FED2  32                 	db	50
   456  00FED3  03                 	db	3
   457  00FED4  01                 	db	1
   458  00FED5  7F                 	db	127
   459  00FED6  01                 	db	1
   460  00FED7  03                 	db	3
   461  00FED8  3F                 	db	63
   462  00FED9  40                 	db	64
   463  00FEDA  40                 	db	64
   464  00FEDB  40                 	db	64
   465  00FEDC  3F                 	db	63
   466  00FEDD  1F                 	db	31
   467  00FEDE  20                 	db	32
   468  00FEDF  40                 	db	64
   469  00FEE0  20                 	db	32
   470  00FEE1  1F                 	db	31
   471  00FEE2  3F                 	db	63
   472  00FEE3  40                 	db	64
   473  00FEE4  38                 	db	56
   474  00FEE5  40                 	db	64
   475  00FEE6  3F                 	db	63
   476  00FEE7  63                 	db	99
   477  00FEE8  14                 	db	20
   478  00FEE9  08                 	db	8
   479  00FEEA  14                 	db	20
   480  00FEEB  63                 	db	99
   481  00FEEC  03                 	db	3
   482  00FEED  04                 	db	4
   483  00FEEE  78                 	db	120
   484  00FEEF  04                 	db	4
   485  00FEF0  03                 	db	3
   486  00FEF1  61                 	db	97
   487  00FEF2  59                 	db	89
   488  00FEF3  49                 	db	73
   489  00FEF4  4D                 	db	77
   490  00FEF5  43                 	db	67
   491  00FEF6  00                 	db	0
   492  00FEF7  7F                 	db	127
   493  00FEF8  41                 	db	65
   494  00FEF9  41                 	db	65
   495  00FEFA  41                 	db	65
   496  00FEFB  02                 	db	2
   497  00FEFC  04                 	db	4
   498  00FEFD  08                 	db	8
   499  00FEFE  10                 	db	16
   500  00FEFF  20                 	db	32
   501  00FF00  00                 	db	0
   502  00FF01  41                 	db	65
   503  00FF02  41                 	db	65
   504  00FF03  41                 	db	65
   505  00FF04  7F                 	db	127
   506  00FF05  04                 	db	4
   507  00FF06  02                 	db	2
   508  00FF07  01                 	db	1
   509  00FF08  02                 	db	2
   510  00FF09  04                 	db	4
   511  00FF0A  40                 	db	64
   512  00FF0B  40                 	db	64
   513  00FF0C  40                 	db	64
   514  00FF0D  40                 	db	64
   515  00FF0E  40                 	db	64
   516  00FF0F  00                 	db	0
   517  00FF10  03                 	db	3
   518  00FF11  07                 	db	7
   519  00FF12  08                 	db	8
   520  00FF13  00                 	db	0
   521  00FF14  20                 	db	32
   522  00FF15  54                 	db	84
   523  00FF16  54                 	db	84
   524  00FF17  78                 	db	120
   525  00FF18  40                 	db	64
   526  00FF19  7F                 	db	127
   527  00FF1A  28                 	db	40
   528  00FF1B  44                 	db	68
   529  00FF1C  44                 	db	68
   530  00FF1D  38                 	db	56
   531  00FF1E  38                 	db	56
   532  00FF1F  44                 	db	68
   533  00FF20  44                 	db	68
   534  00FF21  44                 	db	68
   535  00FF22  28                 	db	40
   536  00FF23  38                 	db	56
   537  00FF24  44                 	db	68
   538  00FF25  44                 	db	68
   539  00FF26  28                 	db	40
   540  00FF27  7F                 	db	127
   541  00FF28  38                 	db	56
   542  00FF29  54                 	db	84
   543  00FF2A  54                 	db	84
   544  00FF2B  54                 	db	84
   545  00FF2C  18                 	db	24
   546  00FF2D  00                 	db	0
   547  00FF2E  08                 	db	8
   548  00FF2F  7E                 	db	126
   549  00FF30  09                 	db	9
   550  00FF31  02                 	db	2
   551  00FF32  18                 	db	24
   552  00FF33  A4                 	db	164
   553  00FF34  A4                 	db	164
   554  00FF35  9C                 	db	156
   555  00FF36  78                 	db	120
   556  00FF37  7F                 	db	127
   557  00FF38  08                 	db	8
   558  00FF39  04                 	db	4
   559  00FF3A  04                 	db	4
   560  00FF3B  78                 	db	120
   561  00FF3C  00                 	db	0
   562  00FF3D  44                 	db	68
   563  00FF3E  7D                 	db	125
   564  00FF3F  40                 	db	64
   565  00FF40  00                 	db	0
   566  00FF41  20                 	db	32
   567  00FF42  40                 	db	64
   568  00FF43  40                 	db	64
   569  00FF44  3D                 	db	61
   570  00FF45  00                 	db	0
   571  00FF46  7F                 	db	127
   572  00FF47  10                 	db	16
   573  00FF48  28                 	db	40
   574  00FF49  44                 	db	68
   575  00FF4A  00                 	db	0
   576  00FF4B  00                 	db	0
   577  00FF4C  41                 	db	65
   578  00FF4D  7F                 	db	127
   579  00FF4E  40                 	db	64
   580  00FF4F  00                 	db	0
   581  00FF50  7C                 	db	124
   582  00FF51  04                 	db	4
   583  00FF52  78                 	db	120
   584  00FF53  04                 	db	4
   585  00FF54  78                 	db	120
   586  00FF55  7C                 	db	124
   587  00FF56  08                 	db	8
   588  00FF57  04                 	db	4
   589  00FF58  04                 	db	4
   590  00FF59  78                 	db	120
   591  00FF5A  38                 	db	56
   592  00FF5B  44                 	db	68
   593  00FF5C  44                 	db	68
   594  00FF5D  44                 	db	68
   595  00FF5E  38                 	db	56
   596  00FF5F  FC                 	db	252
   597  00FF60  18                 	db	24
   598  00FF61  24                 	db	36
   599  00FF62  24                 	db	36
   600  00FF63  18                 	db	24
   601  00FF64  18                 	db	24
   602  00FF65  24                 	db	36
   603  00FF66  24                 	db	36
   604  00FF67  18                 	db	24
   605  00FF68  FC                 	db	252
   606  00FF69  7C                 	db	124
   607  00FF6A  08                 	db	8
   608  00FF6B  04                 	db	4
   609  00FF6C  04                 	db	4
   610  00FF6D  08                 	db	8
   611  00FF6E  48                 	db	72
   612  00FF6F  54                 	db	84
   613  00FF70  54                 	db	84
   614  00FF71  54                 	db	84
   615  00FF72  24                 	db	36
   616  00FF73  04                 	db	4
   617  00FF74  04                 	db	4
   618  00FF75  3F                 	db	63
   619  00FF76  44                 	db	68
   620  00FF77  24                 	db	36
   621  00FF78  3C                 	db	60
   622  00FF79  40                 	db	64
   623  00FF7A  40                 	db	64
   624  00FF7B  20                 	db	32
   625  00FF7C  7C                 	db	124
   626  00FF7D  1C                 	db	28
   627  00FF7E  20                 	db	32
   628  00FF7F  40                 	db	64
   629  00FF80  20                 	db	32
   630  00FF81  1C                 	db	28
   631  00FF82  3C                 	db	60
   632  00FF83  40                 	db	64
   633  00FF84  30                 	db	48
   634  00FF85  40                 	db	64
   635  00FF86  3C                 	db	60
   636  00FF87  44                 	db	68
   637  00FF88  28                 	db	40
   638  00FF89  10                 	db	16
   639  00FF8A  28                 	db	40
   640  00FF8B  44                 	db	68
   641  00FF8C  4C                 	db	76
   642  00FF8D  90                 	db	144
   643  00FF8E  90                 	db	144
   644  00FF8F  90                 	db	144
   645  00FF90  7C                 	db	124
   646  00FF91  44                 	db	68
   647  00FF92  64                 	db	100
   648  00FF93  54                 	db	84
   649  00FF94  4C                 	db	76
   650  00FF95  44                 	db	68
   651  00FF96  00                 	db	0
   652  00FF97  08                 	db	8
   653  00FF98  36                 	db	54
   654  00FF99  41                 	db	65
   655  00FF9A  00                 	db	0
   656  00FF9B  00                 	db	0
   657  00FF9C  00                 	db	0
   658  00FF9D  77                 	db	119
   659  00FF9E  00                 	db	0
   660  00FF9F  00                 	db	0
   661  00FFA0  00                 	db	0
   662  00FFA1  41                 	db	65
   663  00FFA2  36                 	db	54
   664  00FFA3  08                 	db	8
   665  00FFA4  00                 	db	0
   666  00FFA5  02                 	db	2
   667  00FFA6  01                 	db	1
   668  00FFA7  02                 	db	2
   669  00FFA8  04                 	db	4
   670  00FFA9  02                 	db	2
   671  00FFAA                     __end_of_font2:
   672                           	opt stack 0
   673  0000                     _ADCON0	set	4034
   674  0000                     _ADCON0bits	set	4034
   675  0000                     _ADCON1	set	4033
   676  0000                     _ADCON2	set	4032
   677  0000                     _ADRESH	set	4036
   678  0000                     _ADRESL	set	4035
   679  0000                     _CCP2CON	set	4026
   680  0000                     _CCPR2L	set	4027
   681  0000                     _INTCONbits	set	4082
   682  0000                     _OSCCON	set	4051
   683  0000                     _PIE1bits	set	3997
   684  0000                     _PIR1bits	set	3998
   685  0000                     _PIR2bits	set	4001
   686  0000                     _PORTAbits	set	3968
   687  0000                     _PORTBbits	set	3969
   688  0000                     _PORTCbits	set	3970
   689  0000                     _PORTD	set	3971
   690  0000                     _PORTDbits	set	3971
   691  0000                     _PORTEbits	set	3972
   692  0000                     _PR2	set	4043
   693  0000                     _RCSTA	set	4011
   694  0000                     _RCSTAbits	set	4011
   695  0000                     _SPBRG	set	4015
   696  0000                     _SPBRGH	set	4016
   697  0000                     _SSPBUF	set	4041
   698  0000                     _SSPCON1	set	4038
   699  0000                     _SSPSTAT	set	4039
   700  0000                     _SSPSTATbits	set	4039
   701  0000                     _T0CON	set	4053
   702  0000                     _T0CONbits	set	4053
   703  0000                     _T2CON	set	4042
   704  0000                     _T3CON	set	4017
   705  0000                     _T3CONbits	set	4017
   706  0000                     _TMR0H	set	4055
   707  0000                     _TMR0L	set	4054
   708  0000                     _TMR3H	set	4019
   709  0000                     _TMR3L	set	4018
   710  0000                     _TRISA	set	3986
   711  0000                     _TRISB	set	3987
   712  0000                     _TRISC	set	3988
   713  0000                     _TRISCbits	set	3988
   714  0000                     _TRISD	set	3989
   715  0000                     _TRISE	set	3990
   716  0000                     _TXREG	set	4013
   717  0000                     _TXSTA	set	4012
   718  0000                     _TXSTAbits	set	4012
   719  0000                     _TRMT	set	32097
   720  00FFAA                     STR_5:
   721  00FFAA  4E                 	db	78	;'N'
   722  00FFAB  53                 	db	83	;'S'
   723  00FFAC  50                 	db	80	;'P'
   724  00FFAD  20                 	db	32
   725  00FFAE  4E                 	db	78	;'N'
   726  00FFAF  53                 	db	83	;'S'
   727  00FFB0  4C                 	db	76	;'L'
   728  00FFB1  54                 	db	84	;'T'
   729  00FFB2  20                 	db	32
   730  00FFB3  45                 	db	69	;'E'
   731  00FFB4  57                 	db	87	;'W'
   732  00FFB5  50                 	db	80	;'P'
   733  00FFB6  20                 	db	32
   734  00FFB7  45                 	db	69	;'E'
   735  00FFB8  57                 	db	87	;'W'
   736  00FFB9  4C                 	db	76	;'L'
   737  00FFBA  54                 	db	84	;'T'
   738  00FFBB  20                 	db	32
   739  00FFBC  52                 	db	82	;'R'
   740  00FFBD  20                 	db	32
   741  00FFBE  53                 	db	83	;'S'
   742  00FFBF  00                 	db	0
   743  00FFC0                     STR_6:
   744  00FFC0  4E                 	db	78	;'N'
   745  00FFC1  4F                 	db	79	;'O'
   746  00FFC2  52                 	db	82	;'R'
   747  00FFC3  54                 	db	84	;'T'
   748  00FFC4  48                 	db	72	;'H'
   749  00FFC5  2F                 	db	47
   750  00FFC6  53                 	db	83	;'S'
   751  00FFC7  4F                 	db	79	;'O'
   752  00FFC8  55                 	db	85	;'U'
   753  00FFC9  54                 	db	84	;'T'
   754  00FFCA  48                 	db	72	;'H'
   755  00FFCB  00                 	db	0
   756  00FFCC                     STR_8:
   757  00FFCC  45                 	db	69	;'E'
   758  00FFCD  41                 	db	65	;'A'
   759  00FFCE  53                 	db	83	;'S'
   760  00FFCF  54                 	db	84	;'T'
   761  00FFD0  2F                 	db	47
   762  00FFD1  57                 	db	87	;'W'
   763  00FFD2  45                 	db	69	;'E'
   764  00FFD3  53                 	db	83	;'S'
   765  00FFD4  54                 	db	84	;'T'
   766  00FFD5  00                 	db	0
   767  00FFD6                     STR_7:
   768  00FFD6  4E                 	db	78	;'N'
   769  00FFD7  2F                 	db	47
   770  00FFD8  53                 	db	83	;'S'
   771  00FFD9  20                 	db	32
   772  00FFDA  4C                 	db	76	;'L'
   773  00FFDB  54                 	db	84	;'T'
   774  00FFDC  00                 	db	0
   775  00FFDD                     STR_9:
   776  00FFDD  45                 	db	69	;'E'
   777  00FFDE  2F                 	db	47
   778  00FFDF  57                 	db	87	;'W'
   779  00FFE0  20                 	db	32
   780  00FFE1  4C                 	db	76	;'L'
   781  00FFE2  54                 	db	84	;'T'
   782  00FFE3  00                 	db	0
   783  00FFE4                     STR_1:
   784  00FFE4  4D                 	db	77	;'M'
   785  00FFE5  6F                 	db	111	;'o'
   786  00FFE6  64                 	db	100	;'d'
   787  00FFE7  65                 	db	101	;'e'
   788  00FFE8  3A                 	db	58	;':'
   789  00FFE9  00                 	db	0
   790  00FFEA                     STR_2:
   791  00FFEA  4C                 	db	76	;'L'
   792  00FFEB  53                 	db	83	;'S'
   793  00FFEC  56                 	db	86	;'V'
   794  00FFED  3A                 	db	58	;':'
   795  00FFEE  00                 	db	0
   796  00FFEF                     STR_10:
   797  00FFEF  50                 	db	80	;'P'
   798  00FFF0  4E                 	db	78	;'N'
   799  00FFF1  53                 	db	83	;'S'
   800  00FFF2  00                 	db	0
   801  00FFF3                     STR_11:
   802  00FFF3  50                 	db	80	;'P'
   803  00FFF4  45                 	db	69	;'E'
   804  00FFF5  57                 	db	87	;'W'
   805  00FFF6  00                 	db	0
   806  00FFF7                     STR_3:
   807  00FFF7  2D                 	db	45
   808  00FFF8  44                 	db	68	;'D'
   809  00FFF9  00                 	db	0
   810  00FFFA                     STR_13:
   811  00FFFA  20                 	db	32
   812  00FFFB  00                 	db	0
   813  00FFFC                     STR_4:
   814  00FFFC  2A                 	db	42
   815  00FFFD  00                 	db	0
   816  0000                     
   817                           ; #config settings
   818  00FFFE  00                 	db	0	; dummy byte at the end
   819  0000                     
   820                           	psect	cinit
   821  0021DA                     __pcinit:
   822                           	opt stack 0
   823  0021DA                     start_initialization:
   824                           	opt stack 0
   825  0021DA                     __initialization:
   826                           	opt stack 0
   827                           
   828                           ; Clear objects allocated to BANK0 (33 bytes)
   829  0021DA  EE00  F0AA         	lfsr	0,__pbssBANK0
   830  0021DE  0E21               	movlw	33
   831  0021E0                     clear_0:
   832  0021E0  6AEE               	clrf	postinc0,c
   833  0021E2  06E8               	decf	wreg,f,c
   834  0021E4  E1FD               	bnz	clear_0
   835                           
   836                           ; Clear objects allocated to COMRAM (25 bytes)
   837  0021E6  EE00  F044         	lfsr	0,__pbssCOMRAM
   838  0021EA  0E19               	movlw	25
   839  0021EC                     clear_1:
   840  0021EC  6AEE               	clrf	postinc0,c
   841  0021EE  06E8               	decf	wreg,f,c
   842  0021F0  E1FD               	bnz	clear_1
   843                           
   844                           ; Initialize objects allocated to BANK0 (42 bytes)
   845                           ; load TBLPTR registers with __pidataBANK0
   846  0021F2  0E16               	movlw	low __pidataBANK0
   847  0021F4  6EF6               	movwf	tblptrl,c
   848  0021F6  0E27               	movlw	high __pidataBANK0
   849  0021F8  6EF7               	movwf	tblptrh,c
   850  0021FA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   851  0021FC  6EF8               	movwf	tblptru,c
   852  0021FE  EE00  F080         	lfsr	0,__pdataBANK0
   853  002202  EE10 F02A          	lfsr	1,42
   854  002206                     copy_data0:
   855  002206  0009               	tblrd		*+
   856  002208  CFF5 FFEE          	movff	tablat,postinc0
   857  00220C  50E5               	movf	postdec1,w,c
   858  00220E  50E1               	movf	fsr1l,w,c
   859  002210  E1FA               	bnz	copy_data0
   860                           
   861                           ; Initialize objects allocated to COMRAM (21 bytes)
   862                           ; load TBLPTR registers with __pidataCOMRAM
   863  002212  0E2A               	movlw	low __pidataCOMRAM
   864  002214  6EF6               	movwf	tblptrl,c
   865  002216  0E28               	movlw	high __pidataCOMRAM
   866  002218  6EF7               	movwf	tblptrh,c
   867  00221A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   868  00221C  6EF8               	movwf	tblptru,c
   869  00221E  EE00  F05D         	lfsr	0,__pdataCOMRAM
   870  002222  EE10 F015          	lfsr	1,21
   871  002226                     copy_data1:
   872  002226  0009               	tblrd		*+
   873  002228  CFF5 FFEE          	movff	tablat,postinc0
   874  00222C  50E5               	movf	postdec1,w,c
   875  00222E  50E1               	movf	fsr1l,w,c
   876  002230  E1FA               	bnz	copy_data1
   877  002232                     end_of_initialization:
   878                           	opt stack 0
   879  002232                     __end_of__initialization:
   880                           	opt stack 0
   881  002232  0E00               	movlw	low (__Lmediumconst shr (0+16))
   882  002234  6EF8               	movwf	tblptru,c
   883  002236  0100               	movlb	0
   884  002238  EF68  F00E         	goto	_main	;jump to C main() function
   885                           tblptru	equ	0xFF8
   886                           tblptrh	equ	0xFF7
   887                           tblptrl	equ	0xFF6
   888                           tablat	equ	0xFF5
   889                           postinc0	equ	0xFEE
   890                           wreg	equ	0xFE8
   891                           postdec1	equ	0xFE5
   892                           fsr1l	equ	0xFE1
   893                           
   894                           	psect	bssCOMRAM
   895  000044                     __pbssCOMRAM:
   896                           	opt stack 0
   897  000044                     _volt:
   898                           	opt stack 0
   899  000044                     	ds	3
   900  000047                     _txt:
   901                           	opt stack 0
   902  000047                     	ds	2
   903  000049                     _Count:
   904                           	opt stack 0
   905  000049                     	ds	1
   906  00004A                     _EW_PED_SW:
   907                           	opt stack 0
   908  00004A                     	ds	1
   909  00004B                     _Flashing_Request:
   910                           	opt stack 0
   911  00004B                     	ds	1
   912  00004C                     _Flashing_Status:
   913                           	opt stack 0
   914  00004C                     	ds	1
   915  00004D                     _INT0_Flag:
   916                           	opt stack 0
   917  00004D                     	ds	1
   918  00004E                     _INT1_Flag:
   919                           	opt stack 0
   920  00004E                     	ds	1
   921  00004F                     _INT2_Flag:
   922                           	opt stack 0
   923  00004F                     	ds	1
   924  000050                     _Light_Sensor:
   925                           	opt stack 0
   926  000050                     	ds	1
   927  000051                     _MODE:
   928                           	opt stack 0
   929  000051                     	ds	1
   930  000052                     _NS_PED_SW:
   931                           	opt stack 0
   932  000052                     	ds	1
   933  000053                     _PED_Count:
   934                           	opt stack 0
   935  000053                     	ds	1
   936  000054                     _SW_EWLT:
   937                           	opt stack 0
   938  000054                     	ds	1
   939  000055                     _SW_EWPED:
   940                           	opt stack 0
   941  000055                     	ds	1
   942  000056                     _SW_NSLT:
   943                           	opt stack 0
   944  000056                     	ds	1
   945  000057                     _SW_NSPED:
   946                           	opt stack 0
   947  000057                     	ds	1
   948  000058                     __tft_type:
   949                           	opt stack 0
   950  000058                     	ds	1
   951  000059                     _colstart:
   952                           	opt stack 0
   953  000059                     	ds	1
   954  00005A                     _dir:
   955                           	opt stack 0
   956  00005A                     	ds	1
   957  00005B                     _direction:
   958                           	opt stack 0
   959  00005B                     	ds	1
   960  00005C                     _rowstart:
   961                           	opt stack 0
   962  00005C                     	ds	1
   963                           tblptru	equ	0xFF8
   964                           tblptrh	equ	0xFF7
   965                           tblptrl	equ	0xFF6
   966                           tablat	equ	0xFF5
   967                           postinc0	equ	0xFEE
   968                           wreg	equ	0xFE8
   969                           postdec1	equ	0xFE5
   970                           fsr1l	equ	0xFE1
   971                           
   972                           	psect	dataCOMRAM
   973  00005D                     __pdataCOMRAM:
   974                           	opt stack 0
   975  00005D                     _wrap:
   976                           	opt stack 0
   977  00005D                     	ds	1
   978  00005E                     _EW_Count:
   979                           	opt stack 0
   980  00005E                     	ds	3
   981  000061                     _Light_Sensor_Mode_Txt:
   982                           	opt stack 0
   983  000061                     	ds	3
   984  000064                     _Act_Mode_Txt:
   985                           	opt stack 0
   986  000064                     	ds	2
   987  000066                     _FlashingR_Txt:
   988                           	opt stack 0
   989  000066                     	ds	2
   990  000068                     _FlashingS_Txt:
   991                           	opt stack 0
   992  000068                     	ds	2
   993  00006A                     _SW_EWLT_Txt:
   994                           	opt stack 0
   995  00006A                     	ds	2
   996  00006C                     _SW_EWPED_Txt:
   997                           	opt stack 0
   998  00006C                     	ds	2
   999  00006E                     _SW_NSLT_Txt:
  1000                           	opt stack 0
  1001  00006E                     	ds	2
  1002  000070                     _SW_NSPED_Txt:
  1003                           	opt stack 0
  1004  000070                     	ds	2
  1005                           tblptru	equ	0xFF8
  1006                           tblptrh	equ	0xFF7
  1007                           tblptrl	equ	0xFF6
  1008                           tablat	equ	0xFF5
  1009                           postinc0	equ	0xFEE
  1010                           wreg	equ	0xFE8
  1011                           postdec1	equ	0xFE5
  1012                           fsr1l	equ	0xFE1
  1013                           
  1014                           	psect	bssBANK0
  1015  0000AA                     __pbssBANK0:
  1016                           	opt stack 0
  1017  0000AA                     _nbr:
  1018                           	opt stack 0
  1019  0000AA                     	ds	2
  1020  0000AC                     _buffer:
  1021                           	opt stack 0
  1022  0000AC                     	ds	31
  1023                           tblptru	equ	0xFF8
  1024                           tblptrh	equ	0xFF7
  1025                           tblptrl	equ	0xFF6
  1026                           tablat	equ	0xFF5
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           postdec1	equ	0xFE5
  1030                           fsr1l	equ	0xFE1
  1031                           
  1032                           	psect	dataBANK0
  1033  000080                     __pdataBANK0:
  1034                           	opt stack 0
  1035  000080                     _Timing_Txt:
  1036                           	opt stack 0
  1037  000080                     	ds	22
  1038  000096                     _Light_Sensor_Voltage_Txt:
  1039                           	opt stack 0
  1040  000096                     	ds	5
  1041  00009B                     _EWLT_Count:
  1042                           	opt stack 0
  1043  00009B                     	ds	3
  1044  00009E                     _NSLT_Count:
  1045                           	opt stack 0
  1046  00009E                     	ds	3
  1047  0000A1                     _NS_Count:
  1048                           	opt stack 0
  1049  0000A1                     	ds	3
  1050  0000A4                     _PED_EW_Count:
  1051                           	opt stack 0
  1052  0000A4                     	ds	3
  1053  0000A7                     _PED_NS_Count:
  1054                           	opt stack 0
  1055  0000A7                     	ds	3
  1056                           tblptru	equ	0xFF8
  1057                           tblptrh	equ	0xFF7
  1058                           tblptrl	equ	0xFF6
  1059                           tablat	equ	0xFF5
  1060                           postinc0	equ	0xFEE
  1061                           wreg	equ	0xFE8
  1062                           postdec1	equ	0xFE5
  1063                           fsr1l	equ	0xFE1
  1064                           
  1065                           	psect	cstackBANK0
  1066  0000CB                     __pcstackBANK0:
  1067                           	opt stack 0
  1068  0000CB                     Set_NS@color:
  1069                           	opt stack 0
  1070  0000CB                     Set_NS_LT@color:
  1071                           	opt stack 0
  1072  0000CB                     Set_EW@color:
  1073                           	opt stack 0
  1074  0000CB                     Set_EW_LT@color:
  1075                           	opt stack 0
  1076  0000CB                     drawtext@x:
  1077                           	opt stack 0
  1078                           
  1079                           ; 1 bytes @ 0x0
  1080  0000CB                     	ds	1
  1081  0000CC                     drawtext@textsize:
  1082                           	opt stack 0
  1083                           
  1084                           ; 2 bytes @ 0x1
  1085  0000CC                     	ds	2
  1086  0000CE                     drawtext@i:
  1087                           	opt stack 0
  1088                           
  1089                           ; 2 bytes @ 0x3
  1090  0000CE                     	ds	2
  1091  0000D0                     drawtext@cursor_y:
  1092                           	opt stack 0
  1093                           
  1094                           ; 1 bytes @ 0x5
  1095  0000D0                     	ds	1
  1096  0000D1                     drawtext@cursor_x:
  1097                           	opt stack 0
  1098                           
  1099                           ; 1 bytes @ 0x6
  1100  0000D1                     	ds	1
  1101  0000D2                     update_LCD_misc@nStep:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x7
  1105  0000D2                     	ds	2
  1106  0000D4                     update_LCD_misc@volt:
  1107                           	opt stack 0
  1108                           
  1109                           ; 3 bytes @ 0x9
  1110  0000D4                     	ds	3
  1111  0000D7                     PED_Control@direction:
  1112                           	opt stack 0
  1113  0000D7                     Wait_N_Seconds@seconds:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0xC
  1117  0000D7                     	ds	1
  1118  0000D8                     Wait_N_Seconds@I:
  1119                           	opt stack 0
  1120  0000D8                     PED_Control@i:
  1121                           	opt stack 0
  1122                           
  1123                           ; 2 bytes @ 0xD
  1124  0000D8                     	ds	2
  1125                           tblptru	equ	0xFF8
  1126                           tblptrh	equ	0xFF7
  1127                           tblptrl	equ	0xFF6
  1128                           tablat	equ	0xFF5
  1129                           postinc0	equ	0xFEE
  1130                           wreg	equ	0xFE8
  1131                           postdec1	equ	0xFE5
  1132                           fsr1l	equ	0xFE1
  1133                           
  1134                           	psect	cstackCOMRAM
  1135  000001                     __pcstackCOMRAM:
  1136                           	opt stack 0
  1137  000001                     ??_chkisr:
  1138                           
  1139                           ; 0 bytes @ 0x0
  1140  000001                     	ds	14
  1141  00000F                     ?_strlen:
  1142                           	opt stack 0
  1143  00000F                     ?_get_full_ADC:
  1144                           	opt stack 0
  1145  00000F                     ?___wmul:
  1146                           	opt stack 0
  1147  00000F                     ?___awdiv:
  1148                           	opt stack 0
  1149  00000F                     ?___ftpack:
  1150                           	opt stack 0
  1151  00000F                     spiwrite@x:
  1152                           	opt stack 0
  1153  00000F                     OpenUSART@spbrg:
  1154                           	opt stack 0
  1155  00000F                     ___wmul@multiplier:
  1156                           	opt stack 0
  1157  00000F                     ___awdiv@dividend:
  1158                           	opt stack 0
  1159  00000F                     strcpy@to:
  1160                           	opt stack 0
  1161  00000F                     strlen@s:
  1162                           	opt stack 0
  1163  00000F                     ___ftpack@arg:
  1164                           	opt stack 0
  1165  00000F                     ___ftge@ff1:
  1166                           	opt stack 0
  1167                           
  1168                           ; 3 bytes @ 0xE
  1169  00000F                     	ds	1
  1170  000010                     spiwrite@spidata:
  1171                           	opt stack 0
  1172                           
  1173                           ; 1 bytes @ 0xF
  1174  000010                     	ds	1
  1175  000011                     ??_strlen:
  1176  000011                     ??_get_full_ADC:
  1177  000011                     write_command@cmd_:
  1178                           	opt stack 0
  1179  000011                     write_data@data_:
  1180                           	opt stack 0
  1181  000011                     OpenUSART@config:
  1182                           	opt stack 0
  1183  000011                     ___wmul@multiplicand:
  1184                           	opt stack 0
  1185  000011                     ___awdiv@divisor:
  1186                           	opt stack 0
  1187  000011                     strcpy@from:
  1188                           	opt stack 0
  1189                           
  1190                           ; 2 bytes @ 0x10
  1191  000011                     	ds	1
  1192  000012                     setAddrWindow@y0:
  1193                           	opt stack 0
  1194  000012                     ___ftpack@exp:
  1195                           	opt stack 0
  1196  000012                     ___ftge@ff2:
  1197                           	opt stack 0
  1198                           
  1199                           ; 3 bytes @ 0x11
  1200  000012                     	ds	1
  1201  000013                     setAddrWindow@x1:
  1202                           	opt stack 0
  1203  000013                     ___awdiv@counter:
  1204                           	opt stack 0
  1205  000013                     ___ftpack@sign:
  1206                           	opt stack 0
  1207  000013                     get_full_ADC@result:
  1208                           	opt stack 0
  1209  000013                     ___wmul@product:
  1210                           	opt stack 0
  1211  000013                     strcpy@cp:
  1212                           	opt stack 0
  1213  000013                     strlen@cp:
  1214                           	opt stack 0
  1215                           
  1216                           ; 2 bytes @ 0x12
  1217  000013                     	ds	1
  1218  000014                     ??___ftpack:
  1219  000014                     setAddrWindow@y1:
  1220                           	opt stack 0
  1221  000014                     ___awdiv@sign:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0x13
  1225  000014                     	ds	1
  1226  000015                     ??___ftge:
  1227  000015                     setAddrWindow@x0:
  1228                           	opt stack 0
  1229  000015                     delay_ms@ms:
  1230                           	opt stack 0
  1231  000015                     ___awdiv@quotient:
  1232                           	opt stack 0
  1233                           
  1234                           ; 2 bytes @ 0x14
  1235  000015                     	ds	1
  1236  000016                     drawPixel@y:
  1237                           	opt stack 0
  1238  000016                     drawFastVLine@y:
  1239                           	opt stack 0
  1240  000016                     fillRectangle@y:
  1241                           	opt stack 0
  1242  000016                     drawFastHLine@y:
  1243                           	opt stack 0
  1244                           
  1245                           ; 1 bytes @ 0x15
  1246  000016                     	ds	1
  1247  000017                     ??_delay_ms:
  1248  000017                     ?___ftmul:
  1249                           	opt stack 0
  1250  000017                     ?___awtoft:
  1251                           	opt stack 0
  1252  000017                     drawFastVLine@h:
  1253                           	opt stack 0
  1254  000017                     fillRectangle@w:
  1255                           	opt stack 0
  1256  000017                     drawFastHLine@w:
  1257                           	opt stack 0
  1258  000017                     drawPixel@color:
  1259                           	opt stack 0
  1260  000017                     ___awtoft@c:
  1261                           	opt stack 0
  1262  000017                     ___ftmul@f1:
  1263                           	opt stack 0
  1264                           
  1265                           ; 3 bytes @ 0x16
  1266  000017                     	ds	1
  1267  000018                     fillRectangle@h:
  1268                           	opt stack 0
  1269  000018                     drawFastVLine@color:
  1270                           	opt stack 0
  1271  000018                     drawFastHLine@color:
  1272                           	opt stack 0
  1273                           
  1274                           ; 2 bytes @ 0x17
  1275  000018                     	ds	1
  1276  000019                     drawPixel@x:
  1277                           	opt stack 0
  1278  000019                     delay_ms@count:
  1279                           	opt stack 0
  1280  000019                     fillRectangle@color:
  1281                           	opt stack 0
  1282                           
  1283                           ; 2 bytes @ 0x18
  1284  000019                     	ds	1
  1285  00001A                     ??_drawFastVLine:
  1286  00001A                     ??_drawFastHLine:
  1287  00001A                     ___awtoft@sign:
  1288                           	opt stack 0
  1289  00001A                     drawCircle@x0:
  1290                           	opt stack 0
  1291  00001A                     ___ftmul@f2:
  1292                           	opt stack 0
  1293                           
  1294                           ; 3 bytes @ 0x19
  1295  00001A                     	ds	1
  1296  00001B                     ??_fillRectangle:
  1297  00001B                     ?___ftdiv:
  1298                           	opt stack 0
  1299  00001B                     ___ftdiv@f1:
  1300                           	opt stack 0
  1301                           
  1302                           ; 3 bytes @ 0x1A
  1303  00001B                     	ds	1
  1304  00001C                     drawCircle@y0:
  1305                           	opt stack 0
  1306                           
  1307                           ; 2 bytes @ 0x1B
  1308  00001C                     	ds	1
  1309  00001D                     ??___ftmul:
  1310                           
  1311                           ; 0 bytes @ 0x1C
  1312  00001D                     	ds	1
  1313  00001E                     drawFastVLine@hi:
  1314                           	opt stack 0
  1315  00001E                     drawFastHLine@hi:
  1316                           	opt stack 0
  1317  00001E                     drawCircle@r:
  1318                           	opt stack 0
  1319  00001E                     ___ftdiv@f2:
  1320                           	opt stack 0
  1321                           
  1322                           ; 3 bytes @ 0x1D
  1323  00001E                     	ds	1
  1324  00001F                     drawFastVLine@lo:
  1325                           	opt stack 0
  1326  00001F                     fillRectangle@hi:
  1327                           	opt stack 0
  1328  00001F                     drawFastHLine@lo:
  1329                           	opt stack 0
  1330                           
  1331                           ; 1 bytes @ 0x1E
  1332  00001F                     	ds	1
  1333  000020                     drawFastVLine@x:
  1334                           	opt stack 0
  1335  000020                     fillRectangle@lo:
  1336                           	opt stack 0
  1337  000020                     drawFastHLine@x:
  1338                           	opt stack 0
  1339  000020                     ___ftmul@exp:
  1340                           	opt stack 0
  1341  000020                     drawCircle@color:
  1342                           	opt stack 0
  1343                           
  1344                           ; 2 bytes @ 0x1F
  1345  000020                     	ds	1
  1346  000021                     ??___ftdiv:
  1347  000021                     fillRect@y:
  1348                           	opt stack 0
  1349  000021                     fillRectangle@x:
  1350                           	opt stack 0
  1351  000021                     fillCircleHelper@x0:
  1352                           	opt stack 0
  1353  000021                     drawRect@x:
  1354                           	opt stack 0
  1355  000021                     ___ftmul@f3_as_product:
  1356                           	opt stack 0
  1357                           
  1358                           ; 3 bytes @ 0x20
  1359  000021                     	ds	1
  1360  000022                     ??_drawCircle:
  1361  000022                     fillRect@w:
  1362                           	opt stack 0
  1363  000022                     fillScreen@color:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x21
  1367  000022                     	ds	1
  1368  000023                     fillRect@h:
  1369                           	opt stack 0
  1370  000023                     fillCircleHelper@y0:
  1371                           	opt stack 0
  1372  000023                     drawRect@y:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x22
  1376  000023                     	ds	1
  1377  000024                     ___ftdiv@cntr:
  1378                           	opt stack 0
  1379  000024                     ___ftmul@cntr:
  1380                           	opt stack 0
  1381  000024                     fillRect@color:
  1382                           	opt stack 0
  1383  000024                     drawCircle@ddF_x:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x23
  1387  000024                     	ds	1
  1388  000025                     ___ftmul@sign:
  1389                           	opt stack 0
  1390  000025                     fillCircleHelper@r:
  1391                           	opt stack 0
  1392  000025                     drawRect@w:
  1393                           	opt stack 0
  1394  000025                     ___ftdiv@f3:
  1395                           	opt stack 0
  1396                           
  1397                           ; 3 bytes @ 0x24
  1398  000025                     	ds	1
  1399  000026                     ??_fillRect:
  1400  000026                     ?___fttol:
  1401                           	opt stack 0
  1402  000026                     drawCircle@ddF_y:
  1403                           	opt stack 0
  1404  000026                     ___fttol@f1:
  1405                           	opt stack 0
  1406                           
  1407                           ; 3 bytes @ 0x25
  1408  000026                     	ds	1
  1409  000027                     fillCircleHelper@cornername:
  1410                           	opt stack 0
  1411  000027                     drawRect@h:
  1412                           	opt stack 0
  1413                           
  1414                           ; 2 bytes @ 0x26
  1415  000027                     	ds	1
  1416  000028                     ___ftdiv@exp:
  1417                           	opt stack 0
  1418  000028                     drawCircle@f:
  1419                           	opt stack 0
  1420                           
  1421                           ; 2 bytes @ 0x27
  1422  000028                     	ds	1
  1423  000029                     fillRect@x:
  1424                           	opt stack 0
  1425  000029                     ___ftdiv@sign:
  1426                           	opt stack 0
  1427  000029                     fillCircleHelper@delta:
  1428                           	opt stack 0
  1429  000029                     drawRect@color:
  1430                           	opt stack 0
  1431                           
  1432                           ; 2 bytes @ 0x28
  1433  000029                     	ds	1
  1434  00002A                     ??___fttol:
  1435  00002A                     ?_Read_Volt:
  1436                           	opt stack 0
  1437  00002A                     fillRect@i:
  1438                           	opt stack 0
  1439  00002A                     drawCircle@x:
  1440                           	opt stack 0
  1441                           
  1442                           ; 2 bytes @ 0x29
  1443  00002A                     	ds	1
  1444  00002B                     ??_drawRect:
  1445  00002B                     fillCircleHelper@color:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x2A
  1449  00002B                     	ds	1
  1450  00002C                     drawChar@y:
  1451                           	opt stack 0
  1452  00002C                     drawCircle@y:
  1453                           	opt stack 0
  1454                           
  1455                           ; 2 bytes @ 0x2B
  1456  00002C                     	ds	1
  1457  00002D                     ??_fillCircleHelper:
  1458  00002D                     drawChar@c:
  1459                           	opt stack 0
  1460  00002D                     Read_Volt@volt:
  1461                           	opt stack 0
  1462                           
  1463                           ; 3 bytes @ 0x2C
  1464  00002D                     	ds	1
  1465  00002E                     drawChar@color:
  1466                           	opt stack 0
  1467                           
  1468                           ; 2 bytes @ 0x2D
  1469  00002E                     	ds	1
  1470  00002F                     ___fttol@sign1:
  1471                           	opt stack 0
  1472  00002F                     fillCircleHelper@ddF_x:
  1473                           	opt stack 0
  1474                           
  1475                           ; 2 bytes @ 0x2E
  1476  00002F                     	ds	1
  1477  000030                     Read_Volt@ADC_Channel:
  1478                           	opt stack 0
  1479  000030                     drawChar@bg:
  1480                           	opt stack 0
  1481  000030                     ___fttol@lval:
  1482                           	opt stack 0
  1483                           
  1484                           ; 4 bytes @ 0x2F
  1485  000030                     	ds	1
  1486  000031                     fillCircleHelper@ddF_y:
  1487                           	opt stack 0
  1488  000031                     Read_Volt@nStep:
  1489                           	opt stack 0
  1490                           
  1491                           ; 2 bytes @ 0x30
  1492  000031                     	ds	1
  1493  000032                     drawChar@size:
  1494                           	opt stack 0
  1495                           
  1496                           ; 1 bytes @ 0x31
  1497  000032                     	ds	1
  1498  000033                     drawChar@line:
  1499                           	opt stack 0
  1500  000033                     fillCircleHelper@f:
  1501                           	opt stack 0
  1502                           
  1503                           ; 2 bytes @ 0x32
  1504  000033                     	ds	1
  1505  000034                     drawChar@x:
  1506                           	opt stack 0
  1507  000034                     ___fttol@exp1:
  1508                           	opt stack 0
  1509                           
  1510                           ; 1 bytes @ 0x33
  1511  000034                     	ds	1
  1512  000035                     ?___awmod:
  1513                           	opt stack 0
  1514  000035                     drawChar@j:
  1515                           	opt stack 0
  1516  000035                     fillCircleHelper@x:
  1517                           	opt stack 0
  1518  000035                     ___awmod@dividend:
  1519                           	opt stack 0
  1520                           
  1521                           ; 2 bytes @ 0x34
  1522  000035                     	ds	1
  1523  000036                     drawChar@i:
  1524                           	opt stack 0
  1525                           
  1526                           ; 1 bytes @ 0x35
  1527  000036                     	ds	1
  1528  000037                     drawtext@y:
  1529                           	opt stack 0
  1530  000037                     fillCircleHelper@y:
  1531                           	opt stack 0
  1532  000037                     ___awmod@divisor:
  1533                           	opt stack 0
  1534                           
  1535                           ; 2 bytes @ 0x36
  1536  000037                     	ds	1
  1537  000038                     drawtext@_text:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x37
  1541  000038                     	ds	1
  1542  000039                     ___awmod@counter:
  1543                           	opt stack 0
  1544  000039                     fillCircle@x0:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x38
  1548  000039                     	ds	1
  1549  00003A                     ___awmod@sign:
  1550                           	opt stack 0
  1551  00003A                     drawtext@color:
  1552                           	opt stack 0
  1553                           
  1554                           ; 2 bytes @ 0x39
  1555  00003A                     	ds	1
  1556  00003B                     fillCircle@y0:
  1557                           	opt stack 0
  1558                           
  1559                           ; 2 bytes @ 0x3A
  1560  00003B                     	ds	1
  1561  00003C                     drawtext@bg:
  1562                           	opt stack 0
  1563                           
  1564                           ; 2 bytes @ 0x3B
  1565  00003C                     	ds	1
  1566  00003D                     fillCircle@r:
  1567                           	opt stack 0
  1568                           
  1569                           ; 2 bytes @ 0x3C
  1570  00003D                     	ds	1
  1571  00003E                     drawtext@size:
  1572                           	opt stack 0
  1573                           
  1574                           ; 1 bytes @ 0x3D
  1575  00003E                     	ds	1
  1576  00003F                     ??_drawtext:
  1577  00003F                     fillCircle@color:
  1578                           	opt stack 0
  1579                           
  1580                           ; 2 bytes @ 0x3E
  1581  00003F                     	ds	2
  1582  000041                     update_LCD_color@color:
  1583                           	opt stack 0
  1584  000041                     update_LCD_PED_Count@count:
  1585                           	opt stack 0
  1586  000041                     update_LCD_count@count:
  1587                           	opt stack 0
  1588                           
  1589                           ; 1 bytes @ 0x40
  1590  000041                     	ds	1
  1591  000042                     update_LCD_color@direction:
  1592                           	opt stack 0
  1593  000042                     update_LCD_PED_Count@direction:
  1594                           	opt stack 0
  1595  000042                     update_LCD_count@direction:
  1596                           	opt stack 0
  1597                           
  1598                           ; 1 bytes @ 0x41
  1599  000042                     	ds	1
  1600  000043                     PED_Control@Num_Sec:
  1601                           	opt stack 0
  1602  000043                     update_LCD_color@Circle_Y:
  1603                           	opt stack 0
  1604                           
  1605                           ; 1 bytes @ 0x42
  1606  000043                     	ds	1
  1607  000044                     tblptru	equ	0xFF8
  1608                           tblptrh	equ	0xFF7
  1609                           tblptrl	equ	0xFF6
  1610                           tablat	equ	0xFF5
  1611                           postinc0	equ	0xFEE
  1612                           wreg	equ	0xFE8
  1613                           postdec1	equ	0xFE5
  1614                           fsr1l	equ	0xFE1
  1615                           
  1616                           ; 0 bytes @ 0x43
  1617 ;;
  1618 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1619 ;;
  1620 ;; *************** function _main *****************
  1621 ;; Defined at:
  1622 ;;		line 54 in file "Lab7_S1_sample.c"
  1623 ;; Parameters:    Size  Location     Type
  1624 ;;		None
  1625 ;; Auto vars:     Size  Location     Type
  1626 ;;		None
  1627 ;; Return value:  Size  Location     Type
  1628 ;;		None               void
  1629 ;; Registers used:
  1630 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1631 ;; Tracked objects:
  1632 ;;		On entry : 0/0
  1633 ;;		On exit  : 0/0
  1634 ;;		Unchanged: 0/0
  1635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1636 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1639 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1640 ;;Total ram usage:        0 bytes
  1641 ;; Hardware stack levels required when called:   13
  1642 ;; This function calls:
  1643 ;;		_Day_Mode
  1644 ;;		_Do_Flashing
  1645 ;;		_Init_ADC
  1646 ;;		_Init_UART
  1647 ;;		_Initialize_LCD_Screen
  1648 ;;		_Night_Mode
  1649 ;;		_Read_Volt
  1650 ;;		___ftge
  1651 ;; This function is called by:
  1652 ;;		Startup code after reset
  1653 ;; This function uses a non-reentrant model
  1654 ;;
  1655                           
  1656                           	psect	text0
  1657  001CD0                     __ptext0:
  1658                           	opt stack 0
  1659  001CD0                     _main:
  1660                           	opt stack 18
  1661                           
  1662                           ;Lab7_S1_sample.c: 55: OSCCON = 0x70;
  1663                           
  1664                           ;incstack = 0
  1665  001CD0  0E70               	movlw	112
  1666  001CD2  6ED3               	movwf	4051,c	;volatile
  1667                           
  1668                           ;Lab7_S1_sample.c: 56: TRISA = 0b00111001;
  1669  001CD4  0E39               	movlw	57
  1670  001CD6  6E92               	movwf	3986,c	;volatile
  1671                           
  1672                           ;Lab7_S1_sample.c: 57: TRISB = 0x07;
  1673  001CD8  0E07               	movlw	7
  1674  001CDA  6E93               	movwf	3987,c	;volatile
  1675                           
  1676                           ;Lab7_S1_sample.c: 58: TRISC = 0x01;
  1677  001CDC  0E01               	movlw	1
  1678  001CDE  6E94               	movwf	3988,c	;volatile
  1679                           
  1680                           ;Lab7_S1_sample.c: 59: TRISD = 0x00;
  1681  001CE0  0E00               	movlw	0
  1682  001CE2  6E95               	movwf	3989,c	;volatile
  1683                           
  1684                           ;Lab7_S1_sample.c: 60: TRISE = 0x00;
  1685  001CE4  0E00               	movlw	0
  1686  001CE6  6E96               	movwf	3990,c	;volatile
  1687                           
  1688                           ;Lab7_S1_sample.c: 61: Init_ADC();
  1689  001CE8  EC56  F014         	call	_Init_ADC	;wreg free
  1690                           
  1691                           ;Lab7_S1_sample.c: 62: Init_UART();
  1692  001CEC  EC20  F014         	call	_Init_UART	;wreg free
  1693                           
  1694                           ;Lab7_S1_sample.c: 64: PORTD = 0x00;
  1695  001CF0  0E00               	movlw	0
  1696  001CF2  6E83               	movwf	3971,c	;volatile
  1697                           
  1698                           ;Lab7_S1_sample.c: 66: Initialize_LCD_Screen();
  1699  001CF4  EC0E  F000         	call	_Initialize_LCD_Screen	;wreg free
  1700                           
  1701                           ;Lab7_S1_sample.c: 68: volt = Read_Volt(0);
  1702  001CF8  0E00               	movlw	0
  1703  001CFA  EC83  F010         	call	_Read_Volt
  1704  001CFE  C02A  F044         	movff	?_Read_Volt,_volt
  1705  001D02  C02B  F045         	movff	?_Read_Volt+1,_volt+1
  1706  001D06  C02C  F046         	movff	?_Read_Volt+2,_volt+2
  1707                           
  1708                           ;Lab7_S1_sample.c: 70: Light_Sensor = volt < 2.5 ? 1 : 0;
  1709  001D0A  C044  F00F         	movff	_volt,___ftge@ff1
  1710  001D0E  C045  F010         	movff	_volt+1,___ftge@ff1+1
  1711  001D12  C046  F011         	movff	_volt+2,___ftge@ff1+2
  1712  001D16  0E00               	movlw	0
  1713  001D18  6E12               	movwf	___ftge@ff2,c
  1714  001D1A  0E20               	movlw	32
  1715  001D1C  6E13               	movwf	___ftge@ff2+1,c
  1716  001D1E  0E40               	movlw	64
  1717  001D20  6E14               	movwf	___ftge@ff2+2,c
  1718  001D22  ECFE  F00E         	call	___ftge	;wreg free
  1719  001D26  B0D8               	btfsc	status,0,c
  1720  001D28  D002               	goto	u4150
  1721  001D2A  0E01               	movlw	1
  1722  001D2C  D001               	goto	u4160
  1723  001D2E                     u4150:
  1724  001D2E  0E00               	movlw	0
  1725  001D30                     u4160:
  1726  001D30  6E50               	movwf	_Light_Sensor,c
  1727  001D32  D000               	goto	l5683
  1728  001D34                     l5683:
  1729                           
  1730                           ;Lab7_S1_sample.c: 73: {
  1731                           ;Lab7_S1_sample.c: 75: if (Light_Sensor == 1) {
  1732  001D34  0450               	decf	_Light_Sensor,w,c
  1733  001D36  A4D8               	btfss	status,2,c
  1734  001D38  D005               	goto	l5689
  1735                           
  1736                           ;Lab7_S1_sample.c: 76: MODE = 1;
  1737  001D3A  0E01               	movlw	1
  1738  001D3C  6E51               	movwf	_MODE,c
  1739                           
  1740                           ;Lab7_S1_sample.c: 77: Day_Mode();
  1741  001D3E  ECB8  F00D         	call	_Day_Mode	;wreg free
  1742                           
  1743                           ;Lab7_S1_sample.c: 78: } else {
  1744  001D42  D005               	goto	l5693
  1745  001D44                     l5689:
  1746                           
  1747                           ;Lab7_S1_sample.c: 79: MODE = 0;
  1748  001D44  0E00               	movlw	0
  1749  001D46  6E51               	movwf	_MODE,c
  1750                           
  1751                           ;Lab7_S1_sample.c: 80: Night_Mode();
  1752  001D48  EC18  F00E         	call	_Night_Mode	;wreg free
  1753  001D4C  D000               	goto	l5693
  1754  001D4E                     l5693:
  1755                           
  1756                           ;Lab7_S1_sample.c: 81: }
  1757                           ;Lab7_S1_sample.c: 83: if (Flashing_Request == 1) {
  1758  001D4E  044B               	decf	_Flashing_Request,w,c
  1759  001D50  A4D8               	btfss	status,2,c
  1760  001D52  D7F0               	goto	l5683
  1761                           
  1762                           ;Lab7_S1_sample.c: 84: Flashing_Request = 0;
  1763  001D54  0E00               	movlw	0
  1764  001D56  6E4B               	movwf	_Flashing_Request,c
  1765                           
  1766                           ;Lab7_S1_sample.c: 85: Flashing_Status = 1;
  1767  001D58  0E01               	movlw	1
  1768  001D5A  6E4C               	movwf	_Flashing_Status,c
  1769                           
  1770                           ;Lab7_S1_sample.c: 86: Do_Flashing();
  1771  001D5C  EC1E  F011         	call	_Do_Flashing	;wreg free
  1772  001D60  D7E9               	goto	l5683
  1773  001D62  EF0C  F000         	goto	start
  1774  001D66                     __end_of_main:
  1775                           	opt stack 0
  1776                           tblptru	equ	0xFF8
  1777                           tblptrh	equ	0xFF7
  1778                           tblptrl	equ	0xFF6
  1779                           tablat	equ	0xFF5
  1780                           postinc0	equ	0xFEE
  1781                           wreg	equ	0xFE8
  1782                           postdec1	equ	0xFE5
  1783                           fsr1l	equ	0xFE1
  1784                           status	equ	0xFD8
  1785                           
  1786 ;; *************** function _Night_Mode *****************
  1787 ;; Defined at:
  1788 ;;		line 239 in file "Lab7_S1_sample.c"
  1789 ;; Parameters:    Size  Location     Type
  1790 ;;		None
  1791 ;; Auto vars:     Size  Location     Type
  1792 ;;		None
  1793 ;; Return value:  Size  Location     Type
  1794 ;;		None               void
  1795 ;; Registers used:
  1796 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1797 ;; Tracked objects:
  1798 ;;		On entry : 0/0
  1799 ;;		On exit  : 0/0
  1800 ;;		Unchanged: 0/0
  1801 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1802 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1803 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1804 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1805 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1806 ;;Total ram usage:        0 bytes
  1807 ;; Hardware stack levels used:    1
  1808 ;; Hardware stack levels required when called:   12
  1809 ;; This function calls:
  1810 ;;		_Set_EW
  1811 ;;		_Set_EW_LT
  1812 ;;		_Set_NS
  1813 ;;		_Set_NS_LT
  1814 ;;		_Wait_N_Seconds
  1815 ;; This function is called by:
  1816 ;;		_main
  1817 ;; This function uses a non-reentrant model
  1818 ;;
  1819                           
  1820                           	psect	text1
  1821  001C30                     __ptext1:
  1822                           	opt stack 0
  1823  001C30                     _Night_Mode:
  1824                           	opt stack 18
  1825                           
  1826                           ;Lab7_S1_sample.c: 241: NS_PED_SW = 0;
  1827                           
  1828                           ;incstack = 0
  1829  001C30  0E00               	movlw	0
  1830  001C32  6E52               	movwf	_NS_PED_SW,c
  1831                           
  1832                           ;Lab7_S1_sample.c: 242: EW_PED_SW = 0;
  1833  001C34  0E00               	movlw	0
  1834  001C36  6E4A               	movwf	_EW_PED_SW,c
  1835                           
  1836                           ;Lab7_S1_sample.c: 244: Set_EW(1);
  1837  001C38  0E01               	movlw	1
  1838  001C3A  EC85  F012         	call	_Set_EW
  1839                           
  1840                           ;Lab7_S1_sample.c: 245: Set_EW_LT(1);
  1841  001C3E  0E01               	movlw	1
  1842  001C40  EC61  F012         	call	_Set_EW_LT
  1843                           
  1844                           ;Lab7_S1_sample.c: 246: Set_NS_LT(1);
  1845  001C44  0E01               	movlw	1
  1846  001C46  EC19  F012         	call	_Set_NS_LT
  1847                           
  1848                           ;Lab7_S1_sample.c: 247: Set_NS(2);
  1849  001C4A  0E02               	movlw	2
  1850  001C4C  EC3D  F012         	call	_Set_NS
  1851                           
  1852                           ;Lab7_S1_sample.c: 250: Wait_N_Seconds(6);
  1853  001C50  0E06               	movlw	6
  1854  001C52  EC3F  F013         	call	_Wait_N_Seconds
  1855                           
  1856                           ;Lab7_S1_sample.c: 253: Set_NS(3);
  1857  001C56  0E03               	movlw	3
  1858  001C58  EC3D  F012         	call	_Set_NS
  1859                           
  1860                           ;Lab7_S1_sample.c: 254: Wait_N_Seconds(3);
  1861  001C5C  0E03               	movlw	3
  1862  001C5E  EC3F  F013         	call	_Wait_N_Seconds
  1863                           
  1864                           ;Lab7_S1_sample.c: 257: Set_NS(1);
  1865  001C62  0E01               	movlw	1
  1866  001C64  EC3D  F012         	call	_Set_NS
  1867                           
  1868                           ;Lab7_S1_sample.c: 260: if (PORTCbits.RC0 == 1) {
  1869  001C68  A082               	btfss	3970,0,c	;volatile
  1870  001C6A  D010               	goto	l5629
  1871                           
  1872                           ;Lab7_S1_sample.c: 263: Set_EW_LT(2);
  1873  001C6C  0E02               	movlw	2
  1874  001C6E  EC61  F012         	call	_Set_EW_LT
  1875                           
  1876                           ;Lab7_S1_sample.c: 264: Wait_N_Seconds(7);
  1877  001C72  0E07               	movlw	7
  1878  001C74  EC3F  F013         	call	_Wait_N_Seconds
  1879                           
  1880                           ;Lab7_S1_sample.c: 267: Set_EW_LT(3);
  1881  001C78  0E03               	movlw	3
  1882  001C7A  EC61  F012         	call	_Set_EW_LT
  1883                           
  1884                           ;Lab7_S1_sample.c: 268: Wait_N_Seconds(3);
  1885  001C7E  0E03               	movlw	3
  1886  001C80  EC3F  F013         	call	_Wait_N_Seconds
  1887                           
  1888                           ;Lab7_S1_sample.c: 271: Set_EW_LT(1);
  1889  001C84  0E01               	movlw	1
  1890  001C86  EC61  F012         	call	_Set_EW_LT
  1891  001C8A  D000               	goto	l5629
  1892  001C8C                     l5629:
  1893                           
  1894                           ;Lab7_S1_sample.c: 274: }
  1895                           ;Lab7_S1_sample.c: 277: Set_EW(2);
  1896  001C8C  0E02               	movlw	2
  1897  001C8E  EC85  F012         	call	_Set_EW
  1898                           
  1899                           ;Lab7_S1_sample.c: 278: Wait_N_Seconds(6);
  1900  001C92  0E06               	movlw	6
  1901  001C94  EC3F  F013         	call	_Wait_N_Seconds
  1902                           
  1903                           ;Lab7_S1_sample.c: 281: Set_EW(3);
  1904  001C98  0E03               	movlw	3
  1905  001C9A  EC85  F012         	call	_Set_EW
  1906                           
  1907                           ;Lab7_S1_sample.c: 282: Wait_N_Seconds(3);
  1908  001C9E  0E03               	movlw	3
  1909  001CA0  EC3F  F013         	call	_Wait_N_Seconds
  1910                           
  1911                           ;Lab7_S1_sample.c: 285: Set_EW(1);
  1912  001CA4  0E01               	movlw	1
  1913  001CA6  EC85  F012         	call	_Set_EW
  1914                           
  1915                           ;Lab7_S1_sample.c: 288: if (PORTAbits.RA5 == 1) {
  1916  001CAA  AA80               	btfss	3968,5,c	;volatile
  1917  001CAC  D010               	goto	l152
  1918                           
  1919                           ;Lab7_S1_sample.c: 291: Set_NS_LT(2);
  1920  001CAE  0E02               	movlw	2
  1921  001CB0  EC19  F012         	call	_Set_NS_LT
  1922                           
  1923                           ;Lab7_S1_sample.c: 292: Wait_N_Seconds(8);
  1924  001CB4  0E08               	movlw	8
  1925  001CB6  EC3F  F013         	call	_Wait_N_Seconds
  1926                           
  1927                           ;Lab7_S1_sample.c: 295: Set_NS_LT(3);
  1928  001CBA  0E03               	movlw	3
  1929  001CBC  EC19  F012         	call	_Set_NS_LT
  1930                           
  1931                           ;Lab7_S1_sample.c: 296: Wait_N_Seconds(3);
  1932  001CC0  0E03               	movlw	3
  1933  001CC2  EC3F  F013         	call	_Wait_N_Seconds
  1934                           
  1935                           ;Lab7_S1_sample.c: 299: Set_EW_LT(1);
  1936  001CC6  0E01               	movlw	1
  1937  001CC8  EC61  F012         	call	_Set_EW_LT
  1938  001CCC  D000               	goto	l152
  1939  001CCE                     l152:
  1940  001CCE  0012               	return		;funcret
  1941  001CD0                     __end_of_Night_Mode:
  1942                           	opt stack 0
  1943                           tblptru	equ	0xFF8
  1944                           tblptrh	equ	0xFF7
  1945                           tblptrl	equ	0xFF6
  1946                           tablat	equ	0xFF5
  1947                           postinc0	equ	0xFEE
  1948                           wreg	equ	0xFE8
  1949                           postdec1	equ	0xFE5
  1950                           fsr1l	equ	0xFE1
  1951                           status	equ	0xFD8
  1952                           
  1953 ;; *************** function _Initialize_LCD_Screen *****************
  1954 ;; Defined at:
  1955 ;;		line 53 in file "Main_Screen.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;		None
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;		None
  1960 ;; Return value:  Size  Location     Type
  1961 ;;		None               void
  1962 ;; Registers used:
  1963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1964 ;; Tracked objects:
  1965 ;;		On entry : 0/0
  1966 ;;		On exit  : 0/0
  1967 ;;		Unchanged: 0/0
  1968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1973 ;;Total ram usage:        0 bytes
  1974 ;; Hardware stack levels used:    1
  1975 ;; Hardware stack levels required when called:    9
  1976 ;; This function calls:
  1977 ;;		_LCD_Reset
  1978 ;;		_TFT_GreenTab_Initialize
  1979 ;;		_drawCircle
  1980 ;;		_drawRect
  1981 ;;		_drawtext
  1982 ;;		_fillCircle
  1983 ;;		_fillScreen
  1984 ;;		_strcpy
  1985 ;; This function is called by:
  1986 ;;		_main
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           	psect	text2
  1991  00001C                     __ptext2:
  1992                           	opt stack 0
  1993  00001C                     _Initialize_LCD_Screen:
  1994                           	opt stack 21
  1995                           
  1996                           ;Main_Screen.c: 55: LCD_Reset();
  1997                           
  1998                           ;incstack = 0
  1999  00001C  EC34  F014         	call	_LCD_Reset	;wreg free
  2000                           
  2001                           ;Main_Screen.c: 56: TFT_GreenTab_Initialize();
  2002  000020  ECA0  F013         	call	_TFT_GreenTab_Initialize	;wreg free
  2003                           
  2004                           ;Main_Screen.c: 58: fillScreen(0x0000);
  2005  000024  0E00               	movlw	0
  2006  000026  6E23               	movwf	fillScreen@color+1,c
  2007  000028  0E00               	movlw	0
  2008  00002A  6E22               	movwf	fillScreen@color,c
  2009  00002C  ECED  F013         	call	_fillScreen	;wreg free
  2010                           
  2011                           ;Main_Screen.c: 60: txt = buffer;
  2012  000030  0EAC               	movlw	low _buffer
  2013  000032  6E47               	movwf	_txt,c
  2014  000034  0E00               	movlw	high _buffer
  2015  000036  6E48               	movwf	_txt+1,c
  2016                           
  2017                           ;Main_Screen.c: 62: strcpy(txt, "Mode:");
  2018  000038  C047  F00F         	movff	_txt,strcpy@to
  2019  00003C  C048  F010         	movff	_txt+1,strcpy@to+1
  2020  000040  0EE4               	movlw	low STR_1
  2021  000042  6E11               	movwf	strcpy@from,c
  2022  000044  0EFF               	movlw	high STR_1
  2023  000046  6E12               	movwf	strcpy@from+1,c
  2024  000048  EC5A  F013         	call	_strcpy	;wreg free
  2025                           
  2026                           ;Main_Screen.c: 63: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2027  00004C  0E02               	movlw	2
  2028  00004E  6E37               	movwf	drawtext@y,c
  2029  000050  C047  F038         	movff	_txt,drawtext@_text
  2030  000054  C048  F039         	movff	_txt+1,drawtext@_text+1
  2031  000058  0EFF               	movlw	255
  2032  00005A  6E3B               	movwf	drawtext@color+1,c
  2033  00005C  683A               	setf	drawtext@color,c
  2034  00005E  0E00               	movlw	0
  2035  000060  6E3D               	movwf	drawtext@bg+1,c
  2036  000062  0E00               	movlw	0
  2037  000064  6E3C               	movwf	drawtext@bg,c
  2038  000066  0E01               	movlw	1
  2039  000068  6E3E               	movwf	drawtext@size,c
  2040  00006A  0E02               	movlw	2
  2041  00006C  EC23  F00A         	call	_drawtext
  2042                           
  2043                           ;Main_Screen.c: 64: drawtext(35,2, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2044  000070  0E02               	movlw	2
  2045  000072  6E37               	movwf	drawtext@y,c
  2046  000074  0E64               	movlw	low _Act_Mode_Txt
  2047  000076  6E38               	movwf	drawtext@_text,c
  2048  000078  0E00               	movlw	high _Act_Mode_Txt
  2049  00007A  6E39               	movwf	drawtext@_text+1,c
  2050  00007C  0EFF               	movlw	255
  2051  00007E  6E3B               	movwf	drawtext@color+1,c
  2052  000080  683A               	setf	drawtext@color,c
  2053  000082  0E00               	movlw	0
  2054  000084  6E3D               	movwf	drawtext@bg+1,c
  2055  000086  0E00               	movlw	0
  2056  000088  6E3C               	movwf	drawtext@bg,c
  2057  00008A  0E01               	movlw	1
  2058  00008C  6E3E               	movwf	drawtext@size,c
  2059  00008E  0E23               	movlw	35
  2060  000090  EC23  F00A         	call	_drawtext
  2061                           
  2062                           ;Main_Screen.c: 65: strcpy(txt, "LSV:");
  2063  000094  C047  F00F         	movff	_txt,strcpy@to
  2064  000098  C048  F010         	movff	_txt+1,strcpy@to+1
  2065  00009C  0EEA               	movlw	low STR_2
  2066  00009E  6E11               	movwf	strcpy@from,c
  2067  0000A0  0EFF               	movlw	high STR_2
  2068  0000A2  6E12               	movwf	strcpy@from+1,c
  2069  0000A4  EC5A  F013         	call	_strcpy	;wreg free
  2070                           
  2071                           ;Main_Screen.c: 66: drawtext(50, 2, txt, 0xFFFF, 0x0000, 1);
  2072  0000A8  0E02               	movlw	2
  2073  0000AA  6E37               	movwf	drawtext@y,c
  2074  0000AC  C047  F038         	movff	_txt,drawtext@_text
  2075  0000B0  C048  F039         	movff	_txt+1,drawtext@_text+1
  2076  0000B4  0EFF               	movlw	255
  2077  0000B6  6E3B               	movwf	drawtext@color+1,c
  2078  0000B8  683A               	setf	drawtext@color,c
  2079  0000BA  0E00               	movlw	0
  2080  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2081  0000BE  0E00               	movlw	0
  2082  0000C0  6E3C               	movwf	drawtext@bg,c
  2083  0000C2  0E01               	movlw	1
  2084  0000C4  6E3E               	movwf	drawtext@size,c
  2085  0000C6  0E32               	movlw	50
  2086  0000C8  EC23  F00A         	call	_drawtext
  2087                           
  2088                           ;Main_Screen.c: 67: drawtext(75,2, Light_Sensor_Voltage_Txt, 0xFFFF, 0x0000, 1);
  2089  0000CC  0E02               	movlw	2
  2090  0000CE  6E37               	movwf	drawtext@y,c
  2091  0000D0  0E96               	movlw	low _Light_Sensor_Voltage_Txt
  2092  0000D2  6E38               	movwf	drawtext@_text,c
  2093  0000D4  0E00               	movlw	high _Light_Sensor_Voltage_Txt
  2094  0000D6  6E39               	movwf	drawtext@_text+1,c
  2095  0000D8  0EFF               	movlw	255
  2096  0000DA  6E3B               	movwf	drawtext@color+1,c
  2097  0000DC  683A               	setf	drawtext@color,c
  2098  0000DE  0E00               	movlw	0
  2099  0000E0  6E3D               	movwf	drawtext@bg+1,c
  2100  0000E2  0E00               	movlw	0
  2101  0000E4  6E3C               	movwf	drawtext@bg,c
  2102  0000E6  0E01               	movlw	1
  2103  0000E8  6E3E               	movwf	drawtext@size,c
  2104  0000EA  0E4B               	movlw	75
  2105  0000EC  EC23  F00A         	call	_drawtext
  2106                           
  2107                           ;Main_Screen.c: 68: strcpy(txt, "-D");
  2108  0000F0  C047  F00F         	movff	_txt,strcpy@to
  2109  0000F4  C048  F010         	movff	_txt+1,strcpy@to+1
  2110  0000F8  0EF7               	movlw	low STR_3
  2111  0000FA  6E11               	movwf	strcpy@from,c
  2112  0000FC  0EFF               	movlw	high STR_3
  2113  0000FE  6E12               	movwf	strcpy@from+1,c
  2114  000100  EC5A  F013         	call	_strcpy	;wreg free
  2115                           
  2116                           ;Main_Screen.c: 69: drawtext(100,2, Light_Sensor_Mode_Txt, 0xFFFF, 0x0000, 1);
  2117  000104  0E02               	movlw	2
  2118  000106  6E37               	movwf	drawtext@y,c
  2119  000108  0E61               	movlw	low _Light_Sensor_Mode_Txt
  2120  00010A  6E38               	movwf	drawtext@_text,c
  2121  00010C  0E00               	movlw	high _Light_Sensor_Mode_Txt
  2122  00010E  6E39               	movwf	drawtext@_text+1,c
  2123  000110  0EFF               	movlw	255
  2124  000112  6E3B               	movwf	drawtext@color+1,c
  2125  000114  683A               	setf	drawtext@color,c
  2126  000116  0E00               	movlw	0
  2127  000118  6E3D               	movwf	drawtext@bg+1,c
  2128  00011A  0E00               	movlw	0
  2129  00011C  6E3C               	movwf	drawtext@bg,c
  2130  00011E  0E01               	movlw	1
  2131  000120  6E3E               	movwf	drawtext@size,c
  2132  000122  0E64               	movlw	100
  2133  000124  EC23  F00A         	call	_drawtext
  2134                           
  2135                           ;Main_Screen.c: 72: strcpy(txt, "*");
  2136  000128  C047  F00F         	movff	_txt,strcpy@to
  2137  00012C  C048  F010         	movff	_txt+1,strcpy@to+1
  2138  000130  0EFC               	movlw	low STR_4
  2139  000132  6E11               	movwf	strcpy@from,c
  2140  000134  0EFF               	movlw	high STR_4
  2141  000136  6E12               	movwf	strcpy@from+1,c
  2142  000138  EC5A  F013         	call	_strcpy	;wreg free
  2143                           
  2144                           ;Main_Screen.c: 73: drawtext(120, 2, txt, 0xFFFF, 0x0000, 1);
  2145  00013C  0E02               	movlw	2
  2146  00013E  6E37               	movwf	drawtext@y,c
  2147  000140  C047  F038         	movff	_txt,drawtext@_text
  2148  000144  C048  F039         	movff	_txt+1,drawtext@_text+1
  2149  000148  0EFF               	movlw	255
  2150  00014A  6E3B               	movwf	drawtext@color+1,c
  2151  00014C  683A               	setf	drawtext@color,c
  2152  00014E  0E00               	movlw	0
  2153  000150  6E3D               	movwf	drawtext@bg+1,c
  2154  000152  0E00               	movlw	0
  2155  000154  6E3C               	movwf	drawtext@bg,c
  2156  000156  0E01               	movlw	1
  2157  000158  6E3E               	movwf	drawtext@size,c
  2158  00015A  0E78               	movlw	120
  2159  00015C  EC23  F00A         	call	_drawtext
  2160                           
  2161                           ;Main_Screen.c: 76: strcpy(txt, "NSP NSLT EWP EWLT R S");
  2162  000160  C047  F00F         	movff	_txt,strcpy@to
  2163  000164  C048  F010         	movff	_txt+1,strcpy@to+1
  2164  000168  0EAA               	movlw	low STR_5
  2165  00016A  6E11               	movwf	strcpy@from,c
  2166  00016C  0EFF               	movlw	high STR_5
  2167  00016E  6E12               	movwf	strcpy@from+1,c
  2168  000170  EC5A  F013         	call	_strcpy	;wreg free
  2169                           
  2170                           ;Main_Screen.c: 77: drawtext(1, 11, txt, 0xFFFF, 0x0000, 1);
  2171  000174  0E0B               	movlw	11
  2172  000176  6E37               	movwf	drawtext@y,c
  2173  000178  C047  F038         	movff	_txt,drawtext@_text
  2174  00017C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2175  000180  0EFF               	movlw	255
  2176  000182  6E3B               	movwf	drawtext@color+1,c
  2177  000184  683A               	setf	drawtext@color,c
  2178  000186  0E00               	movlw	0
  2179  000188  6E3D               	movwf	drawtext@bg+1,c
  2180  00018A  0E00               	movlw	0
  2181  00018C  6E3C               	movwf	drawtext@bg,c
  2182  00018E  0E01               	movlw	1
  2183  000190  6E3E               	movwf	drawtext@size,c
  2184  000192  0E01               	movlw	1
  2185  000194  EC23  F00A         	call	_drawtext
  2186                           
  2187                           ;Main_Screen.c: 78: drawtext(8, 11+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2188  000198  0E14               	movlw	20
  2189  00019A  6E37               	movwf	drawtext@y,c
  2190  00019C  0E70               	movlw	low _SW_NSPED_Txt
  2191  00019E  6E38               	movwf	drawtext@_text,c
  2192  0001A0  0E00               	movlw	high _SW_NSPED_Txt
  2193  0001A2  6E39               	movwf	drawtext@_text+1,c
  2194  0001A4  0EFF               	movlw	255
  2195  0001A6  6E3B               	movwf	drawtext@color+1,c
  2196  0001A8  683A               	setf	drawtext@color,c
  2197  0001AA  0E00               	movlw	0
  2198  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2199  0001AE  0E00               	movlw	0
  2200  0001B0  6E3C               	movwf	drawtext@bg,c
  2201  0001B2  0E01               	movlw	1
  2202  0001B4  6E3E               	movwf	drawtext@size,c
  2203  0001B6  0E08               	movlw	8
  2204  0001B8  EC23  F00A         	call	_drawtext
  2205                           
  2206                           ;Main_Screen.c: 79: drawtext(35, 11+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2207  0001BC  0E14               	movlw	20
  2208  0001BE  6E37               	movwf	drawtext@y,c
  2209  0001C0  0E6E               	movlw	low _SW_NSLT_Txt
  2210  0001C2  6E38               	movwf	drawtext@_text,c
  2211  0001C4  0E00               	movlw	high _SW_NSLT_Txt
  2212  0001C6  6E39               	movwf	drawtext@_text+1,c
  2213  0001C8  0EFF               	movlw	255
  2214  0001CA  6E3B               	movwf	drawtext@color+1,c
  2215  0001CC  683A               	setf	drawtext@color,c
  2216  0001CE  0E00               	movlw	0
  2217  0001D0  6E3D               	movwf	drawtext@bg+1,c
  2218  0001D2  0E00               	movlw	0
  2219  0001D4  6E3C               	movwf	drawtext@bg,c
  2220  0001D6  0E01               	movlw	1
  2221  0001D8  6E3E               	movwf	drawtext@size,c
  2222  0001DA  0E23               	movlw	35
  2223  0001DC  EC23  F00A         	call	_drawtext
  2224                           
  2225                           ;Main_Screen.c: 80: drawtext(60, 11+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2226  0001E0  0E14               	movlw	20
  2227  0001E2  6E37               	movwf	drawtext@y,c
  2228  0001E4  0E6C               	movlw	low _SW_EWPED_Txt
  2229  0001E6  6E38               	movwf	drawtext@_text,c
  2230  0001E8  0E00               	movlw	high _SW_EWPED_Txt
  2231  0001EA  6E39               	movwf	drawtext@_text+1,c
  2232  0001EC  0EFF               	movlw	255
  2233  0001EE  6E3B               	movwf	drawtext@color+1,c
  2234  0001F0  683A               	setf	drawtext@color,c
  2235  0001F2  0E00               	movlw	0
  2236  0001F4  6E3D               	movwf	drawtext@bg+1,c
  2237  0001F6  0E00               	movlw	0
  2238  0001F8  6E3C               	movwf	drawtext@bg,c
  2239  0001FA  0E01               	movlw	1
  2240  0001FC  6E3E               	movwf	drawtext@size,c
  2241  0001FE  0E3C               	movlw	60
  2242  000200  EC23  F00A         	call	_drawtext
  2243                           
  2244                           ;Main_Screen.c: 81: drawtext(85, 11+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2245  000204  0E14               	movlw	20
  2246  000206  6E37               	movwf	drawtext@y,c
  2247  000208  0E6A               	movlw	low _SW_EWLT_Txt
  2248  00020A  6E38               	movwf	drawtext@_text,c
  2249  00020C  0E00               	movlw	high _SW_EWLT_Txt
  2250  00020E  6E39               	movwf	drawtext@_text+1,c
  2251  000210  0EFF               	movlw	255
  2252  000212  6E3B               	movwf	drawtext@color+1,c
  2253  000214  683A               	setf	drawtext@color,c
  2254  000216  0E00               	movlw	0
  2255  000218  6E3D               	movwf	drawtext@bg+1,c
  2256  00021A  0E00               	movlw	0
  2257  00021C  6E3C               	movwf	drawtext@bg,c
  2258  00021E  0E01               	movlw	1
  2259  000220  6E3E               	movwf	drawtext@size,c
  2260  000222  0E55               	movlw	85
  2261  000224  EC23  F00A         	call	_drawtext
  2262                           
  2263                           ;Main_Screen.c: 82: drawtext(108, 11+9, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2264  000228  0E14               	movlw	20
  2265  00022A  6E37               	movwf	drawtext@y,c
  2266  00022C  0E66               	movlw	low _FlashingR_Txt
  2267  00022E  6E38               	movwf	drawtext@_text,c
  2268  000230  0E00               	movlw	high _FlashingR_Txt
  2269  000232  6E39               	movwf	drawtext@_text+1,c
  2270  000234  0EFF               	movlw	255
  2271  000236  6E3B               	movwf	drawtext@color+1,c
  2272  000238  683A               	setf	drawtext@color,c
  2273  00023A  0E00               	movlw	0
  2274  00023C  6E3D               	movwf	drawtext@bg+1,c
  2275  00023E  0E00               	movlw	0
  2276  000240  6E3C               	movwf	drawtext@bg,c
  2277  000242  0E01               	movlw	1
  2278  000244  6E3E               	movwf	drawtext@size,c
  2279  000246  0E6C               	movlw	108
  2280  000248  EC23  F00A         	call	_drawtext
  2281                           
  2282                           ;Main_Screen.c: 83: drawtext(119, 11+9, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2283  00024C  0E14               	movlw	20
  2284  00024E  6E37               	movwf	drawtext@y,c
  2285  000250  0E68               	movlw	low _FlashingS_Txt
  2286  000252  6E38               	movwf	drawtext@_text,c
  2287  000254  0E00               	movlw	high _FlashingS_Txt
  2288  000256  6E39               	movwf	drawtext@_text+1,c
  2289  000258  0EFF               	movlw	255
  2290  00025A  6E3B               	movwf	drawtext@color+1,c
  2291  00025C  683A               	setf	drawtext@color,c
  2292  00025E  0E00               	movlw	0
  2293  000260  6E3D               	movwf	drawtext@bg+1,c
  2294  000262  0E00               	movlw	0
  2295  000264  6E3C               	movwf	drawtext@bg,c
  2296  000266  0E01               	movlw	1
  2297  000268  6E3E               	movwf	drawtext@size,c
  2298  00026A  0E77               	movlw	119
  2299  00026C  EC23  F00A         	call	_drawtext
  2300                           
  2301                           ;Main_Screen.c: 87: strcpy(txt, "NORTH/SOUTH");
  2302  000270  C047  F00F         	movff	_txt,strcpy@to
  2303  000274  C048  F010         	movff	_txt+1,strcpy@to+1
  2304  000278  0EC0               	movlw	low STR_6
  2305  00027A  6E11               	movwf	strcpy@from,c
  2306  00027C  0EFF               	movlw	high STR_6
  2307  00027E  6E12               	movwf	strcpy@from+1,c
  2308  000280  EC5A  F013         	call	_strcpy	;wreg free
  2309                           
  2310                           ;Main_Screen.c: 88: drawtext (30, 30 , txt, 0xFFE0, 0x0000, 1);
  2311  000284  0E1E               	movlw	30
  2312  000286  6E37               	movwf	drawtext@y,c
  2313  000288  C047  F038         	movff	_txt,drawtext@_text
  2314  00028C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2315  000290  0EFF               	movlw	255
  2316  000292  6E3B               	movwf	drawtext@color+1,c
  2317  000294  0EE0               	movlw	224
  2318  000296  6E3A               	movwf	drawtext@color,c
  2319  000298  0E00               	movlw	0
  2320  00029A  6E3D               	movwf	drawtext@bg+1,c
  2321  00029C  0E00               	movlw	0
  2322  00029E  6E3C               	movwf	drawtext@bg,c
  2323  0002A0  0E01               	movlw	1
  2324  0002A2  6E3E               	movwf	drawtext@size,c
  2325  0002A4  0E1E               	movlw	30
  2326  0002A6  EC23  F00A         	call	_drawtext
  2327                           
  2328                           ;Main_Screen.c: 89: drawRect (30, 30 + 16-8, 60, 18, 0xFFE0);
  2329  0002AA  0E00               	movlw	0
  2330  0002AC  6E22               	movwf	drawRect@x+1,c
  2331  0002AE  0E1E               	movlw	30
  2332  0002B0  6E21               	movwf	drawRect@x,c
  2333  0002B2  0E00               	movlw	0
  2334  0002B4  6E24               	movwf	drawRect@y+1,c
  2335  0002B6  0E26               	movlw	38
  2336  0002B8  6E23               	movwf	drawRect@y,c
  2337  0002BA  0E00               	movlw	0
  2338  0002BC  6E26               	movwf	drawRect@w+1,c
  2339  0002BE  0E3C               	movlw	60
  2340  0002C0  6E25               	movwf	drawRect@w,c
  2341  0002C2  0E00               	movlw	0
  2342  0002C4  6E28               	movwf	drawRect@h+1,c
  2343  0002C6  0E12               	movlw	18
  2344  0002C8  6E27               	movwf	drawRect@h,c
  2345  0002CA  0EFF               	movlw	255
  2346  0002CC  6E2A               	movwf	drawRect@color+1,c
  2347  0002CE  0EE0               	movlw	224
  2348  0002D0  6E29               	movwf	drawRect@color,c
  2349  0002D2  ECBA  F010         	call	_drawRect	;wreg free
  2350                           
  2351                           ;Main_Screen.c: 90: drawCircle(40, 30 + 16 , 7, 0xF800);
  2352  0002D6  0E00               	movlw	0
  2353  0002D8  6E1B               	movwf	drawCircle@x0+1,c
  2354  0002DA  0E28               	movlw	40
  2355  0002DC  6E1A               	movwf	drawCircle@x0,c
  2356  0002DE  0E00               	movlw	0
  2357  0002E0  6E1D               	movwf	drawCircle@y0+1,c
  2358  0002E2  0E2E               	movlw	46
  2359  0002E4  6E1C               	movwf	drawCircle@y0,c
  2360  0002E6  0E00               	movlw	0
  2361  0002E8  6E1F               	movwf	drawCircle@r+1,c
  2362  0002EA  0E07               	movlw	7
  2363  0002EC  6E1E               	movwf	drawCircle@r,c
  2364  0002EE  0EF8               	movlw	248
  2365  0002F0  6E21               	movwf	drawCircle@color+1,c
  2366  0002F2  0E00               	movlw	0
  2367  0002F4  6E20               	movwf	drawCircle@color,c
  2368  0002F6  ECB8  F006         	call	_drawCircle	;wreg free
  2369                           
  2370                           ;Main_Screen.c: 91: drawCircle(60, 30 + 16 , 7, 0xFFE0);
  2371  0002FA  0E00               	movlw	0
  2372  0002FC  6E1B               	movwf	drawCircle@x0+1,c
  2373  0002FE  0E3C               	movlw	60
  2374  000300  6E1A               	movwf	drawCircle@x0,c
  2375  000302  0E00               	movlw	0
  2376  000304  6E1D               	movwf	drawCircle@y0+1,c
  2377  000306  0E2E               	movlw	46
  2378  000308  6E1C               	movwf	drawCircle@y0,c
  2379  00030A  0E00               	movlw	0
  2380  00030C  6E1F               	movwf	drawCircle@r+1,c
  2381  00030E  0E07               	movlw	7
  2382  000310  6E1E               	movwf	drawCircle@r,c
  2383  000312  0EFF               	movlw	255
  2384  000314  6E21               	movwf	drawCircle@color+1,c
  2385  000316  0EE0               	movlw	224
  2386  000318  6E20               	movwf	drawCircle@color,c
  2387  00031A  ECB8  F006         	call	_drawCircle	;wreg free
  2388                           
  2389                           ;Main_Screen.c: 92: fillCircle(80, 30 + 16 , 7, 0x07E0);
  2390  00031E  0E00               	movlw	0
  2391  000320  6E3A               	movwf	fillCircle@x0+1,c
  2392  000322  0E50               	movlw	80
  2393  000324  6E39               	movwf	fillCircle@x0,c
  2394  000326  0E00               	movlw	0
  2395  000328  6E3C               	movwf	fillCircle@y0+1,c
  2396  00032A  0E2E               	movlw	46
  2397  00032C  6E3B               	movwf	fillCircle@y0,c
  2398  00032E  0E00               	movlw	0
  2399  000330  6E3E               	movwf	fillCircle@r+1,c
  2400  000332  0E07               	movlw	7
  2401  000334  6E3D               	movwf	fillCircle@r,c
  2402  000336  0E07               	movlw	7
  2403  000338  6E40               	movwf	fillCircle@color+1,c
  2404  00033A  0EE0               	movlw	224
  2405  00033C  6E3F               	movwf	fillCircle@color,c
  2406  00033E  ECA4  F011         	call	_fillCircle	;wreg free
  2407                           
  2408                           ;Main_Screen.c: 93: drawtext (100, 30 + 10, NS_Count, 0xFFE0, 0x0000, 2);
  2409  000342  0E28               	movlw	40
  2410  000344  6E37               	movwf	drawtext@y,c
  2411  000346  0EA1               	movlw	low _NS_Count
  2412  000348  6E38               	movwf	drawtext@_text,c
  2413  00034A  0E00               	movlw	high _NS_Count
  2414  00034C  6E39               	movwf	drawtext@_text+1,c
  2415  00034E  0EFF               	movlw	255
  2416  000350  6E3B               	movwf	drawtext@color+1,c
  2417  000352  0EE0               	movlw	224
  2418  000354  6E3A               	movwf	drawtext@color,c
  2419  000356  0E00               	movlw	0
  2420  000358  6E3D               	movwf	drawtext@bg+1,c
  2421  00035A  0E00               	movlw	0
  2422  00035C  6E3C               	movwf	drawtext@bg,c
  2423  00035E  0E02               	movlw	2
  2424  000360  6E3E               	movwf	drawtext@size,c
  2425  000362  0E64               	movlw	100
  2426  000364  EC23  F00A         	call	_drawtext
  2427                           
  2428                           ;Main_Screen.c: 96: strcpy(txt, "N/S LT");
  2429  000368  C047  F00F         	movff	_txt,strcpy@to
  2430  00036C  C048  F010         	movff	_txt+1,strcpy@to+1
  2431  000370  0ED6               	movlw	low STR_7
  2432  000372  6E11               	movwf	strcpy@from,c
  2433  000374  0EFF               	movlw	high STR_7
  2434  000376  6E12               	movwf	strcpy@from+1,c
  2435  000378  EC5A  F013         	call	_strcpy	;wreg free
  2436                           
  2437                           ;Main_Screen.c: 97: drawtext (30, 60, txt, 0xF81F, 0x0000, 1);
  2438  00037C  0E3C               	movlw	60
  2439  00037E  6E37               	movwf	drawtext@y,c
  2440  000380  C047  F038         	movff	_txt,drawtext@_text
  2441  000384  C048  F039         	movff	_txt+1,drawtext@_text+1
  2442  000388  0EF8               	movlw	248
  2443  00038A  6E3B               	movwf	drawtext@color+1,c
  2444  00038C  0E1F               	movlw	31
  2445  00038E  6E3A               	movwf	drawtext@color,c
  2446  000390  0E00               	movlw	0
  2447  000392  6E3D               	movwf	drawtext@bg+1,c
  2448  000394  0E00               	movlw	0
  2449  000396  6E3C               	movwf	drawtext@bg,c
  2450  000398  0E01               	movlw	1
  2451  00039A  6E3E               	movwf	drawtext@size,c
  2452  00039C  0E1E               	movlw	30
  2453  00039E  EC23  F00A         	call	_drawtext
  2454                           
  2455                           ;Main_Screen.c: 98: drawRect (30, 60 + 16-8, 60, 18, 0xF81F);
  2456  0003A2  0E00               	movlw	0
  2457  0003A4  6E22               	movwf	drawRect@x+1,c
  2458  0003A6  0E1E               	movlw	30
  2459  0003A8  6E21               	movwf	drawRect@x,c
  2460  0003AA  0E00               	movlw	0
  2461  0003AC  6E24               	movwf	drawRect@y+1,c
  2462  0003AE  0E44               	movlw	68
  2463  0003B0  6E23               	movwf	drawRect@y,c
  2464  0003B2  0E00               	movlw	0
  2465  0003B4  6E26               	movwf	drawRect@w+1,c
  2466  0003B6  0E3C               	movlw	60
  2467  0003B8  6E25               	movwf	drawRect@w,c
  2468  0003BA  0E00               	movlw	0
  2469  0003BC  6E28               	movwf	drawRect@h+1,c
  2470  0003BE  0E12               	movlw	18
  2471  0003C0  6E27               	movwf	drawRect@h,c
  2472  0003C2  0EF8               	movlw	248
  2473  0003C4  6E2A               	movwf	drawRect@color+1,c
  2474  0003C6  0E1F               	movlw	31
  2475  0003C8  6E29               	movwf	drawRect@color,c
  2476  0003CA  ECBA  F010         	call	_drawRect	;wreg free
  2477                           
  2478                           ;Main_Screen.c: 99: fillCircle(40, 60 + 16, 7, 0xF800);
  2479  0003CE  0E00               	movlw	0
  2480  0003D0  6E3A               	movwf	fillCircle@x0+1,c
  2481  0003D2  0E28               	movlw	40
  2482  0003D4  6E39               	movwf	fillCircle@x0,c
  2483  0003D6  0E00               	movlw	0
  2484  0003D8  6E3C               	movwf	fillCircle@y0+1,c
  2485  0003DA  0E4C               	movlw	76
  2486  0003DC  6E3B               	movwf	fillCircle@y0,c
  2487  0003DE  0E00               	movlw	0
  2488  0003E0  6E3E               	movwf	fillCircle@r+1,c
  2489  0003E2  0E07               	movlw	7
  2490  0003E4  6E3D               	movwf	fillCircle@r,c
  2491  0003E6  0EF8               	movlw	248
  2492  0003E8  6E40               	movwf	fillCircle@color+1,c
  2493  0003EA  0E00               	movlw	0
  2494  0003EC  6E3F               	movwf	fillCircle@color,c
  2495  0003EE  ECA4  F011         	call	_fillCircle	;wreg free
  2496                           
  2497                           ;Main_Screen.c: 100: drawCircle(60, 60 + 16, 7, 0xFFE0);
  2498  0003F2  0E00               	movlw	0
  2499  0003F4  6E1B               	movwf	drawCircle@x0+1,c
  2500  0003F6  0E3C               	movlw	60
  2501  0003F8  6E1A               	movwf	drawCircle@x0,c
  2502  0003FA  0E00               	movlw	0
  2503  0003FC  6E1D               	movwf	drawCircle@y0+1,c
  2504  0003FE  0E4C               	movlw	76
  2505  000400  6E1C               	movwf	drawCircle@y0,c
  2506  000402  0E00               	movlw	0
  2507  000404  6E1F               	movwf	drawCircle@r+1,c
  2508  000406  0E07               	movlw	7
  2509  000408  6E1E               	movwf	drawCircle@r,c
  2510  00040A  0EFF               	movlw	255
  2511  00040C  6E21               	movwf	drawCircle@color+1,c
  2512  00040E  0EE0               	movlw	224
  2513  000410  6E20               	movwf	drawCircle@color,c
  2514  000412  ECB8  F006         	call	_drawCircle	;wreg free
  2515                           
  2516                           ;Main_Screen.c: 101: drawCircle(80, 60 + 16, 7, 0x07E0);
  2517  000416  0E00               	movlw	0
  2518  000418  6E1B               	movwf	drawCircle@x0+1,c
  2519  00041A  0E50               	movlw	80
  2520  00041C  6E1A               	movwf	drawCircle@x0,c
  2521  00041E  0E00               	movlw	0
  2522  000420  6E1D               	movwf	drawCircle@y0+1,c
  2523  000422  0E4C               	movlw	76
  2524  000424  6E1C               	movwf	drawCircle@y0,c
  2525  000426  0E00               	movlw	0
  2526  000428  6E1F               	movwf	drawCircle@r+1,c
  2527  00042A  0E07               	movlw	7
  2528  00042C  6E1E               	movwf	drawCircle@r,c
  2529  00042E  0E07               	movlw	7
  2530  000430  6E21               	movwf	drawCircle@color+1,c
  2531  000432  0EE0               	movlw	224
  2532  000434  6E20               	movwf	drawCircle@color,c
  2533  000436  ECB8  F006         	call	_drawCircle	;wreg free
  2534                           
  2535                           ;Main_Screen.c: 102: drawtext (100, 60 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2536  00043A  0E46               	movlw	70
  2537  00043C  6E37               	movwf	drawtext@y,c
  2538  00043E  0E9E               	movlw	low _NSLT_Count
  2539  000440  6E38               	movwf	drawtext@_text,c
  2540  000442  0E00               	movlw	high _NSLT_Count
  2541  000444  6E39               	movwf	drawtext@_text+1,c
  2542  000446  0EF8               	movlw	248
  2543  000448  6E3B               	movwf	drawtext@color+1,c
  2544  00044A  0E1F               	movlw	31
  2545  00044C  6E3A               	movwf	drawtext@color,c
  2546  00044E  0E00               	movlw	0
  2547  000450  6E3D               	movwf	drawtext@bg+1,c
  2548  000452  0E00               	movlw	0
  2549  000454  6E3C               	movwf	drawtext@bg,c
  2550  000456  0E02               	movlw	2
  2551  000458  6E3E               	movwf	drawtext@size,c
  2552  00045A  0E64               	movlw	100
  2553  00045C  EC23  F00A         	call	_drawtext
  2554                           
  2555                           ;Main_Screen.c: 105: strcpy(txt, "EAST/WEST");
  2556  000460  C047  F00F         	movff	_txt,strcpy@to
  2557  000464  C048  F010         	movff	_txt+1,strcpy@to+1
  2558  000468  0ECC               	movlw	low STR_8
  2559  00046A  6E11               	movwf	strcpy@from,c
  2560  00046C  0EFF               	movlw	high STR_8
  2561  00046E  6E12               	movwf	strcpy@from+1,c
  2562  000470  EC5A  F013         	call	_strcpy	;wreg free
  2563                           
  2564                           ;Main_Screen.c: 106: drawtext (30, 90, txt, 0x07FF, 0x0000, 1);
  2565  000474  0E5A               	movlw	90
  2566  000476  6E37               	movwf	drawtext@y,c
  2567  000478  C047  F038         	movff	_txt,drawtext@_text
  2568  00047C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2569  000480  0E07               	movlw	7
  2570  000482  6E3B               	movwf	drawtext@color+1,c
  2571  000484  683A               	setf	drawtext@color,c
  2572  000486  0E00               	movlw	0
  2573  000488  6E3D               	movwf	drawtext@bg+1,c
  2574  00048A  0E00               	movlw	0
  2575  00048C  6E3C               	movwf	drawtext@bg,c
  2576  00048E  0E01               	movlw	1
  2577  000490  6E3E               	movwf	drawtext@size,c
  2578  000492  0E1E               	movlw	30
  2579  000494  EC23  F00A         	call	_drawtext
  2580                           
  2581                           ;Main_Screen.c: 107: drawRect (30, 90 + 16-8, 60, 18, 0x07FF);
  2582  000498  0E00               	movlw	0
  2583  00049A  6E22               	movwf	drawRect@x+1,c
  2584  00049C  0E1E               	movlw	30
  2585  00049E  6E21               	movwf	drawRect@x,c
  2586  0004A0  0E00               	movlw	0
  2587  0004A2  6E24               	movwf	drawRect@y+1,c
  2588  0004A4  0E62               	movlw	98
  2589  0004A6  6E23               	movwf	drawRect@y,c
  2590  0004A8  0E00               	movlw	0
  2591  0004AA  6E26               	movwf	drawRect@w+1,c
  2592  0004AC  0E3C               	movlw	60
  2593  0004AE  6E25               	movwf	drawRect@w,c
  2594  0004B0  0E00               	movlw	0
  2595  0004B2  6E28               	movwf	drawRect@h+1,c
  2596  0004B4  0E12               	movlw	18
  2597  0004B6  6E27               	movwf	drawRect@h,c
  2598  0004B8  0E07               	movlw	7
  2599  0004BA  6E2A               	movwf	drawRect@color+1,c
  2600  0004BC  6829               	setf	drawRect@color,c
  2601  0004BE  ECBA  F010         	call	_drawRect	;wreg free
  2602                           
  2603                           ;Main_Screen.c: 108: fillCircle(40, 90 + 16, 7, 0xF800);
  2604  0004C2  0E00               	movlw	0
  2605  0004C4  6E3A               	movwf	fillCircle@x0+1,c
  2606  0004C6  0E28               	movlw	40
  2607  0004C8  6E39               	movwf	fillCircle@x0,c
  2608  0004CA  0E00               	movlw	0
  2609  0004CC  6E3C               	movwf	fillCircle@y0+1,c
  2610  0004CE  0E6A               	movlw	106
  2611  0004D0  6E3B               	movwf	fillCircle@y0,c
  2612  0004D2  0E00               	movlw	0
  2613  0004D4  6E3E               	movwf	fillCircle@r+1,c
  2614  0004D6  0E07               	movlw	7
  2615  0004D8  6E3D               	movwf	fillCircle@r,c
  2616  0004DA  0EF8               	movlw	248
  2617  0004DC  6E40               	movwf	fillCircle@color+1,c
  2618  0004DE  0E00               	movlw	0
  2619  0004E0  6E3F               	movwf	fillCircle@color,c
  2620  0004E2  ECA4  F011         	call	_fillCircle	;wreg free
  2621                           
  2622                           ;Main_Screen.c: 109: drawCircle(60, 90 + 16, 7, 0xFFE0);
  2623  0004E6  0E00               	movlw	0
  2624  0004E8  6E1B               	movwf	drawCircle@x0+1,c
  2625  0004EA  0E3C               	movlw	60
  2626  0004EC  6E1A               	movwf	drawCircle@x0,c
  2627  0004EE  0E00               	movlw	0
  2628  0004F0  6E1D               	movwf	drawCircle@y0+1,c
  2629  0004F2  0E6A               	movlw	106
  2630  0004F4  6E1C               	movwf	drawCircle@y0,c
  2631  0004F6  0E00               	movlw	0
  2632  0004F8  6E1F               	movwf	drawCircle@r+1,c
  2633  0004FA  0E07               	movlw	7
  2634  0004FC  6E1E               	movwf	drawCircle@r,c
  2635  0004FE  0EFF               	movlw	255
  2636  000500  6E21               	movwf	drawCircle@color+1,c
  2637  000502  0EE0               	movlw	224
  2638  000504  6E20               	movwf	drawCircle@color,c
  2639  000506  ECB8  F006         	call	_drawCircle	;wreg free
  2640                           
  2641                           ;Main_Screen.c: 110: drawCircle(80, 90 + 16, 7, 0x07E0);
  2642  00050A  0E00               	movlw	0
  2643  00050C  6E1B               	movwf	drawCircle@x0+1,c
  2644  00050E  0E50               	movlw	80
  2645  000510  6E1A               	movwf	drawCircle@x0,c
  2646  000512  0E00               	movlw	0
  2647  000514  6E1D               	movwf	drawCircle@y0+1,c
  2648  000516  0E6A               	movlw	106
  2649  000518  6E1C               	movwf	drawCircle@y0,c
  2650  00051A  0E00               	movlw	0
  2651  00051C  6E1F               	movwf	drawCircle@r+1,c
  2652  00051E  0E07               	movlw	7
  2653  000520  6E1E               	movwf	drawCircle@r,c
  2654  000522  0E07               	movlw	7
  2655  000524  6E21               	movwf	drawCircle@color+1,c
  2656  000526  0EE0               	movlw	224
  2657  000528  6E20               	movwf	drawCircle@color,c
  2658  00052A  ECB8  F006         	call	_drawCircle	;wreg free
  2659                           
  2660                           ;Main_Screen.c: 111: drawtext (100, 90 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2661  00052E  0E64               	movlw	100
  2662  000530  6E37               	movwf	drawtext@y,c
  2663  000532  0E5E               	movlw	low _EW_Count
  2664  000534  6E38               	movwf	drawtext@_text,c
  2665  000536  0E00               	movlw	high _EW_Count
  2666  000538  6E39               	movwf	drawtext@_text+1,c
  2667  00053A  0E07               	movlw	7
  2668  00053C  6E3B               	movwf	drawtext@color+1,c
  2669  00053E  683A               	setf	drawtext@color,c
  2670  000540  0E00               	movlw	0
  2671  000542  6E3D               	movwf	drawtext@bg+1,c
  2672  000544  0E00               	movlw	0
  2673  000546  6E3C               	movwf	drawtext@bg,c
  2674  000548  0E02               	movlw	2
  2675  00054A  6E3E               	movwf	drawtext@size,c
  2676  00054C  0E64               	movlw	100
  2677  00054E  EC23  F00A         	call	_drawtext
  2678                           
  2679                           ;Main_Screen.c: 114: strcpy(txt, "E/W LT");
  2680  000552  C047  F00F         	movff	_txt,strcpy@to
  2681  000556  C048  F010         	movff	_txt+1,strcpy@to+1
  2682  00055A  0EDD               	movlw	low STR_9
  2683  00055C  6E11               	movwf	strcpy@from,c
  2684  00055E  0EFF               	movlw	high STR_9
  2685  000560  6E12               	movwf	strcpy@from+1,c
  2686  000562  EC5A  F013         	call	_strcpy	;wreg free
  2687                           
  2688                           ;Main_Screen.c: 115: drawtext (30, 120, txt, 0xFFFF, 0x0000, 1);
  2689  000566  0E78               	movlw	120
  2690  000568  6E37               	movwf	drawtext@y,c
  2691  00056A  C047  F038         	movff	_txt,drawtext@_text
  2692  00056E  C048  F039         	movff	_txt+1,drawtext@_text+1
  2693  000572  0EFF               	movlw	255
  2694  000574  6E3B               	movwf	drawtext@color+1,c
  2695  000576  683A               	setf	drawtext@color,c
  2696  000578  0E00               	movlw	0
  2697  00057A  6E3D               	movwf	drawtext@bg+1,c
  2698  00057C  0E00               	movlw	0
  2699  00057E  6E3C               	movwf	drawtext@bg,c
  2700  000580  0E01               	movlw	1
  2701  000582  6E3E               	movwf	drawtext@size,c
  2702  000584  0E1E               	movlw	30
  2703  000586  EC23  F00A         	call	_drawtext
  2704                           
  2705                           ;Main_Screen.c: 116: drawRect (30, 120 + 16-8, 60, 18, 0xFFFF);
  2706  00058A  0E00               	movlw	0
  2707  00058C  6E22               	movwf	drawRect@x+1,c
  2708  00058E  0E1E               	movlw	30
  2709  000590  6E21               	movwf	drawRect@x,c
  2710  000592  0E00               	movlw	0
  2711  000594  6E24               	movwf	drawRect@y+1,c
  2712  000596  0E80               	movlw	128
  2713  000598  6E23               	movwf	drawRect@y,c
  2714  00059A  0E00               	movlw	0
  2715  00059C  6E26               	movwf	drawRect@w+1,c
  2716  00059E  0E3C               	movlw	60
  2717  0005A0  6E25               	movwf	drawRect@w,c
  2718  0005A2  0E00               	movlw	0
  2719  0005A4  6E28               	movwf	drawRect@h+1,c
  2720  0005A6  0E12               	movlw	18
  2721  0005A8  6E27               	movwf	drawRect@h,c
  2722  0005AA  0EFF               	movlw	255
  2723  0005AC  6E2A               	movwf	drawRect@color+1,c
  2724  0005AE  6829               	setf	drawRect@color,c
  2725  0005B0  ECBA  F010         	call	_drawRect	;wreg free
  2726                           
  2727                           ;Main_Screen.c: 117: fillCircle(40, 120 + 16, 7, 0xF800);
  2728  0005B4  0E00               	movlw	0
  2729  0005B6  6E3A               	movwf	fillCircle@x0+1,c
  2730  0005B8  0E28               	movlw	40
  2731  0005BA  6E39               	movwf	fillCircle@x0,c
  2732  0005BC  0E00               	movlw	0
  2733  0005BE  6E3C               	movwf	fillCircle@y0+1,c
  2734  0005C0  0E88               	movlw	136
  2735  0005C2  6E3B               	movwf	fillCircle@y0,c
  2736  0005C4  0E00               	movlw	0
  2737  0005C6  6E3E               	movwf	fillCircle@r+1,c
  2738  0005C8  0E07               	movlw	7
  2739  0005CA  6E3D               	movwf	fillCircle@r,c
  2740  0005CC  0EF8               	movlw	248
  2741  0005CE  6E40               	movwf	fillCircle@color+1,c
  2742  0005D0  0E00               	movlw	0
  2743  0005D2  6E3F               	movwf	fillCircle@color,c
  2744  0005D4  ECA4  F011         	call	_fillCircle	;wreg free
  2745                           
  2746                           ;Main_Screen.c: 118: drawCircle(60, 120 + 16, 7, 0xFFE0);
  2747  0005D8  0E00               	movlw	0
  2748  0005DA  6E1B               	movwf	drawCircle@x0+1,c
  2749  0005DC  0E3C               	movlw	60
  2750  0005DE  6E1A               	movwf	drawCircle@x0,c
  2751  0005E0  0E00               	movlw	0
  2752  0005E2  6E1D               	movwf	drawCircle@y0+1,c
  2753  0005E4  0E88               	movlw	136
  2754  0005E6  6E1C               	movwf	drawCircle@y0,c
  2755  0005E8  0E00               	movlw	0
  2756  0005EA  6E1F               	movwf	drawCircle@r+1,c
  2757  0005EC  0E07               	movlw	7
  2758  0005EE  6E1E               	movwf	drawCircle@r,c
  2759  0005F0  0EFF               	movlw	255
  2760  0005F2  6E21               	movwf	drawCircle@color+1,c
  2761  0005F4  0EE0               	movlw	224
  2762  0005F6  6E20               	movwf	drawCircle@color,c
  2763  0005F8  ECB8  F006         	call	_drawCircle	;wreg free
  2764                           
  2765                           ;Main_Screen.c: 119: drawCircle(80, 120 + 16, 7, 0x07E0);
  2766  0005FC  0E00               	movlw	0
  2767  0005FE  6E1B               	movwf	drawCircle@x0+1,c
  2768  000600  0E50               	movlw	80
  2769  000602  6E1A               	movwf	drawCircle@x0,c
  2770  000604  0E00               	movlw	0
  2771  000606  6E1D               	movwf	drawCircle@y0+1,c
  2772  000608  0E88               	movlw	136
  2773  00060A  6E1C               	movwf	drawCircle@y0,c
  2774  00060C  0E00               	movlw	0
  2775  00060E  6E1F               	movwf	drawCircle@r+1,c
  2776  000610  0E07               	movlw	7
  2777  000612  6E1E               	movwf	drawCircle@r,c
  2778  000614  0E07               	movlw	7
  2779  000616  6E21               	movwf	drawCircle@color+1,c
  2780  000618  0EE0               	movlw	224
  2781  00061A  6E20               	movwf	drawCircle@color,c
  2782  00061C  ECB8  F006         	call	_drawCircle	;wreg free
  2783                           
  2784                           ;Main_Screen.c: 120: drawtext (100, 120 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2785  000620  0E82               	movlw	130
  2786  000622  6E37               	movwf	drawtext@y,c
  2787  000624  0E9B               	movlw	low _EWLT_Count
  2788  000626  6E38               	movwf	drawtext@_text,c
  2789  000628  0E00               	movlw	high _EWLT_Count
  2790  00062A  6E39               	movwf	drawtext@_text+1,c
  2791  00062C  0EFF               	movlw	255
  2792  00062E  6E3B               	movwf	drawtext@color+1,c
  2793  000630  683A               	setf	drawtext@color,c
  2794  000632  0E00               	movlw	0
  2795  000634  6E3D               	movwf	drawtext@bg+1,c
  2796  000636  0E00               	movlw	0
  2797  000638  6E3C               	movwf	drawtext@bg,c
  2798  00063A  0E02               	movlw	2
  2799  00063C  6E3E               	movwf	drawtext@size,c
  2800  00063E  0E64               	movlw	100
  2801  000640  EC23  F00A         	call	_drawtext
  2802                           
  2803                           ;Main_Screen.c: 123: strcpy(txt, "PNS");
  2804  000644  C047  F00F         	movff	_txt,strcpy@to
  2805  000648  C048  F010         	movff	_txt+1,strcpy@to+1
  2806  00064C  0EEF               	movlw	low STR_10
  2807  00064E  6E11               	movwf	strcpy@from,c
  2808  000650  0EFF               	movlw	high STR_10
  2809  000652  6E12               	movwf	strcpy@from+1,c
  2810  000654  EC5A  F013         	call	_strcpy	;wreg free
  2811                           
  2812                           ;Main_Screen.c: 124: drawtext(3, 30, txt, 0xFFE0, 0x0000, 1);
  2813  000658  0E1E               	movlw	30
  2814  00065A  6E37               	movwf	drawtext@y,c
  2815  00065C  C047  F038         	movff	_txt,drawtext@_text
  2816  000660  C048  F039         	movff	_txt+1,drawtext@_text+1
  2817  000664  0EFF               	movlw	255
  2818  000666  6E3B               	movwf	drawtext@color+1,c
  2819  000668  0EE0               	movlw	224
  2820  00066A  6E3A               	movwf	drawtext@color,c
  2821  00066C  0E00               	movlw	0
  2822  00066E  6E3D               	movwf	drawtext@bg+1,c
  2823  000670  0E00               	movlw	0
  2824  000672  6E3C               	movwf	drawtext@bg,c
  2825  000674  0E01               	movlw	1
  2826  000676  6E3E               	movwf	drawtext@size,c
  2827  000678  0E03               	movlw	3
  2828  00067A  EC23  F00A         	call	_drawtext
  2829                           
  2830                           ;Main_Screen.c: 125: drawtext(2, 40, PED_NS_Count, 0xFFE0, 0x0000, 2);
  2831  00067E  0E28               	movlw	40
  2832  000680  6E37               	movwf	drawtext@y,c
  2833  000682  0EA7               	movlw	low _PED_NS_Count
  2834  000684  6E38               	movwf	drawtext@_text,c
  2835  000686  0E00               	movlw	high _PED_NS_Count
  2836  000688  6E39               	movwf	drawtext@_text+1,c
  2837  00068A  0EFF               	movlw	255
  2838  00068C  6E3B               	movwf	drawtext@color+1,c
  2839  00068E  0EE0               	movlw	224
  2840  000690  6E3A               	movwf	drawtext@color,c
  2841  000692  0E00               	movlw	0
  2842  000694  6E3D               	movwf	drawtext@bg+1,c
  2843  000696  0E00               	movlw	0
  2844  000698  6E3C               	movwf	drawtext@bg,c
  2845  00069A  0E02               	movlw	2
  2846  00069C  6E3E               	movwf	drawtext@size,c
  2847  00069E  0E02               	movlw	2
  2848  0006A0  EC23  F00A         	call	_drawtext
  2849                           
  2850                           ;Main_Screen.c: 129: strcpy(txt, "PEW");
  2851  0006A4  C047  F00F         	movff	_txt,strcpy@to
  2852  0006A8  C048  F010         	movff	_txt+1,strcpy@to+1
  2853  0006AC  0EF3               	movlw	low STR_11
  2854  0006AE  6E11               	movwf	strcpy@from,c
  2855  0006B0  0EFF               	movlw	high STR_11
  2856  0006B2  6E12               	movwf	strcpy@from+1,c
  2857  0006B4  EC5A  F013         	call	_strcpy	;wreg free
  2858                           
  2859                           ;Main_Screen.c: 130: drawtext(3, 90, txt, 0x07FF, 0x0000, 1);
  2860  0006B8  0E5A               	movlw	90
  2861  0006BA  6E37               	movwf	drawtext@y,c
  2862  0006BC  C047  F038         	movff	_txt,drawtext@_text
  2863  0006C0  C048  F039         	movff	_txt+1,drawtext@_text+1
  2864  0006C4  0E07               	movlw	7
  2865  0006C6  6E3B               	movwf	drawtext@color+1,c
  2866  0006C8  683A               	setf	drawtext@color,c
  2867  0006CA  0E00               	movlw	0
  2868  0006CC  6E3D               	movwf	drawtext@bg+1,c
  2869  0006CE  0E00               	movlw	0
  2870  0006D0  6E3C               	movwf	drawtext@bg,c
  2871  0006D2  0E01               	movlw	1
  2872  0006D4  6E3E               	movwf	drawtext@size,c
  2873  0006D6  0E03               	movlw	3
  2874  0006D8  EC23  F00A         	call	_drawtext
  2875                           
  2876                           ;Main_Screen.c: 133: if (0 == 0)
  2877  0006DC  0E64               	movlw	100
  2878  0006DE  6E37               	movwf	drawtext@y,c
  2879  0006E0  0EA4               	movlw	low _PED_EW_Count
  2880  0006E2  6E38               	movwf	drawtext@_text,c
  2881  0006E4  0E00               	movlw	high _PED_EW_Count
  2882  0006E6  6E39               	movwf	drawtext@_text+1,c
  2883  0006E8  0E07               	movlw	7
  2884  0006EA  6E3B               	movwf	drawtext@color+1,c
  2885  0006EC  683A               	setf	drawtext@color,c
  2886  0006EE  0E00               	movlw	0
  2887  0006F0  6E3D               	movwf	drawtext@bg+1,c
  2888  0006F2  0E00               	movlw	0
  2889  0006F4  6E3C               	movwf	drawtext@bg,c
  2890  0006F6  0E02               	movlw	2
  2891  0006F8  6E3E               	movwf	drawtext@size,c
  2892  0006FA  0E02               	movlw	2
  2893  0006FC  EC23  F00A         	call	_drawtext
  2894                           
  2895                           ;Main_Screen.c: 134: {
  2896                           ;Main_Screen.c: 135: Timing_Txt[0] = 'S';
  2897  000700  0E53               	movlw	83
  2898  000702  0100               	movlb	0	; () banked
  2899  000704  6F80               	movwf	_Timing_Txt& (0+255),b
  2900                           
  2901                           ; BSR set to: 0
  2902                           ;Main_Screen.c: 136: Timing_Txt[1] = 'P';
  2903  000706  0E50               	movlw	80
  2904  000708  D004               	goto	L1
  2905                           
  2906                           ; BSR set to: 0
  2907                           ;Main_Screen.c: 138: else
  2908                           ;Main_Screen.c: 139: {
  2909                           ;Main_Screen.c: 140: Timing_Txt[0] = 'F';
  2910                           
  2911                           ; BSR set to: 0
  2912                           
  2913                           ;Main_Screen.c: 137: }
  2914  00070A  0E46               	movlw	70
  2915  00070C  0100               	movlb	0	; () banked
  2916  00070E  6F80               	movwf	_Timing_Txt& (0+255),b
  2917                           
  2918                           ;Main_Screen.c: 141: Timing_Txt[1] = 'S';
  2919  000710  0E53               	movlw	83
  2920  000712                     L1:
  2921  000712  0100               	movlb	0	; () banked
  2922  000714  6F81               	movwf	(_Timing_Txt+1)& (0+255),b
  2923                           
  2924                           ; BSR set to: 0
  2925                           ;Main_Screen.c: 142: }
  2926                           ;Main_Screen.c: 143: Timing_Txt[2] = 24/10 + '0';
  2927  000716  0E32               	movlw	50
  2928  000718  0100               	movlb	0	; () banked
  2929  00071A  6F82               	movwf	(_Timing_Txt+2)& (0+255),b
  2930                           
  2931                           ;Main_Screen.c: 144: Timing_Txt[3] = 24%10 + '0';
  2932  00071C  0E34               	movlw	52
  2933  00071E  0100               	movlb	0	; () banked
  2934  000720  6F83               	movwf	(_Timing_Txt+3)& (0+255),b
  2935                           
  2936                           ;Main_Screen.c: 145: Timing_Txt[5] = 1%10 + '0';
  2937  000722  0E31               	movlw	49
  2938  000724  0100               	movlb	0	; () banked
  2939  000726  6F85               	movwf	(_Timing_Txt+5)& (0+255),b
  2940                           
  2941                           ;Main_Screen.c: 146: Timing_Txt[7] = 01/10 + '0';
  2942  000728  0E30               	movlw	48
  2943  00072A  0100               	movlb	0	; () banked
  2944  00072C  6F87               	movwf	(_Timing_Txt+7)& (0+255),b
  2945                           
  2946                           ;Main_Screen.c: 147: Timing_Txt[8] = 01%10 + '0';
  2947  00072E  0E31               	movlw	49
  2948  000730  0100               	movlb	0	; () banked
  2949  000732  6F88               	movwf	(_Timing_Txt+8)& (0+255),b
  2950                           
  2951                           ;Main_Screen.c: 148: Timing_Txt[10] = 8 + '0';
  2952  000734  0E38               	movlw	56
  2953  000736  0100               	movlb	0	; () banked
  2954  000738  6F8A               	movwf	(_Timing_Txt+10)& (0+255),b
  2955                           
  2956                           ;Main_Screen.c: 149: Timing_Txt[11] = 7 + '0';
  2957  00073A  0E37               	movlw	55
  2958  00073C  0100               	movlb	0	; () banked
  2959  00073E  6F8B               	movwf	(_Timing_Txt+11)& (0+255),b
  2960                           
  2961                           ;Main_Screen.c: 150: Timing_Txt[12] = 8 + '0';
  2962  000740  0E38               	movlw	56
  2963  000742  0100               	movlb	0	; () banked
  2964  000744  6F8C               	movwf	(_Timing_Txt+12)& (0+255),b
  2965                           
  2966                           ;Main_Screen.c: 151: Timing_Txt[13] = 7 + '0';
  2967  000746  0E37               	movlw	55
  2968  000748  0100               	movlb	0	; () banked
  2969  00074A  6F8D               	movwf	(_Timing_Txt+13)& (0+255),b
  2970                           
  2971                           ;Main_Screen.c: 152: Timing_Txt[14] = 6 + '0';
  2972  00074C  0E36               	movlw	54
  2973  00074E  0100               	movlb	0	; () banked
  2974  000750  6F8E               	movwf	(_Timing_Txt+14)& (0+255),b
  2975                           
  2976                           ;Main_Screen.c: 153: Timing_Txt[15] = 7 + '0';
  2977  000752  0E37               	movlw	55
  2978  000754  0100               	movlb	0	; () banked
  2979  000756  6F8F               	movwf	(_Timing_Txt+15)& (0+255),b
  2980                           
  2981                           ;Main_Screen.c: 154: Timing_Txt[17] = 6 + '0';
  2982  000758  0E36               	movlw	54
  2983  00075A  0100               	movlb	0	; () banked
  2984  00075C  6F91               	movwf	(_Timing_Txt+17)& (0+255),b
  2985                           
  2986                           ;Main_Screen.c: 155: Timing_Txt[18] = 7 + '0';
  2987  00075E  0E37               	movlw	55
  2988  000760  0100               	movlb	0	; () banked
  2989  000762  6F92               	movwf	(_Timing_Txt+18)& (0+255),b
  2990                           
  2991                           ;Main_Screen.c: 156: Timing_Txt[19] = 6 + '0';
  2992  000764  0E36               	movlw	54
  2993  000766  0100               	movlb	0	; () banked
  2994  000768  6F93               	movwf	(_Timing_Txt+19)& (0+255),b
  2995                           
  2996                           ;Main_Screen.c: 157: Timing_Txt[20] = 8 + '0';
  2997  00076A  0E38               	movlw	56
  2998  00076C  0100               	movlb	0	; () banked
  2999  00076E  6F94               	movwf	(_Timing_Txt+20)& (0+255),b
  3000                           
  3001                           ; BSR set to: 0
  3002                           ;Main_Screen.c: 158: drawtext(1, 150, Timing_Txt, 0xFFFF, 0x0000, 1);
  3003  000770  0E96               	movlw	150
  3004  000772  6E37               	movwf	drawtext@y,c
  3005  000774  0E80               	movlw	low _Timing_Txt
  3006  000776  6E38               	movwf	drawtext@_text,c
  3007  000778  0E00               	movlw	high _Timing_Txt
  3008  00077A  6E39               	movwf	drawtext@_text+1,c
  3009  00077C  0EFF               	movlw	255
  3010  00077E  6E3B               	movwf	drawtext@color+1,c
  3011  000780  683A               	setf	drawtext@color,c
  3012  000782  0E00               	movlw	0
  3013  000784  6E3D               	movwf	drawtext@bg+1,c
  3014  000786  0E00               	movlw	0
  3015  000788  6E3C               	movwf	drawtext@bg,c
  3016  00078A  0E01               	movlw	1
  3017  00078C  6E3E               	movwf	drawtext@size,c
  3018  00078E  0E01               	movlw	1
  3019  000790  EC23  F00A         	call	_drawtext
  3020  000794  0012               	return		;funcret
  3021  000796                     __end_of_Initialize_LCD_Screen:
  3022                           	opt stack 0
  3023                           tblptru	equ	0xFF8
  3024                           tblptrh	equ	0xFF7
  3025                           tblptrl	equ	0xFF6
  3026                           tablat	equ	0xFF5
  3027                           postinc0	equ	0xFEE
  3028                           wreg	equ	0xFE8
  3029                           postdec1	equ	0xFE5
  3030                           fsr1l	equ	0xFE1
  3031                           status	equ	0xFD8
  3032                           
  3033 ;; *************** function _fillScreen *****************
  3034 ;; Defined at:
  3035 ;;		line 570 in file "ST7735_TFT.c"
  3036 ;; Parameters:    Size  Location     Type
  3037 ;;  color           2   33[COMRAM] unsigned int 
  3038 ;; Auto vars:     Size  Location     Type
  3039 ;;		None
  3040 ;; Return value:  Size  Location     Type
  3041 ;;		None               void
  3042 ;; Registers used:
  3043 ;;		wreg, status,2, status,0, cstack
  3044 ;; Tracked objects:
  3045 ;;		On entry : 0/0
  3046 ;;		On exit  : 0/0
  3047 ;;		Unchanged: 0/0
  3048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3049 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3050 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3052 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3053 ;;Total ram usage:        2 bytes
  3054 ;; Hardware stack levels used:    1
  3055 ;; Hardware stack levels required when called:    6
  3056 ;; This function calls:
  3057 ;;		_fillRectangle
  3058 ;; This function is called by:
  3059 ;;		_Initialize_LCD_Screen
  3060 ;; This function uses a non-reentrant model
  3061 ;;
  3062                           
  3063                           	psect	text3
  3064  0027DA                     __ptext3:
  3065                           	opt stack 0
  3066  0027DA                     _fillScreen:
  3067                           	opt stack 23
  3068                           
  3069                           ;ST7735_TFT.c: 572: fillRectangle(0, 0, 128, 160, color);
  3070                           
  3071                           ;incstack = 0
  3072  0027DA  0E00               	movlw	0
  3073  0027DC  6E16               	movwf	fillRectangle@y,c
  3074  0027DE  0E80               	movlw	128
  3075  0027E0  6E17               	movwf	fillRectangle@w,c
  3076  0027E2  0EA0               	movlw	160
  3077  0027E4  6E18               	movwf	fillRectangle@h,c
  3078  0027E6  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3079  0027EA  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3080  0027EE  0E00               	movlw	0
  3081  0027F0  EC81  F00C         	call	_fillRectangle
  3082  0027F4  0012               	return		;funcret
  3083  0027F6                     __end_of_fillScreen:
  3084                           	opt stack 0
  3085                           tblptru	equ	0xFF8
  3086                           tblptrh	equ	0xFF7
  3087                           tblptrl	equ	0xFF6
  3088                           tablat	equ	0xFF5
  3089                           postinc0	equ	0xFEE
  3090                           wreg	equ	0xFE8
  3091                           postdec1	equ	0xFE5
  3092                           fsr1l	equ	0xFE1
  3093                           status	equ	0xFD8
  3094                           
  3095 ;; *************** function _fillRectangle *****************
  3096 ;; Defined at:
  3097 ;;		line 454 in file "ST7735_TFT.c"
  3098 ;; Parameters:    Size  Location     Type
  3099 ;;  x               1    wreg     unsigned char 
  3100 ;;  y               1   21[COMRAM] unsigned char 
  3101 ;;  w               1   22[COMRAM] unsigned char 
  3102 ;;  h               1   23[COMRAM] unsigned char 
  3103 ;;  color           2   24[COMRAM] unsigned int 
  3104 ;; Auto vars:     Size  Location     Type
  3105 ;;  x               1   32[COMRAM] unsigned char 
  3106 ;;  lo              1   31[COMRAM] unsigned char 
  3107 ;;  hi              1   30[COMRAM] unsigned char 
  3108 ;; Return value:  Size  Location     Type
  3109 ;;		None               void
  3110 ;; Registers used:
  3111 ;;		wreg, status,2, status,0, cstack
  3112 ;; Tracked objects:
  3113 ;;		On entry : 0/0
  3114 ;;		On exit  : 0/0
  3115 ;;		Unchanged: 0/0
  3116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3117 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3118 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3119 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3120 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3121 ;;Total ram usage:       12 bytes
  3122 ;; Hardware stack levels used:    1
  3123 ;; Hardware stack levels required when called:    5
  3124 ;; This function calls:
  3125 ;;		_setAddrWindow
  3126 ;;		_spiwrite
  3127 ;; This function is called by:
  3128 ;;		_fillScreen
  3129 ;; This function uses a non-reentrant model
  3130 ;;
  3131                           
  3132                           	psect	text4
  3133  001902                     __ptext4:
  3134                           	opt stack 0
  3135  001902                     _fillRectangle:
  3136                           	opt stack 23
  3137                           
  3138                           ;incstack = 0
  3139                           ;fillRectangle@x stored from wreg
  3140  001902  6E21               	movwf	fillRectangle@x,c
  3141                           
  3142                           ;ST7735_TFT.c: 456: unsigned char hi, lo;
  3143                           ;ST7735_TFT.c: 457: if((x >= 128) || (y >= 160))
  3144  001904  0E80               	movlw	128
  3145  001906  6021               	cpfslt	fillRectangle@x,c
  3146  001908  D069               	goto	l323
  3147  00190A  0E9F               	movlw	159
  3148  00190C  6416               	cpfsgt	fillRectangle@y,c
  3149  00190E  D001               	goto	l5291
  3150                           
  3151                           ;ST7735_TFT.c: 458: return;
  3152  001910  D065               	goto	l323
  3153  001912                     l5291:
  3154                           
  3155                           ;ST7735_TFT.c: 459: if((x + w - 1) >= 128)
  3156  001912  0EFF               	movlw	255
  3157  001914  6E1B               	movwf	??_fillRectangle& (0+255),c
  3158  001916  0EFF               	movlw	255
  3159  001918  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3160  00191A  5017               	movf	fillRectangle@w,w,c
  3161  00191C  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3162  001920  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3163  001922  261D               	addwf	??_fillRectangle+2,f,c
  3164  001924  0E00               	movlw	0
  3165  001926  221E               	addwfc	??_fillRectangle+3,f,c
  3166  001928  501B               	movf	??_fillRectangle,w,c
  3167  00192A  261D               	addwf	??_fillRectangle+2,f,c
  3168  00192C  501C               	movf	??_fillRectangle+1,w,c
  3169  00192E  221E               	addwfc	??_fillRectangle+3,f,c
  3170  001930  BE1E               	btfsc	??_fillRectangle+3,7,c
  3171  001932  D00A               	goto	l324
  3172  001934  501E               	movf	??_fillRectangle+3,w,c
  3173  001936  E104               	bnz	u3940
  3174  001938  0E80               	movlw	128
  3175  00193A  5C1D               	subwf	??_fillRectangle+2,w,c
  3176  00193C  A0D8               	btfss	status,0,c
  3177  00193E  D004               	goto	l324
  3178  001940                     u3940:
  3179                           
  3180                           ;ST7735_TFT.c: 460: w = 128 - x;
  3181  001940  5021               	movf	fillRectangle@x,w,c
  3182  001942  0800               	sublw	0
  3183  001944  0F80               	addlw	128
  3184  001946  6E17               	movwf	fillRectangle@w,c
  3185  001948                     l324:
  3186                           
  3187                           ;ST7735_TFT.c: 461: if((y + h - 1) >= 160)
  3188  001948  0EFF               	movlw	255
  3189  00194A  6E1B               	movwf	??_fillRectangle& (0+255),c
  3190  00194C  0EFF               	movlw	255
  3191  00194E  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3192  001950  5018               	movf	fillRectangle@h,w,c
  3193  001952  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3194  001956  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3195  001958  261D               	addwf	??_fillRectangle+2,f,c
  3196  00195A  0E00               	movlw	0
  3197  00195C  221E               	addwfc	??_fillRectangle+3,f,c
  3198  00195E  501B               	movf	??_fillRectangle,w,c
  3199  001960  261D               	addwf	??_fillRectangle+2,f,c
  3200  001962  501C               	movf	??_fillRectangle+1,w,c
  3201  001964  221E               	addwfc	??_fillRectangle+3,f,c
  3202  001966  BE1E               	btfsc	??_fillRectangle+3,7,c
  3203  001968  D00B               	goto	l5297
  3204  00196A  501E               	movf	??_fillRectangle+3,w,c
  3205  00196C  E104               	bnz	u3950
  3206  00196E  0EA0               	movlw	160
  3207  001970  5C1D               	subwf	??_fillRectangle+2,w,c
  3208  001972  A0D8               	btfss	status,0,c
  3209  001974  D005               	goto	l5297
  3210  001976                     u3950:
  3211                           
  3212                           ;ST7735_TFT.c: 462: h = 160 - y;
  3213  001976  5016               	movf	fillRectangle@y,w,c
  3214  001978  0800               	sublw	0
  3215  00197A  0FA0               	addlw	160
  3216  00197C  6E18               	movwf	fillRectangle@h,c
  3217  00197E  D000               	goto	l5297
  3218  001980                     l5297:
  3219                           
  3220                           ;ST7735_TFT.c: 463: setAddrWindow(x, y, x+w-1, y+h-1);
  3221  001980  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3222  001984  5021               	movf	fillRectangle@x,w,c
  3223  001986  2417               	addwf	fillRectangle@w,w,c
  3224  001988  6E1B               	movwf	??_fillRectangle& (0+255),c
  3225  00198A  041B               	decf	??_fillRectangle,w,c
  3226  00198C  6E13               	movwf	setAddrWindow@x1,c
  3227  00198E  5016               	movf	fillRectangle@y,w,c
  3228  001990  2418               	addwf	fillRectangle@h,w,c
  3229  001992  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3230  001994  041C               	decf	??_fillRectangle+1,w,c
  3231  001996  6E14               	movwf	setAddrWindow@y1,c
  3232  001998  5021               	movf	fillRectangle@x,w,c
  3233  00199A  ECCD  F011         	call	_setAddrWindow
  3234                           
  3235                           ;ST7735_TFT.c: 464: hi = color >> 8; lo = color;
  3236  00199E  501A               	movf	fillRectangle@color+1,w,c
  3237  0019A0  6E1F               	movwf	fillRectangle@hi,c
  3238  0019A2  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3239                           
  3240                           ;ST7735_TFT.c: 465: PORTCbits.RC5 = 1;
  3241  0019A6  8A82               	bsf	3970,5,c	;volatile
  3242                           
  3243                           ;ST7735_TFT.c: 466: PORTDbits.RD2 = 0;
  3244  0019A8  9483               	bcf	3971,2,c	;volatile
  3245                           
  3246                           ;ST7735_TFT.c: 468: for(y=h; y>0; y--) {
  3247  0019AA  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3248  0019AE                     l5309:
  3249  0019AE  5016               	movf	fillRectangle@y,w,c
  3250  0019B0  B4D8               	btfsc	status,2,c
  3251  0019B2  D013               	goto	l327
  3252  0019B4  D001               	goto	l326
  3253  0019B6  D011               	goto	l327
  3254  0019B8                     l326:
  3255                           
  3256                           ;ST7735_TFT.c: 469: for(x = w; x > 0; x--) {
  3257  0019B8  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3258  0019BC                     l5313:
  3259  0019BC  5021               	movf	fillRectangle@x,w,c
  3260  0019BE  B4D8               	btfsc	status,2,c
  3261  0019C0  D00A               	goto	l5323
  3262  0019C2  D001               	goto	l5317
  3263  0019C4  D008               	goto	l5323
  3264  0019C6                     l5317:
  3265                           
  3266                           ;ST7735_TFT.c: 470: spiwrite(hi);
  3267  0019C6  501F               	movf	fillRectangle@hi,w,c
  3268  0019C8  EC2A  F014         	call	_spiwrite
  3269                           
  3270                           ;ST7735_TFT.c: 471: spiwrite(lo);
  3271  0019CC  5020               	movf	fillRectangle@lo,w,c
  3272  0019CE  EC2A  F014         	call	_spiwrite
  3273  0019D2  0621               	decf	fillRectangle@x,f,c
  3274  0019D4  D7F3               	goto	l5313
  3275  0019D6                     l5323:
  3276  0019D6  0616               	decf	fillRectangle@y,f,c
  3277  0019D8  D7EA               	goto	l5309
  3278  0019DA                     l327:
  3279                           
  3280                           ;ST7735_TFT.c: 472: }
  3281                           ;ST7735_TFT.c: 473: }
  3282                           ;ST7735_TFT.c: 474: PORTDbits.RD2 = 1;
  3283  0019DA  8483               	bsf	3971,2,c	;volatile
  3284  0019DC                     l323:
  3285  0019DC  0012               	return		;funcret
  3286  0019DE                     __end_of_fillRectangle:
  3287                           	opt stack 0
  3288                           tblptru	equ	0xFF8
  3289                           tblptrh	equ	0xFF7
  3290                           tblptrl	equ	0xFF6
  3291                           tablat	equ	0xFF5
  3292                           postinc0	equ	0xFEE
  3293                           wreg	equ	0xFE8
  3294                           postdec1	equ	0xFE5
  3295                           fsr1l	equ	0xFE1
  3296                           status	equ	0xFD8
  3297                           
  3298 ;; *************** function _drawRect *****************
  3299 ;; Defined at:
  3300 ;;		line 636 in file "ST7735_TFT.c"
  3301 ;; Parameters:    Size  Location     Type
  3302 ;;  x               2   32[COMRAM] unsigned int 
  3303 ;;  y               2   34[COMRAM] unsigned int 
  3304 ;;  w               2   36[COMRAM] unsigned int 
  3305 ;;  h               2   38[COMRAM] unsigned int 
  3306 ;;  color           2   40[COMRAM] unsigned int 
  3307 ;; Auto vars:     Size  Location     Type
  3308 ;;		None
  3309 ;; Return value:  Size  Location     Type
  3310 ;;		None               void
  3311 ;; Registers used:
  3312 ;;		wreg, status,2, status,0, cstack
  3313 ;; Tracked objects:
  3314 ;;		On entry : 0/0
  3315 ;;		On exit  : 0/0
  3316 ;;		Unchanged: 0/0
  3317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3318 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3319 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3320 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3321 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3322 ;;Total ram usage:       11 bytes
  3323 ;; Hardware stack levels used:    1
  3324 ;; Hardware stack levels required when called:    6
  3325 ;; This function calls:
  3326 ;;		_drawFastHLine
  3327 ;;		_drawFastVLine
  3328 ;; This function is called by:
  3329 ;;		_Initialize_LCD_Screen
  3330 ;; This function uses a non-reentrant model
  3331 ;;
  3332                           
  3333                           	psect	text5
  3334  002174                     __ptext5:
  3335                           	opt stack 0
  3336  002174                     _drawRect:
  3337                           	opt stack 23
  3338                           
  3339                           ;ST7735_TFT.c: 638: drawFastHLine(x, y, w, color);
  3340                           
  3341                           ;incstack = 0
  3342  002174  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3343  002178  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3344  00217C  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3345  002180  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3346  002184  5021               	movf	drawRect@x,w,c
  3347  002186  EC49  F00F         	call	_drawFastHLine
  3348                           
  3349                           ;ST7735_TFT.c: 639: drawFastHLine(x, y + h - 1, w, color);
  3350  00218A  5023               	movf	drawRect@y,w,c
  3351  00218C  2427               	addwf	drawRect@h,w,c
  3352  00218E  6E2B               	movwf	??_drawRect& (0+255),c
  3353  002190  042B               	decf	??_drawRect,w,c
  3354  002192  6E16               	movwf	drawFastHLine@y,c
  3355  002194  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3356  002198  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3357  00219C  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3358  0021A0  5021               	movf	drawRect@x,w,c
  3359  0021A2  EC49  F00F         	call	_drawFastHLine
  3360                           
  3361                           ;ST7735_TFT.c: 640: drawFastVLine(x, y, h, color);
  3362  0021A6  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3363  0021AA  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3364  0021AE  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3365  0021B2  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3366  0021B6  5021               	movf	drawRect@x,w,c
  3367  0021B8  EC8D  F00F         	call	_drawFastVLine
  3368                           
  3369                           ;ST7735_TFT.c: 641: drawFastVLine(x + w - 1, y, h, color);
  3370  0021BC  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3371  0021C0  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3372  0021C4  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3373  0021C8  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3374  0021CC  5021               	movf	drawRect@x,w,c
  3375  0021CE  2425               	addwf	drawRect@w,w,c
  3376  0021D0  6E2B               	movwf	??_drawRect& (0+255),c
  3377  0021D2  042B               	decf	??_drawRect,w,c
  3378  0021D4  EC8D  F00F         	call	_drawFastVLine
  3379  0021D8  0012               	return		;funcret
  3380  0021DA                     __end_of_drawRect:
  3381                           	opt stack 0
  3382                           tblptru	equ	0xFF8
  3383                           tblptrh	equ	0xFF7
  3384                           tblptrl	equ	0xFF6
  3385                           tablat	equ	0xFF5
  3386                           postinc0	equ	0xFEE
  3387                           wreg	equ	0xFE8
  3388                           postdec1	equ	0xFE5
  3389                           fsr1l	equ	0xFE1
  3390                           status	equ	0xFD8
  3391                           
  3392 ;; *************** function _drawFastHLine *****************
  3393 ;; Defined at:
  3394 ;;		line 575 in file "ST7735_TFT.c"
  3395 ;; Parameters:    Size  Location     Type
  3396 ;;  x               1    wreg     unsigned char 
  3397 ;;  y               1   21[COMRAM] unsigned char 
  3398 ;;  w               1   22[COMRAM] unsigned char 
  3399 ;;  color           2   23[COMRAM] unsigned int 
  3400 ;; Auto vars:     Size  Location     Type
  3401 ;;  x               1   31[COMRAM] unsigned char 
  3402 ;;  lo              1   30[COMRAM] unsigned char 
  3403 ;;  hi              1   29[COMRAM] unsigned char 
  3404 ;; Return value:  Size  Location     Type
  3405 ;;		None               void
  3406 ;; Registers used:
  3407 ;;		wreg, status,2, status,0, cstack
  3408 ;; Tracked objects:
  3409 ;;		On entry : 0/0
  3410 ;;		On exit  : 0/0
  3411 ;;		Unchanged: 0/0
  3412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3413 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3414 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3415 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3416 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3417 ;;Total ram usage:       11 bytes
  3418 ;; Hardware stack levels used:    1
  3419 ;; Hardware stack levels required when called:    5
  3420 ;; This function calls:
  3421 ;;		_setAddrWindow
  3422 ;;		_spiwrite
  3423 ;; This function is called by:
  3424 ;;		_drawRect
  3425 ;; This function uses a non-reentrant model
  3426 ;;
  3427                           
  3428                           	psect	text6
  3429  001E92                     __ptext6:
  3430                           	opt stack 0
  3431  001E92                     _drawFastHLine:
  3432                           	opt stack 23
  3433                           
  3434                           ;incstack = 0
  3435                           ;drawFastHLine@x stored from wreg
  3436  001E92  6E20               	movwf	drawFastHLine@x,c
  3437                           
  3438                           ;ST7735_TFT.c: 577: unsigned char hi, lo;
  3439                           ;ST7735_TFT.c: 578: if((x >= 128) || (y >= 160))
  3440  001E94  0E80               	movlw	128
  3441  001E96  6020               	cpfslt	drawFastHLine@x,c
  3442  001E98  D03F               	goto	l368
  3443  001E9A  0E9F               	movlw	159
  3444  001E9C  6416               	cpfsgt	drawFastHLine@y,c
  3445  001E9E  D001               	goto	l5331
  3446                           
  3447                           ;ST7735_TFT.c: 579: return;
  3448  001EA0  D03B               	goto	l368
  3449  001EA2                     l5331:
  3450                           
  3451                           ;ST7735_TFT.c: 580: if((x + w - 1) >= 128)
  3452  001EA2  0EFF               	movlw	255
  3453  001EA4  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3454  001EA6  0EFF               	movlw	255
  3455  001EA8  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3456  001EAA  5017               	movf	drawFastHLine@w,w,c
  3457  001EAC  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3458  001EB0  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3459  001EB2  261C               	addwf	??_drawFastHLine+2,f,c
  3460  001EB4  0E00               	movlw	0
  3461  001EB6  221D               	addwfc	??_drawFastHLine+3,f,c
  3462  001EB8  501A               	movf	??_drawFastHLine,w,c
  3463  001EBA  261C               	addwf	??_drawFastHLine+2,f,c
  3464  001EBC  501B               	movf	??_drawFastHLine+1,w,c
  3465  001EBE  221D               	addwfc	??_drawFastHLine+3,f,c
  3466  001EC0  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3467  001EC2  D00B               	goto	l5335
  3468  001EC4  501D               	movf	??_drawFastHLine+3,w,c
  3469  001EC6  E104               	bnz	u4020
  3470  001EC8  0E80               	movlw	128
  3471  001ECA  5C1C               	subwf	??_drawFastHLine+2,w,c
  3472  001ECC  A0D8               	btfss	status,0,c
  3473  001ECE  D005               	goto	l5335
  3474  001ED0                     u4020:
  3475                           
  3476                           ;ST7735_TFT.c: 581: w = 128 - x;
  3477  001ED0  5020               	movf	drawFastHLine@x,w,c
  3478  001ED2  0800               	sublw	0
  3479  001ED4  0F80               	addlw	128
  3480  001ED6  6E17               	movwf	drawFastHLine@w,c
  3481  001ED8  D000               	goto	l5335
  3482  001EDA                     l5335:
  3483                           
  3484                           ;ST7735_TFT.c: 582: hi = color >> 8; lo = color;
  3485  001EDA  5019               	movf	drawFastHLine@color+1,w,c
  3486  001EDC  6E1E               	movwf	drawFastHLine@hi,c
  3487  001EDE  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3488                           
  3489                           ;ST7735_TFT.c: 583: setAddrWindow(x, y, x + w - 1, y);
  3490  001EE2  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3491  001EE6  5020               	movf	drawFastHLine@x,w,c
  3492  001EE8  2417               	addwf	drawFastHLine@w,w,c
  3493  001EEA  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3494  001EEC  041A               	decf	??_drawFastHLine,w,c
  3495  001EEE  6E13               	movwf	setAddrWindow@x1,c
  3496  001EF0  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3497  001EF4  5020               	movf	drawFastHLine@x,w,c
  3498  001EF6  ECCD  F011         	call	_setAddrWindow
  3499                           
  3500                           ;ST7735_TFT.c: 584: PORTCbits.RC5 = 1;
  3501  001EFA  8A82               	bsf	3970,5,c	;volatile
  3502                           
  3503                           ;ST7735_TFT.c: 585: PORTDbits.RD2 = 0;
  3504  001EFC  9483               	bcf	3971,2,c	;volatile
  3505                           
  3506                           ;ST7735_TFT.c: 587: while (w--) {
  3507  001EFE  D007               	goto	l5347
  3508  001F00                     l5345:
  3509                           
  3510                           ;ST7735_TFT.c: 588: spiwrite(hi);
  3511  001F00  501E               	movf	drawFastHLine@hi,w,c
  3512  001F02  EC2A  F014         	call	_spiwrite
  3513                           
  3514                           ;ST7735_TFT.c: 589: spiwrite(lo);
  3515  001F06  501F               	movf	drawFastHLine@lo,w,c
  3516  001F08  EC2A  F014         	call	_spiwrite
  3517  001F0C  D000               	goto	l5347
  3518  001F0E                     l5347:
  3519  001F0E  0617               	decf	drawFastHLine@w,f,c
  3520  001F10  2817               	incf	drawFastHLine@w,w,c
  3521  001F12  A4D8               	btfss	status,2,c
  3522  001F14  D7F5               	goto	l5345
  3523                           
  3524                           ;ST7735_TFT.c: 590: }
  3525                           ;ST7735_TFT.c: 591: PORTDbits.RD2 = 1;
  3526  001F16  8483               	bsf	3971,2,c	;volatile
  3527  001F18                     l368:
  3528  001F18  0012               	return		;funcret
  3529  001F1A                     __end_of_drawFastHLine:
  3530                           	opt stack 0
  3531                           tblptru	equ	0xFF8
  3532                           tblptrh	equ	0xFF7
  3533                           tblptrl	equ	0xFF6
  3534                           tablat	equ	0xFF5
  3535                           postinc0	equ	0xFEE
  3536                           wreg	equ	0xFE8
  3537                           postdec1	equ	0xFE5
  3538                           fsr1l	equ	0xFE1
  3539                           status	equ	0xFD8
  3540                           
  3541 ;; *************** function _TFT_GreenTab_Initialize *****************
  3542 ;; Defined at:
  3543 ;;		line 595 in file "ST7735_TFT.c"
  3544 ;; Parameters:    Size  Location     Type
  3545 ;;		None
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;		None               void
  3550 ;; Registers used:
  3551 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3557 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;Total ram usage:        0 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    5
  3564 ;; This function calls:
  3565 ;;		_Rcmd1
  3566 ;;		_Rcmd2red
  3567 ;;		_Rcmd3
  3568 ;;		_write_command
  3569 ;;		_write_data
  3570 ;; This function is called by:
  3571 ;;		_Initialize_LCD_Screen
  3572 ;; This function uses a non-reentrant model
  3573 ;;
  3574                           
  3575                           	psect	text7
  3576  002740                     __ptext7:
  3577                           	opt stack 0
  3578  002740                     _TFT_GreenTab_Initialize:
  3579                           	opt stack 24
  3580                           
  3581                           ;ST7735_TFT.c: 597: PORTDbits.RD2 = 1;
  3582                           
  3583                           ;incstack = 0
  3584  002740  8483               	bsf	3971,2,c	;volatile
  3585                           
  3586                           ;ST7735_TFT.c: 598: PORTCbits.RC5 = 0;
  3587  002742  9A82               	bcf	3970,5,c	;volatile
  3588                           
  3589                           ;ST7735_TFT.c: 600: SSPSTAT=0x80;
  3590  002744  0E80               	movlw	128
  3591  002746  6EC7               	movwf	4039,c	;volatile
  3592                           
  3593                           ;ST7735_TFT.c: 601: SSPCON1=0x30;
  3594  002748  0E30               	movlw	48
  3595  00274A  6EC6               	movwf	4038,c	;volatile
  3596                           
  3597                           ;ST7735_TFT.c: 604: Rcmd1();
  3598  00274C  EC9B  F009         	call	_Rcmd1	;wreg free
  3599                           
  3600                           ;ST7735_TFT.c: 605: Rcmd2red();
  3601  002750  ECA9  F012         	call	_Rcmd2red	;wreg free
  3602                           
  3603                           ;ST7735_TFT.c: 606: Rcmd3();
  3604  002754  EC24  F00B         	call	_Rcmd3	;wreg free
  3605                           
  3606                           ;ST7735_TFT.c: 607: write_command(0x36);
  3607  002758  0E36               	movlw	54
  3608  00275A  EC4E  F014         	call	_write_command
  3609                           
  3610                           ;ST7735_TFT.c: 608: write_data(0xC0);
  3611  00275E  0EC0               	movlw	192
  3612  002760  EC46  F014         	call	_write_data
  3613                           
  3614                           ;ST7735_TFT.c: 609: _tft_type = 1;
  3615  002764  0E01               	movlw	1
  3616  002766  6E58               	movwf	__tft_type,c
  3617  002768  0012               	return		;funcret
  3618  00276A                     __end_of_TFT_GreenTab_Initialize:
  3619                           	opt stack 0
  3620                           tblptru	equ	0xFF8
  3621                           tblptrh	equ	0xFF7
  3622                           tblptrl	equ	0xFF6
  3623                           tablat	equ	0xFF5
  3624                           postinc0	equ	0xFEE
  3625                           wreg	equ	0xFE8
  3626                           postdec1	equ	0xFE5
  3627                           fsr1l	equ	0xFE1
  3628                           status	equ	0xFD8
  3629                           
  3630 ;; *************** function _Rcmd3 *****************
  3631 ;; Defined at:
  3632 ;;		line 289 in file "ST7735_TFT.c"
  3633 ;; Parameters:    Size  Location     Type
  3634 ;;		None
  3635 ;; Auto vars:     Size  Location     Type
  3636 ;;		None
  3637 ;; Return value:  Size  Location     Type
  3638 ;;		None               void
  3639 ;; Registers used:
  3640 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3641 ;; Tracked objects:
  3642 ;;		On entry : 0/0
  3643 ;;		On exit  : 0/0
  3644 ;;		Unchanged: 0/0
  3645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3650 ;;Total ram usage:        0 bytes
  3651 ;; Hardware stack levels used:    1
  3652 ;; Hardware stack levels required when called:    4
  3653 ;; This function calls:
  3654 ;;		_delay_ms
  3655 ;;		_write_command
  3656 ;;		_write_data
  3657 ;; This function is called by:
  3658 ;;		_TFT_GreenTab_Initialize
  3659 ;;		_TFT_BlackTab_Initialize
  3660 ;; This function uses a non-reentrant model
  3661 ;;
  3662                           
  3663                           	psect	text8
  3664  001648                     __ptext8:
  3665                           	opt stack 0
  3666  001648                     _Rcmd3:
  3667                           	opt stack 24
  3668                           
  3669                           ;ST7735_TFT.c: 291: write_command(0xE0);
  3670                           
  3671                           ;incstack = 0
  3672  001648  0EE0               	movlw	224
  3673  00164A  EC4E  F014         	call	_write_command
  3674                           
  3675                           ;ST7735_TFT.c: 292: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3676  00164E  0E02               	movlw	2
  3677  001650  EC46  F014         	call	_write_data
  3678  001654  0E1C               	movlw	28
  3679  001656  EC46  F014         	call	_write_data
  3680  00165A  0E07               	movlw	7
  3681  00165C  EC46  F014         	call	_write_data
  3682  001660  0E12               	movlw	18
  3683  001662  EC46  F014         	call	_write_data
  3684                           
  3685                           ;ST7735_TFT.c: 293: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3686  001666  0E37               	movlw	55
  3687  001668  EC46  F014         	call	_write_data
  3688  00166C  0E32               	movlw	50
  3689  00166E  EC46  F014         	call	_write_data
  3690  001672  0E29               	movlw	41
  3691  001674  EC46  F014         	call	_write_data
  3692  001678  0E2D               	movlw	45
  3693  00167A  EC46  F014         	call	_write_data
  3694                           
  3695                           ;ST7735_TFT.c: 294: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3696  00167E  0E29               	movlw	41
  3697  001680  EC46  F014         	call	_write_data
  3698  001684  0E25               	movlw	37
  3699  001686  EC46  F014         	call	_write_data
  3700  00168A  0E2B               	movlw	43
  3701  00168C  EC46  F014         	call	_write_data
  3702  001690  0E39               	movlw	57
  3703  001692  EC46  F014         	call	_write_data
  3704                           
  3705                           ;ST7735_TFT.c: 295: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3706  001696  0E00               	movlw	0
  3707  001698  EC46  F014         	call	_write_data
  3708  00169C  0E01               	movlw	1
  3709  00169E  EC46  F014         	call	_write_data
  3710  0016A2  0E03               	movlw	3
  3711  0016A4  EC46  F014         	call	_write_data
  3712  0016A8  0E10               	movlw	16
  3713  0016AA  EC46  F014         	call	_write_data
  3714                           
  3715                           ;ST7735_TFT.c: 296: write_command(0xE1);
  3716  0016AE  0EE1               	movlw	225
  3717  0016B0  EC4E  F014         	call	_write_command
  3718                           
  3719                           ;ST7735_TFT.c: 297: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3720  0016B4  0E03               	movlw	3
  3721  0016B6  EC46  F014         	call	_write_data
  3722  0016BA  0E1D               	movlw	29
  3723  0016BC  EC46  F014         	call	_write_data
  3724  0016C0  0E07               	movlw	7
  3725  0016C2  EC46  F014         	call	_write_data
  3726  0016C6  0E06               	movlw	6
  3727  0016C8  EC46  F014         	call	_write_data
  3728                           
  3729                           ;ST7735_TFT.c: 298: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3730  0016CC  0E2E               	movlw	46
  3731  0016CE  EC46  F014         	call	_write_data
  3732  0016D2  0E2C               	movlw	44
  3733  0016D4  EC46  F014         	call	_write_data
  3734  0016D8  0E29               	movlw	41
  3735  0016DA  EC46  F014         	call	_write_data
  3736  0016DE  0E2D               	movlw	45
  3737  0016E0  EC46  F014         	call	_write_data
  3738                           
  3739                           ;ST7735_TFT.c: 299: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3740  0016E4  0E2E               	movlw	46
  3741  0016E6  EC46  F014         	call	_write_data
  3742  0016EA  0E2E               	movlw	46
  3743  0016EC  EC46  F014         	call	_write_data
  3744  0016F0  0E37               	movlw	55
  3745  0016F2  EC46  F014         	call	_write_data
  3746  0016F6  0E3F               	movlw	63
  3747  0016F8  EC46  F014         	call	_write_data
  3748                           
  3749                           ;ST7735_TFT.c: 300: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3750  0016FC  0E00               	movlw	0
  3751  0016FE  EC46  F014         	call	_write_data
  3752  001702  0E00               	movlw	0
  3753  001704  EC46  F014         	call	_write_data
  3754  001708  0E02               	movlw	2
  3755  00170A  EC46  F014         	call	_write_data
  3756  00170E  0E10               	movlw	16
  3757  001710  EC46  F014         	call	_write_data
  3758                           
  3759                           ;ST7735_TFT.c: 301: write_command(0x13);
  3760  001714  0E13               	movlw	19
  3761  001716  EC4E  F014         	call	_write_command
  3762                           
  3763                           ;ST7735_TFT.c: 302: delay_ms(10);
  3764  00171A  0E00               	movlw	0
  3765  00171C  6E16               	movwf	delay_ms@ms+1,c
  3766  00171E  0E0A               	movlw	10
  3767  001720  6E15               	movwf	delay_ms@ms,c
  3768  001722  EC7B  F011         	call	_delay_ms	;wreg free
  3769                           
  3770                           ;ST7735_TFT.c: 303: write_command(0x29);
  3771  001726  0E29               	movlw	41
  3772  001728  EC4E  F014         	call	_write_command
  3773                           
  3774                           ;ST7735_TFT.c: 304: delay_ms(100);
  3775  00172C  0E00               	movlw	0
  3776  00172E  6E16               	movwf	delay_ms@ms+1,c
  3777  001730  0E64               	movlw	100
  3778  001732  6E15               	movwf	delay_ms@ms,c
  3779  001734  EC7B  F011         	call	_delay_ms	;wreg free
  3780  001738  0012               	return		;funcret
  3781  00173A                     __end_of_Rcmd3:
  3782                           	opt stack 0
  3783                           tblptru	equ	0xFF8
  3784                           tblptrh	equ	0xFF7
  3785                           tblptrl	equ	0xFF6
  3786                           tablat	equ	0xFF5
  3787                           postinc0	equ	0xFEE
  3788                           wreg	equ	0xFE8
  3789                           postdec1	equ	0xFE5
  3790                           fsr1l	equ	0xFE1
  3791                           status	equ	0xFD8
  3792                           
  3793 ;; *************** function _Rcmd2red *****************
  3794 ;; Defined at:
  3795 ;;		line 275 in file "ST7735_TFT.c"
  3796 ;; Parameters:    Size  Location     Type
  3797 ;;		None
  3798 ;; Auto vars:     Size  Location     Type
  3799 ;;		None
  3800 ;; Return value:  Size  Location     Type
  3801 ;;		None               void
  3802 ;; Registers used:
  3803 ;;		wreg, status,2, cstack
  3804 ;; Tracked objects:
  3805 ;;		On entry : 0/0
  3806 ;;		On exit  : 0/0
  3807 ;;		Unchanged: 0/0
  3808 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3809 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3810 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3811 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3812 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3813 ;;Total ram usage:        0 bytes
  3814 ;; Hardware stack levels used:    1
  3815 ;; Hardware stack levels required when called:    4
  3816 ;; This function calls:
  3817 ;;		_write_command
  3818 ;;		_write_data
  3819 ;; This function is called by:
  3820 ;;		_TFT_GreenTab_Initialize
  3821 ;; This function uses a non-reentrant model
  3822 ;;
  3823                           
  3824                           	psect	text9
  3825  002552                     __ptext9:
  3826                           	opt stack 0
  3827  002552                     _Rcmd2red:
  3828                           	opt stack 24
  3829                           
  3830                           ;ST7735_TFT.c: 277: write_command(0x2A);
  3831                           
  3832                           ;incstack = 0
  3833  002552  0E2A               	movlw	42
  3834  002554  EC4E  F014         	call	_write_command
  3835                           
  3836                           ;ST7735_TFT.c: 278: write_data(0x00);
  3837  002558  0E00               	movlw	0
  3838  00255A  EC46  F014         	call	_write_data
  3839                           
  3840                           ;ST7735_TFT.c: 279: write_data(0x00);
  3841  00255E  0E00               	movlw	0
  3842  002560  EC46  F014         	call	_write_data
  3843                           
  3844                           ;ST7735_TFT.c: 280: write_data(0x00);
  3845  002564  0E00               	movlw	0
  3846  002566  EC46  F014         	call	_write_data
  3847                           
  3848                           ;ST7735_TFT.c: 281: write_data(0x7F);
  3849  00256A  0E7F               	movlw	127
  3850  00256C  EC46  F014         	call	_write_data
  3851                           
  3852                           ;ST7735_TFT.c: 282: write_command(0x2B);
  3853  002570  0E2B               	movlw	43
  3854  002572  EC4E  F014         	call	_write_command
  3855                           
  3856                           ;ST7735_TFT.c: 283: write_data(0x00);
  3857  002576  0E00               	movlw	0
  3858  002578  EC46  F014         	call	_write_data
  3859                           
  3860                           ;ST7735_TFT.c: 284: write_data(0x00);
  3861  00257C  0E00               	movlw	0
  3862  00257E  EC46  F014         	call	_write_data
  3863                           
  3864                           ;ST7735_TFT.c: 285: write_data(0x00);
  3865  002582  0E00               	movlw	0
  3866  002584  EC46  F014         	call	_write_data
  3867                           
  3868                           ;ST7735_TFT.c: 286: write_data(0x9F);
  3869  002588  0E9F               	movlw	159
  3870  00258A  EC46  F014         	call	_write_data
  3871  00258E  0012               	return		;funcret
  3872  002590                     __end_of_Rcmd2red:
  3873                           	opt stack 0
  3874                           tblptru	equ	0xFF8
  3875                           tblptrh	equ	0xFF7
  3876                           tblptrl	equ	0xFF6
  3877                           tablat	equ	0xFF5
  3878                           postinc0	equ	0xFEE
  3879                           wreg	equ	0xFE8
  3880                           postdec1	equ	0xFE5
  3881                           fsr1l	equ	0xFE1
  3882                           status	equ	0xFD8
  3883                           
  3884 ;; *************** function _Rcmd1 *****************
  3885 ;; Defined at:
  3886 ;;		line 228 in file "ST7735_TFT.c"
  3887 ;; Parameters:    Size  Location     Type
  3888 ;;		None
  3889 ;; Auto vars:     Size  Location     Type
  3890 ;;		None
  3891 ;; Return value:  Size  Location     Type
  3892 ;;		None               void
  3893 ;; Registers used:
  3894 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3895 ;; Tracked objects:
  3896 ;;		On entry : 0/0
  3897 ;;		On exit  : 0/0
  3898 ;;		Unchanged: 0/0
  3899 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3900 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3901 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3902 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3903 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3904 ;;Total ram usage:        0 bytes
  3905 ;; Hardware stack levels used:    1
  3906 ;; Hardware stack levels required when called:    4
  3907 ;; This function calls:
  3908 ;;		_delay_ms
  3909 ;;		_write_command
  3910 ;;		_write_data
  3911 ;; This function is called by:
  3912 ;;		_TFT_GreenTab_Initialize
  3913 ;;		_TFT_BlackTab_Initialize
  3914 ;; This function uses a non-reentrant model
  3915 ;;
  3916                           
  3917                           	psect	text10
  3918  001336                     __ptext10:
  3919                           	opt stack 0
  3920  001336                     _Rcmd1:
  3921                           	opt stack 24
  3922                           
  3923                           ;ST7735_TFT.c: 230: write_command(0x01);
  3924                           
  3925                           ;incstack = 0
  3926  001336  0E01               	movlw	1
  3927  001338  EC4E  F014         	call	_write_command
  3928                           
  3929                           ;ST7735_TFT.c: 231: delay_ms(150);
  3930  00133C  0E00               	movlw	0
  3931  00133E  6E16               	movwf	delay_ms@ms+1,c
  3932  001340  0E96               	movlw	150
  3933  001342  6E15               	movwf	delay_ms@ms,c
  3934  001344  EC7B  F011         	call	_delay_ms	;wreg free
  3935                           
  3936                           ;ST7735_TFT.c: 232: write_command(0x11);
  3937  001348  0E11               	movlw	17
  3938  00134A  EC4E  F014         	call	_write_command
  3939                           
  3940                           ;ST7735_TFT.c: 233: delay_ms(500);
  3941  00134E  0E01               	movlw	1
  3942  001350  6E16               	movwf	delay_ms@ms+1,c
  3943  001352  0EF4               	movlw	244
  3944  001354  6E15               	movwf	delay_ms@ms,c
  3945  001356  EC7B  F011         	call	_delay_ms	;wreg free
  3946                           
  3947                           ;ST7735_TFT.c: 234: write_command(0xB1);
  3948  00135A  0EB1               	movlw	177
  3949  00135C  EC4E  F014         	call	_write_command
  3950                           
  3951                           ;ST7735_TFT.c: 235: write_data(0x01);
  3952  001360  0E01               	movlw	1
  3953  001362  EC46  F014         	call	_write_data
  3954                           
  3955                           ;ST7735_TFT.c: 236: write_data(0x2C);
  3956  001366  0E2C               	movlw	44
  3957  001368  EC46  F014         	call	_write_data
  3958                           
  3959                           ;ST7735_TFT.c: 237: write_data(0x2D);
  3960  00136C  0E2D               	movlw	45
  3961  00136E  EC46  F014         	call	_write_data
  3962                           
  3963                           ;ST7735_TFT.c: 238: write_command(0xB2);
  3964  001372  0EB2               	movlw	178
  3965  001374  EC4E  F014         	call	_write_command
  3966                           
  3967                           ;ST7735_TFT.c: 239: write_data(0x01);
  3968  001378  0E01               	movlw	1
  3969  00137A  EC46  F014         	call	_write_data
  3970                           
  3971                           ;ST7735_TFT.c: 240: write_data(0x2C);
  3972  00137E  0E2C               	movlw	44
  3973  001380  EC46  F014         	call	_write_data
  3974                           
  3975                           ;ST7735_TFT.c: 241: write_data(0x2D);
  3976  001384  0E2D               	movlw	45
  3977  001386  EC46  F014         	call	_write_data
  3978                           
  3979                           ;ST7735_TFT.c: 242: write_command(0xB3);
  3980  00138A  0EB3               	movlw	179
  3981  00138C  EC4E  F014         	call	_write_command
  3982                           
  3983                           ;ST7735_TFT.c: 243: write_data(0x01);
  3984  001390  0E01               	movlw	1
  3985  001392  EC46  F014         	call	_write_data
  3986                           
  3987                           ;ST7735_TFT.c: 244: write_data(0x2C);
  3988  001396  0E2C               	movlw	44
  3989  001398  EC46  F014         	call	_write_data
  3990                           
  3991                           ;ST7735_TFT.c: 245: write_data(0x2D);
  3992  00139C  0E2D               	movlw	45
  3993  00139E  EC46  F014         	call	_write_data
  3994                           
  3995                           ;ST7735_TFT.c: 246: write_data(0x01);
  3996  0013A2  0E01               	movlw	1
  3997  0013A4  EC46  F014         	call	_write_data
  3998                           
  3999                           ;ST7735_TFT.c: 247: write_data(0x2C);
  4000  0013A8  0E2C               	movlw	44
  4001  0013AA  EC46  F014         	call	_write_data
  4002                           
  4003                           ;ST7735_TFT.c: 248: write_data(0x2D);
  4004  0013AE  0E2D               	movlw	45
  4005  0013B0  EC46  F014         	call	_write_data
  4006                           
  4007                           ;ST7735_TFT.c: 249: write_command(0xB4);
  4008  0013B4  0EB4               	movlw	180
  4009  0013B6  EC4E  F014         	call	_write_command
  4010                           
  4011                           ;ST7735_TFT.c: 250: write_data(0x07);
  4012  0013BA  0E07               	movlw	7
  4013  0013BC  EC46  F014         	call	_write_data
  4014                           
  4015                           ;ST7735_TFT.c: 251: write_command(0xC0);
  4016  0013C0  0EC0               	movlw	192
  4017  0013C2  EC4E  F014         	call	_write_command
  4018                           
  4019                           ;ST7735_TFT.c: 252: write_data(0xA2);
  4020  0013C6  0EA2               	movlw	162
  4021  0013C8  EC46  F014         	call	_write_data
  4022                           
  4023                           ;ST7735_TFT.c: 253: write_data(0x02);
  4024  0013CC  0E02               	movlw	2
  4025  0013CE  EC46  F014         	call	_write_data
  4026                           
  4027                           ;ST7735_TFT.c: 254: write_data(0x84);
  4028  0013D2  0E84               	movlw	132
  4029  0013D4  EC46  F014         	call	_write_data
  4030                           
  4031                           ;ST7735_TFT.c: 255: write_command(0xC1);
  4032  0013D8  0EC1               	movlw	193
  4033  0013DA  EC4E  F014         	call	_write_command
  4034                           
  4035                           ;ST7735_TFT.c: 256: write_data(0xC5);
  4036  0013DE  0EC5               	movlw	197
  4037  0013E0  EC46  F014         	call	_write_data
  4038                           
  4039                           ;ST7735_TFT.c: 257: write_command(0xC2);
  4040  0013E4  0EC2               	movlw	194
  4041  0013E6  EC4E  F014         	call	_write_command
  4042                           
  4043                           ;ST7735_TFT.c: 258: write_data(0x0A);
  4044  0013EA  0E0A               	movlw	10
  4045  0013EC  EC46  F014         	call	_write_data
  4046                           
  4047                           ;ST7735_TFT.c: 259: write_data(0x00);
  4048  0013F0  0E00               	movlw	0
  4049  0013F2  EC46  F014         	call	_write_data
  4050                           
  4051                           ;ST7735_TFT.c: 260: write_command(0xC3);
  4052  0013F6  0EC3               	movlw	195
  4053  0013F8  EC4E  F014         	call	_write_command
  4054                           
  4055                           ;ST7735_TFT.c: 261: write_data(0x8A);
  4056  0013FC  0E8A               	movlw	138
  4057  0013FE  EC46  F014         	call	_write_data
  4058                           
  4059                           ;ST7735_TFT.c: 262: write_data(0x2A);
  4060  001402  0E2A               	movlw	42
  4061  001404  EC46  F014         	call	_write_data
  4062                           
  4063                           ;ST7735_TFT.c: 263: write_command(0xC4);
  4064  001408  0EC4               	movlw	196
  4065  00140A  EC4E  F014         	call	_write_command
  4066                           
  4067                           ;ST7735_TFT.c: 264: write_data(0x8A);
  4068  00140E  0E8A               	movlw	138
  4069  001410  EC46  F014         	call	_write_data
  4070                           
  4071                           ;ST7735_TFT.c: 265: write_data(0xEE);
  4072  001414  0EEE               	movlw	238
  4073  001416  EC46  F014         	call	_write_data
  4074                           
  4075                           ;ST7735_TFT.c: 266: write_command(0xC5);
  4076  00141A  0EC5               	movlw	197
  4077  00141C  EC4E  F014         	call	_write_command
  4078                           
  4079                           ;ST7735_TFT.c: 267: write_data(0x0E);
  4080  001420  0E0E               	movlw	14
  4081  001422  EC46  F014         	call	_write_data
  4082                           
  4083                           ;ST7735_TFT.c: 268: write_command(0x20);
  4084  001426  0E20               	movlw	32
  4085  001428  EC4E  F014         	call	_write_command
  4086                           
  4087                           ;ST7735_TFT.c: 269: write_command(0x36);
  4088  00142C  0E36               	movlw	54
  4089  00142E  EC4E  F014         	call	_write_command
  4090                           
  4091                           ;ST7735_TFT.c: 270: write_data(0xC8);
  4092  001432  0EC8               	movlw	200
  4093  001434  EC46  F014         	call	_write_data
  4094                           
  4095                           ;ST7735_TFT.c: 271: write_command(0x3A);
  4096  001438  0E3A               	movlw	58
  4097  00143A  EC4E  F014         	call	_write_command
  4098                           
  4099                           ;ST7735_TFT.c: 272: write_data(0x05);
  4100  00143E  0E05               	movlw	5
  4101  001440  EC46  F014         	call	_write_data
  4102  001444  0012               	return		;funcret
  4103  001446                     __end_of_Rcmd1:
  4104                           	opt stack 0
  4105                           tblptru	equ	0xFF8
  4106                           tblptrh	equ	0xFF7
  4107                           tblptrl	equ	0xFF6
  4108                           tablat	equ	0xFF5
  4109                           postinc0	equ	0xFEE
  4110                           wreg	equ	0xFE8
  4111                           postdec1	equ	0xFE5
  4112                           fsr1l	equ	0xFE1
  4113                           status	equ	0xFD8
  4114                           
  4115 ;; *************** function _LCD_Reset *****************
  4116 ;; Defined at:
  4117 ;;		line 164 in file "ST7735_TFT.c"
  4118 ;; Parameters:    Size  Location     Type
  4119 ;;		None
  4120 ;; Auto vars:     Size  Location     Type
  4121 ;;		None
  4122 ;; Return value:  Size  Location     Type
  4123 ;;		None               void
  4124 ;; Registers used:
  4125 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4126 ;; Tracked objects:
  4127 ;;		On entry : 0/0
  4128 ;;		On exit  : 0/0
  4129 ;;		Unchanged: 0/0
  4130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4132 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4134 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4135 ;;Total ram usage:        0 bytes
  4136 ;; Hardware stack levels used:    1
  4137 ;; Hardware stack levels required when called:    4
  4138 ;; This function calls:
  4139 ;;		_delay_ms
  4140 ;; This function is called by:
  4141 ;;		_Initialize_LCD_Screen
  4142 ;; This function uses a non-reentrant model
  4143 ;;
  4144                           
  4145                           	psect	text11
  4146  002868                     __ptext11:
  4147                           	opt stack 0
  4148  002868                     _LCD_Reset:
  4149                           	opt stack 25
  4150                           
  4151                           ;ST7735_TFT.c: 166: PORTDbits.RD5 = 0;
  4152                           
  4153                           ;incstack = 0
  4154  002868  9A83               	bcf	3971,5,c	;volatile
  4155                           
  4156                           ;ST7735_TFT.c: 167: delay_ms(100);
  4157  00286A  0E00               	movlw	0
  4158  00286C  6E16               	movwf	delay_ms@ms+1,c
  4159  00286E  0E64               	movlw	100
  4160  002870  6E15               	movwf	delay_ms@ms,c
  4161  002872  EC7B  F011         	call	_delay_ms	;wreg free
  4162                           
  4163                           ;ST7735_TFT.c: 168: PORTDbits.RD5 = 1;
  4164  002876  8A83               	bsf	3971,5,c	;volatile
  4165  002878  0012               	return		;funcret
  4166  00287A                     __end_of_LCD_Reset:
  4167                           	opt stack 0
  4168                           tblptru	equ	0xFF8
  4169                           tblptrh	equ	0xFF7
  4170                           tblptrl	equ	0xFF6
  4171                           tablat	equ	0xFF5
  4172                           postinc0	equ	0xFEE
  4173                           wreg	equ	0xFE8
  4174                           postdec1	equ	0xFE5
  4175                           fsr1l	equ	0xFE1
  4176                           status	equ	0xFD8
  4177                           
  4178 ;; *************** function _delay_ms *****************
  4179 ;; Defined at:
  4180 ;;		line 11 in file "ST7735_TFT.c"
  4181 ;; Parameters:    Size  Location     Type
  4182 ;;  ms              2   20[COMRAM] int 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  count           2   24[COMRAM] int 
  4185 ;; Return value:  Size  Location     Type
  4186 ;;		None               void
  4187 ;; Registers used:
  4188 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4189 ;; Tracked objects:
  4190 ;;		On entry : 0/0
  4191 ;;		On exit  : 0/0
  4192 ;;		Unchanged: 0/0
  4193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4194 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4195 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4196 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;Total ram usage:        6 bytes
  4199 ;; Hardware stack levels used:    1
  4200 ;; Hardware stack levels required when called:    3
  4201 ;; This function calls:
  4202 ;;		___wmul
  4203 ;; This function is called by:
  4204 ;;		_LCD_Reset
  4205 ;;		_Rcmd1
  4206 ;;		_Rcmd3
  4207 ;;		_Bcmd
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text12
  4212  0022F6                     __ptext12:
  4213                           	opt stack 0
  4214  0022F6                     _delay_ms:
  4215                           	opt stack 24
  4216                           
  4217                           ;ST7735_TFT.c: 17: int count;
  4218                           ;ST7735_TFT.c: 18: count = 8000000/4000/8 * ms;
  4219                           
  4220                           ;incstack = 0
  4221  0022F6  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4222  0022FA  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4223  0022FE  0E00               	movlw	0
  4224  002300  6E12               	movwf	___wmul@multiplicand+1,c
  4225  002302  0EFA               	movlw	250
  4226  002304  6E11               	movwf	___wmul@multiplicand,c
  4227  002306  ECB5  F013         	call	___wmul	;wreg free
  4228  00230A  C00F  F019         	movff	?___wmul,delay_ms@count
  4229  00230E  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4230                           
  4231                           ;ST7735_TFT.c: 19: count = (0xffff - count);
  4232  002312  C019  F017         	movff	delay_ms@count,??_delay_ms
  4233  002316  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4234  00231A  1E17               	comf	??_delay_ms,f,c
  4235  00231C  1E18               	comf	??_delay_ms+1,f,c
  4236  00231E  4A17               	infsnz	??_delay_ms,f,c
  4237  002320  2A18               	incf	??_delay_ms+1,f,c
  4238  002322  0EFF               	movlw	255
  4239  002324  2417               	addwf	??_delay_ms,w,c
  4240  002326  6E19               	movwf	delay_ms@count,c
  4241  002328  0EFF               	movlw	255
  4242  00232A  2018               	addwfc	??_delay_ms+1,w,c
  4243  00232C  6E1A               	movwf	delay_ms@count+1,c
  4244                           
  4245                           ;ST7735_TFT.c: 21: T3CON = 0xb8;
  4246  00232E  0EB8               	movlw	184
  4247  002330  6EB1               	movwf	4017,c	;volatile
  4248                           
  4249                           ;ST7735_TFT.c: 23: TMR3L = count & 0x00ff;
  4250  002332  C019  FFB2         	movff	delay_ms@count,4018	;volatile
  4251                           
  4252                           ;ST7735_TFT.c: 24: TMR3H = count >> 8;
  4253  002336  501A               	movf	delay_ms@count+1,w,c
  4254  002338  6EB3               	movwf	4019,c	;volatile
  4255                           
  4256                           ;ST7735_TFT.c: 26: PIR2bits.TMR3IF = 0;
  4257  00233A  92A1               	bcf	4001,1,c	;volatile
  4258                           
  4259                           ;ST7735_TFT.c: 27: T3CONbits.TMR3ON = 1;
  4260  00233C  80B1               	bsf	4017,0,c	;volatile
  4261                           
  4262                           ;ST7735_TFT.c: 29: while (PIR2bits.TMR3IF == 0);
  4263  00233E  D000               	goto	l210
  4264  002340                     l210:
  4265  002340  A2A1               	btfss	4001,1,c	;volatile
  4266  002342  D7FE               	goto	l210
  4267                           
  4268                           ;ST7735_TFT.c: 30: T3CONbits.TMR3ON = 0;
  4269  002344  90B1               	bcf	4017,0,c	;volatile
  4270  002346  0012               	return		;funcret
  4271  002348                     __end_of_delay_ms:
  4272                           	opt stack 0
  4273                           tblptru	equ	0xFF8
  4274                           tblptrh	equ	0xFF7
  4275                           tblptrl	equ	0xFF6
  4276                           tablat	equ	0xFF5
  4277                           postinc0	equ	0xFEE
  4278                           wreg	equ	0xFE8
  4279                           postdec1	equ	0xFE5
  4280                           fsr1l	equ	0xFE1
  4281                           status	equ	0xFD8
  4282                           
  4283 ;; *************** function _Init_UART *****************
  4284 ;; Defined at:
  4285 ;;		line 25 in file "utils.c"
  4286 ;; Parameters:    Size  Location     Type
  4287 ;;		None
  4288 ;; Auto vars:     Size  Location     Type
  4289 ;;		None
  4290 ;; Return value:  Size  Location     Type
  4291 ;;		None               void
  4292 ;; Registers used:
  4293 ;;		wreg, status,2, cstack
  4294 ;; Tracked objects:
  4295 ;;		On entry : 0/0
  4296 ;;		On exit  : 0/0
  4297 ;;		Unchanged: 0/0
  4298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4299 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4302 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4303 ;;Total ram usage:        0 bytes
  4304 ;; Hardware stack levels used:    1
  4305 ;; Hardware stack levels required when called:    3
  4306 ;; This function calls:
  4307 ;;		_OpenUSART
  4308 ;; This function is called by:
  4309 ;;		_main
  4310 ;; This function uses a non-reentrant model
  4311 ;;
  4312                           
  4313                           	psect	text13
  4314  002840                     __ptext13:
  4315                           	opt stack 0
  4316  002840                     _Init_UART:
  4317                           	opt stack 27
  4318                           
  4319                           ;utils.c: 27: OpenUSART (0b01111111 & 0b10111111 &
  4320                           ;utils.c: 28: 0b11111110 & 0b11111101 & 0b11111111 &
  4321                           ;utils.c: 29: 0b11111111, 25);
  4322                           
  4323                           ;incstack = 0
  4324  002840  0E00               	movlw	0
  4325  002842  6E10               	movwf	OpenUSART@spbrg+1,c
  4326  002844  0E19               	movlw	25
  4327  002846  6E0F               	movwf	OpenUSART@spbrg,c
  4328  002848  0E3C               	movlw	60
  4329  00284A  EC4B  F010         	call	_OpenUSART
  4330                           
  4331                           ;utils.c: 30: OSCCON = 0x70;
  4332  00284E  0E70               	movlw	112
  4333  002850  6ED3               	movwf	4051,c	;volatile
  4334  002852  0012               	return		;funcret
  4335  002854                     __end_of_Init_UART:
  4336                           	opt stack 0
  4337                           tblptru	equ	0xFF8
  4338                           tblptrh	equ	0xFF7
  4339                           tblptrl	equ	0xFF6
  4340                           tablat	equ	0xFF5
  4341                           postinc0	equ	0xFEE
  4342                           wreg	equ	0xFE8
  4343                           postdec1	equ	0xFE5
  4344                           fsr1l	equ	0xFE1
  4345                           status	equ	0xFD8
  4346                           
  4347 ;; *************** function _OpenUSART *****************
  4348 ;; Defined at:
  4349 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  config          1    wreg     unsigned char 
  4352 ;;  spbrg           2   14[COMRAM] unsigned int 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  config          1   16[COMRAM] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;		None               void
  4357 ;; Registers used:
  4358 ;;		wreg, status,2
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4364 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4365 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4367 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4368 ;;Total ram usage:        3 bytes
  4369 ;; Hardware stack levels used:    1
  4370 ;; Hardware stack levels required when called:    2
  4371 ;; This function calls:
  4372 ;;		Nothing
  4373 ;; This function is called by:
  4374 ;;		_Init_UART
  4375 ;; This function uses a non-reentrant model
  4376 ;;
  4377                           
  4378                           	psect	text14
  4379  002096                     __ptext14:
  4380                           	opt stack 0
  4381  002096                     _OpenUSART:
  4382                           	opt stack 27
  4383                           
  4384                           ;incstack = 0
  4385                           ;OpenUSART@config stored from wreg
  4386  002096  6E11               	movwf	OpenUSART@config,c
  4387  002098  0E00               	movlw	0
  4388  00209A  6EAC               	movwf	4012,c	;volatile
  4389  00209C  0E00               	movlw	0
  4390  00209E  6EAB               	movwf	4011,c	;volatile
  4391  0020A0  A011               	btfss	OpenUSART@config,0,c
  4392  0020A2  D002               	goto	l3885
  4393  0020A4  88AC               	bsf	4012,4,c	;volatile
  4394  0020A6  D000               	goto	l3885
  4395  0020A8                     l3885:
  4396  0020A8  A211               	btfss	OpenUSART@config,1,c
  4397  0020AA  D003               	goto	l3889
  4398  0020AC  8CAC               	bsf	4012,6,c	;volatile
  4399  0020AE  8CAB               	bsf	4011,6,c	;volatile
  4400  0020B0  D000               	goto	l3889
  4401  0020B2                     l3889:
  4402  0020B2  A411               	btfss	OpenUSART@config,2,c
  4403  0020B4  D002               	goto	l3893
  4404  0020B6  8EAC               	bsf	4012,7,c	;volatile
  4405  0020B8  D000               	goto	l3893
  4406  0020BA                     l3893:
  4407  0020BA  A611               	btfss	OpenUSART@config,3,c
  4408  0020BC  D002               	goto	l684
  4409  0020BE  88AB               	bsf	4011,4,c	;volatile
  4410  0020C0  D002               	goto	l3897
  4411  0020C2                     l684:
  4412  0020C2  8AAB               	bsf	4011,5,c	;volatile
  4413  0020C4  D000               	goto	l3897
  4414  0020C6                     l3897:
  4415  0020C6  B811               	btfsc	OpenUSART@config,4,c
  4416  0020C8  84AC               	bsf	4012,2,c	;volatile
  4417  0020CA  989E               	bcf	3998,4,c	;volatile
  4418  0020CC  AA11               	btfss	OpenUSART@config,5,c
  4419  0020CE  D002               	goto	l3905
  4420  0020D0  86AB               	bsf	4011,3,c	;volatile
  4421  0020D2  D000               	goto	l3905
  4422  0020D4                     l3905:
  4423  0020D4  AC11               	btfss	OpenUSART@config,6,c
  4424  0020D6  D002               	goto	l688
  4425  0020D8  8A9D               	bsf	3997,5,c	;volatile
  4426  0020DA  D001               	goto	l689
  4427  0020DC                     l688:
  4428  0020DC  9A9D               	bcf	3997,5,c	;volatile
  4429  0020DE                     l689:
  4430  0020DE  9A9E               	bcf	3998,5,c	;volatile
  4431  0020E0  AE11               	btfss	OpenUSART@config,7,c
  4432  0020E2  D002               	goto	l690
  4433  0020E4  889D               	bsf	3997,4,c	;volatile
  4434  0020E6  D001               	goto	l691
  4435  0020E8                     l690:
  4436  0020E8  989D               	bcf	3997,4,c	;volatile
  4437  0020EA                     l691:
  4438  0020EA  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4439  0020EE  5010               	movf	OpenUSART@spbrg+1,w,c
  4440  0020F0  6EB0               	movwf	4016,c	;volatile
  4441  0020F2  8AAC               	bsf	4012,5,c	;volatile
  4442  0020F4  8EAB               	bsf	4011,7,c	;volatile
  4443  0020F6  9C94               	bcf	3988,6,c	;volatile
  4444  0020F8  8E94               	bsf	3988,7,c	;volatile
  4445  0020FA  B8AC               	btfsc	4012,4,c	;volatile
  4446  0020FC  BEAC               	btfsc	4012,7,c	;volatile
  4447  0020FE  D002               	goto	l693
  4448  002100  8C94               	bsf	3988,6,c	;volatile
  4449  002102  D000               	goto	l693
  4450  002104                     l693:
  4451  002104  0012               	return		;funcret
  4452  002106                     __end_of_OpenUSART:
  4453                           	opt stack 0
  4454                           tblptru	equ	0xFF8
  4455                           tblptrh	equ	0xFF7
  4456                           tblptrl	equ	0xFF6
  4457                           tablat	equ	0xFF5
  4458                           postinc0	equ	0xFEE
  4459                           wreg	equ	0xFE8
  4460                           postdec1	equ	0xFE5
  4461                           fsr1l	equ	0xFE1
  4462                           status	equ	0xFD8
  4463                           
  4464 ;; *************** function _Init_ADC *****************
  4465 ;; Defined at:
  4466 ;;		line 18 in file "utils.c"
  4467 ;; Parameters:    Size  Location     Type
  4468 ;;		None
  4469 ;; Auto vars:     Size  Location     Type
  4470 ;;		None
  4471 ;; Return value:  Size  Location     Type
  4472 ;;		None               void
  4473 ;; Registers used:
  4474 ;;		wreg, status,2
  4475 ;; Tracked objects:
  4476 ;;		On entry : 0/0
  4477 ;;		On exit  : 0/0
  4478 ;;		Unchanged: 0/0
  4479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4483 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4484 ;;Total ram usage:        0 bytes
  4485 ;; Hardware stack levels used:    1
  4486 ;; Hardware stack levels required when called:    2
  4487 ;; This function calls:
  4488 ;;		Nothing
  4489 ;; This function is called by:
  4490 ;;		_main
  4491 ;; This function uses a non-reentrant model
  4492 ;;
  4493                           
  4494                           	psect	text15
  4495  0028AC                     __ptext15:
  4496                           	opt stack 0
  4497  0028AC                     _Init_ADC:
  4498                           	opt stack 28
  4499                           
  4500                           ;utils.c: 20: ADCON0 = 0x01;
  4501                           
  4502                           ;incstack = 0
  4503  0028AC  0E01               	movlw	1
  4504  0028AE  6EC2               	movwf	4034,c	;volatile
  4505                           
  4506                           ;utils.c: 21: ADCON1 = 0x0E;
  4507  0028B0  0E0E               	movlw	14
  4508  0028B2  6EC1               	movwf	4033,c	;volatile
  4509                           
  4510                           ;utils.c: 22: ADCON2 = 0xA9;
  4511  0028B4  0EA9               	movlw	169
  4512  0028B6  6EC0               	movwf	4032,c	;volatile
  4513  0028B8  0012               	return		;funcret
  4514  0028BA                     __end_of_Init_ADC:
  4515                           	opt stack 0
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           postinc0	equ	0xFEE
  4521                           wreg	equ	0xFE8
  4522                           postdec1	equ	0xFE5
  4523                           fsr1l	equ	0xFE1
  4524                           status	equ	0xFD8
  4525                           
  4526 ;; *************** function _Do_Flashing *****************
  4527 ;; Defined at:
  4528 ;;		line 340 in file "Lab7_S1_sample.c"
  4529 ;; Parameters:    Size  Location     Type
  4530 ;;		None
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;		None
  4533 ;; Return value:  Size  Location     Type
  4534 ;;		None               void
  4535 ;; Registers used:
  4536 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4537 ;; Tracked objects:
  4538 ;;		On entry : 0/0
  4539 ;;		On exit  : 0/0
  4540 ;;		Unchanged: 0/0
  4541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4545 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4546 ;;Total ram usage:        0 bytes
  4547 ;; Hardware stack levels used:    1
  4548 ;; Hardware stack levels required when called:   11
  4549 ;; This function calls:
  4550 ;;		_Set_EW
  4551 ;;		_Set_EW_LT
  4552 ;;		_Set_NS
  4553 ;;		_Set_NS_LT
  4554 ;;		_Wait_One_Second
  4555 ;; This function is called by:
  4556 ;;		_main
  4557 ;; This function uses a non-reentrant model
  4558 ;;
  4559                           
  4560                           	psect	text16
  4561  00223C                     __ptext16:
  4562                           	opt stack 0
  4563  00223C                     _Do_Flashing:
  4564                           	opt stack 19
  4565                           
  4566                           ;Lab7_S1_sample.c: 341: while(Flashing_Status) {
  4567                           
  4568                           ;incstack = 0
  4569  00223C  D02B               	goto	l5667
  4570                           
  4571                           ;Lab7_S1_sample.c: 342: switch (Flashing_Request){
  4572  00223E  D022               	goto	l5665
  4573  002240                     l5647:
  4574                           
  4575                           ;Lab7_S1_sample.c: 344: Set_EW(1);
  4576  002240  0E01               	movlw	1
  4577  002242  EC85  F012         	call	_Set_EW
  4578                           
  4579                           ;Lab7_S1_sample.c: 345: Set_EW_LT(1);
  4580  002246  0E01               	movlw	1
  4581  002248  EC61  F012         	call	_Set_EW_LT
  4582                           
  4583                           ;Lab7_S1_sample.c: 346: Set_NS_LT(1);
  4584  00224C  0E01               	movlw	1
  4585  00224E  EC19  F012         	call	_Set_NS_LT
  4586                           
  4587                           ;Lab7_S1_sample.c: 347: Set_NS(1);
  4588  002252  0E01               	movlw	1
  4589  002254  EC3D  F012         	call	_Set_NS
  4590                           
  4591                           ;Lab7_S1_sample.c: 348: Wait_One_Second();
  4592  002258  ECFB  F013         	call	_Wait_One_Second	;wreg free
  4593                           
  4594                           ;Lab7_S1_sample.c: 349: Set_EW(0);
  4595  00225C  0E00               	movlw	0
  4596  00225E  EC85  F012         	call	_Set_EW
  4597                           
  4598                           ;Lab7_S1_sample.c: 350: Set_EW_LT(0);
  4599  002262  0E00               	movlw	0
  4600  002264  EC61  F012         	call	_Set_EW_LT
  4601                           
  4602                           ;Lab7_S1_sample.c: 351: Set_NS_LT(0);
  4603  002268  0E00               	movlw	0
  4604  00226A  EC19  F012         	call	_Set_NS_LT
  4605                           
  4606                           ;Lab7_S1_sample.c: 352: Set_NS(0);
  4607  00226E  0E00               	movlw	0
  4608  002270  EC3D  F012         	call	_Set_NS
  4609                           
  4610                           ;Lab7_S1_sample.c: 353: Wait_One_Second();
  4611  002274  ECFB  F013         	call	_Wait_One_Second	;wreg free
  4612                           
  4613                           ;Lab7_S1_sample.c: 354: break;
  4614  002278  D00D               	goto	l5667
  4615  00227A                     l5661:
  4616                           
  4617                           ;Lab7_S1_sample.c: 356: Flashing_Request = 0;
  4618  00227A  0E00               	movlw	0
  4619  00227C  6E4B               	movwf	_Flashing_Request,c
  4620                           
  4621                           ;Lab7_S1_sample.c: 357: Flashing_Status = 0;
  4622  00227E  0E00               	movlw	0
  4623  002280  6E4C               	movwf	_Flashing_Status,c
  4624                           
  4625                           ;Lab7_S1_sample.c: 359: }
  4626                           
  4627                           ;Lab7_S1_sample.c: 358: break;
  4628  002282  D008               	goto	l5667
  4629  002284                     l5665:
  4630  002284  504B               	movf	_Flashing_Request,w,c
  4631                           
  4632                           ; Switch size 1, requested type "space"
  4633                           ; Number of cases is 2, Range of values is 0 to 1
  4634                           ; switch strategies available:
  4635                           ; Name         Instructions Cycles
  4636                           ; simple_byte            7     4 (average)
  4637                           ;	Chosen strategy is simple_byte
  4638  002286  0A00               	xorlw	0	; case 0
  4639  002288  B4D8               	btfsc	status,2,c
  4640  00228A  D7DA               	goto	l5647
  4641  00228C  0A01               	xorlw	1	; case 1
  4642  00228E  B4D8               	btfsc	status,2,c
  4643  002290  D7F4               	goto	l5661
  4644  002292  D000               	goto	l5667
  4645  002294                     l5667:
  4646  002294  504C               	movf	_Flashing_Status,w,c
  4647  002296  A4D8               	btfss	status,2,c
  4648  002298  D7F5               	goto	l5665
  4649  00229A  0012               	return		;funcret
  4650  00229C                     __end_of_Do_Flashing:
  4651                           	opt stack 0
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           postinc0	equ	0xFEE
  4657                           wreg	equ	0xFE8
  4658                           postdec1	equ	0xFE5
  4659                           fsr1l	equ	0xFE1
  4660                           status	equ	0xFD8
  4661                           
  4662 ;; *************** function _Day_Mode *****************
  4663 ;; Defined at:
  4664 ;;		line 195 in file "Lab7_S1_sample.c"
  4665 ;; Parameters:    Size  Location     Type
  4666 ;;		None
  4667 ;; Auto vars:     Size  Location     Type
  4668 ;;		None
  4669 ;; Return value:  Size  Location     Type
  4670 ;;		None               void
  4671 ;; Registers used:
  4672 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4673 ;; Tracked objects:
  4674 ;;		On entry : 0/0
  4675 ;;		On exit  : 0/0
  4676 ;;		Unchanged: 0/0
  4677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4678 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4679 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4681 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;Total ram usage:        0 bytes
  4683 ;; Hardware stack levels used:    1
  4684 ;; Hardware stack levels required when called:   12
  4685 ;; This function calls:
  4686 ;;		_PED_Control
  4687 ;;		_Set_EW
  4688 ;;		_Set_EW_LT
  4689 ;;		_Set_NS
  4690 ;;		_Set_NS_LT
  4691 ;;		_Wait_N_Seconds
  4692 ;; This function is called by:
  4693 ;;		_main
  4694 ;; This function uses a non-reentrant model
  4695 ;;
  4696                           
  4697                           	psect	text17
  4698  001B70                     __ptext17:
  4699                           	opt stack 0
  4700  001B70                     _Day_Mode:
  4701                           	opt stack 18
  4702                           
  4703                           ;Lab7_S1_sample.c: 196: Set_EW(1);
  4704                           
  4705                           ;incstack = 0
  4706  001B70  0E01               	movlw	1
  4707  001B72  EC85  F012         	call	_Set_EW
  4708                           
  4709                           ;Lab7_S1_sample.c: 197: Set_EW_LT(1);
  4710  001B76  0E01               	movlw	1
  4711  001B78  EC61  F012         	call	_Set_EW_LT
  4712                           
  4713                           ;Lab7_S1_sample.c: 198: Set_NS_LT(1);
  4714  001B7C  0E01               	movlw	1
  4715  001B7E  EC19  F012         	call	_Set_NS_LT
  4716                           
  4717                           ;Lab7_S1_sample.c: 199: Set_NS(2);
  4718  001B82  0E02               	movlw	2
  4719  001B84  EC3D  F012         	call	_Set_NS
  4720                           
  4721                           ;Lab7_S1_sample.c: 201: if (NS_PED_SW == 1)
  4722  001B88  0452               	decf	_NS_PED_SW,w,c
  4723  001B8A  A4D8               	btfss	status,2,c
  4724  001B8C  D005               	goto	l143
  4725                           
  4726                           ;Lab7_S1_sample.c: 202: {
  4727                           ;Lab7_S1_sample.c: 203: PED_Control(0, 8);
  4728  001B8E  0E08               	movlw	8
  4729  001B90  6E43               	movwf	PED_Control@Num_Sec,c
  4730  001B92  0E00               	movlw	0
  4731  001B94  EC4E  F011         	call	_PED_Control
  4732  001B98                     l143:
  4733                           
  4734                           ;Lab7_S1_sample.c: 205: }
  4735                           ;Lab7_S1_sample.c: 206: Wait_N_Seconds(7);
  4736  001B98  0E07               	movlw	7
  4737  001B9A  EC3F  F013         	call	_Wait_N_Seconds
  4738                           
  4739                           ;Lab7_S1_sample.c: 207: Set_NS(3);
  4740  001B9E  0E03               	movlw	3
  4741  001BA0  EC3D  F012         	call	_Set_NS
  4742                           
  4743                           ;Lab7_S1_sample.c: 208: Wait_N_Seconds(3);
  4744  001BA4  0E03               	movlw	3
  4745  001BA6  EC3F  F013         	call	_Wait_N_Seconds
  4746                           
  4747                           ;Lab7_S1_sample.c: 209: Set_NS(1);
  4748  001BAA  0E01               	movlw	1
  4749  001BAC  EC3D  F012         	call	_Set_NS
  4750                           
  4751                           ;Lab7_S1_sample.c: 211: if (PORTCbits.RC0 == 1)
  4752  001BB0  A082               	btfss	3970,0,c	;volatile
  4753  001BB2  D010               	goto	l5577
  4754                           
  4755                           ;Lab7_S1_sample.c: 212: {
  4756                           ;Lab7_S1_sample.c: 213: Set_EW_LT(2);
  4757  001BB4  0E02               	movlw	2
  4758  001BB6  EC61  F012         	call	_Set_EW_LT
  4759                           
  4760                           ;Lab7_S1_sample.c: 214: Wait_N_Seconds(8);
  4761  001BBA  0E08               	movlw	8
  4762  001BBC  EC3F  F013         	call	_Wait_N_Seconds
  4763                           
  4764                           ;Lab7_S1_sample.c: 215: Set_EW_LT(3);
  4765  001BC0  0E03               	movlw	3
  4766  001BC2  EC61  F012         	call	_Set_EW_LT
  4767                           
  4768                           ;Lab7_S1_sample.c: 216: Wait_N_Seconds(3);
  4769  001BC6  0E03               	movlw	3
  4770  001BC8  EC3F  F013         	call	_Wait_N_Seconds
  4771                           
  4772                           ;Lab7_S1_sample.c: 217: Set_EW_LT(1);
  4773  001BCC  0E01               	movlw	1
  4774  001BCE  EC61  F012         	call	_Set_EW_LT
  4775  001BD2  D000               	goto	l5577
  4776  001BD4                     l5577:
  4777                           
  4778                           ;Lab7_S1_sample.c: 219: }
  4779                           ;Lab7_S1_sample.c: 220: Set_EW(2);
  4780  001BD4  0E02               	movlw	2
  4781  001BD6  EC85  F012         	call	_Set_EW
  4782                           
  4783                           ;Lab7_S1_sample.c: 221: if (EW_PED_SW == 1) {
  4784  001BDA  044A               	decf	_EW_PED_SW,w,c
  4785  001BDC  A4D8               	btfss	status,2,c
  4786  001BDE  D006               	goto	l5583
  4787                           
  4788                           ;Lab7_S1_sample.c: 222: PED_Control(2, 7);
  4789  001BE0  0E07               	movlw	7
  4790  001BE2  6E43               	movwf	PED_Control@Num_Sec,c
  4791  001BE4  0E02               	movlw	2
  4792  001BE6  EC4E  F011         	call	_PED_Control
  4793  001BEA  D000               	goto	l5583
  4794  001BEC                     l5583:
  4795                           
  4796                           ;Lab7_S1_sample.c: 223: }
  4797                           ;Lab7_S1_sample.c: 224: Set_EW(2);
  4798  001BEC  0E02               	movlw	2
  4799  001BEE  EC85  F012         	call	_Set_EW
  4800                           
  4801                           ;Lab7_S1_sample.c: 225: Wait_N_Seconds(6);
  4802  001BF2  0E06               	movlw	6
  4803  001BF4  EC3F  F013         	call	_Wait_N_Seconds
  4804                           
  4805                           ;Lab7_S1_sample.c: 226: Set_EW(3);
  4806  001BF8  0E03               	movlw	3
  4807  001BFA  EC85  F012         	call	_Set_EW
  4808                           
  4809                           ;Lab7_S1_sample.c: 227: Wait_N_Seconds(3);
  4810  001BFE  0E03               	movlw	3
  4811  001C00  EC3F  F013         	call	_Wait_N_Seconds
  4812                           
  4813                           ;Lab7_S1_sample.c: 228: Set_EW(1);
  4814  001C04  0E01               	movlw	1
  4815  001C06  EC85  F012         	call	_Set_EW
  4816                           
  4817                           ;Lab7_S1_sample.c: 229: if (PORTAbits.RA5 == 1)
  4818  001C0A  AA80               	btfss	3968,5,c	;volatile
  4819  001C0C  D010               	goto	l147
  4820                           
  4821                           ;Lab7_S1_sample.c: 230: {
  4822                           ;Lab7_S1_sample.c: 231: Set_NS_LT(2);
  4823  001C0E  0E02               	movlw	2
  4824  001C10  EC19  F012         	call	_Set_NS_LT
  4825                           
  4826                           ;Lab7_S1_sample.c: 232: Wait_N_Seconds(7);
  4827  001C14  0E07               	movlw	7
  4828  001C16  EC3F  F013         	call	_Wait_N_Seconds
  4829                           
  4830                           ;Lab7_S1_sample.c: 233: Set_NS_LT(3);
  4831  001C1A  0E03               	movlw	3
  4832  001C1C  EC19  F012         	call	_Set_NS_LT
  4833                           
  4834                           ;Lab7_S1_sample.c: 234: Wait_N_Seconds(3);
  4835  001C20  0E03               	movlw	3
  4836  001C22  EC3F  F013         	call	_Wait_N_Seconds
  4837                           
  4838                           ;Lab7_S1_sample.c: 235: Set_NS_LT(1);
  4839  001C26  0E01               	movlw	1
  4840  001C28  EC19  F012         	call	_Set_NS_LT
  4841  001C2C  D000               	goto	l147
  4842  001C2E                     l147:
  4843  001C2E  0012               	return		;funcret
  4844  001C30                     __end_of_Day_Mode:
  4845                           	opt stack 0
  4846                           tblptru	equ	0xFF8
  4847                           tblptrh	equ	0xFF7
  4848                           tblptrl	equ	0xFF6
  4849                           tablat	equ	0xFF5
  4850                           postinc0	equ	0xFEE
  4851                           wreg	equ	0xFE8
  4852                           postdec1	equ	0xFE5
  4853                           fsr1l	equ	0xFE1
  4854                           status	equ	0xFD8
  4855                           
  4856 ;; *************** function _Wait_N_Seconds *****************
  4857 ;; Defined at:
  4858 ;;		line 330 in file "Lab7_S1_sample.c"
  4859 ;; Parameters:    Size  Location     Type
  4860 ;;  seconds         1    wreg     unsigned char 
  4861 ;; Auto vars:     Size  Location     Type
  4862 ;;  seconds         1   12[BANK0 ] unsigned char 
  4863 ;;  I               1   13[BANK0 ] unsigned char 
  4864 ;; Return value:  Size  Location     Type
  4865 ;;		None               void
  4866 ;; Registers used:
  4867 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4868 ;; Tracked objects:
  4869 ;;		On entry : 0/0
  4870 ;;		On exit  : 0/0
  4871 ;;		Unchanged: 0/0
  4872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4874 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4876 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4877 ;;Total ram usage:        2 bytes
  4878 ;; Hardware stack levels used:    1
  4879 ;; Hardware stack levels required when called:   11
  4880 ;; This function calls:
  4881 ;;		_Wait_One_Second
  4882 ;;		_update_LCD_count
  4883 ;; This function is called by:
  4884 ;;		_Day_Mode
  4885 ;;		_Night_Mode
  4886 ;; This function uses a non-reentrant model
  4887 ;;
  4888                           
  4889                           	psect	text18
  4890  00267E                     __ptext18:
  4891                           	opt stack 0
  4892  00267E                     _Wait_N_Seconds:
  4893                           	opt stack 18
  4894                           
  4895                           ;incstack = 0
  4896                           ;Wait_N_Seconds@seconds stored from wreg
  4897  00267E  0100               	movlb	0	; () banked
  4898  002680  6FD7               	movwf	Wait_N_Seconds@seconds& (0+255),b
  4899                           
  4900                           ; BSR set to: 0
  4901                           ;Lab7_S1_sample.c: 331: char I;
  4902                           ;Lab7_S1_sample.c: 332: for (I = seconds; I > 0; I--) {
  4903  002682  C0D7  F0D8         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  4904  002686                     l5401:
  4905                           
  4906                           ; BSR set to: 0
  4907  002686  0100               	movlb	0	; () banked
  4908  002688  51D8               	movf	Wait_N_Seconds@I& (0+255),w,b
  4909  00268A  0100               	movlb	0	; () banked
  4910  00268C  B4D8               	btfsc	status,2,c
  4911  00268E  D00C               	goto	l5411
  4912  002690  D001               	goto	l5405
  4913                           
  4914                           ; BSR set to: 0
  4915  002692  D00A               	goto	l5411
  4916  002694                     l5405:
  4917                           
  4918                           ; BSR set to: 0
  4919                           ;Lab7_S1_sample.c: 333: update_LCD_count(direction, I);
  4920  002694  C0D8  F041         	movff	Wait_N_Seconds@I,update_LCD_count@count
  4921  002698  505B               	movf	_direction,w,c
  4922  00269A  EC8F  F007         	call	_update_LCD_count
  4923                           
  4924                           ;Lab7_S1_sample.c: 334: Wait_One_Second();
  4925  00269E  ECFB  F013         	call	_Wait_One_Second	;wreg free
  4926  0026A2  0100               	movlb	0	; () banked
  4927  0026A4  07D8               	decf	Wait_N_Seconds@I& (0+255),f,b
  4928  0026A6  D7EF               	goto	l5401
  4929  0026A8                     l5411:
  4930                           
  4931                           ; BSR set to: 0
  4932                           ;Lab7_S1_sample.c: 336: }
  4933                           ;Lab7_S1_sample.c: 337: update_LCD_count(direction, 0);
  4934  0026A8  0E00               	movlw	0
  4935  0026AA  6E41               	movwf	update_LCD_count@count,c
  4936  0026AC  505B               	movf	_direction,w,c
  4937  0026AE  EC8F  F007         	call	_update_LCD_count
  4938  0026B2  0012               	return		;funcret
  4939  0026B4                     __end_of_Wait_N_Seconds:
  4940                           	opt stack 0
  4941                           tblptru	equ	0xFF8
  4942                           tblptrh	equ	0xFF7
  4943                           tblptrl	equ	0xFF6
  4944                           tablat	equ	0xFF5
  4945                           postinc0	equ	0xFEE
  4946                           wreg	equ	0xFE8
  4947                           postdec1	equ	0xFE5
  4948                           fsr1l	equ	0xFE1
  4949                           status	equ	0xFD8
  4950                           
  4951 ;; *************** function _update_LCD_count *****************
  4952 ;; Defined at:
  4953 ;;		line 228 in file "Main_Screen.c"
  4954 ;; Parameters:    Size  Location     Type
  4955 ;;  direction       1    wreg     unsigned char 
  4956 ;;  count           1   64[COMRAM] unsigned char 
  4957 ;; Auto vars:     Size  Location     Type
  4958 ;;  direction       1   65[COMRAM] unsigned char 
  4959 ;; Return value:  Size  Location     Type
  4960 ;;		None               void
  4961 ;; Registers used:
  4962 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4963 ;; Tracked objects:
  4964 ;;		On entry : 0/0
  4965 ;;		On exit  : 0/0
  4966 ;;		Unchanged: 0/0
  4967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4968 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4969 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;Total ram usage:        2 bytes
  4973 ;; Hardware stack levels used:    1
  4974 ;; Hardware stack levels required when called:    9
  4975 ;; This function calls:
  4976 ;;		___awdiv
  4977 ;;		___awmod
  4978 ;;		_drawtext
  4979 ;; This function is called by:
  4980 ;;		_Wait_N_Seconds
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           	psect	text19
  4985  000F1E                     __ptext19:
  4986                           	opt stack 0
  4987  000F1E                     _update_LCD_count:
  4988                           	opt stack 19
  4989                           
  4990                           ;incstack = 0
  4991                           ;update_LCD_count@direction stored from wreg
  4992  000F1E  6E42               	movwf	update_LCD_count@direction,c
  4993                           
  4994                           ;Main_Screen.c: 230: switch (direction)
  4995  000F20  D0B4               	goto	l5193
  4996  000F22                     l5175:
  4997                           
  4998                           ;Main_Screen.c: 233: NS_Count[0] = count/10 + '0';
  4999  000F22  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5000  000F26  6A10               	clrf	___awdiv@dividend+1,c
  5001  000F28  0E00               	movlw	0
  5002  000F2A  6E12               	movwf	___awdiv@divisor+1,c
  5003  000F2C  0E0A               	movlw	10
  5004  000F2E  6E11               	movwf	___awdiv@divisor,c
  5005  000F30  ECB3  F00E         	call	___awdiv	;wreg free
  5006  000F34  500F               	movf	?___awdiv,w,c
  5007  000F36  0F30               	addlw	48
  5008  000F38  0100               	movlb	0	; () banked
  5009  000F3A  6FA1               	movwf	_NS_Count& (0+255),b
  5010                           
  5011                           ;Main_Screen.c: 234: NS_Count[1] = count%10 + '0';
  5012  000F3C  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5013  000F40  6A36               	clrf	___awmod@dividend+1,c
  5014  000F42  0E00               	movlw	0
  5015  000F44  6E38               	movwf	___awmod@divisor+1,c
  5016  000F46  0E0A               	movlw	10
  5017  000F48  6E37               	movwf	___awmod@divisor,c
  5018  000F4A  ECD1  F00F         	call	___awmod	;wreg free
  5019  000F4E  5035               	movf	?___awmod,w,c
  5020  000F50  0F30               	addlw	48
  5021  000F52  0100               	movlb	0	; () banked
  5022  000F54  6FA2               	movwf	(_NS_Count+1)& (0+255),b
  5023                           
  5024                           ; BSR set to: 0
  5025                           ;Main_Screen.c: 235: drawtext(100, 30 + 10, NS_Count, 0xFFE0, 0x0000, 2);
  5026  000F56  0E28               	movlw	40
  5027  000F58  6E37               	movwf	drawtext@y,c
  5028  000F5A  0EA1               	movlw	low _NS_Count
  5029  000F5C  6E38               	movwf	drawtext@_text,c
  5030  000F5E  0E00               	movlw	high _NS_Count
  5031  000F60  6E39               	movwf	drawtext@_text+1,c
  5032  000F62  0EFF               	movlw	255
  5033  000F64  6E3B               	movwf	drawtext@color+1,c
  5034  000F66  0EE0               	movlw	224
  5035  000F68  6E3A               	movwf	drawtext@color,c
  5036  000F6A  0E00               	movlw	0
  5037  000F6C  6E3D               	movwf	drawtext@bg+1,c
  5038  000F6E  0E00               	movlw	0
  5039  000F70  6E3C               	movwf	drawtext@bg,c
  5040  000F72  0E02               	movlw	2
  5041  000F74  6E3E               	movwf	drawtext@size,c
  5042  000F76  0E64               	movlw	100
  5043  000F78  EC23  F00A         	call	_drawtext
  5044                           
  5045                           ;Main_Screen.c: 236: break;
  5046  000F7C  D094               	goto	l494
  5047  000F7E                     l5179:
  5048                           
  5049                           ;Main_Screen.c: 239: NSLT_Count[0] = count/10 + '0';
  5050  000F7E  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5051  000F82  6A10               	clrf	___awdiv@dividend+1,c
  5052  000F84  0E00               	movlw	0
  5053  000F86  6E12               	movwf	___awdiv@divisor+1,c
  5054  000F88  0E0A               	movlw	10
  5055  000F8A  6E11               	movwf	___awdiv@divisor,c
  5056  000F8C  ECB3  F00E         	call	___awdiv	;wreg free
  5057  000F90  500F               	movf	?___awdiv,w,c
  5058  000F92  0F30               	addlw	48
  5059  000F94  0100               	movlb	0	; () banked
  5060  000F96  6F9E               	movwf	_NSLT_Count& (0+255),b
  5061                           
  5062                           ;Main_Screen.c: 240: NSLT_Count[1] = count%10 + '0';
  5063  000F98  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5064  000F9C  6A36               	clrf	___awmod@dividend+1,c
  5065  000F9E  0E00               	movlw	0
  5066  000FA0  6E38               	movwf	___awmod@divisor+1,c
  5067  000FA2  0E0A               	movlw	10
  5068  000FA4  6E37               	movwf	___awmod@divisor,c
  5069  000FA6  ECD1  F00F         	call	___awmod	;wreg free
  5070  000FAA  5035               	movf	?___awmod,w,c
  5071  000FAC  0F30               	addlw	48
  5072  000FAE  0100               	movlb	0	; () banked
  5073  000FB0  6F9F               	movwf	(_NSLT_Count+1)& (0+255),b
  5074                           
  5075                           ; BSR set to: 0
  5076                           ;Main_Screen.c: 241: drawtext(100, 60 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5077  000FB2  0E46               	movlw	70
  5078  000FB4  6E37               	movwf	drawtext@y,c
  5079  000FB6  0E9E               	movlw	low _NSLT_Count
  5080  000FB8  6E38               	movwf	drawtext@_text,c
  5081  000FBA  0E00               	movlw	high _NSLT_Count
  5082  000FBC  6E39               	movwf	drawtext@_text+1,c
  5083  000FBE  0EF8               	movlw	248
  5084  000FC0  6E3B               	movwf	drawtext@color+1,c
  5085  000FC2  0E1F               	movlw	31
  5086  000FC4  6E3A               	movwf	drawtext@color,c
  5087  000FC6  0E00               	movlw	0
  5088  000FC8  6E3D               	movwf	drawtext@bg+1,c
  5089  000FCA  0E00               	movlw	0
  5090  000FCC  6E3C               	movwf	drawtext@bg,c
  5091  000FCE  0E02               	movlw	2
  5092  000FD0  6E3E               	movwf	drawtext@size,c
  5093  000FD2  0E64               	movlw	100
  5094  000FD4  EC23  F00A         	call	_drawtext
  5095                           
  5096                           ;Main_Screen.c: 242: break;
  5097  000FD8  D066               	goto	l494
  5098  000FDA                     l5183:
  5099                           
  5100                           ;Main_Screen.c: 245: EW_Count[0] = count/10 + '0';
  5101  000FDA  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5102  000FDE  6A10               	clrf	___awdiv@dividend+1,c
  5103  000FE0  0E00               	movlw	0
  5104  000FE2  6E12               	movwf	___awdiv@divisor+1,c
  5105  000FE4  0E0A               	movlw	10
  5106  000FE6  6E11               	movwf	___awdiv@divisor,c
  5107  000FE8  ECB3  F00E         	call	___awdiv	;wreg free
  5108  000FEC  500F               	movf	?___awdiv,w,c
  5109  000FEE  0F30               	addlw	48
  5110  000FF0  6E5E               	movwf	_EW_Count,c
  5111                           
  5112                           ;Main_Screen.c: 246: EW_Count[1] = count%10 + '0';
  5113  000FF2  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5114  000FF6  6A36               	clrf	___awmod@dividend+1,c
  5115  000FF8  0E00               	movlw	0
  5116  000FFA  6E38               	movwf	___awmod@divisor+1,c
  5117  000FFC  0E0A               	movlw	10
  5118  000FFE  6E37               	movwf	___awmod@divisor,c
  5119  001000  ECD1  F00F         	call	___awmod	;wreg free
  5120  001004  5035               	movf	?___awmod,w,c
  5121  001006  0F30               	addlw	48
  5122  001008  6E5F               	movwf	_EW_Count+1,c
  5123                           
  5124                           ;Main_Screen.c: 247: drawtext(100, 90 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5125  00100A  0E64               	movlw	100
  5126  00100C  6E37               	movwf	drawtext@y,c
  5127  00100E  0E5E               	movlw	low _EW_Count
  5128  001010  6E38               	movwf	drawtext@_text,c
  5129  001012  0E00               	movlw	high _EW_Count
  5130  001014  6E39               	movwf	drawtext@_text+1,c
  5131  001016  0E07               	movlw	7
  5132  001018  6E3B               	movwf	drawtext@color+1,c
  5133  00101A  683A               	setf	drawtext@color,c
  5134  00101C  0E00               	movlw	0
  5135  00101E  6E3D               	movwf	drawtext@bg+1,c
  5136  001020  0E00               	movlw	0
  5137  001022  6E3C               	movwf	drawtext@bg,c
  5138  001024  0E02               	movlw	2
  5139  001026  6E3E               	movwf	drawtext@size,c
  5140  001028  0E64               	movlw	100
  5141  00102A  EC23  F00A         	call	_drawtext
  5142                           
  5143                           ;Main_Screen.c: 248: break;
  5144  00102E  D03B               	goto	l494
  5145  001030                     l5187:
  5146                           
  5147                           ;Main_Screen.c: 251: EWLT_Count[0] = count/10 + '0';
  5148  001030  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5149  001034  6A10               	clrf	___awdiv@dividend+1,c
  5150  001036  0E00               	movlw	0
  5151  001038  6E12               	movwf	___awdiv@divisor+1,c
  5152  00103A  0E0A               	movlw	10
  5153  00103C  6E11               	movwf	___awdiv@divisor,c
  5154  00103E  ECB3  F00E         	call	___awdiv	;wreg free
  5155  001042  500F               	movf	?___awdiv,w,c
  5156  001044  0F30               	addlw	48
  5157  001046  0100               	movlb	0	; () banked
  5158  001048  6F9B               	movwf	_EWLT_Count& (0+255),b
  5159                           
  5160                           ;Main_Screen.c: 252: EWLT_Count[1] = count%10 + '0';
  5161  00104A  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5162  00104E  6A36               	clrf	___awmod@dividend+1,c
  5163  001050  0E00               	movlw	0
  5164  001052  6E38               	movwf	___awmod@divisor+1,c
  5165  001054  0E0A               	movlw	10
  5166  001056  6E37               	movwf	___awmod@divisor,c
  5167  001058  ECD1  F00F         	call	___awmod	;wreg free
  5168  00105C  5035               	movf	?___awmod,w,c
  5169  00105E  0F30               	addlw	48
  5170  001060  0100               	movlb	0	; () banked
  5171  001062  6F9C               	movwf	(_EWLT_Count+1)& (0+255),b
  5172                           
  5173                           ; BSR set to: 0
  5174                           ;Main_Screen.c: 253: drawtext(100, 120 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5175  001064  0E82               	movlw	130
  5176  001066  6E37               	movwf	drawtext@y,c
  5177  001068  0E9B               	movlw	low _EWLT_Count
  5178  00106A  6E38               	movwf	drawtext@_text,c
  5179  00106C  0E00               	movlw	high _EWLT_Count
  5180  00106E  6E39               	movwf	drawtext@_text+1,c
  5181  001070  0EFF               	movlw	255
  5182  001072  6E3B               	movwf	drawtext@color+1,c
  5183  001074  683A               	setf	drawtext@color,c
  5184  001076  0E00               	movlw	0
  5185  001078  6E3D               	movwf	drawtext@bg+1,c
  5186  00107A  0E00               	movlw	0
  5187  00107C  6E3C               	movwf	drawtext@bg,c
  5188  00107E  0E02               	movlw	2
  5189  001080  6E3E               	movwf	drawtext@size,c
  5190  001082  0E64               	movlw	100
  5191  001084  EC23  F00A         	call	_drawtext
  5192                           
  5193                           ;Main_Screen.c: 255: }
  5194                           
  5195                           ;Main_Screen.c: 254: break;
  5196  001088  D00E               	goto	l494
  5197  00108A                     l5193:
  5198  00108A  5042               	movf	update_LCD_count@direction,w,c
  5199                           
  5200                           ; Switch size 1, requested type "space"
  5201                           ; Number of cases is 4, Range of values is 0 to 3
  5202                           ; switch strategies available:
  5203                           ; Name         Instructions Cycles
  5204                           ; simple_byte           13     7 (average)
  5205                           ;	Chosen strategy is simple_byte
  5206  00108C  0A00               	xorlw	0	; case 0
  5207  00108E  B4D8               	btfsc	status,2,c
  5208  001090  D748               	goto	l5175
  5209  001092  0A01               	xorlw	1	; case 1
  5210  001094  B4D8               	btfsc	status,2,c
  5211  001096  D773               	goto	l5179
  5212  001098  0A03               	xorlw	3	; case 2
  5213  00109A  B4D8               	btfsc	status,2,c
  5214  00109C  D79E               	goto	l5183
  5215  00109E  0A01               	xorlw	1	; case 3
  5216  0010A0  B4D8               	btfsc	status,2,c
  5217  0010A2  D7C6               	goto	l5187
  5218  0010A4  D000               	goto	l494
  5219  0010A6                     l494:
  5220  0010A6  0012               	return		;funcret
  5221  0010A8                     __end_of_update_LCD_count:
  5222                           	opt stack 0
  5223                           tblptru	equ	0xFF8
  5224                           tblptrh	equ	0xFF7
  5225                           tblptrl	equ	0xFF6
  5226                           tablat	equ	0xFF5
  5227                           postinc0	equ	0xFEE
  5228                           wreg	equ	0xFE8
  5229                           postdec1	equ	0xFE5
  5230                           fsr1l	equ	0xFE1
  5231                           status	equ	0xFD8
  5232                           
  5233 ;; *************** function _Wait_One_Second *****************
  5234 ;; Defined at:
  5235 ;;		line 304 in file "Lab7_S1_sample.c"
  5236 ;; Parameters:    Size  Location     Type
  5237 ;;		None
  5238 ;; Auto vars:     Size  Location     Type
  5239 ;;		None
  5240 ;; Return value:  Size  Location     Type
  5241 ;;		None               void
  5242 ;; Registers used:
  5243 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5244 ;; Tracked objects:
  5245 ;;		On entry : 0/0
  5246 ;;		On exit  : 0/0
  5247 ;;		Unchanged: 0/0
  5248 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5249 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5250 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5251 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5252 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5253 ;;Total ram usage:        0 bytes
  5254 ;; Hardware stack levels used:    1
  5255 ;; Hardware stack levels required when called:   10
  5256 ;; This function calls:
  5257 ;;		_Draw_Star
  5258 ;;		_Erase_Star
  5259 ;;		_Wait_Half_Second
  5260 ;;		_update_LCD_misc
  5261 ;; This function is called by:
  5262 ;;		_Wait_N_Seconds
  5263 ;;		_Do_Flashing
  5264 ;;		_Do_Beep
  5265 ;; This function uses a non-reentrant model
  5266 ;;
  5267                           
  5268                           	psect	text20
  5269  0027F6                     __ptext20:
  5270                           	opt stack 0
  5271  0027F6                     _Wait_One_Second:
  5272                           	opt stack 18
  5273                           
  5274                           ;Lab7_S1_sample.c: 306: PORTEbits.RE2 = 1;
  5275                           
  5276                           ;incstack = 0
  5277  0027F6  8484               	bsf	3972,2,c	;volatile
  5278                           
  5279                           ;Lab7_S1_sample.c: 307: Draw_Star();
  5280  0027F8  EC22  F013         	call	_Draw_Star	;wreg free
  5281                           
  5282                           ;Lab7_S1_sample.c: 308: Wait_Half_Second();
  5283  0027FC  EC08  F014         	call	_Wait_Half_Second	;wreg free
  5284                           
  5285                           ;Lab7_S1_sample.c: 309: PORTEbits.RE2 = 0;
  5286  002800  9484               	bcf	3972,2,c	;volatile
  5287                           
  5288                           ;Lab7_S1_sample.c: 310: Erase_Star();
  5289  002802  EC05  F013         	call	_Erase_Star	;wreg free
  5290                           
  5291                           ;Lab7_S1_sample.c: 311: Wait_Half_Second();
  5292  002806  EC08  F014         	call	_Wait_Half_Second	;wreg free
  5293                           
  5294                           ;Lab7_S1_sample.c: 312: update_LCD_misc();
  5295  00280A  EC7C  F005         	call	_update_LCD_misc	;wreg free
  5296  00280E  0012               	return		;funcret
  5297  002810                     __end_of_Wait_One_Second:
  5298                           	opt stack 0
  5299                           tblptru	equ	0xFF8
  5300                           tblptrh	equ	0xFF7
  5301                           tblptrl	equ	0xFF6
  5302                           tablat	equ	0xFF5
  5303                           postinc0	equ	0xFEE
  5304                           wreg	equ	0xFE8
  5305                           postdec1	equ	0xFE5
  5306                           fsr1l	equ	0xFE1
  5307                           status	equ	0xFD8
  5308                           
  5309 ;; *************** function _Set_NS_LT *****************
  5310 ;; Defined at:
  5311 ;;		line 113 in file "Lab7_S1_sample.c"
  5312 ;; Parameters:    Size  Location     Type
  5313 ;;  color           1    wreg     unsigned char 
  5314 ;; Auto vars:     Size  Location     Type
  5315 ;;  color           1    0[BANK0 ] unsigned char 
  5316 ;; Return value:  Size  Location     Type
  5317 ;;		None               void
  5318 ;; Registers used:
  5319 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5320 ;; Tracked objects:
  5321 ;;		On entry : 0/0
  5322 ;;		On exit  : 0/0
  5323 ;;		Unchanged: 0/0
  5324 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5325 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5326 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5327 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5328 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5329 ;;Total ram usage:        1 bytes
  5330 ;; Hardware stack levels used:    1
  5331 ;; Hardware stack levels required when called:    9
  5332 ;; This function calls:
  5333 ;;		_update_LCD_color
  5334 ;; This function is called by:
  5335 ;;		_Day_Mode
  5336 ;;		_Night_Mode
  5337 ;;		_Do_Flashing
  5338 ;; This function uses a non-reentrant model
  5339 ;;
  5340                           
  5341                           	psect	text21
  5342  002432                     __ptext21:
  5343                           	opt stack 0
  5344  002432                     _Set_NS_LT:
  5345                           	opt stack 20
  5346                           
  5347                           ;incstack = 0
  5348                           ;Set_NS_LT@color stored from wreg
  5349  002432  0100               	movlb	0	; () banked
  5350  002434  6FCB               	movwf	Set_NS_LT@color& (0+255),b
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;Lab7_S1_sample.c: 114: direction = 1;
  5354  002436  0E01               	movlw	1
  5355  002438  6E5B               	movwf	_direction,c
  5356                           
  5357                           ; BSR set to: 0
  5358                           ;Lab7_S1_sample.c: 115: update_LCD_color(direction, color);
  5359  00243A  C0CB  F041         	movff	Set_NS_LT@color,update_LCD_color@color
  5360  00243E  505B               	movf	_direction,w,c
  5361  002440  ECCB  F003         	call	_update_LCD_color
  5362                           
  5363                           ;Lab7_S1_sample.c: 117: switch (color) {
  5364  002444  D00A               	goto	l5363
  5365  002446                     l108:
  5366                           
  5367                           ; BSR set to: 0
  5368  002446  9482               	bcf	3970,2,c	;volatile
  5369  002448  D001               	goto	L2
  5370  00244A                     l110:
  5371                           
  5372                           ; BSR set to: 0
  5373  00244A  8482               	bsf	3970,2,c	;volatile
  5374  00244C                     L2:
  5375                           
  5376                           ;Lab7_S1_sample.c: 122: PORTCbits.RC4 = 0;
  5377  00244C  9882               	bcf	3970,4,c	;volatile
  5378                           
  5379                           ;Lab7_S1_sample.c: 123: break;
  5380  00244E  D014               	goto	l113
  5381  002450                     l111:
  5382                           
  5383                           ; BSR set to: 0
  5384  002450  9482               	bcf	3970,2,c	;volatile
  5385  002452  D001               	goto	L3
  5386  002454                     l112:
  5387                           
  5388                           ; BSR set to: 0
  5389  002454  8482               	bsf	3970,2,c	;volatile
  5390  002456                     L3:
  5391                           
  5392                           ;Lab7_S1_sample.c: 128: PORTCbits.RC4 = 1;
  5393  002456  8882               	bsf	3970,4,c	;volatile
  5394                           
  5395                           ; BSR set to: 0
  5396                           ;Lab7_S1_sample.c: 130: }
  5397                           
  5398                           ;Lab7_S1_sample.c: 129: break;
  5399  002458  D00F               	goto	l113
  5400  00245A                     l5363:
  5401  00245A  0100               	movlb	0	; () banked
  5402  00245C  51CB               	movf	Set_NS_LT@color& (0+255),w,b
  5403                           
  5404                           ; Switch size 1, requested type "space"
  5405                           ; Number of cases is 4, Range of values is 0 to 3
  5406                           ; switch strategies available:
  5407                           ; Name         Instructions Cycles
  5408                           ; simple_byte           13     7 (average)
  5409                           ;	Chosen strategy is simple_byte
  5410  00245E  0A00               	xorlw	0	; case 0
  5411  002460  B4D8               	btfsc	status,2,c
  5412  002462  D7F1               	goto	l108
  5413  002464  0A01               	xorlw	1	; case 1
  5414  002466  B4D8               	btfsc	status,2,c
  5415  002468  D7F0               	goto	l110
  5416  00246A  0A03               	xorlw	3	; case 2
  5417  00246C  B4D8               	btfsc	status,2,c
  5418  00246E  D7F0               	goto	l111
  5419  002470  0A01               	xorlw	1	; case 3
  5420  002472  B4D8               	btfsc	status,2,c
  5421  002474  D7EF               	goto	l112
  5422  002476  D000               	goto	l113
  5423  002478                     l113:
  5424                           
  5425                           ; BSR set to: 0
  5426  002478  0012               	return		;funcret
  5427  00247A                     __end_of_Set_NS_LT:
  5428                           	opt stack 0
  5429                           tblptru	equ	0xFF8
  5430                           tblptrh	equ	0xFF7
  5431                           tblptrl	equ	0xFF6
  5432                           tablat	equ	0xFF5
  5433                           postinc0	equ	0xFEE
  5434                           wreg	equ	0xFE8
  5435                           postdec1	equ	0xFE5
  5436                           fsr1l	equ	0xFE1
  5437                           status	equ	0xFD8
  5438                           
  5439 ;; *************** function _Set_NS *****************
  5440 ;; Defined at:
  5441 ;;		line 92 in file "Lab7_S1_sample.c"
  5442 ;; Parameters:    Size  Location     Type
  5443 ;;  color           1    wreg     unsigned char 
  5444 ;; Auto vars:     Size  Location     Type
  5445 ;;  color           1    0[BANK0 ] unsigned char 
  5446 ;; Return value:  Size  Location     Type
  5447 ;;		None               void
  5448 ;; Registers used:
  5449 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5450 ;; Tracked objects:
  5451 ;;		On entry : 0/0
  5452 ;;		On exit  : 0/0
  5453 ;;		Unchanged: 0/0
  5454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5458 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5459 ;;Total ram usage:        1 bytes
  5460 ;; Hardware stack levels used:    1
  5461 ;; Hardware stack levels required when called:    9
  5462 ;; This function calls:
  5463 ;;		_update_LCD_color
  5464 ;; This function is called by:
  5465 ;;		_Day_Mode
  5466 ;;		_Night_Mode
  5467 ;;		_Do_Flashing
  5468 ;; This function uses a non-reentrant model
  5469 ;;
  5470                           
  5471                           	psect	text22
  5472  00247A                     __ptext22:
  5473                           	opt stack 0
  5474  00247A                     _Set_NS:
  5475                           	opt stack 20
  5476                           
  5477                           ; BSR set to: 0
  5478                           ;incstack = 0
  5479                           ;Set_NS@color stored from wreg
  5480  00247A  0100               	movlb	0	; () banked
  5481  00247C  6FCB               	movwf	Set_NS@color& (0+255),b
  5482                           
  5483                           ; BSR set to: 0
  5484                           ;Lab7_S1_sample.c: 93: direction = 0;
  5485  00247E  0E00               	movlw	0
  5486  002480  6E5B               	movwf	_direction,c
  5487                           
  5488                           ; BSR set to: 0
  5489                           ;Lab7_S1_sample.c: 94: update_LCD_color(direction, color);
  5490  002482  C0CB  F041         	movff	Set_NS@color,update_LCD_color@color
  5491  002486  505B               	movf	_direction,w,c
  5492  002488  ECCB  F003         	call	_update_LCD_color
  5493                           
  5494                           ;Lab7_S1_sample.c: 96: switch (color) {
  5495  00248C  D00A               	goto	l5355
  5496  00248E                     l99:
  5497                           
  5498                           ; BSR set to: 0
  5499  00248E  9280               	bcf	3968,1,c	;volatile
  5500  002490  D001               	goto	L4
  5501  002492                     l101:
  5502                           
  5503                           ; BSR set to: 0
  5504  002492  8280               	bsf	3968,1,c	;volatile
  5505  002494                     L4:
  5506                           
  5507                           ;Lab7_S1_sample.c: 101: PORTAbits.RA2 = 0;
  5508  002494  9480               	bcf	3968,2,c	;volatile
  5509                           
  5510                           ;Lab7_S1_sample.c: 102: break;
  5511  002496  D014               	goto	l104
  5512  002498                     l102:
  5513                           
  5514                           ; BSR set to: 0
  5515  002498  9280               	bcf	3968,1,c	;volatile
  5516  00249A  D001               	goto	L5
  5517  00249C                     l103:
  5518                           
  5519                           ; BSR set to: 0
  5520  00249C  8280               	bsf	3968,1,c	;volatile
  5521  00249E                     L5:
  5522                           
  5523                           ;Lab7_S1_sample.c: 107: PORTAbits.RA2 = 1;
  5524  00249E  8480               	bsf	3968,2,c	;volatile
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;Lab7_S1_sample.c: 109: }
  5528                           
  5529                           ;Lab7_S1_sample.c: 108: break;
  5530  0024A0  D00F               	goto	l104
  5531  0024A2                     l5355:
  5532  0024A2  0100               	movlb	0	; () banked
  5533  0024A4  51CB               	movf	Set_NS@color& (0+255),w,b
  5534                           
  5535                           ; Switch size 1, requested type "space"
  5536                           ; Number of cases is 4, Range of values is 0 to 3
  5537                           ; switch strategies available:
  5538                           ; Name         Instructions Cycles
  5539                           ; simple_byte           13     7 (average)
  5540                           ;	Chosen strategy is simple_byte
  5541  0024A6  0A00               	xorlw	0	; case 0
  5542  0024A8  B4D8               	btfsc	status,2,c
  5543  0024AA  D7F1               	goto	l99
  5544  0024AC  0A01               	xorlw	1	; case 1
  5545  0024AE  B4D8               	btfsc	status,2,c
  5546  0024B0  D7F0               	goto	l101
  5547  0024B2  0A03               	xorlw	3	; case 2
  5548  0024B4  B4D8               	btfsc	status,2,c
  5549  0024B6  D7F0               	goto	l102
  5550  0024B8  0A01               	xorlw	1	; case 3
  5551  0024BA  B4D8               	btfsc	status,2,c
  5552  0024BC  D7EF               	goto	l103
  5553  0024BE  D000               	goto	l104
  5554  0024C0                     l104:
  5555                           
  5556                           ; BSR set to: 0
  5557  0024C0  0012               	return		;funcret
  5558  0024C2                     __end_of_Set_NS:
  5559                           	opt stack 0
  5560                           tblptru	equ	0xFF8
  5561                           tblptrh	equ	0xFF7
  5562                           tblptrl	equ	0xFF6
  5563                           tablat	equ	0xFF5
  5564                           postinc0	equ	0xFEE
  5565                           wreg	equ	0xFE8
  5566                           postdec1	equ	0xFE5
  5567                           fsr1l	equ	0xFE1
  5568                           status	equ	0xFD8
  5569                           
  5570 ;; *************** function _Set_EW_LT *****************
  5571 ;; Defined at:
  5572 ;;		line 155 in file "Lab7_S1_sample.c"
  5573 ;; Parameters:    Size  Location     Type
  5574 ;;  color           1    wreg     unsigned char 
  5575 ;; Auto vars:     Size  Location     Type
  5576 ;;  color           1    0[BANK0 ] unsigned char 
  5577 ;; Return value:  Size  Location     Type
  5578 ;;		None               void
  5579 ;; Registers used:
  5580 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5581 ;; Tracked objects:
  5582 ;;		On entry : 0/0
  5583 ;;		On exit  : 0/0
  5584 ;;		Unchanged: 0/0
  5585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5588 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;Total ram usage:        1 bytes
  5591 ;; Hardware stack levels used:    1
  5592 ;; Hardware stack levels required when called:    9
  5593 ;; This function calls:
  5594 ;;		_update_LCD_color
  5595 ;; This function is called by:
  5596 ;;		_Day_Mode
  5597 ;;		_Night_Mode
  5598 ;;		_Do_Flashing
  5599 ;; This function uses a non-reentrant model
  5600 ;;
  5601                           
  5602                           	psect	text23
  5603  0024C2                     __ptext23:
  5604                           	opt stack 0
  5605  0024C2                     _Set_EW_LT:
  5606                           	opt stack 20
  5607                           
  5608                           ; BSR set to: 0
  5609                           ;incstack = 0
  5610                           ;Set_EW_LT@color stored from wreg
  5611  0024C2  0100               	movlb	0	; () banked
  5612  0024C4  6FCB               	movwf	Set_EW_LT@color& (0+255),b
  5613                           
  5614                           ; BSR set to: 0
  5615                           ;Lab7_S1_sample.c: 156: direction = 3;
  5616  0024C6  0E03               	movlw	3
  5617  0024C8  6E5B               	movwf	_direction,c
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;Lab7_S1_sample.c: 157: update_LCD_color(direction, color);
  5621  0024CA  C0CB  F041         	movff	Set_EW_LT@color,update_LCD_color@color
  5622  0024CE  505B               	movf	_direction,w,c
  5623  0024D0  ECCB  F003         	call	_update_LCD_color
  5624                           
  5625                           ;Lab7_S1_sample.c: 159: switch (color) {
  5626  0024D4  D00A               	goto	l5379
  5627  0024D6                     l126:
  5628                           
  5629                           ; BSR set to: 0
  5630  0024D6  9E81               	bcf	3969,7,c	;volatile
  5631  0024D8  D001               	goto	L6
  5632  0024DA                     l128:
  5633                           
  5634                           ; BSR set to: 0
  5635  0024DA  8E81               	bsf	3969,7,c	;volatile
  5636  0024DC                     L6:
  5637                           
  5638                           ;Lab7_S1_sample.c: 164: PORTEbits.RE0 = 0;
  5639  0024DC  9084               	bcf	3972,0,c	;volatile
  5640                           
  5641                           ;Lab7_S1_sample.c: 165: break;
  5642  0024DE  D014               	goto	l131
  5643  0024E0                     l129:
  5644                           
  5645                           ; BSR set to: 0
  5646  0024E0  9E81               	bcf	3969,7,c	;volatile
  5647  0024E2  D001               	goto	L7
  5648  0024E4                     l130:
  5649                           
  5650                           ; BSR set to: 0
  5651  0024E4  8E81               	bsf	3969,7,c	;volatile
  5652  0024E6                     L7:
  5653                           
  5654                           ;Lab7_S1_sample.c: 170: PORTEbits.RE0 = 1;
  5655  0024E6  8084               	bsf	3972,0,c	;volatile
  5656                           
  5657                           ; BSR set to: 0
  5658                           ;Lab7_S1_sample.c: 172: }
  5659                           
  5660                           ;Lab7_S1_sample.c: 171: break;
  5661  0024E8  D00F               	goto	l131
  5662  0024EA                     l5379:
  5663  0024EA  0100               	movlb	0	; () banked
  5664  0024EC  51CB               	movf	Set_EW_LT@color& (0+255),w,b
  5665                           
  5666                           ; Switch size 1, requested type "space"
  5667                           ; Number of cases is 4, Range of values is 0 to 3
  5668                           ; switch strategies available:
  5669                           ; Name         Instructions Cycles
  5670                           ; simple_byte           13     7 (average)
  5671                           ;	Chosen strategy is simple_byte
  5672  0024EE  0A00               	xorlw	0	; case 0
  5673  0024F0  B4D8               	btfsc	status,2,c
  5674  0024F2  D7F1               	goto	l126
  5675  0024F4  0A01               	xorlw	1	; case 1
  5676  0024F6  B4D8               	btfsc	status,2,c
  5677  0024F8  D7F0               	goto	l128
  5678  0024FA  0A03               	xorlw	3	; case 2
  5679  0024FC  B4D8               	btfsc	status,2,c
  5680  0024FE  D7F0               	goto	l129
  5681  002500  0A01               	xorlw	1	; case 3
  5682  002502  B4D8               	btfsc	status,2,c
  5683  002504  D7EF               	goto	l130
  5684  002506  D000               	goto	l131
  5685  002508                     l131:
  5686                           
  5687                           ; BSR set to: 0
  5688  002508  0012               	return		;funcret
  5689  00250A                     __end_of_Set_EW_LT:
  5690                           	opt stack 0
  5691                           tblptru	equ	0xFF8
  5692                           tblptrh	equ	0xFF7
  5693                           tblptrl	equ	0xFF6
  5694                           tablat	equ	0xFF5
  5695                           postinc0	equ	0xFEE
  5696                           wreg	equ	0xFE8
  5697                           postdec1	equ	0xFE5
  5698                           fsr1l	equ	0xFE1
  5699                           status	equ	0xFD8
  5700                           
  5701 ;; *************** function _Set_EW *****************
  5702 ;; Defined at:
  5703 ;;		line 134 in file "Lab7_S1_sample.c"
  5704 ;; Parameters:    Size  Location     Type
  5705 ;;  color           1    wreg     unsigned char 
  5706 ;; Auto vars:     Size  Location     Type
  5707 ;;  color           1    0[BANK0 ] unsigned char 
  5708 ;; Return value:  Size  Location     Type
  5709 ;;		None               void
  5710 ;; Registers used:
  5711 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5712 ;; Tracked objects:
  5713 ;;		On entry : 0/0
  5714 ;;		On exit  : 0/0
  5715 ;;		Unchanged: 0/0
  5716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5719 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5720 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5721 ;;Total ram usage:        1 bytes
  5722 ;; Hardware stack levels used:    1
  5723 ;; Hardware stack levels required when called:    9
  5724 ;; This function calls:
  5725 ;;		_update_LCD_color
  5726 ;; This function is called by:
  5727 ;;		_Day_Mode
  5728 ;;		_Night_Mode
  5729 ;;		_Do_Flashing
  5730 ;; This function uses a non-reentrant model
  5731 ;;
  5732                           
  5733                           	psect	text24
  5734  00250A                     __ptext24:
  5735                           	opt stack 0
  5736  00250A                     _Set_EW:
  5737                           	opt stack 20
  5738                           
  5739                           ; BSR set to: 0
  5740                           ;incstack = 0
  5741                           ;Set_EW@color stored from wreg
  5742  00250A  0100               	movlb	0	; () banked
  5743  00250C  6FCB               	movwf	Set_EW@color& (0+255),b
  5744                           
  5745                           ; BSR set to: 0
  5746                           ;Lab7_S1_sample.c: 135: direction = 2;
  5747  00250E  0E02               	movlw	2
  5748  002510  6E5B               	movwf	_direction,c
  5749                           
  5750                           ; BSR set to: 0
  5751                           ;Lab7_S1_sample.c: 136: update_LCD_color(direction, color);
  5752  002512  C0CB  F041         	movff	Set_EW@color,update_LCD_color@color
  5753  002516  505B               	movf	_direction,w,c
  5754  002518  ECCB  F003         	call	_update_LCD_color
  5755                           
  5756                           ;Lab7_S1_sample.c: 138: switch (color) {
  5757  00251C  D00A               	goto	l5371
  5758  00251E                     l117:
  5759                           
  5760                           ; BSR set to: 0
  5761  00251E  9881               	bcf	3969,4,c	;volatile
  5762  002520  D001               	goto	L8
  5763  002522                     l119:
  5764                           
  5765                           ; BSR set to: 0
  5766  002522  8881               	bsf	3969,4,c	;volatile
  5767  002524                     L8:
  5768                           
  5769                           ;Lab7_S1_sample.c: 143: PORTBbits.RB5 = 0;
  5770  002524  9A81               	bcf	3969,5,c	;volatile
  5771                           
  5772                           ;Lab7_S1_sample.c: 144: break;
  5773  002526  D014               	goto	l122
  5774  002528                     l120:
  5775                           
  5776                           ; BSR set to: 0
  5777  002528  9881               	bcf	3969,4,c	;volatile
  5778  00252A  D001               	goto	L9
  5779  00252C                     l121:
  5780                           
  5781                           ; BSR set to: 0
  5782  00252C  8881               	bsf	3969,4,c	;volatile
  5783  00252E                     L9:
  5784                           
  5785                           ;Lab7_S1_sample.c: 149: PORTBbits.RB5 = 1;
  5786  00252E  8A81               	bsf	3969,5,c	;volatile
  5787                           
  5788                           ; BSR set to: 0
  5789                           ;Lab7_S1_sample.c: 151: }
  5790                           
  5791                           ;Lab7_S1_sample.c: 150: break;
  5792  002530  D00F               	goto	l122
  5793  002532                     l5371:
  5794  002532  0100               	movlb	0	; () banked
  5795  002534  51CB               	movf	Set_EW@color& (0+255),w,b
  5796                           
  5797                           ; Switch size 1, requested type "space"
  5798                           ; Number of cases is 4, Range of values is 0 to 3
  5799                           ; switch strategies available:
  5800                           ; Name         Instructions Cycles
  5801                           ; simple_byte           13     7 (average)
  5802                           ;	Chosen strategy is simple_byte
  5803  002536  0A00               	xorlw	0	; case 0
  5804  002538  B4D8               	btfsc	status,2,c
  5805  00253A  D7F1               	goto	l117
  5806  00253C  0A01               	xorlw	1	; case 1
  5807  00253E  B4D8               	btfsc	status,2,c
  5808  002540  D7F0               	goto	l119
  5809  002542  0A03               	xorlw	3	; case 2
  5810  002544  B4D8               	btfsc	status,2,c
  5811  002546  D7F0               	goto	l120
  5812  002548  0A01               	xorlw	1	; case 3
  5813  00254A  B4D8               	btfsc	status,2,c
  5814  00254C  D7EF               	goto	l121
  5815  00254E  D000               	goto	l122
  5816  002550                     l122:
  5817                           
  5818                           ; BSR set to: 0
  5819  002550  0012               	return		;funcret
  5820  002552                     __end_of_Set_EW:
  5821                           	opt stack 0
  5822                           tblptru	equ	0xFF8
  5823                           tblptrh	equ	0xFF7
  5824                           tblptrl	equ	0xFF6
  5825                           tablat	equ	0xFF5
  5826                           postinc0	equ	0xFEE
  5827                           wreg	equ	0xFE8
  5828                           postdec1	equ	0xFE5
  5829                           fsr1l	equ	0xFE1
  5830                           status	equ	0xFD8
  5831                           
  5832 ;; *************** function _update_LCD_color *****************
  5833 ;; Defined at:
  5834 ;;		line 161 in file "Main_Screen.c"
  5835 ;; Parameters:    Size  Location     Type
  5836 ;;  direction       1    wreg     unsigned char 
  5837 ;;  color           1   64[COMRAM] unsigned char 
  5838 ;; Auto vars:     Size  Location     Type
  5839 ;;  direction       1   65[COMRAM] unsigned char 
  5840 ;;  Circle_Y        1   66[COMRAM] unsigned char 
  5841 ;; Return value:  Size  Location     Type
  5842 ;;		None               void
  5843 ;; Registers used:
  5844 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5845 ;; Tracked objects:
  5846 ;;		On entry : 0/0
  5847 ;;		On exit  : 0/0
  5848 ;;		Unchanged: 0/0
  5849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5850 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5851 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5853 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5854 ;;Total ram usage:        3 bytes
  5855 ;; Hardware stack levels used:    1
  5856 ;; Hardware stack levels required when called:    8
  5857 ;; This function calls:
  5858 ;;		_drawCircle
  5859 ;;		_fillCircle
  5860 ;; This function is called by:
  5861 ;;		_Set_NS
  5862 ;;		_Set_NS_LT
  5863 ;;		_Set_EW
  5864 ;;		_Set_EW_LT
  5865 ;; This function uses a non-reentrant model
  5866 ;;
  5867                           
  5868                           	psect	text25
  5869  000796                     __ptext25:
  5870                           	opt stack 0
  5871  000796                     _update_LCD_color:
  5872                           	opt stack 20
  5873                           
  5874                           ; BSR set to: 0
  5875                           ;incstack = 0
  5876                           ;update_LCD_color@direction stored from wreg
  5877  000796  6E42               	movwf	update_LCD_color@direction,c
  5878                           
  5879                           ;Main_Screen.c: 163: char Circle_Y;
  5880                           ;Main_Screen.c: 164: Circle_Y = 30 + 16 + direction * 30;
  5881  000798  5042               	movf	update_LCD_color@direction,w,c
  5882  00079A  0D1E               	mullw	30
  5883  00079C  50F3               	movf	prodl,w,c
  5884  00079E  0F2E               	addlw	46
  5885  0007A0  6E43               	movwf	update_LCD_color@Circle_Y,c
  5886                           
  5887                           ;Main_Screen.c: 166: if (color == 0)
  5888  0007A2  5041               	movf	update_LCD_color@color,w,c
  5889  0007A4  A4D8               	btfss	status,2,c
  5890  0007A6  D067               	goto	l5121
  5891                           
  5892                           ;Main_Screen.c: 167: {
  5893                           ;Main_Screen.c: 168: fillCircle(40, Circle_Y, 7, 0x0000);
  5894  0007A8  0E00               	movlw	0
  5895  0007AA  6E3A               	movwf	fillCircle@x0+1,c
  5896  0007AC  0E28               	movlw	40
  5897  0007AE  6E39               	movwf	fillCircle@x0,c
  5898  0007B0  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5899  0007B4  6A3C               	clrf	fillCircle@y0+1,c
  5900  0007B6  0E00               	movlw	0
  5901  0007B8  6E3E               	movwf	fillCircle@r+1,c
  5902  0007BA  0E07               	movlw	7
  5903  0007BC  6E3D               	movwf	fillCircle@r,c
  5904  0007BE  0E00               	movlw	0
  5905  0007C0  6E40               	movwf	fillCircle@color+1,c
  5906  0007C2  0E00               	movlw	0
  5907  0007C4  6E3F               	movwf	fillCircle@color,c
  5908  0007C6  ECA4  F011         	call	_fillCircle	;wreg free
  5909                           
  5910                           ;Main_Screen.c: 169: fillCircle(60, Circle_Y, 7, 0x0000);
  5911  0007CA  0E00               	movlw	0
  5912  0007CC  6E3A               	movwf	fillCircle@x0+1,c
  5913  0007CE  0E3C               	movlw	60
  5914  0007D0  6E39               	movwf	fillCircle@x0,c
  5915  0007D2  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5916  0007D6  6A3C               	clrf	fillCircle@y0+1,c
  5917  0007D8  0E00               	movlw	0
  5918  0007DA  6E3E               	movwf	fillCircle@r+1,c
  5919  0007DC  0E07               	movlw	7
  5920  0007DE  6E3D               	movwf	fillCircle@r,c
  5921  0007E0  0E00               	movlw	0
  5922  0007E2  6E40               	movwf	fillCircle@color+1,c
  5923  0007E4  0E00               	movlw	0
  5924  0007E6  6E3F               	movwf	fillCircle@color,c
  5925  0007E8  ECA4  F011         	call	_fillCircle	;wreg free
  5926                           
  5927                           ;Main_Screen.c: 170: fillCircle(80, Circle_Y, 7, 0x0000);
  5928  0007EC  0E00               	movlw	0
  5929  0007EE  6E3A               	movwf	fillCircle@x0+1,c
  5930  0007F0  0E50               	movlw	80
  5931  0007F2  6E39               	movwf	fillCircle@x0,c
  5932  0007F4  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  5933  0007F8  6A3C               	clrf	fillCircle@y0+1,c
  5934  0007FA  0E00               	movlw	0
  5935  0007FC  6E3E               	movwf	fillCircle@r+1,c
  5936  0007FE  0E07               	movlw	7
  5937  000800  6E3D               	movwf	fillCircle@r,c
  5938  000802  0E00               	movlw	0
  5939  000804  6E40               	movwf	fillCircle@color+1,c
  5940  000806  0E00               	movlw	0
  5941  000808  6E3F               	movwf	fillCircle@color,c
  5942  00080A  ECA4  F011         	call	_fillCircle	;wreg free
  5943                           
  5944                           ;Main_Screen.c: 171: drawCircle(40, Circle_Y, 7, 0xF800);
  5945  00080E  0E00               	movlw	0
  5946  000810  6E1B               	movwf	drawCircle@x0+1,c
  5947  000812  0E28               	movlw	40
  5948  000814  6E1A               	movwf	drawCircle@x0,c
  5949  000816  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5950  00081A  6A1D               	clrf	drawCircle@y0+1,c
  5951  00081C  0E00               	movlw	0
  5952  00081E  6E1F               	movwf	drawCircle@r+1,c
  5953  000820  0E07               	movlw	7
  5954  000822  6E1E               	movwf	drawCircle@r,c
  5955  000824  0EF8               	movlw	248
  5956  000826  6E21               	movwf	drawCircle@color+1,c
  5957  000828  0E00               	movlw	0
  5958  00082A  6E20               	movwf	drawCircle@color,c
  5959  00082C  ECB8  F006         	call	_drawCircle	;wreg free
  5960                           
  5961                           ;Main_Screen.c: 172: drawCircle(60, Circle_Y, 7, 0xFFE0);
  5962  000830  0E00               	movlw	0
  5963  000832  6E1B               	movwf	drawCircle@x0+1,c
  5964  000834  0E3C               	movlw	60
  5965  000836  6E1A               	movwf	drawCircle@x0,c
  5966  000838  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5967  00083C  6A1D               	clrf	drawCircle@y0+1,c
  5968  00083E  0E00               	movlw	0
  5969  000840  6E1F               	movwf	drawCircle@r+1,c
  5970  000842  0E07               	movlw	7
  5971  000844  6E1E               	movwf	drawCircle@r,c
  5972  000846  0EFF               	movlw	255
  5973  000848  6E21               	movwf	drawCircle@color+1,c
  5974  00084A  0EE0               	movlw	224
  5975  00084C  6E20               	movwf	drawCircle@color,c
  5976  00084E  ECB8  F006         	call	_drawCircle	;wreg free
  5977                           
  5978                           ;Main_Screen.c: 173: drawCircle(80, Circle_Y, 7, 0x07E0);
  5979  000852  0E00               	movlw	0
  5980  000854  6E1B               	movwf	drawCircle@x0+1,c
  5981  000856  0E50               	movlw	80
  5982  000858  6E1A               	movwf	drawCircle@x0,c
  5983  00085A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  5984  00085E  6A1D               	clrf	drawCircle@y0+1,c
  5985  000860  0E00               	movlw	0
  5986  000862  6E1F               	movwf	drawCircle@r+1,c
  5987  000864  0E07               	movlw	7
  5988  000866  6E1E               	movwf	drawCircle@r,c
  5989  000868  0E07               	movlw	7
  5990  00086A  6E21               	movwf	drawCircle@color+1,c
  5991  00086C  0EE0               	movlw	224
  5992  00086E  6E20               	movwf	drawCircle@color,c
  5993  000870  ECB8  F006         	call	_drawCircle	;wreg free
  5994  000874  D000               	goto	l5121
  5995  000876                     l5121:
  5996                           
  5997                           ;Main_Screen.c: 174: }
  5998                           ;Main_Screen.c: 176: if (color == 1)
  5999  000876  0441               	decf	update_LCD_color@color,w,c
  6000  000878  A4D8               	btfss	status,2,c
  6001  00087A  D067               	goto	l5125
  6002                           
  6003                           ;Main_Screen.c: 177: {
  6004                           ;Main_Screen.c: 178: fillCircle(40, Circle_Y, 7, 0xF800);
  6005  00087C  0E00               	movlw	0
  6006  00087E  6E3A               	movwf	fillCircle@x0+1,c
  6007  000880  0E28               	movlw	40
  6008  000882  6E39               	movwf	fillCircle@x0,c
  6009  000884  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6010  000888  6A3C               	clrf	fillCircle@y0+1,c
  6011  00088A  0E00               	movlw	0
  6012  00088C  6E3E               	movwf	fillCircle@r+1,c
  6013  00088E  0E07               	movlw	7
  6014  000890  6E3D               	movwf	fillCircle@r,c
  6015  000892  0EF8               	movlw	248
  6016  000894  6E40               	movwf	fillCircle@color+1,c
  6017  000896  0E00               	movlw	0
  6018  000898  6E3F               	movwf	fillCircle@color,c
  6019  00089A  ECA4  F011         	call	_fillCircle	;wreg free
  6020                           
  6021                           ;Main_Screen.c: 179: fillCircle(60, Circle_Y, 7, 0x0000);
  6022  00089E  0E00               	movlw	0
  6023  0008A0  6E3A               	movwf	fillCircle@x0+1,c
  6024  0008A2  0E3C               	movlw	60
  6025  0008A4  6E39               	movwf	fillCircle@x0,c
  6026  0008A6  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6027  0008AA  6A3C               	clrf	fillCircle@y0+1,c
  6028  0008AC  0E00               	movlw	0
  6029  0008AE  6E3E               	movwf	fillCircle@r+1,c
  6030  0008B0  0E07               	movlw	7
  6031  0008B2  6E3D               	movwf	fillCircle@r,c
  6032  0008B4  0E00               	movlw	0
  6033  0008B6  6E40               	movwf	fillCircle@color+1,c
  6034  0008B8  0E00               	movlw	0
  6035  0008BA  6E3F               	movwf	fillCircle@color,c
  6036  0008BC  ECA4  F011         	call	_fillCircle	;wreg free
  6037                           
  6038                           ;Main_Screen.c: 180: fillCircle(80, Circle_Y, 7, 0x0000);
  6039  0008C0  0E00               	movlw	0
  6040  0008C2  6E3A               	movwf	fillCircle@x0+1,c
  6041  0008C4  0E50               	movlw	80
  6042  0008C6  6E39               	movwf	fillCircle@x0,c
  6043  0008C8  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6044  0008CC  6A3C               	clrf	fillCircle@y0+1,c
  6045  0008CE  0E00               	movlw	0
  6046  0008D0  6E3E               	movwf	fillCircle@r+1,c
  6047  0008D2  0E07               	movlw	7
  6048  0008D4  6E3D               	movwf	fillCircle@r,c
  6049  0008D6  0E00               	movlw	0
  6050  0008D8  6E40               	movwf	fillCircle@color+1,c
  6051  0008DA  0E00               	movlw	0
  6052  0008DC  6E3F               	movwf	fillCircle@color,c
  6053  0008DE  ECA4  F011         	call	_fillCircle	;wreg free
  6054                           
  6055                           ;Main_Screen.c: 181: drawCircle(40, Circle_Y, 7, 0xF800);
  6056  0008E2  0E00               	movlw	0
  6057  0008E4  6E1B               	movwf	drawCircle@x0+1,c
  6058  0008E6  0E28               	movlw	40
  6059  0008E8  6E1A               	movwf	drawCircle@x0,c
  6060  0008EA  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6061  0008EE  6A1D               	clrf	drawCircle@y0+1,c
  6062  0008F0  0E00               	movlw	0
  6063  0008F2  6E1F               	movwf	drawCircle@r+1,c
  6064  0008F4  0E07               	movlw	7
  6065  0008F6  6E1E               	movwf	drawCircle@r,c
  6066  0008F8  0EF8               	movlw	248
  6067  0008FA  6E21               	movwf	drawCircle@color+1,c
  6068  0008FC  0E00               	movlw	0
  6069  0008FE  6E20               	movwf	drawCircle@color,c
  6070  000900  ECB8  F006         	call	_drawCircle	;wreg free
  6071                           
  6072                           ;Main_Screen.c: 182: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6073  000904  0E00               	movlw	0
  6074  000906  6E1B               	movwf	drawCircle@x0+1,c
  6075  000908  0E3C               	movlw	60
  6076  00090A  6E1A               	movwf	drawCircle@x0,c
  6077  00090C  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6078  000910  6A1D               	clrf	drawCircle@y0+1,c
  6079  000912  0E00               	movlw	0
  6080  000914  6E1F               	movwf	drawCircle@r+1,c
  6081  000916  0E07               	movlw	7
  6082  000918  6E1E               	movwf	drawCircle@r,c
  6083  00091A  0EFF               	movlw	255
  6084  00091C  6E21               	movwf	drawCircle@color+1,c
  6085  00091E  0EE0               	movlw	224
  6086  000920  6E20               	movwf	drawCircle@color,c
  6087  000922  ECB8  F006         	call	_drawCircle	;wreg free
  6088                           
  6089                           ;Main_Screen.c: 183: drawCircle(80, Circle_Y, 7, 0x07E0);
  6090  000926  0E00               	movlw	0
  6091  000928  6E1B               	movwf	drawCircle@x0+1,c
  6092  00092A  0E50               	movlw	80
  6093  00092C  6E1A               	movwf	drawCircle@x0,c
  6094  00092E  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6095  000932  6A1D               	clrf	drawCircle@y0+1,c
  6096  000934  0E00               	movlw	0
  6097  000936  6E1F               	movwf	drawCircle@r+1,c
  6098  000938  0E07               	movlw	7
  6099  00093A  6E1E               	movwf	drawCircle@r,c
  6100  00093C  0E07               	movlw	7
  6101  00093E  6E21               	movwf	drawCircle@color+1,c
  6102  000940  0EE0               	movlw	224
  6103  000942  6E20               	movwf	drawCircle@color,c
  6104  000944  ECB8  F006         	call	_drawCircle	;wreg free
  6105  000948  D000               	goto	l5125
  6106  00094A                     l5125:
  6107                           
  6108                           ;Main_Screen.c: 184: }
  6109                           ;Main_Screen.c: 186: if (color == 3)
  6110  00094A  0E03               	movlw	3
  6111  00094C  1841               	xorwf	update_LCD_color@color,w,c
  6112  00094E  A4D8               	btfss	status,2,c
  6113  000950  D067               	goto	l5129
  6114                           
  6115                           ;Main_Screen.c: 187: {
  6116                           ;Main_Screen.c: 188: fillCircle(40, Circle_Y, 7, 0x0000);
  6117  000952  0E00               	movlw	0
  6118  000954  6E3A               	movwf	fillCircle@x0+1,c
  6119  000956  0E28               	movlw	40
  6120  000958  6E39               	movwf	fillCircle@x0,c
  6121  00095A  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6122  00095E  6A3C               	clrf	fillCircle@y0+1,c
  6123  000960  0E00               	movlw	0
  6124  000962  6E3E               	movwf	fillCircle@r+1,c
  6125  000964  0E07               	movlw	7
  6126  000966  6E3D               	movwf	fillCircle@r,c
  6127  000968  0E00               	movlw	0
  6128  00096A  6E40               	movwf	fillCircle@color+1,c
  6129  00096C  0E00               	movlw	0
  6130  00096E  6E3F               	movwf	fillCircle@color,c
  6131  000970  ECA4  F011         	call	_fillCircle	;wreg free
  6132                           
  6133                           ;Main_Screen.c: 189: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6134  000974  0E00               	movlw	0
  6135  000976  6E3A               	movwf	fillCircle@x0+1,c
  6136  000978  0E3C               	movlw	60
  6137  00097A  6E39               	movwf	fillCircle@x0,c
  6138  00097C  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6139  000980  6A3C               	clrf	fillCircle@y0+1,c
  6140  000982  0E00               	movlw	0
  6141  000984  6E3E               	movwf	fillCircle@r+1,c
  6142  000986  0E07               	movlw	7
  6143  000988  6E3D               	movwf	fillCircle@r,c
  6144  00098A  0EFF               	movlw	255
  6145  00098C  6E40               	movwf	fillCircle@color+1,c
  6146  00098E  0EE0               	movlw	224
  6147  000990  6E3F               	movwf	fillCircle@color,c
  6148  000992  ECA4  F011         	call	_fillCircle	;wreg free
  6149                           
  6150                           ;Main_Screen.c: 190: fillCircle(80, Circle_Y, 7, 0x0000);
  6151  000996  0E00               	movlw	0
  6152  000998  6E3A               	movwf	fillCircle@x0+1,c
  6153  00099A  0E50               	movlw	80
  6154  00099C  6E39               	movwf	fillCircle@x0,c
  6155  00099E  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6156  0009A2  6A3C               	clrf	fillCircle@y0+1,c
  6157  0009A4  0E00               	movlw	0
  6158  0009A6  6E3E               	movwf	fillCircle@r+1,c
  6159  0009A8  0E07               	movlw	7
  6160  0009AA  6E3D               	movwf	fillCircle@r,c
  6161  0009AC  0E00               	movlw	0
  6162  0009AE  6E40               	movwf	fillCircle@color+1,c
  6163  0009B0  0E00               	movlw	0
  6164  0009B2  6E3F               	movwf	fillCircle@color,c
  6165  0009B4  ECA4  F011         	call	_fillCircle	;wreg free
  6166                           
  6167                           ;Main_Screen.c: 191: drawCircle(40, Circle_Y, 7, 0xF800);
  6168  0009B8  0E00               	movlw	0
  6169  0009BA  6E1B               	movwf	drawCircle@x0+1,c
  6170  0009BC  0E28               	movlw	40
  6171  0009BE  6E1A               	movwf	drawCircle@x0,c
  6172  0009C0  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6173  0009C4  6A1D               	clrf	drawCircle@y0+1,c
  6174  0009C6  0E00               	movlw	0
  6175  0009C8  6E1F               	movwf	drawCircle@r+1,c
  6176  0009CA  0E07               	movlw	7
  6177  0009CC  6E1E               	movwf	drawCircle@r,c
  6178  0009CE  0EF8               	movlw	248
  6179  0009D0  6E21               	movwf	drawCircle@color+1,c
  6180  0009D2  0E00               	movlw	0
  6181  0009D4  6E20               	movwf	drawCircle@color,c
  6182  0009D6  ECB8  F006         	call	_drawCircle	;wreg free
  6183                           
  6184                           ;Main_Screen.c: 192: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6185  0009DA  0E00               	movlw	0
  6186  0009DC  6E1B               	movwf	drawCircle@x0+1,c
  6187  0009DE  0E3C               	movlw	60
  6188  0009E0  6E1A               	movwf	drawCircle@x0,c
  6189  0009E2  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6190  0009E6  6A1D               	clrf	drawCircle@y0+1,c
  6191  0009E8  0E00               	movlw	0
  6192  0009EA  6E1F               	movwf	drawCircle@r+1,c
  6193  0009EC  0E07               	movlw	7
  6194  0009EE  6E1E               	movwf	drawCircle@r,c
  6195  0009F0  0EFF               	movlw	255
  6196  0009F2  6E21               	movwf	drawCircle@color+1,c
  6197  0009F4  0EE0               	movlw	224
  6198  0009F6  6E20               	movwf	drawCircle@color,c
  6199  0009F8  ECB8  F006         	call	_drawCircle	;wreg free
  6200                           
  6201                           ;Main_Screen.c: 193: drawCircle(80, Circle_Y, 7, 0x07E0);
  6202  0009FC  0E00               	movlw	0
  6203  0009FE  6E1B               	movwf	drawCircle@x0+1,c
  6204  000A00  0E50               	movlw	80
  6205  000A02  6E1A               	movwf	drawCircle@x0,c
  6206  000A04  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6207  000A08  6A1D               	clrf	drawCircle@y0+1,c
  6208  000A0A  0E00               	movlw	0
  6209  000A0C  6E1F               	movwf	drawCircle@r+1,c
  6210  000A0E  0E07               	movlw	7
  6211  000A10  6E1E               	movwf	drawCircle@r,c
  6212  000A12  0E07               	movlw	7
  6213  000A14  6E21               	movwf	drawCircle@color+1,c
  6214  000A16  0EE0               	movlw	224
  6215  000A18  6E20               	movwf	drawCircle@color,c
  6216  000A1A  ECB8  F006         	call	_drawCircle	;wreg free
  6217  000A1E  D000               	goto	l5129
  6218  000A20                     l5129:
  6219                           
  6220                           ;Main_Screen.c: 194: }
  6221                           ;Main_Screen.c: 196: if (color == 2)
  6222  000A20  0E02               	movlw	2
  6223  000A22  1841               	xorwf	update_LCD_color@color,w,c
  6224  000A24  A4D8               	btfss	status,2,c
  6225  000A26  D067               	goto	l478
  6226                           
  6227                           ;Main_Screen.c: 197: {
  6228                           ;Main_Screen.c: 198: fillCircle(40, Circle_Y, 7, 0x0000);
  6229  000A28  0E00               	movlw	0
  6230  000A2A  6E3A               	movwf	fillCircle@x0+1,c
  6231  000A2C  0E28               	movlw	40
  6232  000A2E  6E39               	movwf	fillCircle@x0,c
  6233  000A30  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6234  000A34  6A3C               	clrf	fillCircle@y0+1,c
  6235  000A36  0E00               	movlw	0
  6236  000A38  6E3E               	movwf	fillCircle@r+1,c
  6237  000A3A  0E07               	movlw	7
  6238  000A3C  6E3D               	movwf	fillCircle@r,c
  6239  000A3E  0E00               	movlw	0
  6240  000A40  6E40               	movwf	fillCircle@color+1,c
  6241  000A42  0E00               	movlw	0
  6242  000A44  6E3F               	movwf	fillCircle@color,c
  6243  000A46  ECA4  F011         	call	_fillCircle	;wreg free
  6244                           
  6245                           ;Main_Screen.c: 199: fillCircle(60, Circle_Y, 7, 0x0000);
  6246  000A4A  0E00               	movlw	0
  6247  000A4C  6E3A               	movwf	fillCircle@x0+1,c
  6248  000A4E  0E3C               	movlw	60
  6249  000A50  6E39               	movwf	fillCircle@x0,c
  6250  000A52  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6251  000A56  6A3C               	clrf	fillCircle@y0+1,c
  6252  000A58  0E00               	movlw	0
  6253  000A5A  6E3E               	movwf	fillCircle@r+1,c
  6254  000A5C  0E07               	movlw	7
  6255  000A5E  6E3D               	movwf	fillCircle@r,c
  6256  000A60  0E00               	movlw	0
  6257  000A62  6E40               	movwf	fillCircle@color+1,c
  6258  000A64  0E00               	movlw	0
  6259  000A66  6E3F               	movwf	fillCircle@color,c
  6260  000A68  ECA4  F011         	call	_fillCircle	;wreg free
  6261                           
  6262                           ;Main_Screen.c: 200: fillCircle(80, Circle_Y, 7, 0x07E0);
  6263  000A6C  0E00               	movlw	0
  6264  000A6E  6E3A               	movwf	fillCircle@x0+1,c
  6265  000A70  0E50               	movlw	80
  6266  000A72  6E39               	movwf	fillCircle@x0,c
  6267  000A74  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6268  000A78  6A3C               	clrf	fillCircle@y0+1,c
  6269  000A7A  0E00               	movlw	0
  6270  000A7C  6E3E               	movwf	fillCircle@r+1,c
  6271  000A7E  0E07               	movlw	7
  6272  000A80  6E3D               	movwf	fillCircle@r,c
  6273  000A82  0E07               	movlw	7
  6274  000A84  6E40               	movwf	fillCircle@color+1,c
  6275  000A86  0EE0               	movlw	224
  6276  000A88  6E3F               	movwf	fillCircle@color,c
  6277  000A8A  ECA4  F011         	call	_fillCircle	;wreg free
  6278                           
  6279                           ;Main_Screen.c: 201: drawCircle(40, Circle_Y, 7, 0xF800);
  6280  000A8E  0E00               	movlw	0
  6281  000A90  6E1B               	movwf	drawCircle@x0+1,c
  6282  000A92  0E28               	movlw	40
  6283  000A94  6E1A               	movwf	drawCircle@x0,c
  6284  000A96  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6285  000A9A  6A1D               	clrf	drawCircle@y0+1,c
  6286  000A9C  0E00               	movlw	0
  6287  000A9E  6E1F               	movwf	drawCircle@r+1,c
  6288  000AA0  0E07               	movlw	7
  6289  000AA2  6E1E               	movwf	drawCircle@r,c
  6290  000AA4  0EF8               	movlw	248
  6291  000AA6  6E21               	movwf	drawCircle@color+1,c
  6292  000AA8  0E00               	movlw	0
  6293  000AAA  6E20               	movwf	drawCircle@color,c
  6294  000AAC  ECB8  F006         	call	_drawCircle	;wreg free
  6295                           
  6296                           ;Main_Screen.c: 202: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6297  000AB0  0E00               	movlw	0
  6298  000AB2  6E1B               	movwf	drawCircle@x0+1,c
  6299  000AB4  0E3C               	movlw	60
  6300  000AB6  6E1A               	movwf	drawCircle@x0,c
  6301  000AB8  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6302  000ABC  6A1D               	clrf	drawCircle@y0+1,c
  6303  000ABE  0E00               	movlw	0
  6304  000AC0  6E1F               	movwf	drawCircle@r+1,c
  6305  000AC2  0E07               	movlw	7
  6306  000AC4  6E1E               	movwf	drawCircle@r,c
  6307  000AC6  0EFF               	movlw	255
  6308  000AC8  6E21               	movwf	drawCircle@color+1,c
  6309  000ACA  0EE0               	movlw	224
  6310  000ACC  6E20               	movwf	drawCircle@color,c
  6311  000ACE  ECB8  F006         	call	_drawCircle	;wreg free
  6312                           
  6313                           ;Main_Screen.c: 203: drawCircle(80, Circle_Y, 7, 0x07E0);
  6314  000AD2  0E00               	movlw	0
  6315  000AD4  6E1B               	movwf	drawCircle@x0+1,c
  6316  000AD6  0E50               	movlw	80
  6317  000AD8  6E1A               	movwf	drawCircle@x0,c
  6318  000ADA  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6319  000ADE  6A1D               	clrf	drawCircle@y0+1,c
  6320  000AE0  0E00               	movlw	0
  6321  000AE2  6E1F               	movwf	drawCircle@r+1,c
  6322  000AE4  0E07               	movlw	7
  6323  000AE6  6E1E               	movwf	drawCircle@r,c
  6324  000AE8  0E07               	movlw	7
  6325  000AEA  6E21               	movwf	drawCircle@color+1,c
  6326  000AEC  0EE0               	movlw	224
  6327  000AEE  6E20               	movwf	drawCircle@color,c
  6328  000AF0  ECB8  F006         	call	_drawCircle	;wreg free
  6329  000AF4  D000               	goto	l478
  6330  000AF6                     l478:
  6331  000AF6  0012               	return		;funcret
  6332  000AF8                     __end_of_update_LCD_color:
  6333                           	opt stack 0
  6334                           tblptru	equ	0xFF8
  6335                           tblptrh	equ	0xFF7
  6336                           tblptrl	equ	0xFF6
  6337                           tablat	equ	0xFF5
  6338                           prodl	equ	0xFF3
  6339                           postinc0	equ	0xFEE
  6340                           wreg	equ	0xFE8
  6341                           postdec1	equ	0xFE5
  6342                           fsr1l	equ	0xFE1
  6343                           status	equ	0xFD8
  6344                           
  6345 ;; *************** function _fillCircle *****************
  6346 ;; Defined at:
  6347 ;;		line 565 in file "ST7735_TFT.c"
  6348 ;; Parameters:    Size  Location     Type
  6349 ;;  x0              2   56[COMRAM] int 
  6350 ;;  y0              2   58[COMRAM] int 
  6351 ;;  r               2   60[COMRAM] int 
  6352 ;;  color           2   62[COMRAM] unsigned int 
  6353 ;; Auto vars:     Size  Location     Type
  6354 ;;		None
  6355 ;; Return value:  Size  Location     Type
  6356 ;;		None               void
  6357 ;; Registers used:
  6358 ;;		wreg, status,2, status,0, cstack
  6359 ;; Tracked objects:
  6360 ;;		On entry : 0/0
  6361 ;;		On exit  : 0/0
  6362 ;;		Unchanged: 0/0
  6363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6364 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6367 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6368 ;;Total ram usage:        8 bytes
  6369 ;; Hardware stack levels used:    1
  6370 ;; Hardware stack levels required when called:    7
  6371 ;; This function calls:
  6372 ;;		_drawFastVLine
  6373 ;;		_fillCircleHelper
  6374 ;; This function is called by:
  6375 ;;		_Initialize_LCD_Screen
  6376 ;;		_update_LCD_color
  6377 ;; This function uses a non-reentrant model
  6378 ;;
  6379                           
  6380                           	psect	text26
  6381  002348                     __ptext26:
  6382                           	opt stack 0
  6383  002348                     _fillCircle:
  6384                           	opt stack 20
  6385                           
  6386                           ;ST7735_TFT.c: 567: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6387                           
  6388                           ;incstack = 0
  6389  002348  503D               	movf	fillCircle@r,w,c
  6390  00234A  0800               	sublw	0
  6391  00234C  243B               	addwf	fillCircle@y0,w,c
  6392  00234E  6E16               	movwf	drawFastVLine@y,c
  6393  002350  80D8               	bsf	status,0,c
  6394  002352  343D               	rlcf	fillCircle@r,w,c
  6395  002354  6E17               	movwf	drawFastVLine@h,c
  6396  002356  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  6397  00235A  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  6398  00235E  5039               	movf	fillCircle@x0,w,c
  6399  002360  EC8D  F00F         	call	_drawFastVLine
  6400                           
  6401                           ;ST7735_TFT.c: 568: fillCircleHelper(x0, y0, r, 3, 0, color);
  6402  002364  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  6403  002368  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6404  00236C  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  6405  002370  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6406  002374  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  6407  002378  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6408  00237C  0E00               	movlw	0
  6409  00237E  6E28               	movwf	fillCircleHelper@cornername+1,c
  6410  002380  0E03               	movlw	3
  6411  002382  6E27               	movwf	fillCircleHelper@cornername,c
  6412  002384  0E00               	movlw	0
  6413  002386  6E2A               	movwf	fillCircleHelper@delta+1,c
  6414  002388  0E00               	movlw	0
  6415  00238A  6E29               	movwf	fillCircleHelper@delta,c
  6416  00238C  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  6417  002390  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6418  002394  ECFF  F008         	call	_fillCircleHelper	;wreg free
  6419  002398  0012               	return		;funcret
  6420  00239A                     __end_of_fillCircle:
  6421                           	opt stack 0
  6422                           tblptru	equ	0xFF8
  6423                           tblptrh	equ	0xFF7
  6424                           tblptrl	equ	0xFF6
  6425                           tablat	equ	0xFF5
  6426                           prodl	equ	0xFF3
  6427                           postinc0	equ	0xFEE
  6428                           wreg	equ	0xFE8
  6429                           postdec1	equ	0xFE5
  6430                           fsr1l	equ	0xFE1
  6431                           status	equ	0xFD8
  6432                           
  6433 ;; *************** function _fillCircleHelper *****************
  6434 ;; Defined at:
  6435 ;;		line 540 in file "ST7735_TFT.c"
  6436 ;; Parameters:    Size  Location     Type
  6437 ;;  x0              2   32[COMRAM] int 
  6438 ;;  y0              2   34[COMRAM] int 
  6439 ;;  r               2   36[COMRAM] int 
  6440 ;;  cornername      2   38[COMRAM] unsigned int 
  6441 ;;  delta           2   40[COMRAM] int 
  6442 ;;  color           2   42[COMRAM] unsigned int 
  6443 ;; Auto vars:     Size  Location     Type
  6444 ;;  y               2   54[COMRAM] int 
  6445 ;;  x               2   52[COMRAM] int 
  6446 ;;  f               2   50[COMRAM] int 
  6447 ;;  ddF_y           2   48[COMRAM] int 
  6448 ;;  ddF_x           2   46[COMRAM] int 
  6449 ;; Return value:  Size  Location     Type
  6450 ;;		None               void
  6451 ;; Registers used:
  6452 ;;		wreg, status,2, status,0, cstack
  6453 ;; Tracked objects:
  6454 ;;		On entry : 0/0
  6455 ;;		On exit  : 0/0
  6456 ;;		Unchanged: 0/0
  6457 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6458 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6460 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6461 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6462 ;;Total ram usage:       24 bytes
  6463 ;; Hardware stack levels used:    1
  6464 ;; Hardware stack levels required when called:    6
  6465 ;; This function calls:
  6466 ;;		_drawFastVLine
  6467 ;; This function is called by:
  6468 ;;		_fillCircle
  6469 ;; This function uses a non-reentrant model
  6470 ;;
  6471                           
  6472                           	psect	text27
  6473  0011FE                     __ptext27:
  6474                           	opt stack 0
  6475  0011FE                     _fillCircleHelper:
  6476                           	opt stack 20
  6477                           
  6478                           ;ST7735_TFT.c: 542: signed int f, ddF_x, ddF_y, x, y;
  6479                           ;ST7735_TFT.c: 543: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6480                           
  6481                           ;incstack = 0
  6482  0011FE  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  6483  001202  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6484  001206  1E2D               	comf	??_fillCircleHelper,f,c
  6485  001208  1E2E               	comf	??_fillCircleHelper+1,f,c
  6486  00120A  4A2D               	infsnz	??_fillCircleHelper,f,c
  6487  00120C  2A2E               	incf	??_fillCircleHelper+1,f,c
  6488  00120E  0E01               	movlw	1
  6489  001210  242D               	addwf	??_fillCircleHelper,w,c
  6490  001212  6E33               	movwf	fillCircleHelper@f,c
  6491  001214  0E00               	movlw	0
  6492  001216  202E               	addwfc	??_fillCircleHelper+1,w,c
  6493  001218  6E34               	movwf	fillCircleHelper@f+1,c
  6494  00121A  0E00               	movlw	0
  6495  00121C  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  6496  00121E  0E01               	movlw	1
  6497  001220  6E2F               	movwf	fillCircleHelper@ddF_x,c
  6498  001222  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  6499  001226  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6500  00122A  90D8               	bcf	status,0,c
  6501  00122C  362D               	rlcf	??_fillCircleHelper,f,c
  6502  00122E  362E               	rlcf	??_fillCircleHelper+1,f,c
  6503  001230  1E2D               	comf	??_fillCircleHelper,f,c
  6504  001232  1E2E               	comf	??_fillCircleHelper+1,f,c
  6505  001234  4A2D               	infsnz	??_fillCircleHelper,f,c
  6506  001236  2A2E               	incf	??_fillCircleHelper+1,f,c
  6507  001238  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  6508  00123C  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  6509  001240  0E00               	movlw	0
  6510  001242  6E36               	movwf	fillCircleHelper@x+1,c
  6511  001244  0E00               	movlw	0
  6512  001246  6E35               	movwf	fillCircleHelper@x,c
  6513  001248  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  6514  00124C  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  6515                           
  6516                           ;ST7735_TFT.c: 544: while (x<y) {
  6517  001250  D067               	goto	l4761
  6518  001252                     l4741:
  6519                           
  6520                           ;ST7735_TFT.c: 545: if (f >= 0) {
  6521  001252  BE34               	btfsc	fillCircleHelper@f+1,7,c
  6522  001254  D00B               	goto	l352
  6523                           
  6524                           ;ST7735_TFT.c: 546: y--;
  6525  001256  0637               	decf	fillCircleHelper@y,f,c
  6526  001258  A0D8               	btfss	status,0,c
  6527  00125A  0638               	decf	fillCircleHelper@y+1,f,c
  6528                           
  6529                           ;ST7735_TFT.c: 547: ddF_y += 2;
  6530  00125C  0E02               	movlw	2
  6531  00125E  2631               	addwf	fillCircleHelper@ddF_y,f,c
  6532  001260  0E00               	movlw	0
  6533  001262  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  6534                           
  6535                           ;ST7735_TFT.c: 548: f += ddF_y;
  6536  001264  5031               	movf	fillCircleHelper@ddF_y,w,c
  6537  001266  2633               	addwf	fillCircleHelper@f,f,c
  6538  001268  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  6539  00126A  2234               	addwfc	fillCircleHelper@f+1,f,c
  6540  00126C                     l352:
  6541                           
  6542                           ;ST7735_TFT.c: 549: }
  6543                           ;ST7735_TFT.c: 550: x++;
  6544  00126C  4A35               	infsnz	fillCircleHelper@x,f,c
  6545  00126E  2A36               	incf	fillCircleHelper@x+1,f,c
  6546                           
  6547                           ;ST7735_TFT.c: 551: ddF_x += 2;
  6548  001270  0E02               	movlw	2
  6549  001272  262F               	addwf	fillCircleHelper@ddF_x,f,c
  6550  001274  0E00               	movlw	0
  6551  001276  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  6552                           
  6553                           ;ST7735_TFT.c: 552: f += ddF_x;
  6554  001278  502F               	movf	fillCircleHelper@ddF_x,w,c
  6555  00127A  2633               	addwf	fillCircleHelper@f,f,c
  6556  00127C  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  6557  00127E  2234               	addwfc	fillCircleHelper@f+1,f,c
  6558                           
  6559                           ;ST7735_TFT.c: 554: if (cornername & 0x1) {
  6560  001280  A027               	btfss	fillCircleHelper@cornername,0,c
  6561  001282  D025               	goto	l4757
  6562                           
  6563                           ;ST7735_TFT.c: 555: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  6564  001284  5037               	movf	fillCircleHelper@y,w,c
  6565  001286  0800               	sublw	0
  6566  001288  2423               	addwf	fillCircleHelper@y0,w,c
  6567  00128A  6E16               	movwf	drawFastVLine@y,c
  6568  00128C  5037               	movf	fillCircleHelper@y,w,c
  6569  00128E  2437               	addwf	fillCircleHelper@y,w,c
  6570  001290  2429               	addwf	fillCircleHelper@delta,w,c
  6571  001292  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6572  001294  282D               	incf	??_fillCircleHelper,w,c
  6573  001296  6E17               	movwf	drawFastVLine@h,c
  6574  001298  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6575  00129C  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6576  0012A0  5021               	movf	fillCircleHelper@x0,w,c
  6577  0012A2  2435               	addwf	fillCircleHelper@x,w,c
  6578  0012A4  EC8D  F00F         	call	_drawFastVLine
  6579                           
  6580                           ;ST7735_TFT.c: 556: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  6581  0012A8  5035               	movf	fillCircleHelper@x,w,c
  6582  0012AA  0800               	sublw	0
  6583  0012AC  2423               	addwf	fillCircleHelper@y0,w,c
  6584  0012AE  6E16               	movwf	drawFastVLine@y,c
  6585  0012B0  5035               	movf	fillCircleHelper@x,w,c
  6586  0012B2  2435               	addwf	fillCircleHelper@x,w,c
  6587  0012B4  2429               	addwf	fillCircleHelper@delta,w,c
  6588  0012B6  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6589  0012B8  282D               	incf	??_fillCircleHelper,w,c
  6590  0012BA  6E17               	movwf	drawFastVLine@h,c
  6591  0012BC  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6592  0012C0  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6593  0012C4  5021               	movf	fillCircleHelper@x0,w,c
  6594  0012C6  2437               	addwf	fillCircleHelper@y,w,c
  6595  0012C8  EC8D  F00F         	call	_drawFastVLine
  6596  0012CC  D000               	goto	l4757
  6597  0012CE                     l4757:
  6598                           
  6599                           ;ST7735_TFT.c: 557: }
  6600                           ;ST7735_TFT.c: 558: if (cornername & 0x2) {
  6601  0012CE  A227               	btfss	fillCircleHelper@cornername,1,c
  6602  0012D0  D027               	goto	l4761
  6603                           
  6604                           ;ST7735_TFT.c: 559: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  6605  0012D2  5037               	movf	fillCircleHelper@y,w,c
  6606  0012D4  0800               	sublw	0
  6607  0012D6  2423               	addwf	fillCircleHelper@y0,w,c
  6608  0012D8  6E16               	movwf	drawFastVLine@y,c
  6609  0012DA  5037               	movf	fillCircleHelper@y,w,c
  6610  0012DC  2437               	addwf	fillCircleHelper@y,w,c
  6611  0012DE  2429               	addwf	fillCircleHelper@delta,w,c
  6612  0012E0  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6613  0012E2  282D               	incf	??_fillCircleHelper,w,c
  6614  0012E4  6E17               	movwf	drawFastVLine@h,c
  6615  0012E6  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6616  0012EA  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6617  0012EE  5035               	movf	fillCircleHelper@x,w,c
  6618  0012F0  0800               	sublw	0
  6619  0012F2  2421               	addwf	fillCircleHelper@x0,w,c
  6620  0012F4  EC8D  F00F         	call	_drawFastVLine
  6621                           
  6622                           ;ST7735_TFT.c: 560: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  6623  0012F8  5035               	movf	fillCircleHelper@x,w,c
  6624  0012FA  0800               	sublw	0
  6625  0012FC  2423               	addwf	fillCircleHelper@y0,w,c
  6626  0012FE  6E16               	movwf	drawFastVLine@y,c
  6627  001300  5035               	movf	fillCircleHelper@x,w,c
  6628  001302  2435               	addwf	fillCircleHelper@x,w,c
  6629  001304  2429               	addwf	fillCircleHelper@delta,w,c
  6630  001306  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6631  001308  282D               	incf	??_fillCircleHelper,w,c
  6632  00130A  6E17               	movwf	drawFastVLine@h,c
  6633  00130C  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6634  001310  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6635  001314  5037               	movf	fillCircleHelper@y,w,c
  6636  001316  0800               	sublw	0
  6637  001318  2421               	addwf	fillCircleHelper@x0,w,c
  6638  00131A  EC8D  F00F         	call	_drawFastVLine
  6639  00131E  D000               	goto	l4761
  6640  001320                     l4761:
  6641  001320  5037               	movf	fillCircleHelper@y,w,c
  6642  001322  5C35               	subwf	fillCircleHelper@x,w,c
  6643  001324  5036               	movf	fillCircleHelper@x+1,w,c
  6644  001326  0A80               	xorlw	128
  6645  001328  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6646  00132A  5038               	movf	fillCircleHelper@y+1,w,c
  6647  00132C  0A80               	xorlw	128
  6648  00132E  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  6649  001330  A0D8               	btfss	status,0,c
  6650  001332  D78F               	goto	l4741
  6651  001334  0012               	return		;funcret
  6652  001336                     __end_of_fillCircleHelper:
  6653                           	opt stack 0
  6654                           tblptru	equ	0xFF8
  6655                           tblptrh	equ	0xFF7
  6656                           tblptrl	equ	0xFF6
  6657                           tablat	equ	0xFF5
  6658                           prodl	equ	0xFF3
  6659                           postinc0	equ	0xFEE
  6660                           wreg	equ	0xFE8
  6661                           postdec1	equ	0xFE5
  6662                           fsr1l	equ	0xFE1
  6663                           status	equ	0xFD8
  6664                           
  6665 ;; *************** function _drawCircle *****************
  6666 ;; Defined at:
  6667 ;;		line 479 in file "ST7735_TFT.c"
  6668 ;; Parameters:    Size  Location     Type
  6669 ;;  x0              2   25[COMRAM] int 
  6670 ;;  y0              2   27[COMRAM] int 
  6671 ;;  r               2   29[COMRAM] int 
  6672 ;;  color           2   31[COMRAM] unsigned int 
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  y               2   43[COMRAM] int 
  6675 ;;  x               2   41[COMRAM] int 
  6676 ;;  f               2   39[COMRAM] int 
  6677 ;;  ddF_y           2   37[COMRAM] int 
  6678 ;;  ddF_x           2   35[COMRAM] int 
  6679 ;; Return value:  Size  Location     Type
  6680 ;;		None               void
  6681 ;; Registers used:
  6682 ;;		wreg, status,2, status,0, cstack
  6683 ;; Tracked objects:
  6684 ;;		On entry : 0/0
  6685 ;;		On exit  : 0/0
  6686 ;;		Unchanged: 0/0
  6687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6688 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6690 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6691 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6692 ;;Total ram usage:       20 bytes
  6693 ;; Hardware stack levels used:    1
  6694 ;; Hardware stack levels required when called:    6
  6695 ;; This function calls:
  6696 ;;		_drawPixel
  6697 ;; This function is called by:
  6698 ;;		_Initialize_LCD_Screen
  6699 ;;		_update_LCD_color
  6700 ;; This function uses a non-reentrant model
  6701 ;;
  6702                           
  6703                           	psect	text28
  6704  000D70                     __ptext28:
  6705                           	opt stack 0
  6706  000D70                     _drawCircle:
  6707                           	opt stack 21
  6708                           
  6709                           ;ST7735_TFT.c: 481: signed int f, ddF_x, ddF_y, x, y;
  6710                           ;ST7735_TFT.c: 482: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6711                           
  6712                           ;incstack = 0
  6713  000D70  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6714  000D74  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6715  000D78  1E22               	comf	??_drawCircle,f,c
  6716  000D7A  1E23               	comf	??_drawCircle+1,f,c
  6717  000D7C  4A22               	infsnz	??_drawCircle,f,c
  6718  000D7E  2A23               	incf	??_drawCircle+1,f,c
  6719  000D80  0E01               	movlw	1
  6720  000D82  2422               	addwf	??_drawCircle,w,c
  6721  000D84  6E28               	movwf	drawCircle@f,c
  6722  000D86  0E00               	movlw	0
  6723  000D88  2023               	addwfc	??_drawCircle+1,w,c
  6724  000D8A  6E29               	movwf	drawCircle@f+1,c
  6725  000D8C  0E00               	movlw	0
  6726  000D8E  6E25               	movwf	drawCircle@ddF_x+1,c
  6727  000D90  0E01               	movlw	1
  6728  000D92  6E24               	movwf	drawCircle@ddF_x,c
  6729  000D94  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6730  000D98  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6731  000D9C  90D8               	bcf	status,0,c
  6732  000D9E  3622               	rlcf	??_drawCircle,f,c
  6733  000DA0  3623               	rlcf	??_drawCircle+1,f,c
  6734  000DA2  1E22               	comf	??_drawCircle,f,c
  6735  000DA4  1E23               	comf	??_drawCircle+1,f,c
  6736  000DA6  4A22               	infsnz	??_drawCircle,f,c
  6737  000DA8  2A23               	incf	??_drawCircle+1,f,c
  6738  000DAA  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  6739  000DAE  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6740  000DB2  0E00               	movlw	0
  6741  000DB4  6E2B               	movwf	drawCircle@x+1,c
  6742  000DB6  0E00               	movlw	0
  6743  000DB8  6E2A               	movwf	drawCircle@x,c
  6744  000DBA  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  6745  000DBE  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  6746                           
  6747                           ;ST7735_TFT.c: 483: drawPixel(x0 , y0 + r, color);
  6748  000DC2  501C               	movf	drawCircle@y0,w,c
  6749  000DC4  241E               	addwf	drawCircle@r,w,c
  6750  000DC6  6E16               	movwf	drawPixel@y,c
  6751  000DC8  C020  F017         	movff	drawCircle@color,drawPixel@color
  6752  000DCC  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6753  000DD0  501A               	movf	drawCircle@x0,w,c
  6754  000DD2  EC73  F013         	call	_drawPixel
  6755                           
  6756                           ;ST7735_TFT.c: 484: drawPixel(x0 , y0 - r, color);
  6757  000DD6  501E               	movf	drawCircle@r,w,c
  6758  000DD8  0800               	sublw	0
  6759  000DDA  241C               	addwf	drawCircle@y0,w,c
  6760  000DDC  6E16               	movwf	drawPixel@y,c
  6761  000DDE  C020  F017         	movff	drawCircle@color,drawPixel@color
  6762  000DE2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6763  000DE6  501A               	movf	drawCircle@x0,w,c
  6764  000DE8  EC73  F013         	call	_drawPixel
  6765                           
  6766                           ;ST7735_TFT.c: 485: drawPixel(x0+r, y0 , color);
  6767  000DEC  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6768  000DF0  C020  F017         	movff	drawCircle@color,drawPixel@color
  6769  000DF4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6770  000DF8  501A               	movf	drawCircle@x0,w,c
  6771  000DFA  241E               	addwf	drawCircle@r,w,c
  6772  000DFC  EC73  F013         	call	_drawPixel
  6773                           
  6774                           ;ST7735_TFT.c: 486: drawPixel(x0-r, y0 , color);
  6775  000E00  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6776  000E04  C020  F017         	movff	drawCircle@color,drawPixel@color
  6777  000E08  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6778  000E0C  501E               	movf	drawCircle@r,w,c
  6779  000E0E  0800               	sublw	0
  6780  000E10  241A               	addwf	drawCircle@x0,w,c
  6781  000E12  EC73  F013         	call	_drawPixel
  6782                           
  6783                           ;ST7735_TFT.c: 487: while (x < y) {
  6784  000E16  D078               	goto	l5067
  6785  000E18                     l5039:
  6786                           
  6787                           ;ST7735_TFT.c: 488: if (f >= 0) {
  6788  000E18  BE29               	btfsc	drawCircle@f+1,7,c
  6789  000E1A  D00B               	goto	l334
  6790                           
  6791                           ;ST7735_TFT.c: 489: y--;
  6792  000E1C  062C               	decf	drawCircle@y,f,c
  6793  000E1E  A0D8               	btfss	status,0,c
  6794  000E20  062D               	decf	drawCircle@y+1,f,c
  6795                           
  6796                           ;ST7735_TFT.c: 490: ddF_y += 2;
  6797  000E22  0E02               	movlw	2
  6798  000E24  2626               	addwf	drawCircle@ddF_y,f,c
  6799  000E26  0E00               	movlw	0
  6800  000E28  2227               	addwfc	drawCircle@ddF_y+1,f,c
  6801                           
  6802                           ;ST7735_TFT.c: 491: f += ddF_y;
  6803  000E2A  5026               	movf	drawCircle@ddF_y,w,c
  6804  000E2C  2628               	addwf	drawCircle@f,f,c
  6805  000E2E  5027               	movf	drawCircle@ddF_y+1,w,c
  6806  000E30  2229               	addwfc	drawCircle@f+1,f,c
  6807  000E32                     l334:
  6808                           
  6809                           ;ST7735_TFT.c: 492: }
  6810                           ;ST7735_TFT.c: 493: x++;
  6811  000E32  4A2A               	infsnz	drawCircle@x,f,c
  6812  000E34  2A2B               	incf	drawCircle@x+1,f,c
  6813                           
  6814                           ;ST7735_TFT.c: 494: ddF_x += 2;
  6815  000E36  0E02               	movlw	2
  6816  000E38  2624               	addwf	drawCircle@ddF_x,f,c
  6817  000E3A  0E00               	movlw	0
  6818  000E3C  2225               	addwfc	drawCircle@ddF_x+1,f,c
  6819                           
  6820                           ;ST7735_TFT.c: 495: f += ddF_x;
  6821  000E3E  5024               	movf	drawCircle@ddF_x,w,c
  6822  000E40  2628               	addwf	drawCircle@f,f,c
  6823  000E42  5025               	movf	drawCircle@ddF_x+1,w,c
  6824  000E44  2229               	addwfc	drawCircle@f+1,f,c
  6825                           
  6826                           ;ST7735_TFT.c: 496: drawPixel(x0 + x, y0 + y, color);
  6827  000E46  501C               	movf	drawCircle@y0,w,c
  6828  000E48  242C               	addwf	drawCircle@y,w,c
  6829  000E4A  6E16               	movwf	drawPixel@y,c
  6830  000E4C  C020  F017         	movff	drawCircle@color,drawPixel@color
  6831  000E50  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6832  000E54  501A               	movf	drawCircle@x0,w,c
  6833  000E56  242A               	addwf	drawCircle@x,w,c
  6834  000E58  EC73  F013         	call	_drawPixel
  6835                           
  6836                           ;ST7735_TFT.c: 497: drawPixel(x0 - x, y0 + y, color);
  6837  000E5C  501C               	movf	drawCircle@y0,w,c
  6838  000E5E  242C               	addwf	drawCircle@y,w,c
  6839  000E60  6E16               	movwf	drawPixel@y,c
  6840  000E62  C020  F017         	movff	drawCircle@color,drawPixel@color
  6841  000E66  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6842  000E6A  502A               	movf	drawCircle@x,w,c
  6843  000E6C  0800               	sublw	0
  6844  000E6E  241A               	addwf	drawCircle@x0,w,c
  6845  000E70  EC73  F013         	call	_drawPixel
  6846                           
  6847                           ;ST7735_TFT.c: 498: drawPixel(x0 + x, y0 - y, color);
  6848  000E74  502C               	movf	drawCircle@y,w,c
  6849  000E76  0800               	sublw	0
  6850  000E78  241C               	addwf	drawCircle@y0,w,c
  6851  000E7A  6E16               	movwf	drawPixel@y,c
  6852  000E7C  C020  F017         	movff	drawCircle@color,drawPixel@color
  6853  000E80  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6854  000E84  501A               	movf	drawCircle@x0,w,c
  6855  000E86  242A               	addwf	drawCircle@x,w,c
  6856  000E88  EC73  F013         	call	_drawPixel
  6857                           
  6858                           ;ST7735_TFT.c: 499: drawPixel(x0 - x, y0 - y, color);
  6859  000E8C  502C               	movf	drawCircle@y,w,c
  6860  000E8E  0800               	sublw	0
  6861  000E90  241C               	addwf	drawCircle@y0,w,c
  6862  000E92  6E16               	movwf	drawPixel@y,c
  6863  000E94  C020  F017         	movff	drawCircle@color,drawPixel@color
  6864  000E98  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6865  000E9C  502A               	movf	drawCircle@x,w,c
  6866  000E9E  0800               	sublw	0
  6867  000EA0  241A               	addwf	drawCircle@x0,w,c
  6868  000EA2  EC73  F013         	call	_drawPixel
  6869                           
  6870                           ;ST7735_TFT.c: 500: drawPixel(x0 + y, y0 + x, color);
  6871  000EA6  501C               	movf	drawCircle@y0,w,c
  6872  000EA8  242A               	addwf	drawCircle@x,w,c
  6873  000EAA  6E16               	movwf	drawPixel@y,c
  6874  000EAC  C020  F017         	movff	drawCircle@color,drawPixel@color
  6875  000EB0  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6876  000EB4  501A               	movf	drawCircle@x0,w,c
  6877  000EB6  242C               	addwf	drawCircle@y,w,c
  6878  000EB8  EC73  F013         	call	_drawPixel
  6879                           
  6880                           ;ST7735_TFT.c: 501: drawPixel(x0 - y, y0 + x, color);
  6881  000EBC  501C               	movf	drawCircle@y0,w,c
  6882  000EBE  242A               	addwf	drawCircle@x,w,c
  6883  000EC0  6E16               	movwf	drawPixel@y,c
  6884  000EC2  C020  F017         	movff	drawCircle@color,drawPixel@color
  6885  000EC6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6886  000ECA  502C               	movf	drawCircle@y,w,c
  6887  000ECC  0800               	sublw	0
  6888  000ECE  241A               	addwf	drawCircle@x0,w,c
  6889  000ED0  EC73  F013         	call	_drawPixel
  6890                           
  6891                           ;ST7735_TFT.c: 502: drawPixel(x0 + y, y0 - x, color);
  6892  000ED4  502A               	movf	drawCircle@x,w,c
  6893  000ED6  0800               	sublw	0
  6894  000ED8  241C               	addwf	drawCircle@y0,w,c
  6895  000EDA  6E16               	movwf	drawPixel@y,c
  6896  000EDC  C020  F017         	movff	drawCircle@color,drawPixel@color
  6897  000EE0  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6898  000EE4  501A               	movf	drawCircle@x0,w,c
  6899  000EE6  242C               	addwf	drawCircle@y,w,c
  6900  000EE8  EC73  F013         	call	_drawPixel
  6901                           
  6902                           ;ST7735_TFT.c: 503: drawPixel(x0 - y, y0 - x, color);
  6903  000EEC  502A               	movf	drawCircle@x,w,c
  6904  000EEE  0800               	sublw	0
  6905  000EF0  241C               	addwf	drawCircle@y0,w,c
  6906  000EF2  6E16               	movwf	drawPixel@y,c
  6907  000EF4  C020  F017         	movff	drawCircle@color,drawPixel@color
  6908  000EF8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6909  000EFC  502C               	movf	drawCircle@y,w,c
  6910  000EFE  0800               	sublw	0
  6911  000F00  241A               	addwf	drawCircle@x0,w,c
  6912  000F02  EC73  F013         	call	_drawPixel
  6913  000F06  D000               	goto	l5067
  6914  000F08                     l5067:
  6915  000F08  502C               	movf	drawCircle@y,w,c
  6916  000F0A  5C2A               	subwf	drawCircle@x,w,c
  6917  000F0C  502B               	movf	drawCircle@x+1,w,c
  6918  000F0E  0A80               	xorlw	128
  6919  000F10  6E22               	movwf	??_drawCircle& (0+255),c
  6920  000F12  502D               	movf	drawCircle@y+1,w,c
  6921  000F14  0A80               	xorlw	128
  6922  000F16  5822               	subwfb	??_drawCircle& (0+255),w,c
  6923  000F18  A0D8               	btfss	status,0,c
  6924  000F1A  D77E               	goto	l5039
  6925  000F1C  0012               	return		;funcret
  6926  000F1E                     __end_of_drawCircle:
  6927                           	opt stack 0
  6928                           tblptru	equ	0xFF8
  6929                           tblptrh	equ	0xFF7
  6930                           tblptrl	equ	0xFF6
  6931                           tablat	equ	0xFF5
  6932                           prodl	equ	0xFF3
  6933                           postinc0	equ	0xFEE
  6934                           wreg	equ	0xFE8
  6935                           postdec1	equ	0xFE5
  6936                           fsr1l	equ	0xFE1
  6937                           status	equ	0xFD8
  6938                           
  6939 ;; *************** function _PED_Control *****************
  6940 ;; Defined at:
  6941 ;;		line 176 in file "Lab7_S1_sample.c"
  6942 ;; Parameters:    Size  Location     Type
  6943 ;;  direction       1    wreg     unsigned char 
  6944 ;;  Num_Sec         1   66[COMRAM] unsigned char 
  6945 ;; Auto vars:     Size  Location     Type
  6946 ;;  direction       1   12[BANK0 ] unsigned char 
  6947 ;;  i               2   13[BANK0 ] int 
  6948 ;; Return value:  Size  Location     Type
  6949 ;;		None               void
  6950 ;; Registers used:
  6951 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6952 ;; Tracked objects:
  6953 ;;		On entry : 0/0
  6954 ;;		On exit  : 0/0
  6955 ;;		Unchanged: 0/0
  6956 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6957 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6958 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6959 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6960 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6961 ;;Total ram usage:        4 bytes
  6962 ;; Hardware stack levels used:    1
  6963 ;; Hardware stack levels required when called:   11
  6964 ;; This function calls:
  6965 ;;		_Wait_One_Second_With_Beep
  6966 ;;		_update_LCD_PED_Count
  6967 ;; This function is called by:
  6968 ;;		_Day_Mode
  6969 ;; This function uses a non-reentrant model
  6970 ;;
  6971                           
  6972                           	psect	text29
  6973  00229C                     __ptext29:
  6974                           	opt stack 0
  6975  00229C                     _PED_Control:
  6976                           	opt stack 18
  6977                           
  6978                           ;incstack = 0
  6979                           ;PED_Control@direction stored from wreg
  6980  00229C  0100               	movlb	0	; () banked
  6981  00229E  6FD7               	movwf	PED_Control@direction& (0+255),b
  6982                           
  6983                           ; BSR set to: 0
  6984                           ;Lab7_S1_sample.c: 179: for (int i = Num_Sec-1; i >= 0; i--) {
  6985  0022A0  0EFF               	movlw	255
  6986  0022A2  2443               	addwf	PED_Control@Num_Sec,w,c
  6987  0022A4  0100               	movlb	0	; () banked
  6988  0022A6  6FD8               	movwf	PED_Control@i& (0+255),b
  6989  0022A8  0100               	movlb	0	; () banked
  6990  0022AA  6BD9               	clrf	(PED_Control@i+1)& (0+255),b
  6991  0022AC  0EFF               	movlw	255
  6992  0022AE  23D9               	addwfc	(PED_Control@i+1)& (0+255),f,b
  6993  0022B0  0100               	movlb	0	; () banked
  6994  0022B2  BFD9               	btfsc	(PED_Control@i+1)& (0+255),7,b
  6995  0022B4  D016               	goto	l5397
  6996  0022B6  D001               	goto	l5385
  6997                           
  6998                           ; BSR set to: 0
  6999  0022B8  D014               	goto	l5397
  7000  0022BA                     l5385:
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;Lab7_S1_sample.c: 181: update_LCD_PED_Count(direction, i);
  7004  0022BA  C0D8  F041         	movff	PED_Control@i,update_LCD_PED_Count@count
  7005  0022BE  0100               	movlb	0	; () banked
  7006  0022C0  51D7               	movf	PED_Control@direction& (0+255),w,b
  7007  0022C2  ECEF  F00C         	call	_update_LCD_PED_Count
  7008                           
  7009                           ;Lab7_S1_sample.c: 182: Wait_One_Second_With_Beep();
  7010  0022C6  ECDC  F013         	call	_Wait_One_Second_With_Beep	;wreg free
  7011  0022CA  0100               	movlb	0	; () banked
  7012  0022CC  07D8               	decf	PED_Control@i& (0+255),f,b
  7013  0022CE  A0D8               	btfss	status,0,c
  7014  0022D0  07D9               	decf	(PED_Control@i+1)& (0+255),f,b
  7015  0022D2  D7EE               	goto	L10
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;Lab7_S1_sample.c: 183: }
  7019                           ;Lab7_S1_sample.c: 185: switch(direction){
  7020                           
  7021                           ; BSR set to: 0
  7022  0022D4  D006               	goto	l5397
  7023  0022D6                     l5391:
  7024                           
  7025                           ; BSR set to: 0
  7026                           ;Lab7_S1_sample.c: 187: NS_PED_SW = 0;
  7027  0022D6  0E00               	movlw	0
  7028  0022D8  6E52               	movwf	_NS_PED_SW,c
  7029                           
  7030                           ;Lab7_S1_sample.c: 188: break;
  7031  0022DA  D00C               	goto	l140
  7032  0022DC                     l5393:
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;Lab7_S1_sample.c: 190: EW_PED_SW = 0;
  7036  0022DC  0E00               	movlw	0
  7037  0022DE  6E4A               	movwf	_EW_PED_SW,c
  7038                           
  7039                           ; BSR set to: 0
  7040                           ;Lab7_S1_sample.c: 192: }
  7041                           
  7042                           ;Lab7_S1_sample.c: 191: break;
  7043  0022E0  D009               	goto	l140
  7044  0022E2                     l5397:
  7045                           
  7046                           ; BSR set to: 0
  7047  0022E2  0100               	movlb	0	; () banked
  7048  0022E4  51D7               	movf	PED_Control@direction& (0+255),w,b
  7049                           
  7050                           ; Switch size 1, requested type "space"
  7051                           ; Number of cases is 2, Range of values is 0 to 2
  7052                           ; switch strategies available:
  7053                           ; Name         Instructions Cycles
  7054                           ; simple_byte            7     4 (average)
  7055                           ;	Chosen strategy is simple_byte
  7056  0022E6  0A00               	xorlw	0	; case 0
  7057  0022E8  B4D8               	btfsc	status,2,c
  7058  0022EA  D7F5               	goto	l5391
  7059  0022EC  0A02               	xorlw	2	; case 2
  7060  0022EE  B4D8               	btfsc	status,2,c
  7061  0022F0  D7F5               	goto	l5393
  7062  0022F2  D000               	goto	l140
  7063  0022F4                     l140:
  7064                           
  7065                           ; BSR set to: 0
  7066  0022F4  0012               	return		;funcret
  7067  0022F6                     __end_of_PED_Control:
  7068                           	opt stack 0
  7069                           tblptru	equ	0xFF8
  7070                           tblptrh	equ	0xFF7
  7071                           tblptrl	equ	0xFF6
  7072                           tablat	equ	0xFF5
  7073                           prodl	equ	0xFF3
  7074                           postinc0	equ	0xFEE
  7075                           wreg	equ	0xFE8
  7076                           postdec1	equ	0xFE5
  7077                           fsr1l	equ	0xFE1
  7078                           status	equ	0xFD8
  7079                           
  7080 ;; *************** function _update_LCD_PED_Count *****************
  7081 ;; Defined at:
  7082 ;;		line 207 in file "Main_Screen.c"
  7083 ;; Parameters:    Size  Location     Type
  7084 ;;  direction       1    wreg     unsigned char 
  7085 ;;  count           1   64[COMRAM] unsigned char 
  7086 ;; Auto vars:     Size  Location     Type
  7087 ;;  direction       1   65[COMRAM] unsigned char 
  7088 ;; Return value:  Size  Location     Type
  7089 ;;		None               void
  7090 ;; Registers used:
  7091 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7092 ;; Tracked objects:
  7093 ;;		On entry : 0/0
  7094 ;;		On exit  : 0/0
  7095 ;;		Unchanged: 0/0
  7096 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7097 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7099 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7100 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7101 ;;Total ram usage:        2 bytes
  7102 ;; Hardware stack levels used:    1
  7103 ;; Hardware stack levels required when called:    9
  7104 ;; This function calls:
  7105 ;;		___awdiv
  7106 ;;		___awmod
  7107 ;;		_drawtext
  7108 ;; This function is called by:
  7109 ;;		_PED_Control
  7110 ;; This function uses a non-reentrant model
  7111 ;;
  7112                           
  7113                           	psect	text30
  7114  0019DE                     __ptext30:
  7115                           	opt stack 0
  7116  0019DE                     _update_LCD_PED_Count:
  7117                           	opt stack 19
  7118                           
  7119                           ; BSR set to: 0
  7120                           ;incstack = 0
  7121                           ;update_LCD_PED_Count@direction stored from wreg
  7122  0019DE  6E42               	movwf	update_LCD_PED_Count@direction,c
  7123                           
  7124                           ;Main_Screen.c: 209: switch (direction)
  7125  0019E0  D05B               	goto	l5145
  7126  0019E2                     l5135:
  7127                           
  7128                           ;Main_Screen.c: 213: PED_NS_Count[0] = count/10 + '0';
  7129  0019E2  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7130  0019E6  6A10               	clrf	___awdiv@dividend+1,c
  7131  0019E8  0E00               	movlw	0
  7132  0019EA  6E12               	movwf	___awdiv@divisor+1,c
  7133  0019EC  0E0A               	movlw	10
  7134  0019EE  6E11               	movwf	___awdiv@divisor,c
  7135  0019F0  ECB3  F00E         	call	___awdiv	;wreg free
  7136  0019F4  500F               	movf	?___awdiv,w,c
  7137  0019F6  0F30               	addlw	48
  7138  0019F8  0100               	movlb	0	; () banked
  7139  0019FA  6FA7               	movwf	_PED_NS_Count& (0+255),b
  7140                           
  7141                           ;Main_Screen.c: 214: PED_NS_Count[1] = count%10 + '0';
  7142  0019FC  C041  F035         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7143  001A00  6A36               	clrf	___awmod@dividend+1,c
  7144  001A02  0E00               	movlw	0
  7145  001A04  6E38               	movwf	___awmod@divisor+1,c
  7146  001A06  0E0A               	movlw	10
  7147  001A08  6E37               	movwf	___awmod@divisor,c
  7148  001A0A  ECD1  F00F         	call	___awmod	;wreg free
  7149  001A0E  5035               	movf	?___awmod,w,c
  7150  001A10  0F30               	addlw	48
  7151  001A12  0100               	movlb	0	; () banked
  7152  001A14  6FA8               	movwf	(_PED_NS_Count+1)& (0+255),b
  7153                           
  7154                           ; BSR set to: 0
  7155                           ;Main_Screen.c: 215: drawtext(2, 40, PED_NS_Count, 0xFFE0, 0x0000, 2);
  7156  001A16  0E28               	movlw	40
  7157  001A18  6E37               	movwf	drawtext@y,c
  7158  001A1A  0EA7               	movlw	low _PED_NS_Count
  7159  001A1C  6E38               	movwf	drawtext@_text,c
  7160  001A1E  0E00               	movlw	high _PED_NS_Count
  7161  001A20  6E39               	movwf	drawtext@_text+1,c
  7162  001A22  0EFF               	movlw	255
  7163  001A24  6E3B               	movwf	drawtext@color+1,c
  7164  001A26  0EE0               	movlw	224
  7165  001A28  6E3A               	movwf	drawtext@color,c
  7166  001A2A  0E00               	movlw	0
  7167  001A2C  6E3D               	movwf	drawtext@bg+1,c
  7168  001A2E  0E00               	movlw	0
  7169  001A30  6E3C               	movwf	drawtext@bg,c
  7170  001A32  0E02               	movlw	2
  7171  001A34  6E3E               	movwf	drawtext@size,c
  7172  001A36  0E02               	movlw	2
  7173  001A38  EC23  F00A         	call	_drawtext
  7174                           
  7175                           ;Main_Screen.c: 216: break;
  7176  001A3C  D035               	goto	l485
  7177  001A3E                     l5139:
  7178                           
  7179                           ;Main_Screen.c: 219: PED_EW_Count[0] = count/10 + '0';
  7180  001A3E  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7181  001A42  6A10               	clrf	___awdiv@dividend+1,c
  7182  001A44  0E00               	movlw	0
  7183  001A46  6E12               	movwf	___awdiv@divisor+1,c
  7184  001A48  0E0A               	movlw	10
  7185  001A4A  6E11               	movwf	___awdiv@divisor,c
  7186  001A4C  ECB3  F00E         	call	___awdiv	;wreg free
  7187  001A50  500F               	movf	?___awdiv,w,c
  7188  001A52  0F30               	addlw	48
  7189  001A54  0100               	movlb	0	; () banked
  7190  001A56  6FA4               	movwf	_PED_EW_Count& (0+255),b
  7191                           
  7192                           ;Main_Screen.c: 220: PED_EW_Count[1] = count%10 + '0';
  7193  001A58  C041  F035         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7194  001A5C  6A36               	clrf	___awmod@dividend+1,c
  7195  001A5E  0E00               	movlw	0
  7196  001A60  6E38               	movwf	___awmod@divisor+1,c
  7197  001A62  0E0A               	movlw	10
  7198  001A64  6E37               	movwf	___awmod@divisor,c
  7199  001A66  ECD1  F00F         	call	___awmod	;wreg free
  7200  001A6A  5035               	movf	?___awmod,w,c
  7201  001A6C  0F30               	addlw	48
  7202  001A6E  0100               	movlb	0	; () banked
  7203  001A70  6FA5               	movwf	(_PED_EW_Count+1)& (0+255),b
  7204                           
  7205                           ; BSR set to: 0
  7206                           ;Main_Screen.c: 221: drawtext(2, 100, PED_EW_Count, 0x07FF, 0x0000, 2);
  7207  001A72  0E64               	movlw	100
  7208  001A74  6E37               	movwf	drawtext@y,c
  7209  001A76  0EA4               	movlw	low _PED_EW_Count
  7210  001A78  6E38               	movwf	drawtext@_text,c
  7211  001A7A  0E00               	movlw	high _PED_EW_Count
  7212  001A7C  6E39               	movwf	drawtext@_text+1,c
  7213  001A7E  0E07               	movlw	7
  7214  001A80  6E3B               	movwf	drawtext@color+1,c
  7215  001A82  683A               	setf	drawtext@color,c
  7216  001A84  0E00               	movlw	0
  7217  001A86  6E3D               	movwf	drawtext@bg+1,c
  7218  001A88  0E00               	movlw	0
  7219  001A8A  6E3C               	movwf	drawtext@bg,c
  7220  001A8C  0E02               	movlw	2
  7221  001A8E  6E3E               	movwf	drawtext@size,c
  7222  001A90  0E02               	movlw	2
  7223  001A92  EC23  F00A         	call	_drawtext
  7224                           
  7225                           ;Main_Screen.c: 224: }
  7226                           
  7227                           ;Main_Screen.c: 222: break;
  7228  001A96  D008               	goto	l485
  7229  001A98                     l5145:
  7230  001A98  5042               	movf	update_LCD_PED_Count@direction,w,c
  7231                           
  7232                           ; Switch size 1, requested type "space"
  7233                           ; Number of cases is 2, Range of values is 0 to 2
  7234                           ; switch strategies available:
  7235                           ; Name         Instructions Cycles
  7236                           ; simple_byte            7     4 (average)
  7237                           ;	Chosen strategy is simple_byte
  7238  001A9A  0A00               	xorlw	0	; case 0
  7239  001A9C  B4D8               	btfsc	status,2,c
  7240  001A9E  D7A1               	goto	l5135
  7241  001AA0  0A02               	xorlw	2	; case 2
  7242  001AA2  B4D8               	btfsc	status,2,c
  7243  001AA4  D7CC               	goto	l5139
  7244  001AA6  D000               	goto	l485
  7245  001AA8                     l485:
  7246  001AA8  0012               	return		;funcret
  7247  001AAA                     __end_of_update_LCD_PED_Count:
  7248                           	opt stack 0
  7249                           tblptru	equ	0xFF8
  7250                           tblptrh	equ	0xFF7
  7251                           tblptrl	equ	0xFF6
  7252                           tablat	equ	0xFF5
  7253                           prodl	equ	0xFF3
  7254                           postinc0	equ	0xFEE
  7255                           wreg	equ	0xFE8
  7256                           postdec1	equ	0xFE5
  7257                           fsr1l	equ	0xFE1
  7258                           status	equ	0xFD8
  7259                           
  7260 ;; *************** function ___awdiv *****************
  7261 ;; Defined at:
  7262 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7263 ;; Parameters:    Size  Location     Type
  7264 ;;  dividend        2   14[COMRAM] int 
  7265 ;;  divisor         2   16[COMRAM] int 
  7266 ;; Auto vars:     Size  Location     Type
  7267 ;;  quotient        2   20[COMRAM] int 
  7268 ;;  sign            1   19[COMRAM] unsigned char 
  7269 ;;  counter         1   18[COMRAM] unsigned char 
  7270 ;; Return value:  Size  Location     Type
  7271 ;;                  2   14[COMRAM] int 
  7272 ;; Registers used:
  7273 ;;		wreg, status,2, status,0
  7274 ;; Tracked objects:
  7275 ;;		On entry : 0/0
  7276 ;;		On exit  : 0/0
  7277 ;;		Unchanged: 0/0
  7278 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7279 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7280 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7281 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7282 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7283 ;;Total ram usage:        8 bytes
  7284 ;; Hardware stack levels used:    1
  7285 ;; Hardware stack levels required when called:    2
  7286 ;; This function calls:
  7287 ;;		Nothing
  7288 ;; This function is called by:
  7289 ;;		_update_LCD_PED_Count
  7290 ;;		_update_LCD_count
  7291 ;;		_dec_2_bcd
  7292 ;; This function uses a non-reentrant model
  7293 ;;
  7294                           
  7295                           	psect	text31
  7296  001D66                     __ptext31:
  7297                           	opt stack 0
  7298  001D66                     ___awdiv:
  7299                           	opt stack 25
  7300                           
  7301                           ;incstack = 0
  7302  001D66  0E00               	movlw	0
  7303  001D68  6E14               	movwf	___awdiv@sign,c
  7304  001D6A  AE12               	btfss	___awdiv@divisor+1,7,c
  7305  001D6C  D007               	goto	l5079
  7306  001D6E  6C11               	negf	___awdiv@divisor,c
  7307  001D70  1E12               	comf	___awdiv@divisor+1,f,c
  7308  001D72  B0D8               	btfsc	status,0,c
  7309  001D74  2A12               	incf	___awdiv@divisor+1,f,c
  7310  001D76  0E01               	movlw	1
  7311  001D78  6E14               	movwf	___awdiv@sign,c
  7312  001D7A  D000               	goto	l5079
  7313  001D7C                     l5079:
  7314  001D7C  AE10               	btfss	___awdiv@dividend+1,7,c
  7315  001D7E  D007               	goto	l5085
  7316  001D80  6C0F               	negf	___awdiv@dividend,c
  7317  001D82  1E10               	comf	___awdiv@dividend+1,f,c
  7318  001D84  B0D8               	btfsc	status,0,c
  7319  001D86  2A10               	incf	___awdiv@dividend+1,f,c
  7320  001D88  0E01               	movlw	1
  7321  001D8A  1A14               	xorwf	___awdiv@sign,f,c
  7322  001D8C  D000               	goto	l5085
  7323  001D8E                     l5085:
  7324  001D8E  0E00               	movlw	0
  7325  001D90  6E16               	movwf	___awdiv@quotient+1,c
  7326  001D92  0E00               	movlw	0
  7327  001D94  6E15               	movwf	___awdiv@quotient,c
  7328  001D96  5011               	movf	___awdiv@divisor,w,c
  7329  001D98  1012               	iorwf	___awdiv@divisor+1,w,c
  7330  001D9A  B4D8               	btfsc	status,2,c
  7331  001D9C  D021               	goto	l5107
  7332  001D9E  0E01               	movlw	1
  7333  001DA0  6E13               	movwf	___awdiv@counter,c
  7334  001DA2  D005               	goto	l5093
  7335  001DA4                     l5091:
  7336  001DA4  90D8               	bcf	status,0,c
  7337  001DA6  3611               	rlcf	___awdiv@divisor,f,c
  7338  001DA8  3612               	rlcf	___awdiv@divisor+1,f,c
  7339  001DAA  2A13               	incf	___awdiv@counter,f,c
  7340  001DAC  D000               	goto	l5093
  7341  001DAE                     l5093:
  7342  001DAE  BE12               	btfsc	___awdiv@divisor+1,7,c
  7343  001DB0  D002               	goto	l5095
  7344  001DB2  D7F8               	goto	l5091
  7345  001DB4  D000               	goto	l5095
  7346  001DB6                     l5095:
  7347  001DB6  90D8               	bcf	status,0,c
  7348  001DB8  3615               	rlcf	___awdiv@quotient,f,c
  7349  001DBA  3616               	rlcf	___awdiv@quotient+1,f,c
  7350  001DBC  5011               	movf	___awdiv@divisor,w,c
  7351  001DBE  5C0F               	subwf	___awdiv@dividend,w,c
  7352  001DC0  5012               	movf	___awdiv@divisor+1,w,c
  7353  001DC2  5810               	subwfb	___awdiv@dividend+1,w,c
  7354  001DC4  A0D8               	btfss	status,0,c
  7355  001DC6  D006               	goto	l5103
  7356  001DC8  5011               	movf	___awdiv@divisor,w,c
  7357  001DCA  5E0F               	subwf	___awdiv@dividend,f,c
  7358  001DCC  5012               	movf	___awdiv@divisor+1,w,c
  7359  001DCE  5A10               	subwfb	___awdiv@dividend+1,f,c
  7360  001DD0  8015               	bsf	___awdiv@quotient,0,c
  7361  001DD2  D000               	goto	l5103
  7362  001DD4                     l5103:
  7363  001DD4  90D8               	bcf	status,0,c
  7364  001DD6  3212               	rrcf	___awdiv@divisor+1,f,c
  7365  001DD8  3211               	rrcf	___awdiv@divisor,f,c
  7366  001DDA  2E13               	decfsz	___awdiv@counter,f,c
  7367  001DDC  D7EC               	goto	l5095
  7368  001DDE  D000               	goto	l5107
  7369  001DE0                     l5107:
  7370  001DE0  5014               	movf	___awdiv@sign,w,c
  7371  001DE2  B4D8               	btfsc	status,2,c
  7372  001DE4  D005               	goto	l5111
  7373  001DE6  6C15               	negf	___awdiv@quotient,c
  7374  001DE8  1E16               	comf	___awdiv@quotient+1,f,c
  7375  001DEA  B0D8               	btfsc	status,0,c
  7376  001DEC  2A16               	incf	___awdiv@quotient+1,f,c
  7377  001DEE  D000               	goto	l5111
  7378  001DF0                     l5111:
  7379  001DF0  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  7380  001DF4  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  7381  001DF8  D000               	goto	l889
  7382  001DFA                     l889:
  7383  001DFA  0012               	return		;funcret
  7384  001DFC                     __end_of___awdiv:
  7385                           	opt stack 0
  7386                           tblptru	equ	0xFF8
  7387                           tblptrh	equ	0xFF7
  7388                           tblptrl	equ	0xFF6
  7389                           tablat	equ	0xFF5
  7390                           prodl	equ	0xFF3
  7391                           postinc0	equ	0xFEE
  7392                           wreg	equ	0xFE8
  7393                           postdec1	equ	0xFE5
  7394                           fsr1l	equ	0xFE1
  7395                           status	equ	0xFD8
  7396                           
  7397 ;; *************** function _Wait_One_Second_With_Beep *****************
  7398 ;; Defined at:
  7399 ;;		line 316 in file "Lab7_S1_sample.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;		None
  7402 ;; Auto vars:     Size  Location     Type
  7403 ;;		None
  7404 ;; Return value:  Size  Location     Type
  7405 ;;		None               void
  7406 ;; Registers used:
  7407 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7408 ;; Tracked objects:
  7409 ;;		On entry : 0/0
  7410 ;;		On exit  : 0/0
  7411 ;;		Unchanged: 0/0
  7412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7413 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7416 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;Total ram usage:        0 bytes
  7418 ;; Hardware stack levels used:    1
  7419 ;; Hardware stack levels required when called:   10
  7420 ;; This function calls:
  7421 ;;		_Activate_Buzzer
  7422 ;;		_Deactivate_Buzzer
  7423 ;;		_Draw_Star
  7424 ;;		_Erase_Star
  7425 ;;		_Wait_Half_Second
  7426 ;;		_update_LCD_misc
  7427 ;; This function is called by:
  7428 ;;		_PED_Control
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           	psect	text32
  7433  0027B8                     __ptext32:
  7434                           	opt stack 0
  7435  0027B8                     _Wait_One_Second_With_Beep:
  7436                           	opt stack 18
  7437                           
  7438                           ;Lab7_S1_sample.c: 318: PORTEbits.RE2 = 1;
  7439                           
  7440                           ;incstack = 0
  7441  0027B8  8484               	bsf	3972,2,c	;volatile
  7442                           
  7443                           ;Lab7_S1_sample.c: 319: Draw_Star();
  7444  0027BA  EC22  F013         	call	_Draw_Star	;wreg free
  7445                           
  7446                           ;Lab7_S1_sample.c: 320: Activate_Buzzer();
  7447  0027BE  EC3D  F014         	call	_Activate_Buzzer	;wreg free
  7448                           
  7449                           ;Lab7_S1_sample.c: 321: Wait_Half_Second();
  7450  0027C2  EC08  F014         	call	_Wait_Half_Second	;wreg free
  7451                           
  7452                           ;Lab7_S1_sample.c: 323: PORTEbits.RE2 = 0;
  7453  0027C6  9484               	bcf	3972,2,c	;volatile
  7454                           
  7455                           ;Lab7_S1_sample.c: 324: Erase_Star();
  7456  0027C8  EC05  F013         	call	_Erase_Star	;wreg free
  7457                           
  7458                           ;Lab7_S1_sample.c: 325: Deactivate_Buzzer();
  7459  0027CC  EC5D  F014         	call	_Deactivate_Buzzer	;wreg free
  7460                           
  7461                           ;Lab7_S1_sample.c: 326: Wait_Half_Second();
  7462  0027D0  EC08  F014         	call	_Wait_Half_Second	;wreg free
  7463                           
  7464                           ;Lab7_S1_sample.c: 327: update_LCD_misc();
  7465  0027D4  EC7C  F005         	call	_update_LCD_misc	;wreg free
  7466  0027D8  0012               	return		;funcret
  7467  0027DA                     __end_of_Wait_One_Second_With_Beep:
  7468                           	opt stack 0
  7469                           tblptru	equ	0xFF8
  7470                           tblptrh	equ	0xFF7
  7471                           tblptrl	equ	0xFF6
  7472                           tablat	equ	0xFF5
  7473                           prodl	equ	0xFF3
  7474                           postinc0	equ	0xFEE
  7475                           wreg	equ	0xFE8
  7476                           postdec1	equ	0xFE5
  7477                           fsr1l	equ	0xFE1
  7478                           status	equ	0xFD8
  7479                           
  7480 ;; *************** function _update_LCD_misc *****************
  7481 ;; Defined at:
  7482 ;;		line 258 in file "Main_Screen.c"
  7483 ;; Parameters:    Size  Location     Type
  7484 ;;		None
  7485 ;; Auto vars:     Size  Location     Type
  7486 ;;  volt            3    9[BANK0 ] float 
  7487 ;;  nStep           2    7[BANK0 ] int 
  7488 ;; Return value:  Size  Location     Type
  7489 ;;		None               void
  7490 ;; Registers used:
  7491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7492 ;; Tracked objects:
  7493 ;;		On entry : 0/0
  7494 ;;		On exit  : 0/0
  7495 ;;		Unchanged: 0/0
  7496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7498 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7500 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7501 ;;Total ram usage:        5 bytes
  7502 ;; Hardware stack levels used:    1
  7503 ;; Hardware stack levels required when called:    9
  7504 ;; This function calls:
  7505 ;;		_Read_Volt
  7506 ;;		___awmod
  7507 ;;		___ftge
  7508 ;;		___ftmul
  7509 ;;		___fttol
  7510 ;;		_drawtext
  7511 ;;		_get_full_ADC
  7512 ;; This function is called by:
  7513 ;;		_Wait_One_Second
  7514 ;;		_Wait_One_Second_With_Beep
  7515 ;; This function uses a non-reentrant model
  7516 ;;
  7517                           
  7518                           	psect	text33
  7519  000AF8                     __ptext33:
  7520                           	opt stack 0
  7521  000AF8                     _update_LCD_misc:
  7522                           	opt stack 18
  7523                           
  7524                           ;Main_Screen.c: 260: int nStep = get_full_ADC();
  7525                           
  7526                           ;incstack = 0
  7527  000AF8  ECC9  F013         	call	_get_full_ADC	;wreg free
  7528  000AFC  C00F  F0D2         	movff	?_get_full_ADC,update_LCD_misc@nStep
  7529  000B00  C010  F0D3         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  7530                           
  7531                           ;Main_Screen.c: 261: float volt = Read_Volt (0);
  7532  000B04  0E00               	movlw	0
  7533  000B06  EC83  F010         	call	_Read_Volt
  7534  000B0A  C02A  F0D4         	movff	?_Read_Volt,update_LCD_misc@volt
  7535  000B0E  C02B  F0D5         	movff	?_Read_Volt+1,update_LCD_misc@volt+1
  7536  000B12  C02C  F0D6         	movff	?_Read_Volt+2,update_LCD_misc@volt+2
  7537                           
  7538                           ;Main_Screen.c: 262: Light_Sensor = volt < 2.5 ? 1:0;
  7539  000B16  C0D4  F00F         	movff	update_LCD_misc@volt,___ftge@ff1
  7540  000B1A  C0D5  F010         	movff	update_LCD_misc@volt+1,___ftge@ff1+1
  7541  000B1E  C0D6  F011         	movff	update_LCD_misc@volt+2,___ftge@ff1+2
  7542  000B22  0E00               	movlw	0
  7543  000B24  6E12               	movwf	___ftge@ff2,c
  7544  000B26  0E20               	movlw	32
  7545  000B28  6E13               	movwf	___ftge@ff2+1,c
  7546  000B2A  0E40               	movlw	64
  7547  000B2C  6E14               	movwf	___ftge@ff2+2,c
  7548  000B2E  ECFE  F00E         	call	___ftge	;wreg free
  7549  000B32  B0D8               	btfsc	status,0,c
  7550  000B34  D002               	goto	u3690
  7551  000B36  0E01               	movlw	1
  7552  000B38  D001               	goto	u3700
  7553  000B3A                     u3690:
  7554  000B3A  0E00               	movlw	0
  7555  000B3C                     u3700:
  7556  000B3C  6E50               	movwf	_Light_Sensor,c
  7557                           
  7558                           ;Main_Screen.c: 263: Light_Sensor_Voltage_Txt[0] = ((int) volt + '0');
  7559  000B3E  C0D4  F026         	movff	update_LCD_misc@volt,___fttol@f1
  7560  000B42  C0D5  F027         	movff	update_LCD_misc@volt+1,___fttol@f1+1
  7561  000B46  C0D6  F028         	movff	update_LCD_misc@volt+2,___fttol@f1+2
  7562  000B4A  EC9D  F00B         	call	___fttol	;wreg free
  7563  000B4E  5026               	movf	?___fttol,w,c
  7564  000B50  0F30               	addlw	48
  7565  000B52  0100               	movlb	0	; () banked
  7566  000B54  6F96               	movwf	_Light_Sensor_Voltage_Txt& (0+255),b
  7567                           
  7568                           ; BSR set to: 0
  7569                           ;Main_Screen.c: 264: Light_Sensor_Voltage_Txt[2] = ((((int) (volt*10))%10) + '0');
  7570  000B56  0E00               	movlw	0
  7571  000B58  6E1A               	movwf	___ftmul@f2,c
  7572  000B5A  0E20               	movlw	32
  7573  000B5C  6E1B               	movwf	___ftmul@f2+1,c
  7574  000B5E  0E41               	movlw	65
  7575  000B60  6E1C               	movwf	___ftmul@f2+2,c
  7576  000B62  C0D4  F017         	movff	update_LCD_misc@volt,___ftmul@f1
  7577  000B66  C0D5  F018         	movff	update_LCD_misc@volt+1,___ftmul@f1+1
  7578  000B6A  C0D6  F019         	movff	update_LCD_misc@volt+2,___ftmul@f1+2
  7579  000B6E  ECA8  F00A         	call	___ftmul	;wreg free
  7580  000B72  C017  F026         	movff	?___ftmul,___fttol@f1
  7581  000B76  C018  F027         	movff	?___ftmul+1,___fttol@f1+1
  7582  000B7A  C019  F028         	movff	?___ftmul+2,___fttol@f1+2
  7583  000B7E  EC9D  F00B         	call	___fttol	;wreg free
  7584  000B82  C026  F035         	movff	?___fttol,___awmod@dividend
  7585  000B86  C027  F036         	movff	?___fttol+1,___awmod@dividend+1
  7586  000B8A  0E00               	movlw	0
  7587  000B8C  6E38               	movwf	___awmod@divisor+1,c
  7588  000B8E  0E0A               	movlw	10
  7589  000B90  6E37               	movwf	___awmod@divisor,c
  7590  000B92  ECD1  F00F         	call	___awmod	;wreg free
  7591  000B96  5035               	movf	?___awmod,w,c
  7592  000B98  0F30               	addlw	48
  7593  000B9A  0100               	movlb	0	; () banked
  7594  000B9C  6F98               	movwf	(_Light_Sensor_Voltage_Txt+2)& (0+255),b
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;Main_Screen.c: 265: if (Light_Sensor == 0) Light_Sensor_Mode_Txt[1] = 'N'; else Light_S
      +                          ensor_Mode_Txt[1] = 'D';
  7598  000B9E  5050               	movf	_Light_Sensor,w,c
  7599  000BA0  A4D8               	btfss	status,2,c
  7600  000BA2  D002               	goto	l4945
  7601                           
  7602                           ; BSR set to: 0
  7603  000BA4  0E4E               	movlw	78
  7604  000BA6  D001               	goto	L11
  7605  000BA8                     l4945:
  7606                           
  7607                           ; BSR set to: 0
  7608  000BA8  0E44               	movlw	68
  7609  000BAA                     L11:
  7610  000BAA  6E62               	movwf	_Light_Sensor_Mode_Txt+1,c
  7611                           
  7612                           ; BSR set to: 0
  7613                           ;Main_Screen.c: 266: if (MODE == 0) Act_Mode_Txt[0] = 'N'; else Act_Mode_Txt[0] = 'D';
  7614  000BAC  5051               	movf	_MODE,w,c
  7615  000BAE  A4D8               	btfss	status,2,c
  7616  000BB0  D002               	goto	l4949
  7617                           
  7618                           ; BSR set to: 0
  7619  000BB2  0E4E               	movlw	78
  7620  000BB4  D001               	goto	L12
  7621  000BB6                     l4949:
  7622                           
  7623                           ; BSR set to: 0
  7624  000BB6  0E44               	movlw	68
  7625  000BB8                     L12:
  7626  000BB8  6E64               	movwf	_Act_Mode_Txt,c
  7627  000BBA  D000               	goto	l4951
  7628  000BBC                     l4951:
  7629                           
  7630                           ; BSR set to: 0
  7631                           ;Main_Screen.c: 268: SW_EWPED = EW_PED_SW;
  7632  000BBC  C04A  F055         	movff	_EW_PED_SW,_SW_EWPED
  7633                           
  7634                           ; BSR set to: 0
  7635                           ;Main_Screen.c: 269: SW_EWLT = PORTCbits.RC0;
  7636  000BC0  0E00               	movlw	0
  7637  000BC2  B082               	btfsc	3970,0,c	;volatile
  7638  000BC4  0E01               	movlw	1
  7639  000BC6  6E54               	movwf	_SW_EWLT,c
  7640                           
  7641                           ; BSR set to: 0
  7642                           ;Main_Screen.c: 270: SW_NSPED = NS_PED_SW;
  7643  000BC8  C052  F057         	movff	_NS_PED_SW,_SW_NSPED
  7644                           
  7645                           ; BSR set to: 0
  7646                           ;Main_Screen.c: 271: SW_NSLT = PORTAbits.RA5;
  7647  000BCC  0E00               	movlw	0
  7648  000BCE  BA80               	btfsc	3968,5,c	;volatile
  7649  000BD0  0E01               	movlw	1
  7650  000BD2  6E56               	movwf	_SW_NSLT,c
  7651                           
  7652                           ;Main_Screen.c: 274: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1
      +                          ';
  7653  000BD4  5057               	movf	_SW_NSPED,w,c
  7654  000BD6  A4D8               	btfss	status,2,c
  7655  000BD8  D002               	goto	l4961
  7656                           
  7657                           ; BSR set to: 0
  7658  000BDA  0E30               	movlw	48
  7659  000BDC  D001               	goto	L13
  7660  000BDE                     l4961:
  7661                           
  7662                           ; BSR set to: 0
  7663  000BDE  0E31               	movlw	49
  7664  000BE0                     L13:
  7665  000BE0  6E70               	movwf	_SW_NSPED_Txt,c
  7666                           
  7667                           ; BSR set to: 0
  7668                           ;Main_Screen.c: 275: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  7669  000BE2  5056               	movf	_SW_NSLT,w,c
  7670  000BE4  A4D8               	btfss	status,2,c
  7671  000BE6  D002               	goto	l4965
  7672                           
  7673                           ; BSR set to: 0
  7674  000BE8  0E30               	movlw	48
  7675  000BEA  D001               	goto	L14
  7676  000BEC                     l4965:
  7677                           
  7678                           ; BSR set to: 0
  7679  000BEC  0E31               	movlw	49
  7680  000BEE                     L14:
  7681  000BEE  6E6E               	movwf	_SW_NSLT_Txt,c
  7682                           
  7683                           ; BSR set to: 0
  7684                           ;Main_Screen.c: 276: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1
      +                          ';
  7685  000BF0  5055               	movf	_SW_EWPED,w,c
  7686  000BF2  A4D8               	btfss	status,2,c
  7687  000BF4  D002               	goto	l4969
  7688                           
  7689                           ; BSR set to: 0
  7690  000BF6  0E30               	movlw	48
  7691  000BF8  D001               	goto	L15
  7692  000BFA                     l4969:
  7693                           
  7694                           ; BSR set to: 0
  7695  000BFA  0E31               	movlw	49
  7696  000BFC                     L15:
  7697  000BFC  6E6C               	movwf	_SW_EWPED_Txt,c
  7698                           
  7699                           ; BSR set to: 0
  7700                           ;Main_Screen.c: 277: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  7701  000BFE  5054               	movf	_SW_EWLT,w,c
  7702  000C00  A4D8               	btfss	status,2,c
  7703  000C02  D002               	goto	l4973
  7704                           
  7705                           ; BSR set to: 0
  7706  000C04  0E30               	movlw	48
  7707  000C06  D001               	goto	L16
  7708  000C08                     l4973:
  7709                           
  7710                           ; BSR set to: 0
  7711  000C08  0E31               	movlw	49
  7712  000C0A                     L16:
  7713  000C0A  6E6A               	movwf	_SW_EWLT_Txt,c
  7714                           
  7715                           ; BSR set to: 0
  7716                           ;Main_Screen.c: 279: if (Flashing_Request == 0) FlashingR_Txt[0] = '0'; else FlashingR_T
      +                          xt[0] = '1';
  7717  000C0C  504B               	movf	_Flashing_Request,w,c
  7718  000C0E  A4D8               	btfss	status,2,c
  7719  000C10  D002               	goto	l4977
  7720                           
  7721                           ; BSR set to: 0
  7722  000C12  0E30               	movlw	48
  7723  000C14  D001               	goto	L17
  7724  000C16                     l4977:
  7725                           
  7726                           ; BSR set to: 0
  7727  000C16  0E31               	movlw	49
  7728  000C18                     L17:
  7729  000C18  6E66               	movwf	_FlashingR_Txt,c
  7730                           
  7731                           ; BSR set to: 0
  7732                           ;Main_Screen.c: 280: if (Flashing_Status == 0) FlashingS_Txt[0] = '0'; else FlashingS_Tx
      +                          t[0] = '1';
  7733  000C1A  504C               	movf	_Flashing_Status,w,c
  7734  000C1C  A4D8               	btfss	status,2,c
  7735  000C1E  D002               	goto	l4981
  7736                           
  7737                           ; BSR set to: 0
  7738  000C20  0E30               	movlw	48
  7739  000C22  D001               	goto	L18
  7740  000C24                     l4981:
  7741                           
  7742                           ; BSR set to: 0
  7743  000C24  0E31               	movlw	49
  7744  000C26                     L18:
  7745  000C26  6E68               	movwf	_FlashingS_Txt,c
  7746  000C28  D000               	goto	l4983
  7747  000C2A                     l4983:
  7748                           
  7749                           ; BSR set to: 0
  7750                           ;Main_Screen.c: 282: drawtext(35, 2, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  7751  000C2A  0E02               	movlw	2
  7752  000C2C  6E37               	movwf	drawtext@y,c
  7753  000C2E  0E64               	movlw	low _Act_Mode_Txt
  7754  000C30  6E38               	movwf	drawtext@_text,c
  7755  000C32  0E00               	movlw	high _Act_Mode_Txt
  7756  000C34  6E39               	movwf	drawtext@_text+1,c
  7757  000C36  0EFF               	movlw	255
  7758  000C38  6E3B               	movwf	drawtext@color+1,c
  7759  000C3A  683A               	setf	drawtext@color,c
  7760  000C3C  0E00               	movlw	0
  7761  000C3E  6E3D               	movwf	drawtext@bg+1,c
  7762  000C40  0E00               	movlw	0
  7763  000C42  6E3C               	movwf	drawtext@bg,c
  7764  000C44  0E01               	movlw	1
  7765  000C46  6E3E               	movwf	drawtext@size,c
  7766  000C48  0E23               	movlw	35
  7767  000C4A  EC23  F00A         	call	_drawtext
  7768                           
  7769                           ;Main_Screen.c: 283: drawtext(75, 2, Light_Sensor_Voltage_Txt, 0xFFFF, 0x0000, 1);
  7770  000C4E  0E02               	movlw	2
  7771  000C50  6E37               	movwf	drawtext@y,c
  7772  000C52  0E96               	movlw	low _Light_Sensor_Voltage_Txt
  7773  000C54  6E38               	movwf	drawtext@_text,c
  7774  000C56  0E00               	movlw	high _Light_Sensor_Voltage_Txt
  7775  000C58  6E39               	movwf	drawtext@_text+1,c
  7776  000C5A  0EFF               	movlw	255
  7777  000C5C  6E3B               	movwf	drawtext@color+1,c
  7778  000C5E  683A               	setf	drawtext@color,c
  7779  000C60  0E00               	movlw	0
  7780  000C62  6E3D               	movwf	drawtext@bg+1,c
  7781  000C64  0E00               	movlw	0
  7782  000C66  6E3C               	movwf	drawtext@bg,c
  7783  000C68  0E01               	movlw	1
  7784  000C6A  6E3E               	movwf	drawtext@size,c
  7785  000C6C  0E4B               	movlw	75
  7786  000C6E  EC23  F00A         	call	_drawtext
  7787                           
  7788                           ;Main_Screen.c: 284: drawtext(100, 2, Light_Sensor_Mode_Txt, 0xFFFF, 0x0000, 1);
  7789  000C72  0E02               	movlw	2
  7790  000C74  6E37               	movwf	drawtext@y,c
  7791  000C76  0E61               	movlw	low _Light_Sensor_Mode_Txt
  7792  000C78  6E38               	movwf	drawtext@_text,c
  7793  000C7A  0E00               	movlw	high _Light_Sensor_Mode_Txt
  7794  000C7C  6E39               	movwf	drawtext@_text+1,c
  7795  000C7E  0EFF               	movlw	255
  7796  000C80  6E3B               	movwf	drawtext@color+1,c
  7797  000C82  683A               	setf	drawtext@color,c
  7798  000C84  0E00               	movlw	0
  7799  000C86  6E3D               	movwf	drawtext@bg+1,c
  7800  000C88  0E00               	movlw	0
  7801  000C8A  6E3C               	movwf	drawtext@bg,c
  7802  000C8C  0E01               	movlw	1
  7803  000C8E  6E3E               	movwf	drawtext@size,c
  7804  000C90  0E64               	movlw	100
  7805  000C92  EC23  F00A         	call	_drawtext
  7806                           
  7807                           ;Main_Screen.c: 288: drawtext(8, 11+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  7808  000C96  0E14               	movlw	20
  7809  000C98  6E37               	movwf	drawtext@y,c
  7810  000C9A  0E70               	movlw	low _SW_NSPED_Txt
  7811  000C9C  6E38               	movwf	drawtext@_text,c
  7812  000C9E  0E00               	movlw	high _SW_NSPED_Txt
  7813  000CA0  6E39               	movwf	drawtext@_text+1,c
  7814  000CA2  0EFF               	movlw	255
  7815  000CA4  6E3B               	movwf	drawtext@color+1,c
  7816  000CA6  683A               	setf	drawtext@color,c
  7817  000CA8  0E00               	movlw	0
  7818  000CAA  6E3D               	movwf	drawtext@bg+1,c
  7819  000CAC  0E00               	movlw	0
  7820  000CAE  6E3C               	movwf	drawtext@bg,c
  7821  000CB0  0E01               	movlw	1
  7822  000CB2  6E3E               	movwf	drawtext@size,c
  7823  000CB4  0E08               	movlw	8
  7824  000CB6  EC23  F00A         	call	_drawtext
  7825                           
  7826                           ;Main_Screen.c: 289: drawtext(35, 11+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  7827  000CBA  0E14               	movlw	20
  7828  000CBC  6E37               	movwf	drawtext@y,c
  7829  000CBE  0E6E               	movlw	low _SW_NSLT_Txt
  7830  000CC0  6E38               	movwf	drawtext@_text,c
  7831  000CC2  0E00               	movlw	high _SW_NSLT_Txt
  7832  000CC4  6E39               	movwf	drawtext@_text+1,c
  7833  000CC6  0EFF               	movlw	255
  7834  000CC8  6E3B               	movwf	drawtext@color+1,c
  7835  000CCA  683A               	setf	drawtext@color,c
  7836  000CCC  0E00               	movlw	0
  7837  000CCE  6E3D               	movwf	drawtext@bg+1,c
  7838  000CD0  0E00               	movlw	0
  7839  000CD2  6E3C               	movwf	drawtext@bg,c
  7840  000CD4  0E01               	movlw	1
  7841  000CD6  6E3E               	movwf	drawtext@size,c
  7842  000CD8  0E23               	movlw	35
  7843  000CDA  EC23  F00A         	call	_drawtext
  7844                           
  7845                           ;Main_Screen.c: 290: drawtext(60, 11+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  7846  000CDE  0E14               	movlw	20
  7847  000CE0  6E37               	movwf	drawtext@y,c
  7848  000CE2  0E6C               	movlw	low _SW_EWPED_Txt
  7849  000CE4  6E38               	movwf	drawtext@_text,c
  7850  000CE6  0E00               	movlw	high _SW_EWPED_Txt
  7851  000CE8  6E39               	movwf	drawtext@_text+1,c
  7852  000CEA  0EFF               	movlw	255
  7853  000CEC  6E3B               	movwf	drawtext@color+1,c
  7854  000CEE  683A               	setf	drawtext@color,c
  7855  000CF0  0E00               	movlw	0
  7856  000CF2  6E3D               	movwf	drawtext@bg+1,c
  7857  000CF4  0E00               	movlw	0
  7858  000CF6  6E3C               	movwf	drawtext@bg,c
  7859  000CF8  0E01               	movlw	1
  7860  000CFA  6E3E               	movwf	drawtext@size,c
  7861  000CFC  0E3C               	movlw	60
  7862  000CFE  EC23  F00A         	call	_drawtext
  7863                           
  7864                           ;Main_Screen.c: 291: drawtext(85, 11+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  7865  000D02  0E14               	movlw	20
  7866  000D04  6E37               	movwf	drawtext@y,c
  7867  000D06  0E6A               	movlw	low _SW_EWLT_Txt
  7868  000D08  6E38               	movwf	drawtext@_text,c
  7869  000D0A  0E00               	movlw	high _SW_EWLT_Txt
  7870  000D0C  6E39               	movwf	drawtext@_text+1,c
  7871  000D0E  0EFF               	movlw	255
  7872  000D10  6E3B               	movwf	drawtext@color+1,c
  7873  000D12  683A               	setf	drawtext@color,c
  7874  000D14  0E00               	movlw	0
  7875  000D16  6E3D               	movwf	drawtext@bg+1,c
  7876  000D18  0E00               	movlw	0
  7877  000D1A  6E3C               	movwf	drawtext@bg,c
  7878  000D1C  0E01               	movlw	1
  7879  000D1E  6E3E               	movwf	drawtext@size,c
  7880  000D20  0E55               	movlw	85
  7881  000D22  EC23  F00A         	call	_drawtext
  7882                           
  7883                           ;Main_Screen.c: 292: drawtext(108, 11+9, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  7884  000D26  0E14               	movlw	20
  7885  000D28  6E37               	movwf	drawtext@y,c
  7886  000D2A  0E66               	movlw	low _FlashingR_Txt
  7887  000D2C  6E38               	movwf	drawtext@_text,c
  7888  000D2E  0E00               	movlw	high _FlashingR_Txt
  7889  000D30  6E39               	movwf	drawtext@_text+1,c
  7890  000D32  0EFF               	movlw	255
  7891  000D34  6E3B               	movwf	drawtext@color+1,c
  7892  000D36  683A               	setf	drawtext@color,c
  7893  000D38  0E00               	movlw	0
  7894  000D3A  6E3D               	movwf	drawtext@bg+1,c
  7895  000D3C  0E00               	movlw	0
  7896  000D3E  6E3C               	movwf	drawtext@bg,c
  7897  000D40  0E01               	movlw	1
  7898  000D42  6E3E               	movwf	drawtext@size,c
  7899  000D44  0E6C               	movlw	108
  7900  000D46  EC23  F00A         	call	_drawtext
  7901                           
  7902                           ;Main_Screen.c: 293: drawtext(119, 11+9, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  7903  000D4A  0E14               	movlw	20
  7904  000D4C  6E37               	movwf	drawtext@y,c
  7905  000D4E  0E68               	movlw	low _FlashingS_Txt
  7906  000D50  6E38               	movwf	drawtext@_text,c
  7907  000D52  0E00               	movlw	high _FlashingS_Txt
  7908  000D54  6E39               	movwf	drawtext@_text+1,c
  7909  000D56  0EFF               	movlw	255
  7910  000D58  6E3B               	movwf	drawtext@color+1,c
  7911  000D5A  683A               	setf	drawtext@color,c
  7912  000D5C  0E00               	movlw	0
  7913  000D5E  6E3D               	movwf	drawtext@bg+1,c
  7914  000D60  0E00               	movlw	0
  7915  000D62  6E3C               	movwf	drawtext@bg,c
  7916  000D64  0E01               	movlw	1
  7917  000D66  6E3E               	movwf	drawtext@size,c
  7918  000D68  0E77               	movlw	119
  7919  000D6A  EC23  F00A         	call	_drawtext
  7920  000D6E  0012               	return		;funcret
  7921  000D70                     __end_of_update_LCD_misc:
  7922                           	opt stack 0
  7923                           tblptru	equ	0xFF8
  7924                           tblptrh	equ	0xFF7
  7925                           tblptrl	equ	0xFF6
  7926                           tablat	equ	0xFF5
  7927                           prodl	equ	0xFF3
  7928                           postinc0	equ	0xFEE
  7929                           wreg	equ	0xFE8
  7930                           postdec1	equ	0xFE5
  7931                           fsr1l	equ	0xFE1
  7932                           status	equ	0xFD8
  7933                           
  7934 ;; *************** function ___fttol *****************
  7935 ;; Defined at:
  7936 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  7937 ;; Parameters:    Size  Location     Type
  7938 ;;  f1              3   37[COMRAM] float 
  7939 ;; Auto vars:     Size  Location     Type
  7940 ;;  lval            4   47[COMRAM] unsigned long 
  7941 ;;  exp1            1   51[COMRAM] unsigned char 
  7942 ;;  sign1           1   46[COMRAM] unsigned char 
  7943 ;; Return value:  Size  Location     Type
  7944 ;;                  4   37[COMRAM] long 
  7945 ;; Registers used:
  7946 ;;		wreg, status,2, status,0
  7947 ;; Tracked objects:
  7948 ;;		On entry : 0/0
  7949 ;;		On exit  : 0/0
  7950 ;;		Unchanged: 0/0
  7951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7952 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7953 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7954 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7955 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7956 ;;Total ram usage:       15 bytes
  7957 ;; Hardware stack levels used:    1
  7958 ;; Hardware stack levels required when called:    2
  7959 ;; This function calls:
  7960 ;;		Nothing
  7961 ;; This function is called by:
  7962 ;;		_update_LCD_misc
  7963 ;; This function uses a non-reentrant model
  7964 ;;
  7965                           
  7966                           	psect	text34
  7967  00173A                     __ptext34:
  7968                           	opt stack 0
  7969  00173A                     ___fttol:
  7970                           	opt stack 24
  7971                           
  7972                           ;incstack = 0
  7973  00173A  C028  F02A         	movff	___fttol@f1+2,??___fttol
  7974  00173E  6A2B               	clrf	(??___fttol+1)& (0+255),c
  7975  001740  6A2C               	clrf	(??___fttol+2)& (0+255),c
  7976  001742  3427               	rlcf	___fttol@f1+1,w,c
  7977  001744  362A               	rlcf	??___fttol& (0+255),f,c
  7978  001746  E301               	bnc	u3601
  7979  001748  802B               	bsf	(??___fttol+1)& (0+255),0,c
  7980  00174A                     u3601:
  7981  00174A  502A               	movf	??___fttol,w,c
  7982  00174C  6E34               	movwf	___fttol@exp1,c
  7983  00174E  5034               	movf	___fttol@exp1,w,c
  7984  001750  A4D8               	btfss	status,2,c
  7985  001752  D002               	goto	l4877
  7986  001754  D039               	goto	l4901
  7987  001756  D063               	goto	l1112
  7988  001758                     l4877:
  7989  001758  0E17               	movlw	23
  7990  00175A  6E2A               	movwf	??___fttol& (0+255),c
  7991  00175C  C026  F02B         	movff	___fttol@f1,??___fttol+1
  7992  001760  C027  F02C         	movff	___fttol@f1+1,??___fttol+2
  7993  001764  C028  F02D         	movff	___fttol@f1+2,??___fttol+3
  7994  001768  282A               	incf	??___fttol,w,c
  7995  00176A  6E2E               	movwf	(??___fttol+4)& (0+255),c
  7996  00176C  D004               	goto	u3620
  7997  00176E                     u3625:
  7998  00176E  90D8               	bcf	status,0,c
  7999  001770  322D               	rrcf	??___fttol+3,f,c
  8000  001772  322C               	rrcf	??___fttol+2,f,c
  8001  001774  322B               	rrcf	??___fttol+1,f,c
  8002  001776                     u3620:
  8003  001776  2E2E               	decfsz	(??___fttol+4)& (0+255),f,c
  8004  001778  D7FA               	goto	u3625
  8005  00177A  502B               	movf	??___fttol+1,w,c
  8006  00177C  6E2F               	movwf	___fttol@sign1,c
  8007  00177E  8E27               	bsf	___fttol@f1+1,7,c
  8008  001780  0EFF               	movlw	255
  8009  001782  1626               	andwf	___fttol@f1,f,c
  8010  001784  0EFF               	movlw	255
  8011  001786  1627               	andwf	___fttol@f1+1,f,c
  8012  001788  0E00               	movlw	0
  8013  00178A  1628               	andwf	___fttol@f1+2,f,c
  8014  00178C  5026               	movf	___fttol@f1,w,c
  8015  00178E  6E30               	movwf	___fttol@lval,c
  8016  001790  5027               	movf	___fttol@f1+1,w,c
  8017  001792  6E31               	movwf	___fttol@lval+1,c
  8018  001794  5028               	movf	___fttol@f1+2,w,c
  8019  001796  6E32               	movwf	___fttol@lval+2,c
  8020  001798  6A33               	clrf	___fttol@lval+3,c
  8021  00179A  0E8E               	movlw	142
  8022  00179C  5E34               	subwf	___fttol@exp1,f,c
  8023  00179E  AE34               	btfss	___fttol@exp1,7,c
  8024  0017A0  D010               	goto	l4899
  8025  0017A2  5034               	movf	___fttol@exp1,w,c
  8026  0017A4  0A80               	xorlw	128
  8027  0017A6  0F8F               	addlw	143
  8028  0017A8  B0D8               	btfsc	status,0,c
  8029  0017AA  D003               	goto	l4895
  8030  0017AC  D00D               	goto	l4901
  8031  0017AE  D037               	goto	l1112
  8032  0017B0  D000               	goto	l4895
  8033  0017B2                     l4895:
  8034  0017B2  90D8               	bcf	status,0,c
  8035  0017B4  3233               	rrcf	___fttol@lval+3,f,c
  8036  0017B6  3232               	rrcf	___fttol@lval+2,f,c
  8037  0017B8  3231               	rrcf	___fttol@lval+1,f,c
  8038  0017BA  3230               	rrcf	___fttol@lval,f,c
  8039  0017BC  3E34               	incfsz	___fttol@exp1,f,c
  8040  0017BE  D7F9               	goto	l4895
  8041  0017C0  D019               	goto	l4909
  8042  0017C2                     l4899:
  8043  0017C2  0E17               	movlw	23
  8044  0017C4  6434               	cpfsgt	___fttol@exp1,c
  8045  0017C6  D011               	goto	l4907
  8046  0017C8                     l4901:
  8047  0017C8  0E00               	movlw	0
  8048  0017CA  6E26               	movwf	?___fttol,c
  8049  0017CC  0E00               	movlw	0
  8050  0017CE  6E27               	movwf	?___fttol+1,c
  8051  0017D0  0E00               	movlw	0
  8052  0017D2  6E28               	movwf	?___fttol+2,c
  8053  0017D4  0E00               	movlw	0
  8054  0017D6  6E29               	movwf	?___fttol+3,c
  8055  0017D8  D022               	goto	l1112
  8056  0017DA  D007               	goto	l4907
  8057  0017DC                     l4905:
  8058  0017DC  90D8               	bcf	status,0,c
  8059  0017DE  3630               	rlcf	___fttol@lval,f,c
  8060  0017E0  3631               	rlcf	___fttol@lval+1,f,c
  8061  0017E2  3632               	rlcf	___fttol@lval+2,f,c
  8062  0017E4  3633               	rlcf	___fttol@lval+3,f,c
  8063  0017E6  0634               	decf	___fttol@exp1,f,c
  8064  0017E8  D000               	goto	l4907
  8065  0017EA                     l4907:
  8066  0017EA  5034               	movf	___fttol@exp1,w,c
  8067  0017EC  B4D8               	btfsc	status,2,c
  8068  0017EE  D002               	goto	l4909
  8069  0017F0  D7F5               	goto	l4905
  8070  0017F2  D000               	goto	l4909
  8071  0017F4                     l4909:
  8072  0017F4  502F               	movf	___fttol@sign1,w,c
  8073  0017F6  B4D8               	btfsc	status,2,c
  8074  0017F8  D009               	goto	l4913
  8075  0017FA  1E33               	comf	___fttol@lval+3,f,c
  8076  0017FC  1E32               	comf	___fttol@lval+2,f,c
  8077  0017FE  1E31               	comf	___fttol@lval+1,f,c
  8078  001800  6C30               	negf	___fttol@lval,c
  8079  001802  0E00               	movlw	0
  8080  001804  2231               	addwfc	___fttol@lval+1,f,c
  8081  001806  2232               	addwfc	___fttol@lval+2,f,c
  8082  001808  2233               	addwfc	___fttol@lval+3,f,c
  8083  00180A  D000               	goto	l4913
  8084  00180C                     l4913:
  8085  00180C  C030  F026         	movff	___fttol@lval,?___fttol
  8086  001810  C031  F027         	movff	___fttol@lval+1,?___fttol+1
  8087  001814  C032  F028         	movff	___fttol@lval+2,?___fttol+2
  8088  001818  C033  F029         	movff	___fttol@lval+3,?___fttol+3
  8089  00181C  D000               	goto	l1112
  8090  00181E                     l1112:
  8091  00181E  0012               	return		;funcret
  8092  001820                     __end_of___fttol:
  8093                           	opt stack 0
  8094                           tblptru	equ	0xFF8
  8095                           tblptrh	equ	0xFF7
  8096                           tblptrl	equ	0xFF6
  8097                           tablat	equ	0xFF5
  8098                           prodl	equ	0xFF3
  8099                           postinc0	equ	0xFEE
  8100                           wreg	equ	0xFE8
  8101                           postdec1	equ	0xFE5
  8102                           fsr1l	equ	0xFE1
  8103                           status	equ	0xFD8
  8104                           
  8105 ;; *************** function ___ftmul *****************
  8106 ;; Defined at:
  8107 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8108 ;; Parameters:    Size  Location     Type
  8109 ;;  f1              3   22[COMRAM] float 
  8110 ;;  f2              3   25[COMRAM] float 
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;  f3_as_produc    3   32[COMRAM] unsigned um
  8113 ;;  sign            1   36[COMRAM] unsigned char 
  8114 ;;  cntr            1   35[COMRAM] unsigned char 
  8115 ;;  exp             1   31[COMRAM] unsigned char 
  8116 ;; Return value:  Size  Location     Type
  8117 ;;                  3   22[COMRAM] float 
  8118 ;; Registers used:
  8119 ;;		wreg, status,2, status,0, cstack
  8120 ;; Tracked objects:
  8121 ;;		On entry : 0/0
  8122 ;;		On exit  : 0/0
  8123 ;;		Unchanged: 0/0
  8124 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8125 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8126 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8127 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8128 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8129 ;;Total ram usage:       15 bytes
  8130 ;; Hardware stack levels used:    1
  8131 ;; Hardware stack levels required when called:    3
  8132 ;; This function calls:
  8133 ;;		___ftpack
  8134 ;; This function is called by:
  8135 ;;		_update_LCD_misc
  8136 ;; This function uses a non-reentrant model
  8137 ;;
  8138                           
  8139                           	psect	text35
  8140  001550                     __ptext35:
  8141                           	opt stack 0
  8142  001550                     ___ftmul:
  8143                           	opt stack 23
  8144                           
  8145                           ;incstack = 0
  8146  001550  C019  F01D         	movff	___ftmul@f1+2,??___ftmul
  8147  001554  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  8148  001556  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  8149  001558  3418               	rlcf	___ftmul@f1+1,w,c
  8150  00155A  361D               	rlcf	??___ftmul& (0+255),f,c
  8151  00155C  E301               	bnc	u3451
  8152  00155E  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  8153  001560                     u3451:
  8154  001560  501D               	movf	??___ftmul,w,c
  8155  001562  6E20               	movwf	___ftmul@exp,c
  8156  001564  5020               	movf	___ftmul@exp,w,c
  8157  001566  A4D8               	btfss	status,2,c
  8158  001568  D002               	goto	l4775
  8159  00156A  D00E               	goto	l4777
  8160  00156C  D06C               	goto	l1091
  8161  00156E                     l4775:
  8162  00156E  C01C  F01D         	movff	___ftmul@f2+2,??___ftmul
  8163  001572  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  8164  001574  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  8165  001576  341B               	rlcf	___ftmul@f2+1,w,c
  8166  001578  361D               	rlcf	??___ftmul& (0+255),f,c
  8167  00157A  E301               	bnc	u3471
  8168  00157C  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  8169  00157E                     u3471:
  8170  00157E  501D               	movf	??___ftmul,w,c
  8171  001580  6E25               	movwf	___ftmul@sign,c
  8172  001582  5025               	movf	___ftmul@sign,w,c
  8173  001584  A4D8               	btfss	status,2,c
  8174  001586  D007               	goto	l4781
  8175  001588                     l4777:
  8176  001588  0E00               	movlw	0
  8177  00158A  6E17               	movwf	?___ftmul,c
  8178  00158C  0E00               	movlw	0
  8179  00158E  6E18               	movwf	?___ftmul+1,c
  8180  001590  0E00               	movlw	0
  8181  001592  6E19               	movwf	?___ftmul+2,c
  8182  001594  D058               	goto	l1091
  8183  001596                     l4781:
  8184  001596  5025               	movf	___ftmul@sign,w,c
  8185  001598  0F7B               	addlw	123
  8186  00159A  2620               	addwf	___ftmul@exp,f,c
  8187  00159C  C019  F025         	movff	___ftmul@f1+2,___ftmul@sign
  8188  0015A0  501C               	movf	___ftmul@f2+2,w,c
  8189  0015A2  1A25               	xorwf	___ftmul@sign,f,c
  8190  0015A4  0E80               	movlw	128
  8191  0015A6  1625               	andwf	___ftmul@sign,f,c
  8192  0015A8  8E18               	bsf	___ftmul@f1+1,7,c
  8193  0015AA  8E1B               	bsf	___ftmul@f2+1,7,c
  8194  0015AC  0EFF               	movlw	255
  8195  0015AE  161A               	andwf	___ftmul@f2,f,c
  8196  0015B0  0EFF               	movlw	255
  8197  0015B2  161B               	andwf	___ftmul@f2+1,f,c
  8198  0015B4  0E00               	movlw	0
  8199  0015B6  161C               	andwf	___ftmul@f2+2,f,c
  8200  0015B8  0E00               	movlw	0
  8201  0015BA  6E21               	movwf	___ftmul@f3_as_product,c
  8202  0015BC  0E00               	movlw	0
  8203  0015BE  6E22               	movwf	___ftmul@f3_as_product+1,c
  8204  0015C0  0E00               	movlw	0
  8205  0015C2  6E23               	movwf	___ftmul@f3_as_product+2,c
  8206  0015C4  0E07               	movlw	7
  8207  0015C6  6E24               	movwf	___ftmul@cntr,c
  8208  0015C8  D000               	goto	l4795
  8209  0015CA                     l4795:
  8210  0015CA  A017               	btfss	___ftmul@f1,0,c
  8211  0015CC  D007               	goto	l4799
  8212  0015CE  501A               	movf	___ftmul@f2,w,c
  8213  0015D0  2621               	addwf	___ftmul@f3_as_product,f,c
  8214  0015D2  501B               	movf	___ftmul@f2+1,w,c
  8215  0015D4  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  8216  0015D6  501C               	movf	___ftmul@f2+2,w,c
  8217  0015D8  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  8218  0015DA  D000               	goto	l4799
  8219  0015DC                     l4799:
  8220  0015DC  90D8               	bcf	status,0,c
  8221  0015DE  3219               	rrcf	___ftmul@f1+2,f,c
  8222  0015E0  3218               	rrcf	___ftmul@f1+1,f,c
  8223  0015E2  3217               	rrcf	___ftmul@f1,f,c
  8224  0015E4  90D8               	bcf	status,0,c
  8225  0015E6  361A               	rlcf	___ftmul@f2,f,c
  8226  0015E8  361B               	rlcf	___ftmul@f2+1,f,c
  8227  0015EA  361C               	rlcf	___ftmul@f2+2,f,c
  8228  0015EC  2E24               	decfsz	___ftmul@cntr,f,c
  8229  0015EE  D7ED               	goto	l4795
  8230  0015F0  D000               	goto	l4803
  8231  0015F2                     l4803:
  8232  0015F2  0E09               	movlw	9
  8233  0015F4  6E24               	movwf	___ftmul@cntr,c
  8234  0015F6  D000               	goto	l4805
  8235  0015F8                     l4805:
  8236  0015F8  A017               	btfss	___ftmul@f1,0,c
  8237  0015FA  D007               	goto	l4809
  8238  0015FC  501A               	movf	___ftmul@f2,w,c
  8239  0015FE  2621               	addwf	___ftmul@f3_as_product,f,c
  8240  001600  501B               	movf	___ftmul@f2+1,w,c
  8241  001602  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  8242  001604  501C               	movf	___ftmul@f2+2,w,c
  8243  001606  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  8244  001608  D000               	goto	l4809
  8245  00160A                     l4809:
  8246  00160A  90D8               	bcf	status,0,c
  8247  00160C  3219               	rrcf	___ftmul@f1+2,f,c
  8248  00160E  3218               	rrcf	___ftmul@f1+1,f,c
  8249  001610  3217               	rrcf	___ftmul@f1,f,c
  8250  001612  90D8               	bcf	status,0,c
  8251  001614  3223               	rrcf	___ftmul@f3_as_product+2,f,c
  8252  001616  3222               	rrcf	___ftmul@f3_as_product+1,f,c
  8253  001618  3221               	rrcf	___ftmul@f3_as_product,f,c
  8254  00161A  2E24               	decfsz	___ftmul@cntr,f,c
  8255  00161C  D7ED               	goto	l4805
  8256  00161E  D000               	goto	l4813
  8257  001620                     l4813:
  8258  001620  C021  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  8259  001624  C022  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8260  001628  C023  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8261  00162C  C020  F012         	movff	___ftmul@exp,___ftpack@exp
  8262  001630  C025  F013         	movff	___ftmul@sign,___ftpack@sign
  8263  001634  EC55  F00D         	call	___ftpack	;wreg free
  8264  001638  C00F  F017         	movff	?___ftpack,?___ftmul
  8265  00163C  C010  F018         	movff	?___ftpack+1,?___ftmul+1
  8266  001640  C011  F019         	movff	?___ftpack+2,?___ftmul+2
  8267  001644  D000               	goto	l1091
  8268  001646                     l1091:
  8269  001646  0012               	return		;funcret
  8270  001648                     __end_of___ftmul:
  8271                           	opt stack 0
  8272                           tblptru	equ	0xFF8
  8273                           tblptrh	equ	0xFF7
  8274                           tblptrl	equ	0xFF6
  8275                           tablat	equ	0xFF5
  8276                           prodl	equ	0xFF3
  8277                           postinc0	equ	0xFEE
  8278                           wreg	equ	0xFE8
  8279                           postdec1	equ	0xFE5
  8280                           fsr1l	equ	0xFE1
  8281                           status	equ	0xFD8
  8282                           
  8283 ;; *************** function ___ftge *****************
  8284 ;; Defined at:
  8285 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  8286 ;; Parameters:    Size  Location     Type
  8287 ;;  ff1             3   14[COMRAM] float 
  8288 ;;  ff2             3   17[COMRAM] float 
  8289 ;; Auto vars:     Size  Location     Type
  8290 ;;		None
  8291 ;; Return value:  Size  Location     Type
  8292 ;;		None               void
  8293 ;; Registers used:
  8294 ;;		wreg, status,2, status,0
  8295 ;; Tracked objects:
  8296 ;;		On entry : 0/0
  8297 ;;		On exit  : 0/0
  8298 ;;		Unchanged: 0/0
  8299 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8300 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8301 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8302 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8303 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8304 ;;Total ram usage:        9 bytes
  8305 ;; Hardware stack levels used:    1
  8306 ;; Hardware stack levels required when called:    2
  8307 ;; This function calls:
  8308 ;;		Nothing
  8309 ;; This function is called by:
  8310 ;;		_main
  8311 ;;		_update_LCD_misc
  8312 ;; This function uses a non-reentrant model
  8313 ;;
  8314                           
  8315                           	psect	text36
  8316  001DFC                     __ptext36:
  8317                           	opt stack 0
  8318  001DFC                     ___ftge:
  8319                           	opt stack 28
  8320                           
  8321                           ;incstack = 0
  8322  001DFC  AE11               	btfss	___ftge@ff1+2,7,c
  8323  001DFE  D017               	goto	l4857
  8324  001E00  C00F  F015         	movff	___ftge@ff1,??___ftge
  8325  001E04  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  8326  001E08  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  8327  001E0C  1E15               	comf	??___ftge,f,c
  8328  001E0E  1E16               	comf	??___ftge+1,f,c
  8329  001E10  1E17               	comf	??___ftge+2,f,c
  8330  001E12  2A15               	incf	??___ftge,f,c
  8331  001E14  0E00               	movlw	0
  8332  001E16  2216               	addwfc	??___ftge+1,f,c
  8333  001E18  2217               	addwfc	??___ftge+2,f,c
  8334  001E1A  0E00               	movlw	0
  8335  001E1C  2415               	addwf	??___ftge,w,c
  8336  001E1E  6E0F               	movwf	___ftge@ff1,c
  8337  001E20  0E00               	movlw	0
  8338  001E22  2016               	addwfc	??___ftge+1,w,c
  8339  001E24  6E10               	movwf	___ftge@ff1+1,c
  8340  001E26  0E80               	movlw	128
  8341  001E28  2017               	addwfc	??___ftge+2,w,c
  8342  001E2A  6E11               	movwf	___ftge@ff1+2,c
  8343  001E2C  D000               	goto	l4857
  8344  001E2E                     l4857:
  8345  001E2E  AE14               	btfss	___ftge@ff2+2,7,c
  8346  001E30  D017               	goto	l4861
  8347  001E32  C012  F015         	movff	___ftge@ff2,??___ftge
  8348  001E36  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  8349  001E3A  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  8350  001E3E  1E15               	comf	??___ftge,f,c
  8351  001E40  1E16               	comf	??___ftge+1,f,c
  8352  001E42  1E17               	comf	??___ftge+2,f,c
  8353  001E44  2A15               	incf	??___ftge,f,c
  8354  001E46  0E00               	movlw	0
  8355  001E48  2216               	addwfc	??___ftge+1,f,c
  8356  001E4A  2217               	addwfc	??___ftge+2,f,c
  8357  001E4C  0E00               	movlw	0
  8358  001E4E  2415               	addwf	??___ftge,w,c
  8359  001E50  6E12               	movwf	___ftge@ff2,c
  8360  001E52  0E00               	movlw	0
  8361  001E54  2016               	addwfc	??___ftge+1,w,c
  8362  001E56  6E13               	movwf	___ftge@ff2+1,c
  8363  001E58  0E80               	movlw	128
  8364  001E5A  2017               	addwfc	??___ftge+2,w,c
  8365  001E5C  6E14               	movwf	___ftge@ff2+2,c
  8366  001E5E  D000               	goto	l4861
  8367  001E60                     l4861:
  8368  001E60  0E00               	movlw	0
  8369  001E62  1A0F               	xorwf	___ftge@ff1,f,c
  8370  001E64  0E00               	movlw	0
  8371  001E66  1A10               	xorwf	___ftge@ff1+1,f,c
  8372  001E68  0E80               	movlw	128
  8373  001E6A  1A11               	xorwf	___ftge@ff1+2,f,c
  8374  001E6C  0E00               	movlw	0
  8375  001E6E  1A12               	xorwf	___ftge@ff2,f,c
  8376  001E70  0E00               	movlw	0
  8377  001E72  1A13               	xorwf	___ftge@ff2+1,f,c
  8378  001E74  0E80               	movlw	128
  8379  001E76  1A14               	xorwf	___ftge@ff2+2,f,c
  8380  001E78  5012               	movf	___ftge@ff2,w,c
  8381  001E7A  5C0F               	subwf	___ftge@ff1,w,c
  8382  001E7C  5013               	movf	___ftge@ff2+1,w,c
  8383  001E7E  5810               	subwfb	___ftge@ff1+1,w,c
  8384  001E80  5014               	movf	___ftge@ff2+2,w,c
  8385  001E82  5811               	subwfb	___ftge@ff1+2,w,c
  8386  001E84  B0D8               	btfsc	status,0,c
  8387  001E86  D002               	goto	l4867
  8388  001E88  90D8               	bcf	status,0,c
  8389  001E8A  D002               	goto	l1085
  8390  001E8C                     l4867:
  8391  001E8C  80D8               	bsf	status,0,c
  8392  001E8E  D000               	goto	l1085
  8393  001E90                     l1085:
  8394  001E90  0012               	return		;funcret
  8395  001E92                     __end_of___ftge:
  8396                           	opt stack 0
  8397                           tblptru	equ	0xFF8
  8398                           tblptrh	equ	0xFF7
  8399                           tblptrl	equ	0xFF6
  8400                           tablat	equ	0xFF5
  8401                           prodl	equ	0xFF3
  8402                           postinc0	equ	0xFEE
  8403                           wreg	equ	0xFE8
  8404                           postdec1	equ	0xFE5
  8405                           fsr1l	equ	0xFE1
  8406                           status	equ	0xFD8
  8407                           
  8408 ;; *************** function ___awmod *****************
  8409 ;; Defined at:
  8410 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  8411 ;; Parameters:    Size  Location     Type
  8412 ;;  dividend        2   52[COMRAM] int 
  8413 ;;  divisor         2   54[COMRAM] int 
  8414 ;; Auto vars:     Size  Location     Type
  8415 ;;  sign            1   57[COMRAM] unsigned char 
  8416 ;;  counter         1   56[COMRAM] unsigned char 
  8417 ;; Return value:  Size  Location     Type
  8418 ;;                  2   52[COMRAM] int 
  8419 ;; Registers used:
  8420 ;;		wreg, status,2, status,0
  8421 ;; Tracked objects:
  8422 ;;		On entry : 0/0
  8423 ;;		On exit  : 0/0
  8424 ;;		Unchanged: 0/0
  8425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8426 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8427 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8429 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8430 ;;Total ram usage:        6 bytes
  8431 ;; Hardware stack levels used:    1
  8432 ;; Hardware stack levels required when called:    2
  8433 ;; This function calls:
  8434 ;;		Nothing
  8435 ;; This function is called by:
  8436 ;;		_update_LCD_PED_Count
  8437 ;;		_update_LCD_count
  8438 ;;		_update_LCD_misc
  8439 ;;		_dec_2_bcd
  8440 ;; This function uses a non-reentrant model
  8441 ;;
  8442                           
  8443                           	psect	text37
  8444  001FA2                     __ptext37:
  8445                           	opt stack 0
  8446  001FA2                     ___awmod:
  8447                           	opt stack 25
  8448                           
  8449                           ;incstack = 0
  8450  001FA2  0E00               	movlw	0
  8451  001FA4  6E3A               	movwf	___awmod@sign,c
  8452  001FA6  AE36               	btfss	___awmod@dividend+1,7,c
  8453  001FA8  D007               	goto	l4825
  8454  001FAA  6C35               	negf	___awmod@dividend,c
  8455  001FAC  1E36               	comf	___awmod@dividend+1,f,c
  8456  001FAE  B0D8               	btfsc	status,0,c
  8457  001FB0  2A36               	incf	___awmod@dividend+1,f,c
  8458  001FB2  0E01               	movlw	1
  8459  001FB4  6E3A               	movwf	___awmod@sign,c
  8460  001FB6  D000               	goto	l4825
  8461  001FB8                     l4825:
  8462  001FB8  AE38               	btfss	___awmod@divisor+1,7,c
  8463  001FBA  D005               	goto	l4829
  8464  001FBC  6C37               	negf	___awmod@divisor,c
  8465  001FBE  1E38               	comf	___awmod@divisor+1,f,c
  8466  001FC0  B0D8               	btfsc	status,0,c
  8467  001FC2  2A38               	incf	___awmod@divisor+1,f,c
  8468  001FC4  D000               	goto	l4829
  8469  001FC6                     l4829:
  8470  001FC6  5037               	movf	___awmod@divisor,w,c
  8471  001FC8  1038               	iorwf	___awmod@divisor+1,w,c
  8472  001FCA  B4D8               	btfsc	status,2,c
  8473  001FCC  D01D               	goto	l4845
  8474  001FCE  0E01               	movlw	1
  8475  001FD0  6E39               	movwf	___awmod@counter,c
  8476  001FD2  D005               	goto	l4835
  8477  001FD4                     l4833:
  8478  001FD4  90D8               	bcf	status,0,c
  8479  001FD6  3637               	rlcf	___awmod@divisor,f,c
  8480  001FD8  3638               	rlcf	___awmod@divisor+1,f,c
  8481  001FDA  2A39               	incf	___awmod@counter,f,c
  8482  001FDC  D000               	goto	l4835
  8483  001FDE                     l4835:
  8484  001FDE  BE38               	btfsc	___awmod@divisor+1,7,c
  8485  001FE0  D002               	goto	l4837
  8486  001FE2  D7F8               	goto	l4833
  8487  001FE4  D000               	goto	l4837
  8488  001FE6                     l4837:
  8489  001FE6  5037               	movf	___awmod@divisor,w,c
  8490  001FE8  5C35               	subwf	___awmod@dividend,w,c
  8491  001FEA  5038               	movf	___awmod@divisor+1,w,c
  8492  001FEC  5836               	subwfb	___awmod@dividend+1,w,c
  8493  001FEE  A0D8               	btfss	status,0,c
  8494  001FF0  D005               	goto	l4841
  8495  001FF2  5037               	movf	___awmod@divisor,w,c
  8496  001FF4  5E35               	subwf	___awmod@dividend,f,c
  8497  001FF6  5038               	movf	___awmod@divisor+1,w,c
  8498  001FF8  5A36               	subwfb	___awmod@dividend+1,f,c
  8499  001FFA  D000               	goto	l4841
  8500  001FFC                     l4841:
  8501  001FFC  90D8               	bcf	status,0,c
  8502  001FFE  3238               	rrcf	___awmod@divisor+1,f,c
  8503  002000  3237               	rrcf	___awmod@divisor,f,c
  8504  002002  2E39               	decfsz	___awmod@counter,f,c
  8505  002004  D7F0               	goto	l4837
  8506  002006  D000               	goto	l4845
  8507  002008                     l4845:
  8508  002008  503A               	movf	___awmod@sign,w,c
  8509  00200A  B4D8               	btfsc	status,2,c
  8510  00200C  D005               	goto	l4849
  8511  00200E  6C35               	negf	___awmod@dividend,c
  8512  002010  1E36               	comf	___awmod@dividend+1,f,c
  8513  002012  B0D8               	btfsc	status,0,c
  8514  002014  2A36               	incf	___awmod@dividend+1,f,c
  8515  002016  D000               	goto	l4849
  8516  002018                     l4849:
  8517  002018  C035  F035         	movff	___awmod@dividend,?___awmod
  8518  00201C  C036  F036         	movff	___awmod@dividend+1,?___awmod+1
  8519  002020  D000               	goto	l902
  8520  002022                     l902:
  8521  002022  0012               	return		;funcret
  8522  002024                     __end_of___awmod:
  8523                           	opt stack 0
  8524                           tblptru	equ	0xFF8
  8525                           tblptrh	equ	0xFF7
  8526                           tblptrl	equ	0xFF6
  8527                           tablat	equ	0xFF5
  8528                           prodl	equ	0xFF3
  8529                           postinc0	equ	0xFEE
  8530                           wreg	equ	0xFE8
  8531                           postdec1	equ	0xFE5
  8532                           fsr1l	equ	0xFE1
  8533                           status	equ	0xFD8
  8534                           
  8535 ;; *************** function _Read_Volt *****************
  8536 ;; Defined at:
  8537 ;;		line 141 in file "utils.c"
  8538 ;; Parameters:    Size  Location     Type
  8539 ;;  ADC_Channel     1    wreg     unsigned char 
  8540 ;; Auto vars:     Size  Location     Type
  8541 ;;  ADC_Channel     1   47[COMRAM] unsigned char 
  8542 ;;  volt            3   44[COMRAM] float 
  8543 ;;  nStep           2   48[COMRAM] int 
  8544 ;; Return value:  Size  Location     Type
  8545 ;;                  3   41[COMRAM] float 
  8546 ;; Registers used:
  8547 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8548 ;; Tracked objects:
  8549 ;;		On entry : 0/0
  8550 ;;		On exit  : 0/0
  8551 ;;		Unchanged: 0/0
  8552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8553 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8554 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8556 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8557 ;;Total ram usage:        9 bytes
  8558 ;; Hardware stack levels used:    1
  8559 ;; Hardware stack levels required when called:    4
  8560 ;; This function calls:
  8561 ;;		___awtoft
  8562 ;;		___ftdiv
  8563 ;;		___wmul
  8564 ;;		_get_full_ADC
  8565 ;; This function is called by:
  8566 ;;		_main
  8567 ;;		_update_LCD_misc
  8568 ;; This function uses a non-reentrant model
  8569 ;;
  8570                           
  8571                           	psect	text38
  8572  002106                     __ptext38:
  8573                           	opt stack 0
  8574  002106                     _Read_Volt:
  8575                           	opt stack 26
  8576                           
  8577                           ;incstack = 0
  8578                           ;Read_Volt@ADC_Channel stored from wreg
  8579  002106  6E30               	movwf	Read_Volt@ADC_Channel,c
  8580                           
  8581                           ;utils.c: 143: ADCON0 = ADC_Channel * 4 + 1;
  8582  002108  5030               	movf	Read_Volt@ADC_Channel,w,c
  8583  00210A  0D04               	mullw	4
  8584  00210C  28F3               	incf	prodl,w,c
  8585  00210E  6EC2               	movwf	4034,c	;volatile
  8586                           
  8587                           ;utils.c: 144: int nStep = get_full_ADC();
  8588  002110  ECC9  F013         	call	_get_full_ADC	;wreg free
  8589  002114  C00F  F031         	movff	?_get_full_ADC,Read_Volt@nStep
  8590  002118  C010  F032         	movff	?_get_full_ADC+1,Read_Volt@nStep+1
  8591                           
  8592                           ;utils.c: 145: float volt = nStep * 5 /1024.0;
  8593  00211C  C031  F00F         	movff	Read_Volt@nStep,___wmul@multiplier
  8594  002120  C032  F010         	movff	Read_Volt@nStep+1,___wmul@multiplier+1
  8595  002124  0E00               	movlw	0
  8596  002126  6E12               	movwf	___wmul@multiplicand+1,c
  8597  002128  0E05               	movlw	5
  8598  00212A  6E11               	movwf	___wmul@multiplicand,c
  8599  00212C  ECB5  F013         	call	___wmul	;wreg free
  8600  002130  C00F  F017         	movff	?___wmul,___awtoft@c
  8601  002134  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  8602  002138  ECE7  F012         	call	___awtoft	;wreg free
  8603  00213C  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  8604  002140  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  8605  002144  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  8606  002148  0E00               	movlw	0
  8607  00214A  6E1E               	movwf	___ftdiv@f2,c
  8608  00214C  0E80               	movlw	128
  8609  00214E  6E1F               	movwf	___ftdiv@f2+1,c
  8610  002150  0E44               	movlw	68
  8611  002152  6E20               	movwf	___ftdiv@f2+2,c
  8612  002154  EC10  F00C         	call	___ftdiv	;wreg free
  8613  002158  C01B  F02D         	movff	?___ftdiv,Read_Volt@volt
  8614  00215C  C01C  F02E         	movff	?___ftdiv+1,Read_Volt@volt+1
  8615  002160  C01D  F02F         	movff	?___ftdiv+2,Read_Volt@volt+2
  8616                           
  8617                           ;utils.c: 146: return (volt);
  8618  002164  C02D  F02A         	movff	Read_Volt@volt,?_Read_Volt
  8619  002168  C02E  F02B         	movff	Read_Volt@volt+1,?_Read_Volt+1
  8620  00216C  C02F  F02C         	movff	Read_Volt@volt+2,?_Read_Volt+2
  8621  002170  D000               	goto	l623
  8622  002172                     l623:
  8623  002172  0012               	return		;funcret
  8624  002174                     __end_of_Read_Volt:
  8625                           	opt stack 0
  8626                           tblptru	equ	0xFF8
  8627                           tblptrh	equ	0xFF7
  8628                           tblptrl	equ	0xFF6
  8629                           tablat	equ	0xFF5
  8630                           prodl	equ	0xFF3
  8631                           postinc0	equ	0xFEE
  8632                           wreg	equ	0xFE8
  8633                           postdec1	equ	0xFE5
  8634                           fsr1l	equ	0xFE1
  8635                           status	equ	0xFD8
  8636                           
  8637 ;; *************** function _get_full_ADC *****************
  8638 ;; Defined at:
  8639 ;;		line 149 in file "utils.c"
  8640 ;; Parameters:    Size  Location     Type
  8641 ;;		None
  8642 ;; Auto vars:     Size  Location     Type
  8643 ;;  result          2   18[COMRAM] unsigned int 
  8644 ;; Return value:  Size  Location     Type
  8645 ;;                  2   14[COMRAM] unsigned int 
  8646 ;; Registers used:
  8647 ;;		wreg, status,2, status,0
  8648 ;; Tracked objects:
  8649 ;;		On entry : 0/0
  8650 ;;		On exit  : 0/0
  8651 ;;		Unchanged: 0/0
  8652 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8653 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8654 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8655 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8656 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8657 ;;Total ram usage:        6 bytes
  8658 ;; Hardware stack levels used:    1
  8659 ;; Hardware stack levels required when called:    2
  8660 ;; This function calls:
  8661 ;;		Nothing
  8662 ;; This function is called by:
  8663 ;;		_update_LCD_misc
  8664 ;;		_Read_Volt
  8665 ;; This function uses a non-reentrant model
  8666 ;;
  8667                           
  8668                           	psect	text39
  8669  002792                     __ptext39:
  8670                           	opt stack 0
  8671  002792                     _get_full_ADC:
  8672                           	opt stack 27
  8673                           
  8674                           ;utils.c: 151: unsigned int result;
  8675                           ;utils.c: 152: ADCON0bits.GO=1;
  8676                           
  8677                           ;incstack = 0
  8678  002792  82C2               	bsf	4034,1,c	;volatile
  8679                           
  8680                           ;utils.c: 153: while(ADCON0bits.DONE==1);
  8681  002794  D000               	goto	l626
  8682  002796                     l626:
  8683  002796  B2C2               	btfsc	4034,1,c	;volatile
  8684  002798  D7FE               	goto	l626
  8685                           
  8686                           ;utils.c: 154: result = (ADRESH * 0x100) + ADRESL;
  8687  00279A  50C4               	movf	4036,w,c	;volatile
  8688  00279C  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  8689  00279E  6A11               	clrf	??_get_full_ADC& (0+255),c
  8690  0027A0  50C3               	movf	4035,w,c	;volatile
  8691  0027A2  2411               	addwf	??_get_full_ADC,w,c
  8692  0027A4  6E13               	movwf	get_full_ADC@result,c
  8693  0027A6  0E00               	movlw	0
  8694  0027A8  2012               	addwfc	??_get_full_ADC+1,w,c
  8695  0027AA  6E14               	movwf	get_full_ADC@result+1,c
  8696                           
  8697                           ;utils.c: 156: return result;
  8698  0027AC  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  8699  0027B0  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  8700  0027B4  D000               	goto	l629
  8701  0027B6                     l629:
  8702  0027B6  0012               	return		;funcret
  8703  0027B8                     __end_of_get_full_ADC:
  8704                           	opt stack 0
  8705                           tblptru	equ	0xFF8
  8706                           tblptrh	equ	0xFF7
  8707                           tblptrl	equ	0xFF6
  8708                           tablat	equ	0xFF5
  8709                           prodl	equ	0xFF3
  8710                           postinc0	equ	0xFEE
  8711                           wreg	equ	0xFE8
  8712                           postdec1	equ	0xFE5
  8713                           fsr1l	equ	0xFE1
  8714                           status	equ	0xFD8
  8715                           
  8716 ;; *************** function ___ftdiv *****************
  8717 ;; Defined at:
  8718 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  8719 ;; Parameters:    Size  Location     Type
  8720 ;;  f1              3   26[COMRAM] float 
  8721 ;;  f2              3   29[COMRAM] float 
  8722 ;; Auto vars:     Size  Location     Type
  8723 ;;  f3              3   36[COMRAM] float 
  8724 ;;  sign            1   40[COMRAM] unsigned char 
  8725 ;;  exp             1   39[COMRAM] unsigned char 
  8726 ;;  cntr            1   35[COMRAM] unsigned char 
  8727 ;; Return value:  Size  Location     Type
  8728 ;;                  3   26[COMRAM] float 
  8729 ;; Registers used:
  8730 ;;		wreg, status,2, status,0, cstack
  8731 ;; Tracked objects:
  8732 ;;		On entry : 0/0
  8733 ;;		On exit  : 0/0
  8734 ;;		Unchanged: 0/0
  8735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8736 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8737 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8738 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8739 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8740 ;;Total ram usage:       15 bytes
  8741 ;; Hardware stack levels used:    1
  8742 ;; Hardware stack levels required when called:    3
  8743 ;; This function calls:
  8744 ;;		___ftpack
  8745 ;; This function is called by:
  8746 ;;		_Read_Volt
  8747 ;; This function uses a non-reentrant model
  8748 ;;
  8749                           
  8750                           	psect	text40
  8751  001820                     __ptext40:
  8752                           	opt stack 0
  8753  001820                     ___ftdiv:
  8754                           	opt stack 26
  8755                           
  8756                           ;incstack = 0
  8757  001820  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  8758  001824  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  8759  001826  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  8760  001828  341C               	rlcf	___ftdiv@f1+1,w,c
  8761  00182A  3621               	rlcf	??___ftdiv& (0+255),f,c
  8762  00182C  E301               	bnc	u3281
  8763  00182E  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  8764  001830                     u3281:
  8765  001830  5021               	movf	??___ftdiv,w,c
  8766  001832  6E28               	movwf	___ftdiv@exp,c
  8767  001834  5028               	movf	___ftdiv@exp,w,c
  8768  001836  A4D8               	btfss	status,2,c
  8769  001838  D002               	goto	l4633
  8770  00183A  D00E               	goto	l4635
  8771  00183C  D061               	goto	l1076
  8772  00183E                     l4633:
  8773  00183E  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  8774  001842  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  8775  001844  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  8776  001846  341F               	rlcf	___ftdiv@f2+1,w,c
  8777  001848  3621               	rlcf	??___ftdiv& (0+255),f,c
  8778  00184A  E301               	bnc	u3301
  8779  00184C  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  8780  00184E                     u3301:
  8781  00184E  5021               	movf	??___ftdiv,w,c
  8782  001850  6E29               	movwf	___ftdiv@sign,c
  8783  001852  5029               	movf	___ftdiv@sign,w,c
  8784  001854  A4D8               	btfss	status,2,c
  8785  001856  D007               	goto	l4639
  8786  001858                     l4635:
  8787  001858  0E00               	movlw	0
  8788  00185A  6E1B               	movwf	?___ftdiv,c
  8789  00185C  0E00               	movlw	0
  8790  00185E  6E1C               	movwf	?___ftdiv+1,c
  8791  001860  0E00               	movlw	0
  8792  001862  6E1D               	movwf	?___ftdiv+2,c
  8793  001864  D04D               	goto	l1076
  8794  001866                     l4639:
  8795  001866  0E00               	movlw	0
  8796  001868  6E25               	movwf	___ftdiv@f3,c
  8797  00186A  0E00               	movlw	0
  8798  00186C  6E26               	movwf	___ftdiv@f3+1,c
  8799  00186E  0E00               	movlw	0
  8800  001870  6E27               	movwf	___ftdiv@f3+2,c
  8801  001872  5029               	movf	___ftdiv@sign,w,c
  8802  001874  0F89               	addlw	137
  8803  001876  5E28               	subwf	___ftdiv@exp,f,c
  8804  001878  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  8805  00187C  5020               	movf	___ftdiv@f2+2,w,c
  8806  00187E  1A29               	xorwf	___ftdiv@sign,f,c
  8807  001880  0E80               	movlw	128
  8808  001882  1629               	andwf	___ftdiv@sign,f,c
  8809  001884  8E1C               	bsf	___ftdiv@f1+1,7,c
  8810  001886  0EFF               	movlw	255
  8811  001888  161B               	andwf	___ftdiv@f1,f,c
  8812  00188A  0EFF               	movlw	255
  8813  00188C  161C               	andwf	___ftdiv@f1+1,f,c
  8814  00188E  0E00               	movlw	0
  8815  001890  161D               	andwf	___ftdiv@f1+2,f,c
  8816  001892  8E1F               	bsf	___ftdiv@f2+1,7,c
  8817  001894  0EFF               	movlw	255
  8818  001896  161E               	andwf	___ftdiv@f2,f,c
  8819  001898  0EFF               	movlw	255
  8820  00189A  161F               	andwf	___ftdiv@f2+1,f,c
  8821  00189C  0E00               	movlw	0
  8822  00189E  1620               	andwf	___ftdiv@f2+2,f,c
  8823  0018A0  0E18               	movlw	24
  8824  0018A2  6E24               	movwf	___ftdiv@cntr,c
  8825  0018A4  D000               	goto	l4659
  8826  0018A6                     l4659:
  8827  0018A6  90D8               	bcf	status,0,c
  8828  0018A8  3625               	rlcf	___ftdiv@f3,f,c
  8829  0018AA  3626               	rlcf	___ftdiv@f3+1,f,c
  8830  0018AC  3627               	rlcf	___ftdiv@f3+2,f,c
  8831  0018AE  501E               	movf	___ftdiv@f2,w,c
  8832  0018B0  5C1B               	subwf	___ftdiv@f1,w,c
  8833  0018B2  501F               	movf	___ftdiv@f2+1,w,c
  8834  0018B4  581C               	subwfb	___ftdiv@f1+1,w,c
  8835  0018B6  5020               	movf	___ftdiv@f2+2,w,c
  8836  0018B8  581D               	subwfb	___ftdiv@f1+2,w,c
  8837  0018BA  A0D8               	btfss	status,0,c
  8838  0018BC  D007               	goto	l1079
  8839  0018BE  501E               	movf	___ftdiv@f2,w,c
  8840  0018C0  5E1B               	subwf	___ftdiv@f1,f,c
  8841  0018C2  501F               	movf	___ftdiv@f2+1,w,c
  8842  0018C4  5A1C               	subwfb	___ftdiv@f1+1,f,c
  8843  0018C6  5020               	movf	___ftdiv@f2+2,w,c
  8844  0018C8  5A1D               	subwfb	___ftdiv@f1+2,f,c
  8845  0018CA  8025               	bsf	___ftdiv@f3,0,c
  8846  0018CC                     l1079:
  8847  0018CC  90D8               	bcf	status,0,c
  8848  0018CE  361B               	rlcf	___ftdiv@f1,f,c
  8849  0018D0  361C               	rlcf	___ftdiv@f1+1,f,c
  8850  0018D2  361D               	rlcf	___ftdiv@f1+2,f,c
  8851  0018D4  2E24               	decfsz	___ftdiv@cntr,f,c
  8852  0018D6  D7E7               	goto	l4659
  8853  0018D8  D000               	goto	l4669
  8854  0018DA                     l4669:
  8855  0018DA  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  8856  0018DE  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  8857  0018E2  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  8858  0018E6  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  8859  0018EA  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  8860  0018EE  EC55  F00D         	call	___ftpack	;wreg free
  8861  0018F2  C00F  F01B         	movff	?___ftpack,?___ftdiv
  8862  0018F6  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  8863  0018FA  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  8864  0018FE  D000               	goto	l1076
  8865  001900                     l1076:
  8866  001900  0012               	return		;funcret
  8867  001902                     __end_of___ftdiv:
  8868                           	opt stack 0
  8869                           tblptru	equ	0xFF8
  8870                           tblptrh	equ	0xFF7
  8871                           tblptrl	equ	0xFF6
  8872                           tablat	equ	0xFF5
  8873                           prodl	equ	0xFF3
  8874                           postinc0	equ	0xFEE
  8875                           wreg	equ	0xFE8
  8876                           postdec1	equ	0xFE5
  8877                           fsr1l	equ	0xFE1
  8878                           status	equ	0xFD8
  8879                           
  8880 ;; *************** function ___awtoft *****************
  8881 ;; Defined at:
  8882 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  8883 ;; Parameters:    Size  Location     Type
  8884 ;;  c               2   22[COMRAM] int 
  8885 ;; Auto vars:     Size  Location     Type
  8886 ;;  sign            1   25[COMRAM] unsigned char 
  8887 ;; Return value:  Size  Location     Type
  8888 ;;                  3   22[COMRAM] float 
  8889 ;; Registers used:
  8890 ;;		wreg, status,2, status,0, cstack
  8891 ;; Tracked objects:
  8892 ;;		On entry : 0/0
  8893 ;;		On exit  : 0/0
  8894 ;;		Unchanged: 0/0
  8895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8896 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8897 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8898 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8899 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8900 ;;Total ram usage:        4 bytes
  8901 ;; Hardware stack levels used:    1
  8902 ;; Hardware stack levels required when called:    3
  8903 ;; This function calls:
  8904 ;;		___ftpack
  8905 ;; This function is called by:
  8906 ;;		_Read_Volt
  8907 ;; This function uses a non-reentrant model
  8908 ;;
  8909                           
  8910                           	psect	text41
  8911  0025CE                     __ptext41:
  8912                           	opt stack 0
  8913  0025CE                     ___awtoft:
  8914                           	opt stack 26
  8915                           
  8916                           ;incstack = 0
  8917  0025CE  0E00               	movlw	0
  8918  0025D0  6E1A               	movwf	___awtoft@sign,c
  8919  0025D2  AE18               	btfss	___awtoft@c+1,7,c
  8920  0025D4  D007               	goto	l4681
  8921  0025D6  6C17               	negf	___awtoft@c,c
  8922  0025D8  1E18               	comf	___awtoft@c+1,f,c
  8923  0025DA  B0D8               	btfsc	status,0,c
  8924  0025DC  2A18               	incf	___awtoft@c+1,f,c
  8925  0025DE  0E01               	movlw	1
  8926  0025E0  6E1A               	movwf	___awtoft@sign,c
  8927  0025E2  D000               	goto	l4681
  8928  0025E4                     l4681:
  8929  0025E4  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  8930  0025E8  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  8931  0025EC  6A11               	clrf	___ftpack@arg+2,c
  8932  0025EE  0E8E               	movlw	142
  8933  0025F0  6E12               	movwf	___ftpack@exp,c
  8934  0025F2  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  8935  0025F6  EC55  F00D         	call	___ftpack	;wreg free
  8936  0025FA  C00F  F017         	movff	?___ftpack,?___awtoft
  8937  0025FE  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  8938  002602  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  8939  002606  D000               	goto	l914
  8940  002608                     l914:
  8941  002608  0012               	return		;funcret
  8942  00260A                     __end_of___awtoft:
  8943                           	opt stack 0
  8944                           tblptru	equ	0xFF8
  8945                           tblptrh	equ	0xFF7
  8946                           tblptrl	equ	0xFF6
  8947                           tablat	equ	0xFF5
  8948                           prodl	equ	0xFF3
  8949                           postinc0	equ	0xFEE
  8950                           wreg	equ	0xFE8
  8951                           postdec1	equ	0xFE5
  8952                           fsr1l	equ	0xFE1
  8953                           status	equ	0xFD8
  8954                           
  8955 ;; *************** function ___ftpack *****************
  8956 ;; Defined at:
  8957 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  8958 ;; Parameters:    Size  Location     Type
  8959 ;;  arg             3   14[COMRAM] unsigned um
  8960 ;;  exp             1   17[COMRAM] unsigned char 
  8961 ;;  sign            1   18[COMRAM] unsigned char 
  8962 ;; Auto vars:     Size  Location     Type
  8963 ;;		None
  8964 ;; Return value:  Size  Location     Type
  8965 ;;                  3   14[COMRAM] float 
  8966 ;; Registers used:
  8967 ;;		wreg, status,2, status,0
  8968 ;; Tracked objects:
  8969 ;;		On entry : 0/0
  8970 ;;		On exit  : 0/0
  8971 ;;		Unchanged: 0/0
  8972 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8973 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8974 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8975 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8976 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8977 ;;Total ram usage:        8 bytes
  8978 ;; Hardware stack levels used:    1
  8979 ;; Hardware stack levels required when called:    2
  8980 ;; This function calls:
  8981 ;;		Nothing
  8982 ;; This function is called by:
  8983 ;;		___awtoft
  8984 ;;		___ftdiv
  8985 ;;		___ftmul
  8986 ;; This function uses a non-reentrant model
  8987 ;;
  8988                           
  8989                           	psect	text42
  8990  001AAA                     __ptext42:
  8991                           	opt stack 0
  8992  001AAA                     ___ftpack:
  8993                           	opt stack 26
  8994                           
  8995                           ;incstack = 0
  8996  001AAA  5012               	movf	___ftpack@exp,w,c
  8997  001AAC  B4D8               	btfsc	status,2,c
  8998  001AAE  D005               	goto	l4523
  8999  001AB0  500F               	movf	___ftpack@arg,w,c
  9000  001AB2  1010               	iorwf	___ftpack@arg+1,w,c
  9001  001AB4  1011               	iorwf	___ftpack@arg+2,w,c
  9002  001AB6  A4D8               	btfss	status,2,c
  9003  001AB8  D00E               	goto	l4529
  9004  001ABA                     l4523:
  9005  001ABA  0E00               	movlw	0
  9006  001ABC  6E0F               	movwf	?___ftpack,c
  9007  001ABE  0E00               	movlw	0
  9008  001AC0  6E10               	movwf	?___ftpack+1,c
  9009  001AC2  0E00               	movlw	0
  9010  001AC4  6E11               	movwf	?___ftpack+2,c
  9011  001AC6  D053               	goto	l1004
  9012  001AC8  D006               	goto	l4529
  9013  001ACA                     l4527:
  9014  001ACA  2A12               	incf	___ftpack@exp,f,c
  9015  001ACC  90D8               	bcf	status,0,c
  9016  001ACE  3211               	rrcf	___ftpack@arg+2,f,c
  9017  001AD0  3210               	rrcf	___ftpack@arg+1,f,c
  9018  001AD2  320F               	rrcf	___ftpack@arg,f,c
  9019  001AD4  D000               	goto	l4529
  9020  001AD6                     l4529:
  9021  001AD6  0E00               	movlw	0
  9022  001AD8  140F               	andwf	___ftpack@arg,w,c
  9023  001ADA  6E14               	movwf	??___ftpack& (0+255),c
  9024  001ADC  0E00               	movlw	0
  9025  001ADE  1410               	andwf	___ftpack@arg+1,w,c
  9026  001AE0  6E15               	movwf	(??___ftpack+1)& (0+255),c
  9027  001AE2  0EFE               	movlw	254
  9028  001AE4  1411               	andwf	___ftpack@arg+2,w,c
  9029  001AE6  6E16               	movwf	(??___ftpack+2)& (0+255),c
  9030  001AE8  5014               	movf	??___ftpack,w,c
  9031  001AEA  1015               	iorwf	??___ftpack+1,w,c
  9032  001AEC  1016               	iorwf	??___ftpack+2,w,c
  9033  001AEE  B4D8               	btfsc	status,2,c
  9034  001AF0  D00E               	goto	l4535
  9035  001AF2  D7EB               	goto	l4527
  9036  001AF4  D00C               	goto	l4535
  9037  001AF6                     l4531:
  9038  001AF6  2A12               	incf	___ftpack@exp,f,c
  9039  001AF8  0E01               	movlw	1
  9040  001AFA  260F               	addwf	___ftpack@arg,f,c
  9041  001AFC  0E00               	movlw	0
  9042  001AFE  2210               	addwfc	___ftpack@arg+1,f,c
  9043  001B00  0E00               	movlw	0
  9044  001B02  2211               	addwfc	___ftpack@arg+2,f,c
  9045  001B04  90D8               	bcf	status,0,c
  9046  001B06  3211               	rrcf	___ftpack@arg+2,f,c
  9047  001B08  3210               	rrcf	___ftpack@arg+1,f,c
  9048  001B0A  320F               	rrcf	___ftpack@arg,f,c
  9049  001B0C  D000               	goto	l4535
  9050  001B0E                     l4535:
  9051  001B0E  0E00               	movlw	0
  9052  001B10  140F               	andwf	___ftpack@arg,w,c
  9053  001B12  6E14               	movwf	??___ftpack& (0+255),c
  9054  001B14  0E00               	movlw	0
  9055  001B16  1410               	andwf	___ftpack@arg+1,w,c
  9056  001B18  6E15               	movwf	(??___ftpack+1)& (0+255),c
  9057  001B1A  0EFF               	movlw	255
  9058  001B1C  1411               	andwf	___ftpack@arg+2,w,c
  9059  001B1E  6E16               	movwf	(??___ftpack+2)& (0+255),c
  9060  001B20  5014               	movf	??___ftpack,w,c
  9061  001B22  1015               	iorwf	??___ftpack+1,w,c
  9062  001B24  1016               	iorwf	??___ftpack+2,w,c
  9063  001B26  B4D8               	btfsc	status,2,c
  9064  001B28  D008               	goto	l4539
  9065  001B2A  D7E5               	goto	l4531
  9066  001B2C  D006               	goto	l4539
  9067  001B2E                     l4537:
  9068  001B2E  0612               	decf	___ftpack@exp,f,c
  9069  001B30  90D8               	bcf	status,0,c
  9070  001B32  360F               	rlcf	___ftpack@arg,f,c
  9071  001B34  3610               	rlcf	___ftpack@arg+1,f,c
  9072  001B36  3611               	rlcf	___ftpack@arg+2,f,c
  9073  001B38  D000               	goto	l4539
  9074  001B3A                     l4539:
  9075  001B3A  BE10               	btfsc	___ftpack@arg+1,7,c
  9076  001B3C  D004               	goto	l1015
  9077  001B3E  0E02               	movlw	2
  9078  001B40  6012               	cpfslt	___ftpack@exp,c
  9079  001B42  D7F5               	goto	l4537
  9080  001B44  D000               	goto	l1015
  9081  001B46                     l1015:
  9082  001B46  B012               	btfsc	___ftpack@exp,0,c
  9083  001B48  D002               	goto	l4545
  9084  001B4A  9E10               	bcf	___ftpack@arg+1,7,c
  9085  001B4C  D000               	goto	l4545
  9086  001B4E                     l4545:
  9087  001B4E  90D8               	bcf	status,0,c
  9088  001B50  3212               	rrcf	___ftpack@exp,f,c
  9089  001B52  5012               	movf	___ftpack@exp,w,c
  9090  001B54  1211               	iorwf	___ftpack@arg+2,f,c
  9091  001B56  5013               	movf	___ftpack@sign,w,c
  9092  001B58  B4D8               	btfsc	status,2,c
  9093  001B5A  D002               	goto	l4551
  9094  001B5C  8E11               	bsf	___ftpack@arg+2,7,c
  9095  001B5E  D000               	goto	l4551
  9096  001B60                     l4551:
  9097  001B60  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  9098  001B64  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  9099  001B68  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  9100  001B6C  D000               	goto	l1004
  9101  001B6E                     l1004:
  9102  001B6E  0012               	return		;funcret
  9103  001B70                     __end_of___ftpack:
  9104                           	opt stack 0
  9105                           tblptru	equ	0xFF8
  9106                           tblptrh	equ	0xFF7
  9107                           tblptrl	equ	0xFF6
  9108                           tablat	equ	0xFF5
  9109                           prodl	equ	0xFF3
  9110                           postinc0	equ	0xFEE
  9111                           wreg	equ	0xFE8
  9112                           postdec1	equ	0xFE5
  9113                           fsr1l	equ	0xFE1
  9114                           status	equ	0xFD8
  9115                           
  9116 ;; *************** function _Wait_Half_Second *****************
  9117 ;; Defined at:
  9118 ;;		line 114 in file "utils.c"
  9119 ;; Parameters:    Size  Location     Type
  9120 ;;		None
  9121 ;; Auto vars:     Size  Location     Type
  9122 ;;		None
  9123 ;; Return value:  Size  Location     Type
  9124 ;;		None               void
  9125 ;; Registers used:
  9126 ;;		wreg, status,2
  9127 ;; Tracked objects:
  9128 ;;		On entry : 0/0
  9129 ;;		On exit  : 0/0
  9130 ;;		Unchanged: 0/0
  9131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9136 ;;Total ram usage:        0 bytes
  9137 ;; Hardware stack levels used:    1
  9138 ;; Hardware stack levels required when called:    2
  9139 ;; This function calls:
  9140 ;;		Nothing
  9141 ;; This function is called by:
  9142 ;;		_Wait_One_Second
  9143 ;;		_Wait_One_Second_With_Beep
  9144 ;; This function uses a non-reentrant model
  9145 ;;
  9146                           
  9147                           	psect	text43
  9148  002810                     __ptext43:
  9149                           	opt stack 0
  9150  002810                     _Wait_Half_Second:
  9151                           	opt stack 25
  9152                           
  9153                           ;utils.c: 116: T0CON = 0x03;
  9154                           
  9155                           ;incstack = 0
  9156  002810  0E03               	movlw	3
  9157  002812  6ED5               	movwf	4053,c	;volatile
  9158                           
  9159                           ;utils.c: 117: TMR0L = 0xDB;
  9160  002814  0EDB               	movlw	219
  9161  002816  6ED6               	movwf	4054,c	;volatile
  9162                           
  9163                           ;utils.c: 118: TMR0H = 0x0B;
  9164  002818  0E0B               	movlw	11
  9165  00281A  6ED7               	movwf	4055,c	;volatile
  9166                           
  9167                           ;utils.c: 119: INTCONbits.TMR0IF = 0;
  9168  00281C  94F2               	bcf	intcon,2,c	;volatile
  9169                           
  9170                           ;utils.c: 120: T0CONbits.TMR0ON = 1;
  9171  00281E  8ED5               	bsf	4053,7,c	;volatile
  9172                           
  9173                           ;utils.c: 121: while (INTCONbits.TMR0IF == 0);
  9174  002820  D000               	goto	l606
  9175  002822                     l606:
  9176  002822  A4F2               	btfss	intcon,2,c	;volatile
  9177  002824  D7FE               	goto	l606
  9178                           
  9179                           ;utils.c: 122: T0CONbits.TMR0ON = 0;
  9180  002826  9ED5               	bcf	4053,7,c	;volatile
  9181  002828  0012               	return		;funcret
  9182  00282A                     __end_of_Wait_Half_Second:
  9183                           	opt stack 0
  9184                           tblptru	equ	0xFF8
  9185                           tblptrh	equ	0xFF7
  9186                           tblptrl	equ	0xFF6
  9187                           tablat	equ	0xFF5
  9188                           prodl	equ	0xFF3
  9189                           intcon	equ	0xFF2
  9190                           postinc0	equ	0xFEE
  9191                           wreg	equ	0xFE8
  9192                           postdec1	equ	0xFE5
  9193                           fsr1l	equ	0xFE1
  9194                           status	equ	0xFD8
  9195                           
  9196 ;; *************** function _Erase_Star *****************
  9197 ;; Defined at:
  9198 ;;		line 304 in file "Main_Screen.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;		None
  9201 ;; Auto vars:     Size  Location     Type
  9202 ;;		None
  9203 ;; Return value:  Size  Location     Type
  9204 ;;		None               void
  9205 ;; Registers used:
  9206 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9207 ;; Tracked objects:
  9208 ;;		On entry : 0/0
  9209 ;;		On exit  : 0/0
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9212 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9215 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;Total ram usage:        0 bytes
  9217 ;; Hardware stack levels used:    1
  9218 ;; Hardware stack levels required when called:    9
  9219 ;; This function calls:
  9220 ;;		_drawtext
  9221 ;;		_strcpy
  9222 ;; This function is called by:
  9223 ;;		_Wait_One_Second
  9224 ;;		_Wait_One_Second_With_Beep
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           	psect	text44
  9229  00260A                     __ptext44:
  9230                           	opt stack 0
  9231  00260A                     _Erase_Star:
  9232                           	opt stack 18
  9233                           
  9234                           ;Main_Screen.c: 306: strcpy(txt," ");
  9235                           
  9236                           ;incstack = 0
  9237  00260A  C047  F00F         	movff	_txt,strcpy@to
  9238  00260E  C048  F010         	movff	_txt+1,strcpy@to+1
  9239  002612  0EFA               	movlw	low STR_13
  9240  002614  6E11               	movwf	strcpy@from,c
  9241  002616  0EFF               	movlw	high STR_13
  9242  002618  6E12               	movwf	strcpy@from+1,c
  9243  00261A  EC5A  F013         	call	_strcpy	;wreg free
  9244                           
  9245                           ;Main_Screen.c: 307: drawtext(120,2,txt,0xFFFF,0x0000,1);
  9246  00261E  0E02               	movlw	2
  9247  002620  6E37               	movwf	drawtext@y,c
  9248  002622  C047  F038         	movff	_txt,drawtext@_text
  9249  002626  C048  F039         	movff	_txt+1,drawtext@_text+1
  9250  00262A  0EFF               	movlw	255
  9251  00262C  6E3B               	movwf	drawtext@color+1,c
  9252  00262E  683A               	setf	drawtext@color,c
  9253  002630  0E00               	movlw	0
  9254  002632  6E3D               	movwf	drawtext@bg+1,c
  9255  002634  0E00               	movlw	0
  9256  002636  6E3C               	movwf	drawtext@bg,c
  9257  002638  0E01               	movlw	1
  9258  00263A  6E3E               	movwf	drawtext@size,c
  9259  00263C  0E78               	movlw	120
  9260  00263E  EC23  F00A         	call	_drawtext
  9261  002642  0012               	return		;funcret
  9262  002644                     __end_of_Erase_Star:
  9263                           	opt stack 0
  9264                           tblptru	equ	0xFF8
  9265                           tblptrh	equ	0xFF7
  9266                           tblptrl	equ	0xFF6
  9267                           tablat	equ	0xFF5
  9268                           prodl	equ	0xFF3
  9269                           intcon	equ	0xFF2
  9270                           postinc0	equ	0xFEE
  9271                           wreg	equ	0xFE8
  9272                           postdec1	equ	0xFE5
  9273                           fsr1l	equ	0xFE1
  9274                           status	equ	0xFD8
  9275                           
  9276 ;; *************** function _Draw_Star *****************
  9277 ;; Defined at:
  9278 ;;		line 298 in file "Main_Screen.c"
  9279 ;; Parameters:    Size  Location     Type
  9280 ;;		None
  9281 ;; Auto vars:     Size  Location     Type
  9282 ;;		None
  9283 ;; Return value:  Size  Location     Type
  9284 ;;		None               void
  9285 ;; Registers used:
  9286 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9287 ;; Tracked objects:
  9288 ;;		On entry : 0/0
  9289 ;;		On exit  : 0/0
  9290 ;;		Unchanged: 0/0
  9291 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9292 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9293 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9294 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;Total ram usage:        0 bytes
  9297 ;; Hardware stack levels used:    1
  9298 ;; Hardware stack levels required when called:    9
  9299 ;; This function calls:
  9300 ;;		_drawtext
  9301 ;;		_strcpy
  9302 ;; This function is called by:
  9303 ;;		_Wait_One_Second
  9304 ;;		_Wait_One_Second_With_Beep
  9305 ;; This function uses a non-reentrant model
  9306 ;;
  9307                           
  9308                           	psect	text45
  9309  002644                     __ptext45:
  9310                           	opt stack 0
  9311  002644                     _Draw_Star:
  9312                           	opt stack 18
  9313                           
  9314                           ;Main_Screen.c: 300: strcpy(txt,"*");
  9315                           
  9316                           ;incstack = 0
  9317  002644  C047  F00F         	movff	_txt,strcpy@to
  9318  002648  C048  F010         	movff	_txt+1,strcpy@to+1
  9319  00264C  0EFC               	movlw	low STR_4
  9320  00264E  6E11               	movwf	strcpy@from,c
  9321  002650  0EFF               	movlw	high STR_4
  9322  002652  6E12               	movwf	strcpy@from+1,c
  9323  002654  EC5A  F013         	call	_strcpy	;wreg free
  9324                           
  9325                           ;Main_Screen.c: 301: drawtext(120,2,txt,0xFFFF,0x0000,1);
  9326  002658  0E02               	movlw	2
  9327  00265A  6E37               	movwf	drawtext@y,c
  9328  00265C  C047  F038         	movff	_txt,drawtext@_text
  9329  002660  C048  F039         	movff	_txt+1,drawtext@_text+1
  9330  002664  0EFF               	movlw	255
  9331  002666  6E3B               	movwf	drawtext@color+1,c
  9332  002668  683A               	setf	drawtext@color,c
  9333  00266A  0E00               	movlw	0
  9334  00266C  6E3D               	movwf	drawtext@bg+1,c
  9335  00266E  0E00               	movlw	0
  9336  002670  6E3C               	movwf	drawtext@bg,c
  9337  002672  0E01               	movlw	1
  9338  002674  6E3E               	movwf	drawtext@size,c
  9339  002676  0E78               	movlw	120
  9340  002678  EC23  F00A         	call	_drawtext
  9341  00267C  0012               	return		;funcret
  9342  00267E                     __end_of_Draw_Star:
  9343                           	opt stack 0
  9344                           tblptru	equ	0xFF8
  9345                           tblptrh	equ	0xFF7
  9346                           tblptrl	equ	0xFF6
  9347                           tablat	equ	0xFF5
  9348                           prodl	equ	0xFF3
  9349                           intcon	equ	0xFF2
  9350                           postinc0	equ	0xFEE
  9351                           wreg	equ	0xFE8
  9352                           postdec1	equ	0xFE5
  9353                           fsr1l	equ	0xFE1
  9354                           status	equ	0xFD8
  9355                           
  9356 ;; *************** function _strcpy *****************
  9357 ;; Defined at:
  9358 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  9359 ;; Parameters:    Size  Location     Type
  9360 ;;  to              2   14[COMRAM] PTR unsigned char 
  9361 ;;		 -> NULL(0), buffer(31), 
  9362 ;;  from            2   16[COMRAM] PTR const unsigned char 
  9363 ;;		 -> STR_13(2), STR_12(2), STR_11(4), STR_10(4), 
  9364 ;;		 -> STR_9(7), STR_8(10), STR_7(7), STR_6(12), 
  9365 ;;		 -> STR_5(22), STR_4(2), STR_3(3), STR_2(5), 
  9366 ;;		 -> STR_1(6), 
  9367 ;; Auto vars:     Size  Location     Type
  9368 ;;  cp              2   18[COMRAM] PTR unsigned char 
  9369 ;;		 -> NULL(0), buffer(31), 
  9370 ;; Return value:  Size  Location     Type
  9371 ;;                  2   14[COMRAM] PTR unsigned char 
  9372 ;; Registers used:
  9373 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9374 ;; Tracked objects:
  9375 ;;		On entry : 0/0
  9376 ;;		On exit  : 0/0
  9377 ;;		Unchanged: 0/0
  9378 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9379 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9380 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9381 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9382 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9383 ;;Total ram usage:        6 bytes
  9384 ;; Hardware stack levels used:    1
  9385 ;; Hardware stack levels required when called:    2
  9386 ;; This function calls:
  9387 ;;		Nothing
  9388 ;; This function is called by:
  9389 ;;		_Initialize_LCD_Screen
  9390 ;;		_Draw_Star
  9391 ;;		_Erase_Star
  9392 ;; This function uses a non-reentrant model
  9393 ;;
  9394                           
  9395                           	psect	text46
  9396  0026B4                     __ptext46:
  9397                           	opt stack 0
  9398  0026B4                     _strcpy:
  9399                           	opt stack 24
  9400                           
  9401                           ;incstack = 0
  9402  0026B4  C00F  F013         	movff	strcpy@to,strcpy@cp
  9403  0026B8  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  9404  0026BC  D005               	goto	l4767
  9405  0026BE                     l4765:
  9406  0026BE  4A13               	infsnz	strcpy@cp,f,c
  9407  0026C0  2A14               	incf	strcpy@cp+1,f,c
  9408  0026C2  4A11               	infsnz	strcpy@from,f,c
  9409  0026C4  2A12               	incf	strcpy@from+1,f,c
  9410  0026C6  D000               	goto	l4767
  9411  0026C8                     l4767:
  9412  0026C8  C011  FFF6         	movff	strcpy@from,tblptrl
  9413  0026CC  C012  FFF7         	movff	strcpy@from+1,tblptrh
  9414  0026D0                     	if	0	;tblptru may be non-zero
  9415  0026D0                     	endif
  9416  0026D0                     	if	0	;tblptru may be non-zero
  9417  0026D0                     	endif
  9418  0026D0  C013  FFD9         	movff	strcpy@cp,fsr2l
  9419  0026D4  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  9420  0026D8  0008               	tblrd		*
  9421  0026DA  CFF5 FFDF          	movff	tablat,indf2
  9422  0026DE  50DF               	movf	indf2,w,c
  9423  0026E0  A4D8               	btfss	status,2,c
  9424  0026E2  D7ED               	goto	l4765
  9425                           
  9426                           ;	Return value of _strcpy is never used
  9427  0026E4  0012               	return		;funcret
  9428  0026E6                     __end_of_strcpy:
  9429                           	opt stack 0
  9430                           tblptru	equ	0xFF8
  9431                           tblptrh	equ	0xFF7
  9432                           tblptrl	equ	0xFF6
  9433                           tablat	equ	0xFF5
  9434                           prodl	equ	0xFF3
  9435                           intcon	equ	0xFF2
  9436                           postinc0	equ	0xFEE
  9437                           wreg	equ	0xFE8
  9438                           postdec1	equ	0xFE5
  9439                           fsr1l	equ	0xFE1
  9440                           indf2	equ	0xFDF
  9441                           fsr2h	equ	0xFDA
  9442                           fsr2l	equ	0xFD9
  9443                           status	equ	0xFD8
  9444                           
  9445 ;; *************** function _drawtext *****************
  9446 ;; Defined at:
  9447 ;;		line 425 in file "ST7735_TFT.c"
  9448 ;; Parameters:    Size  Location     Type
  9449 ;;  x               1    wreg     unsigned char 
  9450 ;;  y               1   54[COMRAM] unsigned char 
  9451 ;;  _text           2   55[COMRAM] PTR unsigned char 
  9452 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9453 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9454 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9455 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9456 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9457 ;;  color           2   57[COMRAM] unsigned int 
  9458 ;;  bg              2   59[COMRAM] unsigned int 
  9459 ;;  size            1   61[COMRAM] unsigned char 
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;  x               1    0[BANK0 ] unsigned char 
  9462 ;;  i               2    3[BANK0 ] unsigned int 
  9463 ;;  textsize        2    1[BANK0 ] unsigned int 
  9464 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  9465 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;		None               void
  9468 ;; Registers used:
  9469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9475 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;Total ram usage:       17 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    8
  9482 ;; This function calls:
  9483 ;;		_drawChar
  9484 ;;		_strlen
  9485 ;; This function is called by:
  9486 ;;		_Initialize_LCD_Screen
  9487 ;;		_update_LCD_PED_Count
  9488 ;;		_update_LCD_count
  9489 ;;		_update_LCD_misc
  9490 ;;		_Draw_Star
  9491 ;;		_Erase_Star
  9492 ;; This function uses a non-reentrant model
  9493 ;;
  9494                           
  9495                           	psect	text47
  9496  001446                     __ptext47:
  9497                           	opt stack 0
  9498  001446                     _drawtext:
  9499                           	opt stack 19
  9500                           
  9501                           ;incstack = 0
  9502                           ;drawtext@x stored from wreg
  9503  001446  0100               	movlb	0	; () banked
  9504  001448  6FCB               	movwf	drawtext@x& (0+255),b
  9505                           
  9506                           ; BSR set to: 0
  9507                           ;ST7735_TFT.c: 427: unsigned char cursor_x, cursor_y;
  9508                           ;ST7735_TFT.c: 428: unsigned int textsize, i;
  9509                           ;ST7735_TFT.c: 429: cursor_x = x, cursor_y = y;
  9510  00144A  C0CB  F0D1         	movff	drawtext@x,drawtext@cursor_x
  9511                           
  9512                           ; BSR set to: 0
  9513  00144E  C037  F0D0         	movff	drawtext@y,drawtext@cursor_y
  9514                           
  9515                           ; BSR set to: 0
  9516                           ;ST7735_TFT.c: 430: textsize = strlen(_text);
  9517  001452  C038  F00F         	movff	drawtext@_text,strlen@s
  9518  001456  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  9519  00145A  ECC8  F012         	call	_strlen	;wreg free
  9520  00145E  C00F  F0CC         	movff	?_strlen,drawtext@textsize
  9521  001462  C010  F0CD         	movff	?_strlen+1,drawtext@textsize+1
  9522                           
  9523                           ;ST7735_TFT.c: 431: for(i = 0; i < textsize; i++){
  9524  001466  0E00               	movlw	0
  9525  001468  0100               	movlb	0	; () banked
  9526  00146A  6FCF               	movwf	(drawtext@i+1)& (0+255),b
  9527  00146C  0E00               	movlw	0
  9528  00146E  6FCE               	movwf	drawtext@i& (0+255),b
  9529  001470  D064               	goto	l4729
  9530  001472                     l4703:
  9531                           
  9532                           ; BSR set to: 0
  9533                           ;ST7735_TFT.c: 432: if(wrap && ((cursor_x + size * 5) > 128)){
  9534  001472  505D               	movf	_wrap,w,c
  9535  001474  B4D8               	btfsc	status,2,c
  9536  001476  D034               	goto	l4719
  9537                           
  9538                           ; BSR set to: 0
  9539  001478  503E               	movf	drawtext@size,w,c
  9540  00147A  0D05               	mullw	5
  9541  00147C  0100               	movlb	0	; () banked
  9542  00147E  51D1               	movf	drawtext@cursor_x& (0+255),w,b
  9543  001480  6E3F               	movwf	??_drawtext& (0+255),c
  9544  001482  6A40               	clrf	(??_drawtext+1)& (0+255),c
  9545  001484  50F3               	movf	prodl,w,c
  9546  001486  263F               	addwf	??_drawtext,f,c
  9547  001488  50F4               	movf	prodh,w,c
  9548  00148A  2240               	addwfc	??_drawtext+1,f,c
  9549  00148C  BE40               	btfsc	??_drawtext+1,7,c
  9550  00148E  D028               	goto	l4719
  9551  001490  5040               	movf	??_drawtext+1,w,c
  9552  001492  E104               	bnz	u3350
  9553  001494  0E81               	movlw	129
  9554  001496  5C3F               	subwf	??_drawtext,w,c
  9555  001498  A0D8               	btfss	status,0,c
  9556  00149A  D022               	goto	l4719
  9557  00149C                     u3350:
  9558                           
  9559                           ; BSR set to: 0
  9560                           ;ST7735_TFT.c: 433: cursor_x = 0;
  9561  00149C  0E00               	movlw	0
  9562  00149E  0100               	movlb	0	; () banked
  9563  0014A0  6FD1               	movwf	drawtext@cursor_x& (0+255),b
  9564                           
  9565                           ; BSR set to: 0
  9566                           ;ST7735_TFT.c: 434: cursor_y = cursor_y + size * 7 + 3 ;
  9567  0014A2  503E               	movf	drawtext@size,w,c
  9568  0014A4  0D07               	mullw	7
  9569  0014A6  50F3               	movf	prodl,w,c
  9570  0014A8  0100               	movlb	0	; () banked
  9571  0014AA  25D0               	addwf	drawtext@cursor_y& (0+255),w,b
  9572  0014AC  0F03               	addlw	3
  9573  0014AE  0100               	movlb	0	; () banked
  9574  0014B0  6FD0               	movwf	drawtext@cursor_y& (0+255),b
  9575                           
  9576                           ; BSR set to: 0
  9577                           ;ST7735_TFT.c: 435: if(cursor_y > 160) cursor_y = 160;
  9578  0014B2  0EA0               	movlw	160
  9579  0014B4  0100               	movlb	0	; () banked
  9580  0014B6  65D0               	cpfsgt	drawtext@cursor_y& (0+255),b
  9581  0014B8  D004               	goto	l4715
  9582                           
  9583                           ; BSR set to: 0
  9584  0014BA  0EA0               	movlw	160
  9585  0014BC  0100               	movlb	0	; () banked
  9586  0014BE  6FD0               	movwf	drawtext@cursor_y& (0+255),b
  9587  0014C0  D000               	goto	l4715
  9588  0014C2                     l4715:
  9589                           
  9590                           ; BSR set to: 0
  9591                           ;ST7735_TFT.c: 436: if(_text[i] == 0x20) goto _skip; }
  9592  0014C2  0100               	movlb	0	; () banked
  9593  0014C4  51CE               	movf	drawtext@i& (0+255),w,b
  9594  0014C6  2438               	addwf	drawtext@_text,w,c
  9595  0014C8  6ED9               	movwf	fsr2l,c
  9596  0014CA  0100               	movlb	0	; () banked
  9597  0014CC  51CF               	movf	(drawtext@i+1)& (0+255),w,b
  9598  0014CE  2039               	addwfc	drawtext@_text+1,w,c
  9599  0014D0  6EDA               	movwf	fsr2h,c
  9600  0014D2  0E20               	movlw	32
  9601  0014D4  18DE               	xorwf	postinc2,w,c
  9602  0014D6  B4D8               	btfsc	status,2,c
  9603  0014D8  D02C               	goto	l4727
  9604  0014DA  D002               	goto	l4719
  9605                           
  9606                           ; BSR set to: 0
  9607  0014DC  D02A               	goto	l4727
  9608                           
  9609                           ; BSR set to: 0
  9610  0014DE  D000               	goto	l4719
  9611  0014E0                     l4719:
  9612                           
  9613                           ; BSR set to: 0
  9614                           ;ST7735_TFT.c: 437: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  9615  0014E0  C0D0  F02C         	movff	drawtext@cursor_y,drawChar@y
  9616  0014E4  0100               	movlb	0	; () banked
  9617  0014E6  51CE               	movf	drawtext@i& (0+255),w,b
  9618  0014E8  2438               	addwf	drawtext@_text,w,c
  9619  0014EA  6ED9               	movwf	fsr2l,c
  9620  0014EC  0100               	movlb	0	; () banked
  9621  0014EE  51CF               	movf	(drawtext@i+1)& (0+255),w,b
  9622  0014F0  2039               	addwfc	drawtext@_text+1,w,c
  9623  0014F2  6EDA               	movwf	fsr2h,c
  9624  0014F4  50DF               	movf	indf2,w,c
  9625  0014F6  6E2D               	movwf	drawChar@c,c
  9626  0014F8  C03A  F02E         	movff	drawtext@color,drawChar@color
  9627  0014FC  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  9628  001500  C03C  F030         	movff	drawtext@bg,drawChar@bg
  9629  001504  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  9630  001508  C03E  F032         	movff	drawtext@size,drawChar@size
  9631  00150C  0100               	movlb	0	; () banked
  9632  00150E  51D1               	movf	drawtext@cursor_x& (0+255),w,b
  9633  001510  EC54  F008         	call	_drawChar
  9634                           
  9635                           ;ST7735_TFT.c: 438: cursor_x = cursor_x + size * 6;
  9636  001514  503E               	movf	drawtext@size,w,c
  9637  001516  0D06               	mullw	6
  9638  001518  50F3               	movf	prodl,w,c
  9639  00151A  0100               	movlb	0	; () banked
  9640  00151C  25D1               	addwf	drawtext@cursor_x& (0+255),w,b
  9641  00151E  0100               	movlb	0	; () banked
  9642  001520  6FD1               	movwf	drawtext@cursor_x& (0+255),b
  9643                           
  9644                           ; BSR set to: 0
  9645                           ;ST7735_TFT.c: 439: if(cursor_x > 128) cursor_x = 128;
  9646  001522  0E80               	movlw	128
  9647  001524  0100               	movlb	0	; () banked
  9648  001526  65D1               	cpfsgt	drawtext@cursor_x& (0+255),b
  9649  001528  D004               	goto	l4727
  9650                           
  9651                           ; BSR set to: 0
  9652  00152A  0E80               	movlw	128
  9653  00152C  0100               	movlb	0	; () banked
  9654  00152E  6FD1               	movwf	drawtext@cursor_x& (0+255),b
  9655                           
  9656                           ; BSR set to: 0
  9657  001530  D000               	goto	l4727
  9658  001532                     l4727:
  9659                           
  9660                           ; BSR set to: 0
  9661  001532  0100               	movlb	0	; () banked
  9662  001534  4BCE               	infsnz	drawtext@i& (0+255),f,b
  9663  001536  2BCF               	incf	(drawtext@i+1)& (0+255),f,b
  9664  001538  D000               	goto	l4729
  9665  00153A                     l4729:
  9666                           
  9667                           ; BSR set to: 0
  9668  00153A  0100               	movlb	0	; () banked
  9669  00153C  51CC               	movf	drawtext@textsize& (0+255),w,b
  9670  00153E  0100               	movlb	0	; () banked
  9671  001540  5DCE               	subwf	drawtext@i& (0+255),w,b
  9672  001542  0100               	movlb	0	; () banked
  9673  001544  51CD               	movf	(drawtext@textsize+1)& (0+255),w,b
  9674  001546  0100               	movlb	0	; () banked
  9675  001548  59CF               	subwfb	(drawtext@i+1)& (0+255),w,b
  9676  00154A  A0D8               	btfss	status,0,c
  9677  00154C  D792               	goto	l4703
  9678                           
  9679                           ; BSR set to: 0
  9680                           
  9681                           ; BSR set to: 0
  9682  00154E  0012               	return		;funcret
  9683  001550                     __end_of_drawtext:
  9684                           	opt stack 0
  9685                           tblptru	equ	0xFF8
  9686                           tblptrh	equ	0xFF7
  9687                           tblptrl	equ	0xFF6
  9688                           tablat	equ	0xFF5
  9689                           prodh	equ	0xFF4
  9690                           prodl	equ	0xFF3
  9691                           intcon	equ	0xFF2
  9692                           postinc0	equ	0xFEE
  9693                           wreg	equ	0xFE8
  9694                           postdec1	equ	0xFE5
  9695                           fsr1l	equ	0xFE1
  9696                           indf2	equ	0xFDF
  9697                           postinc2	equ	0xFDE
  9698                           fsr2h	equ	0xFDA
  9699                           fsr2l	equ	0xFD9
  9700                           status	equ	0xFD8
  9701                           
  9702 ;; *************** function _strlen *****************
  9703 ;; Defined at:
  9704 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  9705 ;; Parameters:    Size  Location     Type
  9706 ;;  s               2   14[COMRAM] PTR const unsigned char 
  9707 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9708 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9709 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9710 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9711 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9712 ;; Auto vars:     Size  Location     Type
  9713 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  9714 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9715 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9716 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9717 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9718 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9719 ;; Return value:  Size  Location     Type
  9720 ;;                  2   14[COMRAM] unsigned int 
  9721 ;; Registers used:
  9722 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9723 ;; Tracked objects:
  9724 ;;		On entry : 0/0
  9725 ;;		On exit  : 0/0
  9726 ;;		Unchanged: 0/0
  9727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9728 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9730 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9731 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9732 ;;Total ram usage:        6 bytes
  9733 ;; Hardware stack levels used:    1
  9734 ;; Hardware stack levels required when called:    2
  9735 ;; This function calls:
  9736 ;;		Nothing
  9737 ;; This function is called by:
  9738 ;;		_drawtext
  9739 ;; This function uses a non-reentrant model
  9740 ;;
  9741                           
  9742                           	psect	text48
  9743  002590                     __ptext48:
  9744                           	opt stack 0
  9745  002590                     _strlen:
  9746                           	opt stack 24
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;incstack = 0
  9750  002590  C00F  F013         	movff	strlen@s,strlen@cp
  9751  002594  C010  F014         	movff	strlen@s+1,strlen@cp+1
  9752  002598  D003               	goto	l4613
  9753  00259A                     l4611:
  9754  00259A  4A13               	infsnz	strlen@cp,f,c
  9755  00259C  2A14               	incf	strlen@cp+1,f,c
  9756  00259E  D000               	goto	l4613
  9757  0025A0                     l4613:
  9758  0025A0  C013  FFD9         	movff	strlen@cp,fsr2l
  9759  0025A4  C014  FFDA         	movff	strlen@cp+1,fsr2h
  9760  0025A8  50DF               	movf	indf2,w,c
  9761  0025AA  A4D8               	btfss	status,2,c
  9762  0025AC  D7F6               	goto	l4611
  9763  0025AE  C00F  F011         	movff	strlen@s,??_strlen
  9764  0025B2  C010  F012         	movff	strlen@s+1,??_strlen+1
  9765  0025B6  1E11               	comf	??_strlen,f,c
  9766  0025B8  1E12               	comf	??_strlen+1,f,c
  9767  0025BA  4A11               	infsnz	??_strlen,f,c
  9768  0025BC  2A12               	incf	??_strlen+1,f,c
  9769  0025BE  5013               	movf	strlen@cp,w,c
  9770  0025C0  2411               	addwf	??_strlen,w,c
  9771  0025C2  6E0F               	movwf	?_strlen,c
  9772  0025C4  5014               	movf	strlen@cp+1,w,c
  9773  0025C6  2012               	addwfc	??_strlen+1,w,c
  9774  0025C8  6E10               	movwf	?_strlen+1,c
  9775  0025CA  D000               	goto	l1253
  9776  0025CC                     l1253:
  9777  0025CC  0012               	return		;funcret
  9778  0025CE                     __end_of_strlen:
  9779                           	opt stack 0
  9780                           tblptru	equ	0xFF8
  9781                           tblptrh	equ	0xFF7
  9782                           tblptrl	equ	0xFF6
  9783                           tablat	equ	0xFF5
  9784                           prodh	equ	0xFF4
  9785                           prodl	equ	0xFF3
  9786                           intcon	equ	0xFF2
  9787                           postinc0	equ	0xFEE
  9788                           wreg	equ	0xFE8
  9789                           postdec1	equ	0xFE5
  9790                           fsr1l	equ	0xFE1
  9791                           indf2	equ	0xFDF
  9792                           postinc2	equ	0xFDE
  9793                           fsr2h	equ	0xFDA
  9794                           fsr2l	equ	0xFD9
  9795                           status	equ	0xFD8
  9796                           
  9797 ;; *************** function _drawChar *****************
  9798 ;; Defined at:
  9799 ;;		line 398 in file "ST7735_TFT.c"
  9800 ;; Parameters:    Size  Location     Type
  9801 ;;  x               1    wreg     unsigned char 
  9802 ;;  y               1   43[COMRAM] unsigned char 
  9803 ;;  c               1   44[COMRAM] unsigned char 
  9804 ;;  color           2   45[COMRAM] unsigned int 
  9805 ;;  bg              2   47[COMRAM] unsigned int 
  9806 ;;  size            1   49[COMRAM] unsigned char 
  9807 ;; Auto vars:     Size  Location     Type
  9808 ;;  x               1   51[COMRAM] unsigned char 
  9809 ;;  line            1   50[COMRAM] unsigned char 
  9810 ;;  i               1   53[COMRAM] unsigned char 
  9811 ;;  j               1   52[COMRAM] unsigned char 
  9812 ;; Return value:  Size  Location     Type
  9813 ;;		None               void
  9814 ;; Registers used:
  9815 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9816 ;; Tracked objects:
  9817 ;;		On entry : 0/0
  9818 ;;		On exit  : 0/0
  9819 ;;		Unchanged: 0/0
  9820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9821 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9822 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9824 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9825 ;;Total ram usage:       11 bytes
  9826 ;; Hardware stack levels used:    1
  9827 ;; Hardware stack levels required when called:    7
  9828 ;; This function calls:
  9829 ;;		___wmul
  9830 ;;		_drawPixel
  9831 ;;		_fillRect
  9832 ;; This function is called by:
  9833 ;;		_drawtext
  9834 ;; This function uses a non-reentrant model
  9835 ;;
  9836                           
  9837                           	psect	text49
  9838  0010A8                     __ptext49:
  9839                           	opt stack 0
  9840  0010A8                     _drawChar:
  9841                           	opt stack 19
  9842                           
  9843                           ;incstack = 0
  9844                           ;drawChar@x stored from wreg
  9845  0010A8  6E34               	movwf	drawChar@x,c
  9846                           
  9847                           ;ST7735_TFT.c: 400: char i, j;
  9848                           ;ST7735_TFT.c: 401: if((x >= 128) || (y >= 160))
  9849  0010AA  0E80               	movlw	128
  9850  0010AC  6034               	cpfslt	drawChar@x,c
  9851  0010AE  D0A6               	goto	l286
  9852  0010B0  0E9F               	movlw	159
  9853  0010B2  642C               	cpfsgt	drawChar@y,c
  9854  0010B4  D001               	goto	l4559
  9855                           
  9856                           ;ST7735_TFT.c: 402: return;
  9857  0010B6  D0A2               	goto	l286
  9858  0010B8                     l4559:
  9859                           
  9860                           ;ST7735_TFT.c: 403: if(size < 1) size = 1;
  9861  0010B8  5032               	movf	drawChar@size,w,c
  9862  0010BA  A4D8               	btfss	status,2,c
  9863  0010BC  D003               	goto	l4563
  9864  0010BE  0E01               	movlw	1
  9865  0010C0  6E32               	movwf	drawChar@size,c
  9866  0010C2  D000               	goto	l4563
  9867  0010C4                     l4563:
  9868                           
  9869                           ;ST7735_TFT.c: 404: if((c < ' ') || (c > '~'))
  9870  0010C4  0E1F               	movlw	31
  9871  0010C6  642D               	cpfsgt	drawChar@c,c
  9872  0010C8  D004               	goto	l4567
  9873  0010CA  0E7E               	movlw	126
  9874  0010CC  642D               	cpfsgt	drawChar@c,c
  9875  0010CE  D003               	goto	l288
  9876  0010D0  D000               	goto	l4567
  9877  0010D2                     l4567:
  9878                           
  9879                           ;ST7735_TFT.c: 405: c = '?';
  9880  0010D2  0E3F               	movlw	63
  9881  0010D4  6E2D               	movwf	drawChar@c,c
  9882  0010D6                     l288:
  9883                           
  9884                           ;ST7735_TFT.c: 406: for(i=0; i<5; i++ ) {
  9885  0010D6  0E00               	movlw	0
  9886  0010D8  6E36               	movwf	drawChar@i,c
  9887  0010DA                     l4569:
  9888  0010DA  0E04               	movlw	4
  9889  0010DC  6436               	cpfsgt	drawChar@i,c
  9890  0010DE  D001               	goto	l4573
  9891  0010E0  D08D               	goto	l286
  9892  0010E2                     l4573:
  9893                           
  9894                           ;ST7735_TFT.c: 407: unsigned char line;
  9895                           ;ST7735_TFT.c: 408: if(c < 'S')
  9896  0010E2  0E53               	movlw	83
  9897  0010E4  602D               	cpfslt	drawChar@c,c
  9898  0010E6  D015               	goto	l4577
  9899                           
  9900                           ;ST7735_TFT.c: 409: line = font[(c - 32)*5 + i];
  9901  0010E8  0EE0               	movlw	224
  9902  0010EA  242D               	addwf	drawChar@c,w,c
  9903  0010EC  6E0F               	movwf	___wmul@multiplier,c
  9904  0010EE  6A10               	clrf	___wmul@multiplier+1,c
  9905  0010F0  0EFF               	movlw	255
  9906  0010F2  2210               	addwfc	___wmul@multiplier+1,f,c
  9907  0010F4  0E00               	movlw	0
  9908  0010F6  6E12               	movwf	___wmul@multiplicand+1,c
  9909  0010F8  0E05               	movlw	5
  9910  0010FA  6E11               	movwf	___wmul@multiplicand,c
  9911  0010FC  ECB5  F013         	call	___wmul	;wreg free
  9912  001100  5036               	movf	drawChar@i,w,c
  9913  001102  260F               	addwf	?___wmul,f,c
  9914  001104  0E00               	movlw	0
  9915  001106  2210               	addwfc	?___wmul+1,f,c
  9916  001108  0ECF               	movlw	low _font
  9917  00110A  240F               	addwf	?___wmul,w,c
  9918  00110C  6EF6               	movwf	tblptrl,c
  9919  00110E  0EFD               	movlw	high _font
  9920  001110  D014               	goto	L19
  9921  001112                     l4577:
  9922                           
  9923                           ;ST7735_TFT.c: 410: else
  9924                           ;ST7735_TFT.c: 411: line = font2[(c - 'S')*5 + i];
  9925  001112  0EAD               	movlw	173
  9926  001114  242D               	addwf	drawChar@c,w,c
  9927  001116  6E0F               	movwf	___wmul@multiplier,c
  9928  001118  6A10               	clrf	___wmul@multiplier+1,c
  9929  00111A  0EFF               	movlw	255
  9930  00111C  2210               	addwfc	___wmul@multiplier+1,f,c
  9931  00111E  0E00               	movlw	0
  9932  001120  6E12               	movwf	___wmul@multiplicand+1,c
  9933  001122  0E05               	movlw	5
  9934  001124  6E11               	movwf	___wmul@multiplicand,c
  9935  001126  ECB5  F013         	call	___wmul	;wreg free
  9936  00112A  5036               	movf	drawChar@i,w,c
  9937  00112C  260F               	addwf	?___wmul,f,c
  9938  00112E  0E00               	movlw	0
  9939  001130  2210               	addwfc	?___wmul+1,f,c
  9940  001132  0ECE               	movlw	low _font2
  9941  001134  240F               	addwf	?___wmul,w,c
  9942  001136  6EF6               	movwf	tblptrl,c
  9943  001138  0EFE               	movlw	high _font2
  9944  00113A                     L19:
  9945  00113A  2010               	addwfc	?___wmul+1,w,c
  9946  00113C  6EF7               	movwf	tblptrh,c
  9947  00113E                     	if	0	;There are less than 3 active tblptr bytes
  9948  00113E                     	endif
  9949  00113E  0008               	tblrd		*
  9950  001140  CFF5 F033          	movff	tablat,drawChar@line
  9951  001144  D000               	goto	l4579
  9952  001146                     l4579:
  9953                           
  9954                           ;ST7735_TFT.c: 412: for(j=0; j<7; j++, line >>= 1) {
  9955  001146  0E00               	movlw	0
  9956  001148  6E35               	movwf	drawChar@j,c
  9957  00114A                     l4581:
  9958  00114A  0E06               	movlw	6
  9959  00114C  6435               	cpfsgt	drawChar@j,c
  9960  00114E  D001               	goto	l295
  9961  001150  D053               	goto	l4605
  9962  001152                     l295:
  9963                           
  9964                           ;ST7735_TFT.c: 413: if(line & 0x01) {
  9965  001152  A033               	btfss	drawChar@line,0,c
  9966  001154  D023               	goto	l4591
  9967                           
  9968                           ;ST7735_TFT.c: 414: if(size == 1) drawPixel(x+i, y+j, color);
  9969  001156  0432               	decf	drawChar@size,w,c
  9970  001158  A4D8               	btfss	status,2,c
  9971  00115A  D00C               	goto	l4589
  9972  00115C  502C               	movf	drawChar@y,w,c
  9973  00115E  2435               	addwf	drawChar@j,w,c
  9974  001160  6E16               	movwf	drawPixel@y,c
  9975  001162  C02E  F017         	movff	drawChar@color,drawPixel@color
  9976  001166  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
  9977  00116A  5034               	movf	drawChar@x,w,c
  9978  00116C  2436               	addwf	drawChar@i,w,c
  9979  00116E  EC73  F013         	call	_drawPixel
  9980  001172  D03E               	goto	l4599
  9981  001174                     l4589:
  9982                           
  9983                           ;ST7735_TFT.c: 415: else fillRect(x+(i*size), y+(j*size), size, size, color);
  9984  001174  5035               	movf	drawChar@j,w,c
  9985  001176  0232               	mulwf	drawChar@size,c
  9986  001178  50F3               	movf	prodl,w,c
  9987  00117A  242C               	addwf	drawChar@y,w,c
  9988  00117C  6E21               	movwf	fillRect@y,c
  9989  00117E  C032  F022         	movff	drawChar@size,fillRect@w
  9990  001182  C032  F023         	movff	drawChar@size,fillRect@h
  9991  001186  C02E  F024         	movff	drawChar@color,fillRect@color
  9992  00118A  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
  9993  00118E  5036               	movf	drawChar@i,w,c
  9994  001190  0232               	mulwf	drawChar@size,c
  9995  001192  50F3               	movf	prodl,w,c
  9996  001194  2434               	addwf	drawChar@x,w,c
  9997  001196  ECF4  F011         	call	_fillRect
  9998                           
  9999                           ;ST7735_TFT.c: 416: }
 10000  00119A  D02A               	goto	l4599
 10001  00119C                     l4591:
 10002                           
 10003                           ;ST7735_TFT.c: 417: else if(bg != color) {
 10004  00119C  502E               	movf	drawChar@color,w,c
 10005  00119E  1830               	xorwf	drawChar@bg,w,c
 10006  0011A0  E104               	bnz	u3220
 10007  0011A2  502F               	movf	drawChar@color+1,w,c
 10008  0011A4  1831               	xorwf	drawChar@bg+1,w,c
 10009  0011A6  B4D8               	btfsc	status,2,c
 10010  0011A8  D023               	goto	l4599
 10011  0011AA                     u3220:
 10012                           
 10013                           ;ST7735_TFT.c: 418: if(size == 1) drawPixel(x+i, y+j, bg);
 10014  0011AA  0432               	decf	drawChar@size,w,c
 10015  0011AC  A4D8               	btfss	status,2,c
 10016  0011AE  D00C               	goto	l4597
 10017  0011B0  502C               	movf	drawChar@y,w,c
 10018  0011B2  2435               	addwf	drawChar@j,w,c
 10019  0011B4  6E16               	movwf	drawPixel@y,c
 10020  0011B6  C030  F017         	movff	drawChar@bg,drawPixel@color
 10021  0011BA  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
 10022  0011BE  5034               	movf	drawChar@x,w,c
 10023  0011C0  2436               	addwf	drawChar@i,w,c
 10024  0011C2  EC73  F013         	call	_drawPixel
 10025  0011C6  D014               	goto	l4599
 10026  0011C8                     l4597:
 10027                           
 10028                           ;ST7735_TFT.c: 419: else fillRect(x+i*size, y+j*size, size, size, bg);
 10029  0011C8  5035               	movf	drawChar@j,w,c
 10030  0011CA  0232               	mulwf	drawChar@size,c
 10031  0011CC  50F3               	movf	prodl,w,c
 10032  0011CE  242C               	addwf	drawChar@y,w,c
 10033  0011D0  6E21               	movwf	fillRect@y,c
 10034  0011D2  C032  F022         	movff	drawChar@size,fillRect@w
 10035  0011D6  C032  F023         	movff	drawChar@size,fillRect@h
 10036  0011DA  C030  F024         	movff	drawChar@bg,fillRect@color
 10037  0011DE  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
 10038  0011E2  5036               	movf	drawChar@i,w,c
 10039  0011E4  0232               	mulwf	drawChar@size,c
 10040  0011E6  50F3               	movf	prodl,w,c
 10041  0011E8  2434               	addwf	drawChar@x,w,c
 10042  0011EA  ECF4  F011         	call	_fillRect
 10043  0011EE  D000               	goto	l4599
 10044  0011F0                     l4599:
 10045  0011F0  2A35               	incf	drawChar@j,f,c
 10046  0011F2  90D8               	bcf	status,0,c
 10047  0011F4  3233               	rrcf	drawChar@line,f,c
 10048  0011F6  D7A9               	goto	l4581
 10049  0011F8                     l4605:
 10050  0011F8  2A36               	incf	drawChar@i,f,c
 10051  0011FA  D76F               	goto	l4569
 10052  0011FC                     l286:
 10053  0011FC  0012               	return		;funcret
 10054  0011FE                     __end_of_drawChar:
 10055                           	opt stack 0
 10056                           tblptru	equ	0xFF8
 10057                           tblptrh	equ	0xFF7
 10058                           tblptrl	equ	0xFF6
 10059                           tablat	equ	0xFF5
 10060                           prodh	equ	0xFF4
 10061                           prodl	equ	0xFF3
 10062                           intcon	equ	0xFF2
 10063                           postinc0	equ	0xFEE
 10064                           wreg	equ	0xFE8
 10065                           postdec1	equ	0xFE5
 10066                           fsr1l	equ	0xFE1
 10067                           indf2	equ	0xFDF
 10068                           postinc2	equ	0xFDE
 10069                           fsr2h	equ	0xFDA
 10070                           fsr2l	equ	0xFD9
 10071                           status	equ	0xFD8
 10072                           
 10073 ;; *************** function _fillRect *****************
 10074 ;; Defined at:
 10075 ;;		line 388 in file "ST7735_TFT.c"
 10076 ;; Parameters:    Size  Location     Type
 10077 ;;  x               1    wreg     unsigned char 
 10078 ;;  y               1   32[COMRAM] unsigned char 
 10079 ;;  w               1   33[COMRAM] unsigned char 
 10080 ;;  h               1   34[COMRAM] unsigned char 
 10081 ;;  color           2   35[COMRAM] unsigned int 
 10082 ;; Auto vars:     Size  Location     Type
 10083 ;;  x               1   40[COMRAM] unsigned char 
 10084 ;;  i               2   41[COMRAM] int 
 10085 ;; Return value:  Size  Location     Type
 10086 ;;		None               void
 10087 ;; Registers used:
 10088 ;;		wreg, status,2, status,0, cstack
 10089 ;; Tracked objects:
 10090 ;;		On entry : 0/0
 10091 ;;		On exit  : 0/0
 10092 ;;		Unchanged: 0/0
 10093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10094 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10095 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10096 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10097 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10098 ;;Total ram usage:       11 bytes
 10099 ;; Hardware stack levels used:    1
 10100 ;; Hardware stack levels required when called:    6
 10101 ;; This function calls:
 10102 ;;		_drawFastVLine
 10103 ;; This function is called by:
 10104 ;;		_drawChar
 10105 ;; This function uses a non-reentrant model
 10106 ;;
 10107                           
 10108                           	psect	text50
 10109  0023E8                     __ptext50:
 10110                           	opt stack 0
 10111  0023E8                     _fillRect:
 10112                           	opt stack 19
 10113                           
 10114                           ;incstack = 0
 10115                           ;fillRect@x stored from wreg
 10116  0023E8  6E29               	movwf	fillRect@x,c
 10117                           
 10118                           ;ST7735_TFT.c: 390: signed int i;
 10119                           ;ST7735_TFT.c: 392: for (i = x; i < x + w; i++)
 10120  0023EA  C029  F02A         	movff	fillRect@x,fillRect@i
 10121  0023EE  6A2B               	clrf	fillRect@i+1,c
 10122  0023F0  D00E               	goto	l4511
 10123  0023F2                     l4507:
 10124                           
 10125                           ;ST7735_TFT.c: 393: {
 10126                           ;ST7735_TFT.c: 394: drawFastVLine(i, y, h, color);
 10127  0023F2  C021  F016         	movff	fillRect@y,drawFastVLine@y
 10128  0023F6  C023  F017         	movff	fillRect@h,drawFastVLine@h
 10129  0023FA  C024  F018         	movff	fillRect@color,drawFastVLine@color
 10130  0023FE  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
 10131  002402  502A               	movf	fillRect@i,w,c
 10132  002404  EC8D  F00F         	call	_drawFastVLine
 10133  002408  4A2A               	infsnz	fillRect@i,f,c
 10134  00240A  2A2B               	incf	fillRect@i+1,f,c
 10135  00240C  D000               	goto	l4511
 10136  00240E                     l4511:
 10137  00240E  5022               	movf	fillRect@w,w,c
 10138  002410  C029  F026         	movff	fillRect@x,??_fillRect
 10139  002414  6A27               	clrf	(??_fillRect+1)& (0+255),c
 10140  002416  2626               	addwf	??_fillRect,f,c
 10141  002418  0E00               	movlw	0
 10142  00241A  2227               	addwfc	??_fillRect+1,f,c
 10143  00241C  5026               	movf	??_fillRect,w,c
 10144  00241E  5C2A               	subwf	fillRect@i,w,c
 10145  002420  502B               	movf	fillRect@i+1,w,c
 10146  002422  0A80               	xorlw	128
 10147  002424  6E28               	movwf	(??_fillRect+2)& (0+255),c
 10148  002426  5027               	movf	??_fillRect+1,w,c
 10149  002428  0A80               	xorlw	128
 10150  00242A  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
 10151  00242C  A0D8               	btfss	status,0,c
 10152  00242E  D7E1               	goto	l4507
 10153  002430  0012               	return		;funcret
 10154  002432                     __end_of_fillRect:
 10155                           	opt stack 0
 10156                           tblptru	equ	0xFF8
 10157                           tblptrh	equ	0xFF7
 10158                           tblptrl	equ	0xFF6
 10159                           tablat	equ	0xFF5
 10160                           prodh	equ	0xFF4
 10161                           prodl	equ	0xFF3
 10162                           intcon	equ	0xFF2
 10163                           postinc0	equ	0xFEE
 10164                           wreg	equ	0xFE8
 10165                           postdec1	equ	0xFE5
 10166                           fsr1l	equ	0xFE1
 10167                           indf2	equ	0xFDF
 10168                           postinc2	equ	0xFDE
 10169                           fsr2h	equ	0xFDA
 10170                           fsr2l	equ	0xFD9
 10171                           status	equ	0xFD8
 10172                           
 10173 ;; *************** function _drawFastVLine *****************
 10174 ;; Defined at:
 10175 ;;		line 367 in file "ST7735_TFT.c"
 10176 ;; Parameters:    Size  Location     Type
 10177 ;;  x               1    wreg     unsigned char 
 10178 ;;  y               1   21[COMRAM] unsigned char 
 10179 ;;  h               1   22[COMRAM] unsigned char 
 10180 ;;  color           2   23[COMRAM] unsigned int 
 10181 ;; Auto vars:     Size  Location     Type
 10182 ;;  x               1   31[COMRAM] unsigned char 
 10183 ;;  lo              1   30[COMRAM] unsigned char 
 10184 ;;  hi              1   29[COMRAM] unsigned char 
 10185 ;; Return value:  Size  Location     Type
 10186 ;;		None               void
 10187 ;; Registers used:
 10188 ;;		wreg, status,2, status,0, cstack
 10189 ;; Tracked objects:
 10190 ;;		On entry : 0/0
 10191 ;;		On exit  : 0/0
 10192 ;;		Unchanged: 0/0
 10193 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10194 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10195 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10196 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10197 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10198 ;;Total ram usage:       11 bytes
 10199 ;; Hardware stack levels used:    1
 10200 ;; Hardware stack levels required when called:    5
 10201 ;; This function calls:
 10202 ;;		_setAddrWindow
 10203 ;;		_spiwrite
 10204 ;; This function is called by:
 10205 ;;		_fillRect
 10206 ;;		_fillCircleHelper
 10207 ;;		_fillCircle
 10208 ;;		_drawRect
 10209 ;; This function uses a non-reentrant model
 10210 ;;
 10211                           
 10212                           	psect	text51
 10213  001F1A                     __ptext51:
 10214                           	opt stack 0
 10215  001F1A                     _drawFastVLine:
 10216                           	opt stack 19
 10217                           
 10218                           ;incstack = 0
 10219                           ;drawFastVLine@x stored from wreg
 10220  001F1A  6E20               	movwf	drawFastVLine@x,c
 10221                           
 10222                           ;ST7735_TFT.c: 369: unsigned char hi, lo;
 10223                           ;ST7735_TFT.c: 370: if((x >= 128) || (y >= 160))
 10224  001F1C  0E80               	movlw	128
 10225  001F1E  6020               	cpfslt	drawFastVLine@x,c
 10226  001F20  D03F               	goto	l270
 10227  001F22  0E9F               	movlw	159
 10228  001F24  6416               	cpfsgt	drawFastVLine@y,c
 10229  001F26  D001               	goto	l4477
 10230                           
 10231                           ;ST7735_TFT.c: 371: return;
 10232  001F28  D03B               	goto	l270
 10233  001F2A                     l4477:
 10234                           
 10235                           ;ST7735_TFT.c: 372: if((y + h - 1) >= 160)
 10236  001F2A  0EFF               	movlw	255
 10237  001F2C  6E1A               	movwf	??_drawFastVLine& (0+255),c
 10238  001F2E  0EFF               	movlw	255
 10239  001F30  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
 10240  001F32  5017               	movf	drawFastVLine@h,w,c
 10241  001F34  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
 10242  001F38  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
 10243  001F3A  261C               	addwf	??_drawFastVLine+2,f,c
 10244  001F3C  0E00               	movlw	0
 10245  001F3E  221D               	addwfc	??_drawFastVLine+3,f,c
 10246  001F40  501A               	movf	??_drawFastVLine,w,c
 10247  001F42  261C               	addwf	??_drawFastVLine+2,f,c
 10248  001F44  501B               	movf	??_drawFastVLine+1,w,c
 10249  001F46  221D               	addwfc	??_drawFastVLine+3,f,c
 10250  001F48  BE1D               	btfsc	??_drawFastVLine+3,7,c
 10251  001F4A  D00B               	goto	l4481
 10252  001F4C  501D               	movf	??_drawFastVLine+3,w,c
 10253  001F4E  E104               	bnz	u2990
 10254  001F50  0EA0               	movlw	160
 10255  001F52  5C1C               	subwf	??_drawFastVLine+2,w,c
 10256  001F54  A0D8               	btfss	status,0,c
 10257  001F56  D005               	goto	l4481
 10258  001F58                     u2990:
 10259                           
 10260                           ;ST7735_TFT.c: 373: h = 160 - y;
 10261  001F58  5016               	movf	drawFastVLine@y,w,c
 10262  001F5A  0800               	sublw	0
 10263  001F5C  0FA0               	addlw	160
 10264  001F5E  6E17               	movwf	drawFastVLine@h,c
 10265  001F60  D000               	goto	l4481
 10266  001F62                     l4481:
 10267                           
 10268                           ;ST7735_TFT.c: 374: hi = color >> 8; lo = color;
 10269  001F62  5019               	movf	drawFastVLine@color+1,w,c
 10270  001F64  6E1E               	movwf	drawFastVLine@hi,c
 10271  001F66  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
 10272                           
 10273                           ;ST7735_TFT.c: 375: setAddrWindow(x, y, x, y + h - 1);
 10274  001F6A  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
 10275  001F6E  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
 10276  001F72  5016               	movf	drawFastVLine@y,w,c
 10277  001F74  2417               	addwf	drawFastVLine@h,w,c
 10278  001F76  6E1A               	movwf	??_drawFastVLine& (0+255),c
 10279  001F78  041A               	decf	??_drawFastVLine,w,c
 10280  001F7A  6E14               	movwf	setAddrWindow@y1,c
 10281  001F7C  5020               	movf	drawFastVLine@x,w,c
 10282  001F7E  ECCD  F011         	call	_setAddrWindow
 10283                           
 10284                           ;ST7735_TFT.c: 376: PORTCbits.RC5 = 1;
 10285  001F82  8A82               	bsf	3970,5,c	;volatile
 10286                           
 10287                           ;ST7735_TFT.c: 377: PORTDbits.RD2 = 0;
 10288  001F84  9483               	bcf	3971,2,c	;volatile
 10289                           
 10290                           ;ST7735_TFT.c: 379: while (h--) {
 10291  001F86  D007               	goto	l4493
 10292  001F88                     l4491:
 10293                           
 10294                           ;ST7735_TFT.c: 380: spiwrite(hi);
 10295  001F88  501E               	movf	drawFastVLine@hi,w,c
 10296  001F8A  EC2A  F014         	call	_spiwrite
 10297                           
 10298                           ;ST7735_TFT.c: 381: spiwrite(lo);
 10299  001F8E  501F               	movf	drawFastVLine@lo,w,c
 10300  001F90  EC2A  F014         	call	_spiwrite
 10301  001F94  D000               	goto	l4493
 10302  001F96                     l4493:
 10303  001F96  0617               	decf	drawFastVLine@h,f,c
 10304  001F98  2817               	incf	drawFastVLine@h,w,c
 10305  001F9A  A4D8               	btfss	status,2,c
 10306  001F9C  D7F5               	goto	l4491
 10307                           
 10308                           ;ST7735_TFT.c: 382: }
 10309                           ;ST7735_TFT.c: 383: PORTDbits.RD2 = 1;
 10310  001F9E  8483               	bsf	3971,2,c	;volatile
 10311  001FA0                     l270:
 10312  001FA0  0012               	return		;funcret
 10313  001FA2                     __end_of_drawFastVLine:
 10314                           	opt stack 0
 10315                           tblptru	equ	0xFF8
 10316                           tblptrh	equ	0xFF7
 10317                           tblptrl	equ	0xFF6
 10318                           tablat	equ	0xFF5
 10319                           prodh	equ	0xFF4
 10320                           prodl	equ	0xFF3
 10321                           intcon	equ	0xFF2
 10322                           postinc0	equ	0xFEE
 10323                           wreg	equ	0xFE8
 10324                           postdec1	equ	0xFE5
 10325                           fsr1l	equ	0xFE1
 10326                           indf2	equ	0xFDF
 10327                           postinc2	equ	0xFDE
 10328                           fsr2h	equ	0xFDA
 10329                           fsr2l	equ	0xFD9
 10330                           status	equ	0xFD8
 10331                           
 10332 ;; *************** function _drawPixel *****************
 10333 ;; Defined at:
 10334 ;;		line 358 in file "ST7735_TFT.c"
 10335 ;; Parameters:    Size  Location     Type
 10336 ;;  x               1    wreg     unsigned char 
 10337 ;;  y               1   21[COMRAM] unsigned char 
 10338 ;;  color           2   22[COMRAM] unsigned int 
 10339 ;; Auto vars:     Size  Location     Type
 10340 ;;  x               1   24[COMRAM] unsigned char 
 10341 ;; Return value:  Size  Location     Type
 10342 ;;		None               void
 10343 ;; Registers used:
 10344 ;;		wreg, status,2, status,0, cstack
 10345 ;; Tracked objects:
 10346 ;;		On entry : 0/0
 10347 ;;		On exit  : 0/0
 10348 ;;		Unchanged: 0/0
 10349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10350 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10351 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10352 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10353 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10354 ;;Total ram usage:        4 bytes
 10355 ;; Hardware stack levels used:    1
 10356 ;; Hardware stack levels required when called:    5
 10357 ;; This function calls:
 10358 ;;		_setAddrWindow
 10359 ;;		_write_data
 10360 ;; This function is called by:
 10361 ;;		_drawChar
 10362 ;;		_drawCircle
 10363 ;;		_drawCircleHelper
 10364 ;; This function uses a non-reentrant model
 10365 ;;
 10366                           
 10367                           	psect	text52
 10368  0026E6                     __ptext52:
 10369                           	opt stack 0
 10370  0026E6                     _drawPixel:
 10371                           	opt stack 20
 10372                           
 10373                           ;incstack = 0
 10374                           ;drawPixel@x stored from wreg
 10375  0026E6  6E19               	movwf	drawPixel@x,c
 10376                           
 10377                           ;ST7735_TFT.c: 360: if((x >= 128) || (y >= 160))
 10378  0026E8  0E80               	movlw	128
 10379  0026EA  6019               	cpfslt	drawPixel@x,c
 10380  0026EC  D013               	goto	l264
 10381  0026EE  0E9F               	movlw	159
 10382  0026F0  6416               	cpfsgt	drawPixel@y,c
 10383  0026F2  D001               	goto	l4499
 10384                           
 10385                           ;ST7735_TFT.c: 361: return;
 10386  0026F4  D00F               	goto	l264
 10387  0026F6                     l4499:
 10388                           
 10389                           ;ST7735_TFT.c: 362: setAddrWindow(x,y,x+1,y+1);
 10390  0026F6  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 10391  0026FA  2819               	incf	drawPixel@x,w,c
 10392  0026FC  6E13               	movwf	setAddrWindow@x1,c
 10393  0026FE  2816               	incf	drawPixel@y,w,c
 10394  002700  6E14               	movwf	setAddrWindow@y1,c
 10395  002702  5019               	movf	drawPixel@x,w,c
 10396  002704  ECCD  F011         	call	_setAddrWindow
 10397                           
 10398                           ;ST7735_TFT.c: 363: write_data(color >> 8);
 10399  002708  5018               	movf	drawPixel@color+1,w,c
 10400  00270A  EC46  F014         	call	_write_data
 10401                           
 10402                           ;ST7735_TFT.c: 364: write_data(color & 0xFF);
 10403  00270E  5017               	movf	drawPixel@color,w,c
 10404  002710  EC46  F014         	call	_write_data
 10405  002714                     l264:
 10406  002714  0012               	return		;funcret
 10407  002716                     __end_of_drawPixel:
 10408                           	opt stack 0
 10409                           tblptru	equ	0xFF8
 10410                           tblptrh	equ	0xFF7
 10411                           tblptrl	equ	0xFF6
 10412                           tablat	equ	0xFF5
 10413                           prodh	equ	0xFF4
 10414                           prodl	equ	0xFF3
 10415                           intcon	equ	0xFF2
 10416                           postinc0	equ	0xFEE
 10417                           wreg	equ	0xFE8
 10418                           postdec1	equ	0xFE5
 10419                           fsr1l	equ	0xFE1
 10420                           indf2	equ	0xFDF
 10421                           postinc2	equ	0xFDE
 10422                           fsr2h	equ	0xFDA
 10423                           fsr2l	equ	0xFD9
 10424                           status	equ	0xFD8
 10425                           
 10426 ;; *************** function _setAddrWindow *****************
 10427 ;; Defined at:
 10428 ;;		line 343 in file "ST7735_TFT.c"
 10429 ;; Parameters:    Size  Location     Type
 10430 ;;  x0              1    wreg     unsigned char 
 10431 ;;  y0              1   17[COMRAM] unsigned char 
 10432 ;;  x1              1   18[COMRAM] unsigned char 
 10433 ;;  y1              1   19[COMRAM] unsigned char 
 10434 ;; Auto vars:     Size  Location     Type
 10435 ;;  x0              1   20[COMRAM] unsigned char 
 10436 ;; Return value:  Size  Location     Type
 10437 ;;		None               void
 10438 ;; Registers used:
 10439 ;;		wreg, status,2, status,0, cstack
 10440 ;; Tracked objects:
 10441 ;;		On entry : 0/0
 10442 ;;		On exit  : 0/0
 10443 ;;		Unchanged: 0/0
 10444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10445 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10446 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10447 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10448 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10449 ;;Total ram usage:        4 bytes
 10450 ;; Hardware stack levels used:    1
 10451 ;; Hardware stack levels required when called:    4
 10452 ;; This function calls:
 10453 ;;		_write_command
 10454 ;;		_write_data
 10455 ;; This function is called by:
 10456 ;;		_drawPixel
 10457 ;;		_drawFastVLine
 10458 ;;		_fillRectangle
 10459 ;;		_drawFastHLine
 10460 ;; This function uses a non-reentrant model
 10461 ;;
 10462                           
 10463                           	psect	text53
 10464  00239A                     __ptext53:
 10465                           	opt stack 0
 10466  00239A                     _setAddrWindow:
 10467                           	opt stack 19
 10468                           
 10469                           ;incstack = 0
 10470                           ;setAddrWindow@x0 stored from wreg
 10471  00239A  6E15               	movwf	setAddrWindow@x0,c
 10472                           
 10473                           ;ST7735_TFT.c: 345: write_command(0x2A);
 10474  00239C  0E2A               	movlw	42
 10475  00239E  EC4E  F014         	call	_write_command
 10476                           
 10477                           ;ST7735_TFT.c: 346: write_data(0);
 10478  0023A2  0E00               	movlw	0
 10479  0023A4  EC46  F014         	call	_write_data
 10480                           
 10481                           ;ST7735_TFT.c: 347: write_data(x0 + colstart);
 10482  0023A8  5015               	movf	setAddrWindow@x0,w,c
 10483  0023AA  2459               	addwf	_colstart,w,c
 10484  0023AC  EC46  F014         	call	_write_data
 10485                           
 10486                           ;ST7735_TFT.c: 348: write_data(0);
 10487  0023B0  0E00               	movlw	0
 10488  0023B2  EC46  F014         	call	_write_data
 10489                           
 10490                           ;ST7735_TFT.c: 349: write_data(x1 + colstart);
 10491  0023B6  5013               	movf	setAddrWindow@x1,w,c
 10492  0023B8  2459               	addwf	_colstart,w,c
 10493  0023BA  EC46  F014         	call	_write_data
 10494                           
 10495                           ;ST7735_TFT.c: 350: write_command(0x2B);
 10496  0023BE  0E2B               	movlw	43
 10497  0023C0  EC4E  F014         	call	_write_command
 10498                           
 10499                           ;ST7735_TFT.c: 351: write_data(0);
 10500  0023C4  0E00               	movlw	0
 10501  0023C6  EC46  F014         	call	_write_data
 10502                           
 10503                           ;ST7735_TFT.c: 352: write_data(y0 + rowstart);
 10504  0023CA  5012               	movf	setAddrWindow@y0,w,c
 10505  0023CC  245C               	addwf	_rowstart,w,c
 10506  0023CE  EC46  F014         	call	_write_data
 10507                           
 10508                           ;ST7735_TFT.c: 353: write_data(0);
 10509  0023D2  0E00               	movlw	0
 10510  0023D4  EC46  F014         	call	_write_data
 10511                           
 10512                           ;ST7735_TFT.c: 354: write_data(y1 + rowstart);
 10513  0023D8  5014               	movf	setAddrWindow@y1,w,c
 10514  0023DA  245C               	addwf	_rowstart,w,c
 10515  0023DC  EC46  F014         	call	_write_data
 10516                           
 10517                           ;ST7735_TFT.c: 355: write_command(0x2C);
 10518  0023E0  0E2C               	movlw	44
 10519  0023E2  EC4E  F014         	call	_write_command
 10520  0023E6  0012               	return		;funcret
 10521  0023E8                     __end_of_setAddrWindow:
 10522                           	opt stack 0
 10523                           tblptru	equ	0xFF8
 10524                           tblptrh	equ	0xFF7
 10525                           tblptrl	equ	0xFF6
 10526                           tablat	equ	0xFF5
 10527                           prodh	equ	0xFF4
 10528                           prodl	equ	0xFF3
 10529                           intcon	equ	0xFF2
 10530                           postinc0	equ	0xFEE
 10531                           wreg	equ	0xFE8
 10532                           postdec1	equ	0xFE5
 10533                           fsr1l	equ	0xFE1
 10534                           indf2	equ	0xFDF
 10535                           postinc2	equ	0xFDE
 10536                           fsr2h	equ	0xFDA
 10537                           fsr2l	equ	0xFD9
 10538                           status	equ	0xFD8
 10539                           
 10540 ;; *************** function _write_data *****************
 10541 ;; Defined at:
 10542 ;;		line 156 in file "ST7735_TFT.c"
 10543 ;; Parameters:    Size  Location     Type
 10544 ;;  data_           1    wreg     unsigned char 
 10545 ;; Auto vars:     Size  Location     Type
 10546 ;;  data_           1   16[COMRAM] unsigned char 
 10547 ;; Return value:  Size  Location     Type
 10548 ;;		None               void
 10549 ;; Registers used:
 10550 ;;		wreg, status,2, cstack
 10551 ;; Tracked objects:
 10552 ;;		On entry : 0/0
 10553 ;;		On exit  : 0/0
 10554 ;;		Unchanged: 0/0
 10555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10557 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10559 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10560 ;;Total ram usage:        1 bytes
 10561 ;; Hardware stack levels used:    1
 10562 ;; Hardware stack levels required when called:    3
 10563 ;; This function calls:
 10564 ;;		_spiwrite
 10565 ;; This function is called by:
 10566 ;;		_Rcmd1
 10567 ;;		_Rcmd2red
 10568 ;;		_Rcmd3
 10569 ;;		_setAddrWindow
 10570 ;;		_drawPixel
 10571 ;;		_TFT_GreenTab_Initialize
 10572 ;;		_Bcmd
 10573 ;;		_setScrollDefinition
 10574 ;;		_Rcmd2green
 10575 ;;		_VerticalScroll
 10576 ;; This function uses a non-reentrant model
 10577 ;;
 10578                           
 10579                           	psect	text54
 10580  00288C                     __ptext54:
 10581                           	opt stack 0
 10582  00288C                     _write_data:
 10583                           	opt stack 19
 10584                           
 10585                           ;incstack = 0
 10586                           ;write_data@data_ stored from wreg
 10587  00288C  6E11               	movwf	write_data@data_,c
 10588                           
 10589                           ;ST7735_TFT.c: 158: PORTDbits.RD2 = 0;
 10590  00288E  9483               	bcf	3971,2,c	;volatile
 10591                           
 10592                           ;ST7735_TFT.c: 159: PORTCbits.RC5 = 1;
 10593  002890  8A82               	bsf	3970,5,c	;volatile
 10594                           
 10595                           ;ST7735_TFT.c: 160: spiwrite(data_);
 10596  002892  5011               	movf	write_data@data_,w,c
 10597  002894  EC2A  F014         	call	_spiwrite
 10598                           
 10599                           ;ST7735_TFT.c: 161: PORTDbits.RD2 = 1;
 10600  002898  8483               	bsf	3971,2,c	;volatile
 10601  00289A  0012               	return		;funcret
 10602  00289C                     __end_of_write_data:
 10603                           	opt stack 0
 10604                           tblptru	equ	0xFF8
 10605                           tblptrh	equ	0xFF7
 10606                           tblptrl	equ	0xFF6
 10607                           tablat	equ	0xFF5
 10608                           prodh	equ	0xFF4
 10609                           prodl	equ	0xFF3
 10610                           intcon	equ	0xFF2
 10611                           postinc0	equ	0xFEE
 10612                           wreg	equ	0xFE8
 10613                           postdec1	equ	0xFE5
 10614                           fsr1l	equ	0xFE1
 10615                           indf2	equ	0xFDF
 10616                           postinc2	equ	0xFDE
 10617                           fsr2h	equ	0xFDA
 10618                           fsr2l	equ	0xFD9
 10619                           status	equ	0xFD8
 10620                           
 10621 ;; *************** function _write_command *****************
 10622 ;; Defined at:
 10623 ;;		line 145 in file "ST7735_TFT.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;  cmd_            1    wreg     unsigned char 
 10626 ;; Auto vars:     Size  Location     Type
 10627 ;;  cmd_            1   16[COMRAM] unsigned char 
 10628 ;; Return value:  Size  Location     Type
 10629 ;;		None               void
 10630 ;; Registers used:
 10631 ;;		wreg, status,2, cstack
 10632 ;; Tracked objects:
 10633 ;;		On entry : 0/0
 10634 ;;		On exit  : 0/0
 10635 ;;		Unchanged: 0/0
 10636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10638 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10640 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10641 ;;Total ram usage:        1 bytes
 10642 ;; Hardware stack levels used:    1
 10643 ;; Hardware stack levels required when called:    3
 10644 ;; This function calls:
 10645 ;;		_spiwrite
 10646 ;; This function is called by:
 10647 ;;		_Rcmd1
 10648 ;;		_Rcmd2red
 10649 ;;		_Rcmd3
 10650 ;;		_setAddrWindow
 10651 ;;		_TFT_GreenTab_Initialize
 10652 ;;		_Bcmd
 10653 ;;		_setScrollDefinition
 10654 ;;		_Rcmd2green
 10655 ;;		_VerticalScroll
 10656 ;; This function uses a non-reentrant model
 10657 ;;
 10658                           
 10659                           	psect	text55
 10660  00289C                     __ptext55:
 10661                           	opt stack 0
 10662  00289C                     _write_command:
 10663                           	opt stack 19
 10664                           
 10665                           ;incstack = 0
 10666                           ;write_command@cmd_ stored from wreg
 10667  00289C  6E11               	movwf	write_command@cmd_,c
 10668                           
 10669                           ;ST7735_TFT.c: 147: PORTDbits.RD2 = 0;
 10670  00289E  9483               	bcf	3971,2,c	;volatile
 10671                           
 10672                           ;ST7735_TFT.c: 149: PORTCbits.RC5 = 0;
 10673  0028A0  9A82               	bcf	3970,5,c	;volatile
 10674                           
 10675                           ;ST7735_TFT.c: 150: spiwrite(cmd_);
 10676  0028A2  5011               	movf	write_command@cmd_,w,c
 10677  0028A4  EC2A  F014         	call	_spiwrite
 10678                           
 10679                           ;ST7735_TFT.c: 152: PORTDbits.RD2 = 1;
 10680  0028A8  8483               	bsf	3971,2,c	;volatile
 10681  0028AA  0012               	return		;funcret
 10682  0028AC                     __end_of_write_command:
 10683                           	opt stack 0
 10684                           tblptru	equ	0xFF8
 10685                           tblptrh	equ	0xFF7
 10686                           tblptrl	equ	0xFF6
 10687                           tablat	equ	0xFF5
 10688                           prodh	equ	0xFF4
 10689                           prodl	equ	0xFF3
 10690                           intcon	equ	0xFF2
 10691                           postinc0	equ	0xFEE
 10692                           wreg	equ	0xFE8
 10693                           postdec1	equ	0xFE5
 10694                           fsr1l	equ	0xFE1
 10695                           indf2	equ	0xFDF
 10696                           postinc2	equ	0xFDE
 10697                           fsr2h	equ	0xFDA
 10698                           fsr2l	equ	0xFD9
 10699                           status	equ	0xFD8
 10700                           
 10701 ;; *************** function _spiwrite *****************
 10702 ;; Defined at:
 10703 ;;		line 136 in file "ST7735_TFT.c"
 10704 ;; Parameters:    Size  Location     Type
 10705 ;;  spidata         1    wreg     unsigned char 
 10706 ;; Auto vars:     Size  Location     Type
 10707 ;;  spidata         1   15[COMRAM] unsigned char 
 10708 ;;  x               1   14[COMRAM] unsigned char 
 10709 ;; Return value:  Size  Location     Type
 10710 ;;		None               void
 10711 ;; Registers used:
 10712 ;;		wreg
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10721 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10722 ;;Total ram usage:        2 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    2
 10725 ;; This function calls:
 10726 ;;		Nothing
 10727 ;; This function is called by:
 10728 ;;		_write_command
 10729 ;;		_write_data
 10730 ;;		_drawFastVLine
 10731 ;;		_fillRectangle
 10732 ;;		_drawFastHLine
 10733 ;; This function uses a non-reentrant model
 10734 ;;
 10735                           
 10736                           	psect	text56
 10737  002854                     __ptext56:
 10738                           	opt stack 0
 10739  002854                     _spiwrite:
 10740                           	opt stack 21
 10741                           
 10742                           ;incstack = 0
 10743                           ;spiwrite@spidata stored from wreg
 10744  002854  6E10               	movwf	spiwrite@spidata,c
 10745                           
 10746                           ;ST7735_TFT.c: 138: char x;
 10747                           ;ST7735_TFT.c: 139: PIR1bits.SSPIF = 0;
 10748  002856  969E               	bcf	3998,3,c	;volatile
 10749                           
 10750                           ;ST7735_TFT.c: 140: x = SSPBUF;
 10751  002858  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 10752                           
 10753                           ;ST7735_TFT.c: 141: SSPBUF = spidata;
 10754  00285C  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 10755                           
 10756                           ;ST7735_TFT.c: 142: while (!SSPSTATbits.BF);
 10757  002860  D000               	goto	l220
 10758  002862                     l220:
 10759  002862  A0C7               	btfss	4039,0,c	;volatile
 10760  002864  D7FE               	goto	l220
 10761  002866  0012               	return		;funcret
 10762  002868                     __end_of_spiwrite:
 10763                           	opt stack 0
 10764                           tblptru	equ	0xFF8
 10765                           tblptrh	equ	0xFF7
 10766                           tblptrl	equ	0xFF6
 10767                           tablat	equ	0xFF5
 10768                           prodh	equ	0xFF4
 10769                           prodl	equ	0xFF3
 10770                           intcon	equ	0xFF2
 10771                           postinc0	equ	0xFEE
 10772                           wreg	equ	0xFE8
 10773                           postdec1	equ	0xFE5
 10774                           fsr1l	equ	0xFE1
 10775                           indf2	equ	0xFDF
 10776                           postinc2	equ	0xFDE
 10777                           fsr2h	equ	0xFDA
 10778                           fsr2l	equ	0xFD9
 10779                           status	equ	0xFD8
 10780                           
 10781 ;; *************** function ___wmul *****************
 10782 ;; Defined at:
 10783 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10784 ;; Parameters:    Size  Location     Type
 10785 ;;  multiplier      2   14[COMRAM] unsigned int 
 10786 ;;  multiplicand    2   16[COMRAM] unsigned int 
 10787 ;; Auto vars:     Size  Location     Type
 10788 ;;  product         2   18[COMRAM] unsigned int 
 10789 ;; Return value:  Size  Location     Type
 10790 ;;                  2   14[COMRAM] unsigned int 
 10791 ;; Registers used:
 10792 ;;		wreg, status,2, status,0, prodl, prodh
 10793 ;; Tracked objects:
 10794 ;;		On entry : 0/0
 10795 ;;		On exit  : 0/0
 10796 ;;		Unchanged: 0/0
 10797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10798 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10799 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10800 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10801 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10802 ;;Total ram usage:        6 bytes
 10803 ;; Hardware stack levels used:    1
 10804 ;; Hardware stack levels required when called:    2
 10805 ;; This function calls:
 10806 ;;		Nothing
 10807 ;; This function is called by:
 10808 ;;		_delay_ms
 10809 ;;		_drawChar
 10810 ;;		_Read_Volt
 10811 ;; This function uses a non-reentrant model
 10812 ;;
 10813                           
 10814                           	psect	text57
 10815  00276A                     __ptext57:
 10816                           	opt stack 0
 10817  00276A                     ___wmul:
 10818                           	opt stack 27
 10819                           
 10820                           ;incstack = 0
 10821  00276A  500F               	movf	___wmul@multiplier,w,c
 10822  00276C  0211               	mulwf	___wmul@multiplicand,c
 10823  00276E  CFF3 F013          	movff	prodl,___wmul@product
 10824  002772  CFF4 F014          	movff	prodh,___wmul@product+1
 10825  002776  500F               	movf	___wmul@multiplier,w,c
 10826  002778  0212               	mulwf	___wmul@multiplicand+1,c
 10827  00277A  50F3               	movf	prodl,w,c
 10828  00277C  2614               	addwf	___wmul@product+1,f,c
 10829  00277E  5010               	movf	___wmul@multiplier+1,w,c
 10830  002780  0211               	mulwf	___wmul@multiplicand,c
 10831  002782  50F3               	movf	prodl,w,c
 10832  002784  2614               	addwf	___wmul@product+1,f,c
 10833  002786  C013  F00F         	movff	___wmul@product,?___wmul
 10834  00278A  C014  F010         	movff	___wmul@product+1,?___wmul+1
 10835  00278E  D000               	goto	l696
 10836  002790                     l696:
 10837  002790  0012               	return		;funcret
 10838  002792                     __end_of___wmul:
 10839                           	opt stack 0
 10840                           tblptru	equ	0xFF8
 10841                           tblptrh	equ	0xFF7
 10842                           tblptrl	equ	0xFF6
 10843                           tablat	equ	0xFF5
 10844                           prodh	equ	0xFF4
 10845                           prodl	equ	0xFF3
 10846                           intcon	equ	0xFF2
 10847                           postinc0	equ	0xFEE
 10848                           wreg	equ	0xFE8
 10849                           postdec1	equ	0xFE5
 10850                           fsr1l	equ	0xFE1
 10851                           indf2	equ	0xFDF
 10852                           postinc2	equ	0xFDE
 10853                           fsr2h	equ	0xFDA
 10854                           fsr2l	equ	0xFD9
 10855                           status	equ	0xFD8
 10856                           
 10857 ;; *************** function _Deactivate_Buzzer *****************
 10858 ;; Defined at:
 10859 ;;		line 83 in file "utils.c"
 10860 ;; Parameters:    Size  Location     Type
 10861 ;;		None
 10862 ;; Auto vars:     Size  Location     Type
 10863 ;;		None
 10864 ;; Return value:  Size  Location     Type
 10865 ;;		None               void
 10866 ;; Registers used:
 10867 ;;		wreg, status,2
 10868 ;; Tracked objects:
 10869 ;;		On entry : 0/0
 10870 ;;		On exit  : 0/0
 10871 ;;		Unchanged: 0/0
 10872 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10873 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10874 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10875 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10876 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10877 ;;Total ram usage:        0 bytes
 10878 ;; Hardware stack levels used:    1
 10879 ;; Hardware stack levels required when called:    2
 10880 ;; This function calls:
 10881 ;;		Nothing
 10882 ;; This function is called by:
 10883 ;;		_Wait_One_Second_With_Beep
 10884 ;;		_Do_Beep
 10885 ;; This function uses a non-reentrant model
 10886 ;;
 10887                           
 10888                           	psect	text58
 10889  0028BA                     __ptext58:
 10890                           	opt stack 0
 10891  0028BA                     _Deactivate_Buzzer:
 10892                           	opt stack 25
 10893                           
 10894                           ;utils.c: 85: CCP2CON = 0x0;
 10895                           
 10896                           ;incstack = 0
 10897  0028BA  0E00               	movlw	0
 10898  0028BC  6EBA               	movwf	4026,c	;volatile
 10899                           
 10900                           ;utils.c: 86: PORTCbits.RC1 = 0;
 10901  0028BE  9282               	bcf	3970,1,c	;volatile
 10902  0028C0  0012               	return		;funcret
 10903  0028C2                     __end_of_Deactivate_Buzzer:
 10904                           	opt stack 0
 10905                           tblptru	equ	0xFF8
 10906                           tblptrh	equ	0xFF7
 10907                           tblptrl	equ	0xFF6
 10908                           tablat	equ	0xFF5
 10909                           prodh	equ	0xFF4
 10910                           prodl	equ	0xFF3
 10911                           intcon	equ	0xFF2
 10912                           postinc0	equ	0xFEE
 10913                           wreg	equ	0xFE8
 10914                           postdec1	equ	0xFE5
 10915                           fsr1l	equ	0xFE1
 10916                           indf2	equ	0xFDF
 10917                           postinc2	equ	0xFDE
 10918                           fsr2h	equ	0xFDA
 10919                           fsr2l	equ	0xFD9
 10920                           status	equ	0xFD8
 10921                           
 10922 ;; *************** function _Activate_Buzzer *****************
 10923 ;; Defined at:
 10924 ;;		line 60 in file "utils.c"
 10925 ;; Parameters:    Size  Location     Type
 10926 ;;		None
 10927 ;; Auto vars:     Size  Location     Type
 10928 ;;		None
 10929 ;; Return value:  Size  Location     Type
 10930 ;;		None               void
 10931 ;; Registers used:
 10932 ;;		wreg, status,2
 10933 ;; Tracked objects:
 10934 ;;		On entry : 0/0
 10935 ;;		On exit  : 0/0
 10936 ;;		Unchanged: 0/0
 10937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10938 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10939 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10940 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10941 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10942 ;;Total ram usage:        0 bytes
 10943 ;; Hardware stack levels used:    1
 10944 ;; Hardware stack levels required when called:    2
 10945 ;; This function calls:
 10946 ;;		Nothing
 10947 ;; This function is called by:
 10948 ;;		_Wait_One_Second_With_Beep
 10949 ;;		_Do_Beep
 10950 ;; This function uses a non-reentrant model
 10951 ;;
 10952                           
 10953                           	psect	text59
 10954  00287A                     __ptext59:
 10955                           	opt stack 0
 10956  00287A                     _Activate_Buzzer:
 10957                           	opt stack 25
 10958                           
 10959                           ;utils.c: 62: PR2 = 0b11111001 ;
 10960                           
 10961                           ;incstack = 0
 10962  00287A  0EF9               	movlw	249
 10963  00287C  6ECB               	movwf	4043,c	;volatile
 10964                           
 10965                           ;utils.c: 63: T2CON = 0b00000101 ;
 10966  00287E  0E05               	movlw	5
 10967  002880  6ECA               	movwf	4042,c	;volatile
 10968                           
 10969                           ;utils.c: 64: CCPR2L = 0b01001010 ;
 10970  002882  0E4A               	movlw	74
 10971  002884  6EBB               	movwf	4027,c	;volatile
 10972                           
 10973                           ;utils.c: 65: CCP2CON = 0b00111100 ;
 10974  002886  0E3C               	movlw	60
 10975  002888  6EBA               	movwf	4026,c	;volatile
 10976  00288A  0012               	return		;funcret
 10977  00288C                     __end_of_Activate_Buzzer:
 10978                           	opt stack 0
 10979                           tblptru	equ	0xFF8
 10980                           tblptrh	equ	0xFF7
 10981                           tblptrl	equ	0xFF6
 10982                           tablat	equ	0xFF5
 10983                           prodh	equ	0xFF4
 10984                           prodl	equ	0xFF3
 10985                           intcon	equ	0xFF2
 10986                           postinc0	equ	0xFEE
 10987                           wreg	equ	0xFE8
 10988                           postdec1	equ	0xFE5
 10989                           fsr1l	equ	0xFE1
 10990                           indf2	equ	0xFDF
 10991                           postinc2	equ	0xFDE
 10992                           fsr2h	equ	0xFDA
 10993                           fsr2l	equ	0xFD9
 10994                           status	equ	0xFD8
 10995                           
 10996 ;; *************** function _chkisr *****************
 10997 ;; Defined at:
 10998 ;;		line 18 in file "Interrupt.c"
 10999 ;; Parameters:    Size  Location     Type
 11000 ;;		None
 11001 ;; Auto vars:     Size  Location     Type
 11002 ;;		None
 11003 ;; Return value:  Size  Location     Type
 11004 ;;		None               void
 11005 ;; Registers used:
 11006 ;;		wreg, status,2, cstack
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11014 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11015 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11016 ;;Total ram usage:       14 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    1
 11019 ;; This function calls:
 11020 ;;		_INT0_ISR
 11021 ;; This function is called by:
 11022 ;;		Interrupt level 2
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           	psect	intcode
 11027  000008                     __pintcode:
 11028                           	opt stack 0
 11029  000008                     _chkisr:
 11030                           	opt stack 18
 11031                           
 11032                           ;incstack = 0
 11033  000008  CFFA F001          	movff	pclath,??_chkisr
 11034  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 11035  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 11036  000014  ED12  F010         	call	int_func,f	;refresh shadow registers
 11037                           pclatu	equ	0xFFB
 11038                           pclath	equ	0xFFA
 11039                           tblptru	equ	0xFF8
 11040                           tblptrh	equ	0xFF7
 11041                           tblptrl	equ	0xFF6
 11042                           tablat	equ	0xFF5
 11043                           prodh	equ	0xFF4
 11044                           prodl	equ	0xFF3
 11045                           intcon	equ	0xFF2
 11046                           postinc0	equ	0xFEE
 11047                           fsr0l	equ	0xFE9
 11048                           wreg	equ	0xFE8
 11049                           postdec1	equ	0xFE5
 11050                           fsr1l	equ	0xFE1
 11051                           indf2	equ	0xFDF
 11052                           postinc2	equ	0xFDE
 11053                           fsr2h	equ	0xFDA
 11054                           fsr2l	equ	0xFD9
 11055                           status	equ	0xFD8
 11056                           
 11057                           	psect	intcode_body
 11058  002024                     __pintcode_body:
 11059                           	opt stack 18
 11060  002024                     int_func:
 11061                           	opt stack 18
 11062  002024  0006               	pop		; remove dummy address from shadow register refresh
 11063  002026  CFEA F004          	movff	fsr0h,??_chkisr+3
 11064  00202A  CFE1 F005          	movff	fsr1l,??_chkisr+4
 11065  00202E  CFE2 F006          	movff	fsr1h,??_chkisr+5
 11066  002032  CFD9 F007          	movff	fsr2l,??_chkisr+6
 11067  002036  CFDA F008          	movff	fsr2h,??_chkisr+7
 11068  00203A  CFF3 F009          	movff	prodl,??_chkisr+8
 11069  00203E  CFF4 F00A          	movff	prodh,??_chkisr+9
 11070  002042  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 11071  002046  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 11072  00204A  CFF8 F00D          	movff	tblptru,??_chkisr+12
 11073  00204E  CFF5 F00E          	movff	tablat,??_chkisr+13
 11074                           
 11075                           ;Interrupt.c: 20: if (INTCONbits.INT0IF == 1) INT0_ISR();
 11076  002052  A2F2               	btfss	intcon,1,c	;volatile
 11077  002054  D003               	goto	i2l651
 11078  002056  EC61  F014         	call	_INT0_ISR	;wreg free
 11079  00205A  D000               	goto	i2l651
 11080  00205C                     i2l651:
 11081  00205C  C00E  FFF5         	movff	??_chkisr+13,tablat
 11082  002060  C00D  FFF8         	movff	??_chkisr+12,tblptru
 11083  002064  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 11084  002068  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 11085  00206C  C00A  FFF4         	movff	??_chkisr+9,prodh
 11086  002070  C009  FFF3         	movff	??_chkisr+8,prodl
 11087  002074  C008  FFDA         	movff	??_chkisr+7,fsr2h
 11088  002078  C007  FFD9         	movff	??_chkisr+6,fsr2l
 11089  00207C  C006  FFE2         	movff	??_chkisr+5,fsr1h
 11090  002080  C005  FFE1         	movff	??_chkisr+4,fsr1l
 11091  002084  C004  FFEA         	movff	??_chkisr+3,fsr0h
 11092  002088  C003  FFE9         	movff	??_chkisr+2,fsr0l
 11093  00208C  C002  FFFB         	movff	??_chkisr+1,pclatu
 11094  002090  C001  FFFA         	movff	??_chkisr,pclath
 11095  002094  0011               	retfie		f
 11096  002096                     __end_of_chkisr:
 11097                           	opt stack 0
 11098                           pclatu	equ	0xFFB
 11099                           pclath	equ	0xFFA
 11100                           tblptru	equ	0xFF8
 11101                           tblptrh	equ	0xFF7
 11102                           tblptrl	equ	0xFF6
 11103                           tablat	equ	0xFF5
 11104                           prodh	equ	0xFF4
 11105                           prodl	equ	0xFF3
 11106                           intcon	equ	0xFF2
 11107                           postinc0	equ	0xFEE
 11108                           fsr0h	equ	0xFEA
 11109                           fsr0l	equ	0xFE9
 11110                           wreg	equ	0xFE8
 11111                           postdec1	equ	0xFE5
 11112                           fsr1h	equ	0xFE2
 11113                           fsr1l	equ	0xFE1
 11114                           indf2	equ	0xFDF
 11115                           postinc2	equ	0xFDE
 11116                           fsr2h	equ	0xFDA
 11117                           fsr2l	equ	0xFD9
 11118                           status	equ	0xFD8
 11119                           
 11120 ;; *************** function _INT0_ISR *****************
 11121 ;; Defined at:
 11122 ;;		line 24 in file "Interrupt.c"
 11123 ;; Parameters:    Size  Location     Type
 11124 ;;		None
 11125 ;; Auto vars:     Size  Location     Type
 11126 ;;		None
 11127 ;; Return value:  Size  Location     Type
 11128 ;;		None               void
 11129 ;; Registers used:
 11130 ;;		wreg, status,2
 11131 ;; Tracked objects:
 11132 ;;		On entry : 0/0
 11133 ;;		On exit  : 0/0
 11134 ;;		Unchanged: 0/0
 11135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11136 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11137 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11139 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11140 ;;Total ram usage:        0 bytes
 11141 ;; Hardware stack levels used:    1
 11142 ;; This function calls:
 11143 ;;		Nothing
 11144 ;; This function is called by:
 11145 ;;		_chkisr
 11146 ;; This function uses a non-reentrant model
 11147 ;;
 11148                           
 11149                           	psect	text61
 11150  0028C2                     __ptext61:
 11151                           	opt stack 0
 11152  0028C2                     _INT0_ISR:
 11153                           	opt stack 18
 11154                           
 11155                           ;Interrupt.c: 26: INTCONbits.INT0IF=0;
 11156                           
 11157                           ;incstack = 0
 11158  0028C2  92F2               	bcf	intcon,1,c	;volatile
 11159                           
 11160                           ;Interrupt.c: 27: INT0_Flag= 1;
 11161  0028C4  0E01               	movlw	1
 11162  0028C6  6E4D               	movwf	_INT0_Flag,c
 11163  0028C8  0012               	return		;funcret
 11164  0028CA                     __end_of_INT0_ISR:
 11165                           	opt stack 0
 11166                           pclatu	equ	0xFFB
 11167                           pclath	equ	0xFFA
 11168                           tblptru	equ	0xFF8
 11169                           tblptrh	equ	0xFF7
 11170                           tblptrl	equ	0xFF6
 11171                           tablat	equ	0xFF5
 11172                           prodh	equ	0xFF4
 11173                           prodl	equ	0xFF3
 11174                           intcon	equ	0xFF2
 11175                           postinc0	equ	0xFEE
 11176                           fsr0h	equ	0xFEA
 11177                           fsr0l	equ	0xFE9
 11178                           wreg	equ	0xFE8
 11179                           postdec1	equ	0xFE5
 11180                           fsr1h	equ	0xFE2
 11181                           fsr1l	equ	0xFE1
 11182                           indf2	equ	0xFDF
 11183                           postinc2	equ	0xFDE
 11184                           fsr2h	equ	0xFDA
 11185                           fsr2l	equ	0xFD9
 11186                           status	equ	0xFD8
 11187                           pclatu	equ	0xFFB
 11188                           pclath	equ	0xFFA
 11189                           tblptru	equ	0xFF8
 11190                           tblptrh	equ	0xFF7
 11191                           tblptrl	equ	0xFF6
 11192                           tablat	equ	0xFF5
 11193                           prodh	equ	0xFF4
 11194                           prodl	equ	0xFF3
 11195                           intcon	equ	0xFF2
 11196                           postinc0	equ	0xFEE
 11197                           fsr0h	equ	0xFEA
 11198                           fsr0l	equ	0xFE9
 11199                           wreg	equ	0xFE8
 11200                           postdec1	equ	0xFE5
 11201                           fsr1h	equ	0xFE2
 11202                           fsr1l	equ	0xFE1
 11203                           indf2	equ	0xFDF
 11204                           postinc2	equ	0xFDE
 11205                           fsr2h	equ	0xFDA
 11206                           fsr2l	equ	0xFD9
 11207                           status	equ	0xFD8
 11208                           
 11209                           	psect	rparam
 11210  0000                     pclatu	equ	0xFFB
 11211                           pclath	equ	0xFFA
 11212                           tblptru	equ	0xFF8
 11213                           tblptrh	equ	0xFF7
 11214                           tblptrl	equ	0xFF6
 11215                           tablat	equ	0xFF5
 11216                           prodh	equ	0xFF4
 11217                           prodl	equ	0xFF3
 11218                           intcon	equ	0xFF2
 11219                           postinc0	equ	0xFEE
 11220                           fsr0h	equ	0xFEA
 11221                           fsr0l	equ	0xFE9
 11222                           wreg	equ	0xFE8
 11223                           postdec1	equ	0xFE5
 11224                           fsr1h	equ	0xFE2
 11225                           fsr1l	equ	0xFE1
 11226                           indf2	equ	0xFDF
 11227                           postinc2	equ	0xFDE
 11228                           fsr2h	equ	0xFDA
 11229                           fsr2l	equ	0xFD9
 11230                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    475
    Data        63
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     113
    BANK0           128     15      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(BANK0[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(BANK0[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[7]), STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[12]), 
		 -> STR_5(CODE[22]), STR_4(CODE[2]), STR_3(CODE[3]), STR_2(CODE[5]), 
		 -> STR_1(CODE[6]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(BANK0[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Initialize_LCD_Screen->_drawtext
    _Initialize_LCD_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Init_UART->_OpenUSART
    _Day_Mode->_PED_Control
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Set_NS_LT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EW_LT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _update_LCD_misc->_drawtext
    ___fttol->___ftmul
    ___ftmul->___ftpack
    ___awmod->___fttol
    _Read_Volt->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Erase_Star->_drawtext
    _Draw_Star->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_LCD_Screen->_drawtext
    _Day_Mode->_PED_Control
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _Erase_Star->_drawtext
    _Draw_Star->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  822613
                           _Day_Mode
                        _Do_Flashing
                           _Init_ADC
                          _Init_UART
              _Initialize_LCD_Screen
                         _Night_Mode
                          _Read_Volt
                             ___ftge
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  219657
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD_Screen                                0     0      0   65973
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0  190764
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  339749
                        _PED_Control
                             _Set_EW
                          _Set_EW_LT
                             _Set_NS
                          _Set_NS_LT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0  120089
                                             12 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28763
                                             64 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   91196
                          _Draw_Star
                         _Erase_Star
                   _Wait_Half_Second
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Set_NS_LT                                            1     1      0   24892
                                              0 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              0 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW_LT                                            1     1      0   24892
                                              0 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              0 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          4     3      1  120092
                                             66 COMRAM     1     0      1
                                             12 BANK0      3     3      0
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28574
                                             64 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1355
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   91196
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                          _Draw_Star
                         _Erase_Star
                   _Wait_Half_Second
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      5     5      0   36546
                                              7 BANK0      5     5      0
                          _Read_Volt
                            ___awmod
                             ___ftge
                            ___ftmul
                            ___fttol
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     501
                                             37 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    2716
                                             22 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1473
                                             52 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _Read_Volt                                            9     6      3    5739
                                             41 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2206
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Erase_Star                                           0     0      0   27325
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _Draw_Star                                            0     0      0   27325
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1799
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25526
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10644
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Draw_Star
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       _Erase_Star
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       _Wait_Half_Second
       _update_LCD_misc
         _Read_Volt
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul
           _get_full_ADC
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         ___ftge
         ___ftmul
           ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Init_ADC
   _Init_UART
     _OpenUSART
   _Initialize_LCD_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EW_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS_LT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Read_Volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   ___ftge

 _chkisr (ROOT)
   _INT0_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      F      5A       5       70.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CB      34        0.0%
DATA                 0      0      CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Oct 21 17:43:49 2025

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 27B8                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                                l99 248E                        ___awdiv@sign 0014  
               ___wmul@multiplicand 0011            update_LCD_color@Circle_Y 0043  
                               l101 2492                                 l102 2498  
                               l110 244A                                 l103 249C  
                               l111 2450                                 l120 2528  
                               l104 24C0                                 l112 2454  
                               l121 252C                                 l113 2478  
                               l122 2550                                 l130 24E4  
                               l210 2340                                 l131 2508  
                               l220 2862                                 l140 22F4  
                               l108 2446                                 l117 251E  
                               l126 24D6                                 l119 2522  
                               l143 1B98                                 l128 24DA  
                               l152 1CCE                                 l129 24E0  
                               l147 1C2E                                 l323 19DC  
                               l324 1948                                 l270 1FA0  
                               l334 0E32                                 l326 19B8  
                               l327 19DA                                 l264 2714  
                               l352 126C                                 l286 11FC  
                               l606 2822                                 l295 1152  
                               l623 2172                                 l288 10D6  
                               l368 1F18                                 l626 2796  
                               l629 27B6                                 l485 1AA8  
                               l902 2022                                 l478 0AF6  
                               l494 10A6                                 l914 2608  
                               l690 20E8                                 l691 20EA  
                               l684 20C2                                 l693 2104  
                               l696 2790                                 l688 20DC  
                               l689 20DE                                 l889 1DFA  
                 ?_Wait_Half_Second 0001       update_LCD_PED_Count@direction 0042  
                               _PR2 000FCB                   _Deactivate_Buzzer 28BA  
                               _dir 005A                                 _nbr 00AA  
                               _txt 0047                      drawFastHLine@w 0017  
                    drawFastHLine@x 0020                      drawFastHLine@y 0016  
                      ___awmod@sign 003A             __end_of_update_LCD_misc 0D70  
                               wreg 000FE8                  ??_Wait_Half_Second 000F  
                ?_Deactivate_Buzzer 0001                     ??_fillRectangle 001B  
                      __CFG_LVP$OFF 000000             _TFT_GreenTab_Initialize 2740  
                      ___ftdiv@cntr 0024                     _Flashing_Status 004C  
                      ___ftdiv@sign 0029                        __CFG_WDT$OFF 000000  
                              l1004 1B6E                                l1015 1B46  
                              l1112 181E                      drawFastVLine@h 0017  
                              l1091 1646                                l1076 1900  
                              l1253 25CC                                l1085 1E90  
                              l1079 18CC                      drawFastVLine@x 0020  
                    drawFastVLine@y 0016                                l5111 1DF0  
                              l5103 1DD4                                l5121 0876  
                              l5107 1DE0                                l5125 094A  
                              l4511 240E                                l5135 19E2  
                              l5039 0E18                                l5145 1A98  
                              l5129 0A20                                l5401 2686  
                              l5313 19BC                                l4507 23F2  
                              l4611 259A                                l4531 1AF6  
                              l4523 1ABA                                l5091 1DA4  
                              l5139 1A3E                                l5067 0F08  
                              l5411 26A8                                l5331 1EA2  
                              l5323 19D6                                l4605 11F8  
                              l4613 25A0                                l5093 1DAE  
                              l5085 1D8E                                l5405 2694  
                              l5317 19C6                                l5309 19AE  
                              l4703 1472                                l4551 1B60  
                              l4535 1B0E                                l4527 1ACA  
                              l5095 1DB6                                l5079 1D7C  
                              l5183 0FDA                                l5175 0F22  
                              l5335 1EDA                                l4481 1F62  
                              l4545 1B4E                                l4537 1B2E  
                              l4529 1AD6                                l4633 183E  
                              l5193 108A                                l3905 20D4  
                              l5345 1F00                                l4491 1F88  
                              l4563 10C4                                l4715 14C2  
                              l4539 1B3A                                l4635 1858  
                              l4803 15F2                                l5371 2532  
                              l5355 24A2                                l5363 245A  
                              l5187 1030                                l5179 0F7E  
                              l5347 1F0E                                l5291 1912  
                              l4493 1F96                                l4477 1F2A  
                              l4581 114A                                l4573 10E2  
                              l4813 1620                                l4805 15F8  
                              l4901 17C8                                l4741 1252  
                              l4591 119C                                l4567 10D2  
                              l4559 10B8                                l4727 1532  
                              l4719 14E0                                l4639 1866  
                              l5391 22D6                                l4577 1112  
                              l4569 10DA                                l4729 153A  
                              l4681 25E4                                l4841 1FFC  
                              l4833 1FD4                                l4825 1FB8  
                              l4809 160A                                l4913 180C  
                              l4905 17DC                                l5393 22DC  
                              l5385 22BA                                l4761 1320  
                              l5297 1980                                l4499 26F6  
                              l4579 1146                                l4659 18A6  
                              l4835 1FDE                                l4907 17EA  
                              l5379 24EA                                l4597 11C8  
                              l4589 1174                                l4765 26BE  
                              l4669 18DA                                l4837 1FE6  
                              l4845 2008                                l4829 1FC6  
                              l4861 1E60                                l4781 1596  
                              l4909 17F4                                l5397 22E2  
                              l4757 12CE                                l5661 227A  
                              l3893 20BA                                l3885 20A8  
                              l5629 1C8C                                l4599 11F0  
                              l4767 26C8                                l4775 156E  
                              l4951 0BBC                                l5583 1BEC  
                              l5647 2240                                l4849 2018  
                              l4857 1E2E                                l4777 1588  
                              l4961 0BDE                                l4945 0BA8  
                              l5577 1BD4                                l5665 2284  
                              l3897 20C6                                l3889 20B2  
                              l4867 1E8C                                l4795 15CA  
                              l5667 2294                                l5683 1D34  
                              l4877 1758                                l4981 0C24  
                              l4973 0C08                                l4965 0BEC  
                              l4949 0BB6                                l5693 1D4E  
                              l4799 15DC                                l4895 17B2  
                              l4983 0C2A                                l4977 0C16  
                              l4969 0BFA                                l5689 1D44  
                              l4899 17C2                                STR_1 FFE4  
                              STR_2 FFEA                                STR_3 FFF7  
                              STR_4 FFFC                                STR_5 FFAA  
                              STR_6 FFC0                                STR_7 FFD6  
                              STR_8 FFCC                                STR_9 FFDD  
                              u3220 11AA                                u4020 1ED0  
                              u3301 184E                                u3350 149C  
                              u4150 1D2E                                u4160 1D30  
                              u3281 1830                                u3601 174A  
                              u3451 1560                                u3620 1776  
                              u3700 0B3C                                u3471 157E  
                              u3625 176E                                _MODE 0051  
                              u3690 0B3A                                u3940 1940  
                              u2990 1F58                                u3950 1976  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 000F  
                              _main 1CD0                                _font FDCF  
                      ___ftpack@arg 000F                        ___ftpack@exp 0012  
                              fsr0h 000FEA                                fsr1h 000FE2  
                    ??_get_full_ADC 0011                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 005D                                _volt 0044  
                   drawFastHLine@hi 001E                     drawFastHLine@lo 001F  
          __end_of_update_LCD_color 0AF8                                pclat 000FFA  
          __end_of_update_LCD_count 10A8                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0018                     ??_drawFastHLine 001A  
                   ??_drawFastVLine 001A                        ___ftmul@cntr 0024  
                      ___param_bank 000010                        ___ftmul@sign 0025  
                      ___fttol@exp1 0034                    _Flashing_Request 004B  
                      ___fttol@lval 0030                        _Act_Mode_Txt 0064  
                  __end_of_INT0_ISR 28CA                         _Do_Flashing 223C  
         __end_of_Deactivate_Buzzer 28C2                     drawFastVLine@hi 001E  
                   drawFastVLine@lo 001F                      Read_Volt@nStep 0031  
                       _SW_EWLT_Txt 006A                               ?_main 0001  
                   __end_of___awdiv 1DFC                     drawCircle@ddF_x 0024  
                             STR_10 FFEF                     drawCircle@ddF_y 0026  
                             STR_11 FFF3                               STR_12 FFFC  
                             STR_13 FFFA                     __end_of___awmod 2024  
                   __end_of___ftdiv 1902                     __end_of___ftmul 1648  
                             _T0CON 000FD5                     ___awdiv@divisor 0011  
                   __end_of___fttol 1820                               _T2CON 000FCA  
                             _T3CON 000FB1                               i2l651 205C  
                   ___awdiv@counter 0013                     drawCircle@color 0020  
                             _RCSTA 000FAB                               _TMR0H 000FD7  
                             _TMR0L 000FD6                               _TMR3H 000FB3  
                             _TMR3L 000FB2                               _SPBRG 000FAF  
                             _PORTD 000F83                               _TRISA 000F92  
                             _TRISB 000F93                               _TRISC 000F94  
                             _TRISD 000F95                               _TRISE 000F96  
                             _TXREG 000FAD                               _TXSTA 000FAC  
                             _Count 0049                        ?_PED_Control 0043  
                             _Rcmd1 1336                               _Rcmd3 1648  
                       _SW_NSLT_Txt 006E                       drawRect@color 0029  
                     ___awtoft@sign 001A                          _Erase_Star 260A  
                             _font2 FECE               fillCircleHelper@ddF_x 002F  
             fillCircleHelper@ddF_y 0031                   ??_Wait_One_Second 0041  
                     ___ftpack@sign 0013               fillCircleHelper@delta 0029  
             fillCircleHelper@color 002B                      __CFG_BOREN$OFF 000000  
                             tablat 000FF5                               status 000FD8  
            ??_update_LCD_PED_Count 0042                    __end_of_Day_Mode 1C30  
                    _Wait_N_Seconds 267E                     write_data@data_ 0011  
                   __initialization 21DA                        __end_of_main 1D66  
                      __end_of_font FECE                    __end_of_Init_ADC 28BA  
                  __end_of_Rcmd2red 2590                          _Night_Mode 1C30  
                            ??_main 0044                       ___fttol@sign1 002F  
                     __activetblptr 000002               Wait_N_Seconds@seconds 00D7  
                 __end_of_LCD_Reset 287A                        _SW_EWPED_Txt 006C  
         ??_TFT_GreenTab_Initialize 001B                    ?_update_LCD_misc 0001  
                            ?_Rcmd1 0001                              ?_Rcmd3 0001  
                __size_of_Draw_Star 003A                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 00D7  
                  ___awdiv@dividend 000F                    __end_of___awtoft 260A  
                  __end_of___ftpack 1B70                              _OSCCON 000FD3  
                __size_of_Init_UART 0014                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds 26B4  
                      _SW_NSPED_Txt 0070                  __size_of_Read_Volt 006E  
                  __end_of_delay_ms 2348                              _Set_EW 250A  
                            _Set_NS 247A                    __end_of_fillRect 2432  
                  __end_of_drawChar 11FE                    __end_of_drawRect 21DA  
                __size_of_Set_EW_LT 0048                  __size_of_OpenUSART 0070  
                            ___ftge 1DFC                  __size_of_Set_NS_LT 0048  
          __size_of_Activate_Buzzer 0012                              ___wmul 276A  
                         ??___awdiv 0013           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext 1550                           ??___awmod 0039  
                         ??___ftdiv 0021                           ??___ftmul 001D  
                         ??___fttol 002A                              _chkisr 0008  
                            _buffer 00AC                              clear_0 21E0  
                            clear_1 21EC                    ___awdiv@quotient 0015  
                   ___awmod@divisor 0037                          _Timing_Txt 0080  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0039  
                      drawtext@size 003E                              _strcpy 26B4  
                            _strlen 2590               ___ftmul@f3_as_product 0021  
           ??_Initialize_LCD_Screen 0041                __end_of_get_full_ADC 27B8  
                      __pdataCOMRAM 005D  __size_of_Wait_One_Second_With_Beep 0022  
                       Set_EW@color 00CB                        __mediumconst FDCE  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                         ?_Erase_Star 0001  
                  __end_of_spiwrite 2868                         Set_NS@color 00CB  
                        __accesstop 0080             __end_of__initialization 2232  
                         ?_INT0_ISR 0001                          ___ftge@ff1 000F  
                        ___ftge@ff2 0012                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 001B  
                        ___ftdiv@f2 001E                          ___ftdiv@f3 0025  
                        ___awtoft@c 0017                          ___ftmul@f1 0017  
                        ___ftmul@f2 001A                          ___fttol@f1 0026  
                     __end_of_Rcmd1 1446                       __end_of_Rcmd3 173A  
                    __pcstackCOMRAM 0001                   __end_of_Draw_Star 267E  
                      __pidataBANK0 2716                       __end_of_font2 FFAA  
                       ?_Night_Mode 0001                   __end_of_Init_UART 2854  
                    drawPixel@color 0017              __size_of_write_command 0010  
                 __end_of_Read_Volt 2174                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_Set_EW_LT 250A                   __end_of_OpenUSART 2106  
                 __end_of_Set_NS_LT 247A                __size_of_PED_Control 005A  
              Read_Volt@ADC_Channel 0030                          __pbssBANK0 00AA  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
                        ??_INT0_ISR 0001           __size_of_Wait_Half_Second 001A  
                   spiwrite@spidata 0010                   ?_update_LCD_color 0041  
                 ?_update_LCD_count 0041                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  ??_update_LCD_color 0042  
                ??_update_LCD_count 0042                             ?___ftge 000F  
                           ?___wmul 000F                             ?_chkisr 0001  
               __size_of_Erase_Star 003A              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA                        ?_Do_Flashing 0001  
         update_LCD_PED_Count@count 0041                           ?___awtoft 0017  
                         ?___ftpack 000F                     _Wait_One_Second 27F6  
                        _fillCircle 2348                             ?_strcpy 000F  
                           ?_strlen 000F                   ??_Activate_Buzzer 000F  
                        _fillScreen 27DA                          _drawCircle 0D70  
                        ??_Day_Mode 0044                           ?_delay_ms 0015  
                         ?_fillRect 0021           update_LCD_count@direction 0042  
                         ?_drawChar 002C                             _SSPCON1 000FC6  
                         ?_drawRect 0021                             _SSPSTAT 000FC7  
             __end_of_fillRectangle 19DE                           ?_drawtext 0037  
                           _SW_EWLT 0054                          ??_Init_ADC 000F  
                           _SW_NSLT 0056                          ??_Rcmd2red 0012  
               __size_of_Night_Mode 00A0                       _write_command 289C  
                           __Hparam 0000                             __Lparam 0000  
                   __size_of_Set_EW 0048                     __size_of_Set_NS 0048  
             __end_of_drawFastHLine 1F1A                   __end_of_drawPixel 2716  
             __end_of_drawFastVLine 1FA2                    _fillCircleHelper 11FE  
                   __size_of___ftge 0096                             ___awdiv 1D66  
                           ___awmod 1FA2                             ___ftdiv 1820  
                   __size_of___wmul 0028                             ___ftmul 1550  
                           ___fttol 173A               __size_of_get_full_ADC 0026  
                   __size_of_chkisr 208E                           ?_spiwrite 0001  
                           __pcinit 21DA                          ??___awtoft 001A  
                        ??___ftpack 0014                             __ramtop 1000  
                           __ptext0 1CD0                             __ptext1 1C30  
                           __ptext2 001C                             __ptext3 27DA  
                           __ptext4 1902                             __ptext5 2174  
                           __ptext6 1E92                             __ptext7 2740  
                           __ptext8 1648                             __ptext9 2552  
          _Light_Sensor_Voltage_Txt 0096                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                         _T3CONbits 000FB1                    ___awmod@dividend 0035  
                        ??_delay_ms 0017                       drawtext@_text 0038  
                     drawtext@color 003A                          ??_fillRect 0026  
                        ??_drawChar 0033                           _LCD_Reset 2868  
                         _INT0_Flag 004D                           _INT1_Flag 004E  
                        ??_drawRect 002B                           _INT2_Flag 004F  
                     _setAddrWindow 239A                      __pintcode_body 2024  
                drawFastHLine@color 0018                          delay_ms@ms 0015  
              end_of_initialization 2232                          ??_drawtext 003F  
                    ?_write_command 0001                       __Lmediumconst FDCE  
                           int_func 2024                           _PED_Count 0053  
                      _get_full_ADC 2792                        PED_Control@i 00D8  
                         _EW_PED_SW 004A       __size_of_update_LCD_PED_Count 00CC  
               update_LCD_misc@volt 00D4             __end_of_Wait_One_Second 2810  
                         _RCSTAbits 000FAB                             postdec1 000FE5  
                           postinc0 000FEE                             postinc2 000FDE  
                        ??_spiwrite 000F                             strlen@s 000F  
                   fillCircle@color 003F                         ?_fillCircle 0039  
                         _PORTAbits 000F80                    drawtext@cursor_x 00D1  
                  drawtext@cursor_y 00D0                           _PORTBbits 000F81  
                         _PORTCbits 000F82                           _PORTDbits 000F83  
                         _PORTEbits 000F84                         ?_fillScreen 0022  
                         _NS_PED_SW 0052                         ?_drawCircle 001A  
    __size_of_Initialize_LCD_Screen 077A                          drawChar@bg 0030  
     __end_of_Initialize_LCD_Screen 0796                           _TRISCbits 000F94  
                      ??_Erase_Star 0041                      ?_setAddrWindow 0012  
                        ?_LCD_Reset 0001                    ??_Wait_N_Seconds 0043  
                  drawtext@textsize 00CC            __size_of_update_LCD_misc 0278  
                        drawPixel@x 0019                          drawPixel@y 0016  
                  _Wait_Half_Second 2810                         ___ftdiv@exp 0028  
                         _TXSTAbits 000FAC                  PED_Control@Num_Sec 0043  
                get_full_ADC@result 0013                   __size_of_INT0_ISR 0008  
                       ___ftmul@exp 0020                      __end_of_Set_EW 2552  
                    __end_of_Set_NS 24C2                        _Light_Sensor 0050  
                    __end_of___ftge 1E92                       Read_Volt@volt 002D  
                    __end_of___wmul 2792                  __end_of_Erase_Star 2644  
                     delay_ms@count 0019                          _write_data 288C  
                     __pidataCOMRAM 282A                      __end_of_chkisr 2096  
                         _Draw_Star 2644                        ??_Night_Mode 0044  
          ?_TFT_GreenTab_Initialize 0001                          drawtext@bg 003C  
              __size_of_Do_Flashing 0060                      __end_of_strcpy 26E6  
                    __end_of_strlen 25CE                 start_initialization 21DA  
                         _Init_UART 2840                   __size_of_Day_Mode 00C0  
                         _Read_Volt 2106                     ??_write_command 0011  
                         _Set_EW_LT 24C2                           _OpenUSART 2096  
                         _Set_NS_LT 2432                 __size_of_fillCircle 0052  
                  __CFG_OSC$INTIO67 000000                   __size_of_Init_ADC 000E  
                __end_of_Night_Mode 1CD0                   __size_of_Rcmd2red 003E  
               __size_of_fillScreen 001C                     Wait_N_Seconds@I 00D8  
               __size_of_drawCircle 01AE                            ??_Set_EW 0044  
                          ??_Set_NS 0044                     _Activate_Buzzer 287A  
                  ?_Wait_One_Second 0001                            ??___ftge 0015  
                          ??___wmul 0013                            ??_chkisr 0001  
                       __pdataBANK0 0080                          ?_Draw_Star 0001  
                   setAddrWindow@x0 0015                     setAddrWindow@x1 0013  
                   setAddrWindow@y0 0012                     setAddrWindow@y1 0014  
                          ??_strcpy 0013                            ??_strlen 0011  
                      _PED_EW_Count 00A4           __size_of_update_LCD_color 0362  
         __size_of_update_LCD_count 018A                   __size_of___awtoft 003C  
                 __size_of___ftpack 00C6                         __pbssCOMRAM 0044  
                     ??_PED_Control 0044                          ?_Init_UART 0001  
                   ??_setAddrWindow 0015                       __pcstackBANK0 00CB  
                      _PED_NS_Count 00A7                          ?_Read_Volt 002A  
                       ??_LCD_Reset 001B            __end_of_fillCircleHelper 1336  
                 __size_of_delay_ms 0052          ?_Wait_One_Second_With_Beep 0001  
                 __size_of_fillRect 004A                   __size_of_drawChar 0156  
                        ?_Set_EW_LT 0001                          ?_OpenUSART 000F  
                 __size_of_drawRect 0066                          ?_Set_NS_LT 0001  
                 __size_of_drawtext 010A                   ??_update_LCD_misc 0041  
                         __pintcode 0008     __end_of_TFT_GreenTab_Initialize 276A  
                     __pmediumconst FDCE                            ?___awdiv 000F  
                          ?___awmod 0035                            ?___ftdiv 001B  
                          ?___ftmul 0017                            ?___fttol 0026  
                         __tft_type 0058                           _direction 005B  
                drawFastVLine@color 0018                         ?_write_data 0001  
                         _drawPixel 26E6                   __size_of_spiwrite 0014  
                    __size_of_Rcmd1 0110                      __size_of_Rcmd3 00F2  
 __end_of_Wait_One_Second_With_Beep 27DA                 __end_of_PED_Control 22F6  
           __end_of_Activate_Buzzer 288C                            _INT0_ISR 28C2  
                    ___wmul@product 0013                            _PIE1bits 000F9D  
                          _PIR1bits 000F9E                            _PIR2bits 000FA1  
                          _EW_Count 005E                           fillRect@h 0023  
                         fillRect@i 002A                           fillRect@w 0022  
                         fillRect@x 0029                           fillRect@y 0021  
                       ??_Draw_Star 0041                           drawChar@c 002D  
                         drawChar@i 0036                           drawChar@j 0035  
                      ??_fillCircle 0041                           drawChar@x 0034  
                         drawChar@y 002C                          ?_drawPixel 0016  
            __size_of_fillRectangle 00DC                            _NS_Count 00A1  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second 282A  
                 ___wmul@multiplier 000F                        ??_fillScreen 0024  
                         drawRect@h 0027                           drawRect@w 0025  
                         drawRect@x 0021                           drawRect@y 0023  
                     _FlashingR_Txt 0066                       _FlashingS_Txt 0068  
                      ??_drawCircle 0022        __end_of_update_LCD_PED_Count 1AAA  
                          _SW_EWPED 0055               update_LCD_color@color 0041  
                          _Day_Mode 1B70                            _SW_NSPED 0057  
         update_LCD_color@direction 0042                         ??_Init_UART 0012  
                       ??_Read_Volt 002D              __size_of_drawFastHLine 0088  
             _Light_Sensor_Mode_Txt 0061                           copy_data0 2206  
                         copy_data1 2226                           drawtext@i 00CE  
            __size_of_drawFastVLine 0088                           drawtext@x 00CB  
                         drawtext@y 0037                            _Init_ADC 28AC  
                 write_command@cmd_ 0011                         ??_Set_EW_LT 0044  
                       ??_OpenUSART 0011                         ??_Set_NS_LT 0044  
                          _Rcmd2red 2552                 __size_of_write_data 0010  
                   OpenUSART@config 0011                  __end_of_fillCircle 239A  
                          __Hrparam 0000                  __end_of_fillScreen 27F6  
             update_LCD_count@count 0041                            __Lrparam 0000  
                __end_of_drawCircle 0F1E                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                  __size_of___ftmul 00F8                    __size_of___fttol 00E6  
                          ___awtoft 25CE                            ___ftpack 1AAA  
                  _update_LCD_color 0796                    _update_LCD_count 0F1E  
                       _PED_Control 229C                            _delay_ms 22F6  
                          __ptext10 1336                            __ptext11 2868  
                          __ptext20 27F6                            __ptext12 22F6  
                          __ptext21 2432                            __ptext13 2840  
                          __ptext30 19DE                            __ptext22 247A  
                          __ptext14 2096                            __ptext31 1D66  
                          __ptext23 24C2                            __ptext15 28AC  
                          __ptext40 1820                            __ptext32 27B8  
                          __ptext24 250A                            __ptext16 223C  
                          __ptext41 25CE                            __ptext33 0AF8  
                          __ptext25 0796                            __ptext17 1B70  
                          __ptext50 23E8                            __ptext42 1AAA  
                          __ptext34 173A                            __ptext26 2348  
                          __ptext18 267E                            __ptext51 1F1A  
                          __ptext43 2810                            __ptext35 1550  
                          __ptext27 11FE                            __ptext19 0F1E  
                          __ptext52 26E6                            __ptext44 260A  
                          __ptext36 1DFC                            __ptext28 0D70  
                          __ptext61 28C2                            __ptext53 239A  
                          __ptext45 2644                            __ptext37 1FA2  
                          __ptext29 229C                            __ptext54 288C  
                          __ptext46 26B4                            __ptext38 2106  
                          __ptext55 289C                            __ptext47 1446  
                          __ptext39 2792                            __ptext56 2854  
                          __ptext48 2590                            __ptext57 276A  
                          __ptext49 10A8                            __ptext58 28BA  
                          __ptext59 287A                            _fillRect 23E8  
                          _drawChar 10A8               _Initialize_LCD_Screen 001C  
                          _drawRect 2174    __size_of_TFT_GreenTab_Initialize 002A  
                          _colstart 0059                            _drawtext 1446  
                        strcpy@from 0011                       _fillRectangle 1902  
                  ?_Activate_Buzzer 0001                       __size_of_main 0096  
                   fillRectangle@hi 001F                     fillRectangle@lo 0020  
                     _drawFastHLine 1E92                      Set_EW_LT@color 00CB  
                     _drawFastVLine 1F1A                       ??_Do_Flashing 0044  
                          _spiwrite 2854                         ??_drawPixel 0019  
                          _rowstart 005C                  fillCircleHelper@x0 0021  
                fillCircleHelper@y0 0023                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 000F                          _EWLT_Count 009B  
                 ?_fillCircleHelper 0021                           spiwrite@x 000F  
       ??_Wait_One_Second_With_Beep 0041                            intlevel2 0000  
                   _update_LCD_misc 0AF8                      ?_fillRectangle 0016  
                ??_fillCircleHelper 002D               __end_of_write_command 28AC  
                   fillScreen@color 0022                update_LCD_misc@nStep 00D2  
              _update_LCD_PED_Count 19DE             __size_of_Wait_N_Seconds 0036  
                      fillCircle@x0 0039                        fillCircle@y0 003B  
                    ?_drawFastHLine 0016                      fillRectangle@h 0018  
                    fillRectangle@w 0017                      fillRectangle@x 0021  
                    fillRectangle@y 0016                      ?_drawFastVLine 0016  
                 fillCircleHelper@f 0033                   fillCircleHelper@r 0025  
                 fillCircleHelper@x 0035                   fillCircleHelper@y 0037  
                      ??_write_data 0011                       fillRect@color 0024  
          __size_of_Wait_One_Second 001A                            strcpy@cp 0013  
                          strlen@cp 0013                            strcpy@to 000F  
               __end_of_Do_Flashing 229C                          _NSLT_Count 009E  
            ?_Initialize_LCD_Screen 0001                         fillCircle@r 003D  
             __end_of_setAddrWindow 23E8                  fillRectangle@color 0019  
                     drawChar@color 002E                  __end_of_write_data 289C  
                      drawChar@line 0033                      Set_NS_LT@color 00CB  
                     ?_get_full_ADC 000F                        drawChar@size 0032  
             ?_update_LCD_PED_Count 0041  
