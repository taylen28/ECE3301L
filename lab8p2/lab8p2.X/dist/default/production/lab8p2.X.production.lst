

Microchip Technology PIC18 LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Oct 21 18:27:20 2025

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1
     6                           	psect	idataBANK0,global,class=CODE,delta=1
     7                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
    10                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1
    11                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	text28,global,reloc=2,class=CODE,delta=1
    44                           	psect	text29,global,reloc=2,class=CODE,delta=1
    45                           	psect	text30,global,reloc=2,class=CODE,delta=1
    46                           	psect	text31,global,reloc=2,class=CODE,delta=1
    47                           	psect	text32,global,reloc=2,class=CODE,delta=1
    48                           	psect	text33,global,reloc=2,class=CODE,delta=1
    49                           	psect	text34,global,reloc=2,class=CODE,delta=1
    50                           	psect	text35,global,reloc=2,class=CODE,delta=1
    51                           	psect	text36,global,reloc=2,class=CODE,delta=1
    52                           	psect	text37,global,reloc=2,class=CODE,delta=1
    53                           	psect	text38,global,reloc=2,class=CODE,delta=1
    54                           	psect	text39,global,reloc=2,class=CODE,delta=1
    55                           	psect	text40,global,reloc=2,class=CODE,delta=1
    56                           	psect	text41,global,reloc=2,class=CODE,delta=1
    57                           	psect	text42,global,reloc=2,class=CODE,delta=1
    58                           	psect	text43,global,reloc=2,class=CODE,delta=1
    59                           	psect	text44,global,reloc=2,class=CODE,delta=1
    60                           	psect	text45,global,reloc=2,class=CODE,delta=1
    61                           	psect	text46,global,reloc=2,class=CODE,delta=1
    62                           	psect	text47,global,reloc=2,class=CODE,delta=1
    63                           	psect	text48,global,reloc=2,class=CODE,delta=1
    64                           	psect	text49,global,reloc=2,class=CODE,delta=1
    65                           	psect	text50,global,reloc=2,class=CODE,delta=1
    66                           	psect	text51,global,reloc=2,class=CODE,delta=1
    67                           	psect	text52,global,reloc=2,class=CODE,delta=1
    68                           	psect	text53,global,reloc=2,class=CODE,delta=1
    69                           	psect	text54,global,reloc=2,class=CODE,delta=1
    70                           	psect	text55,global,reloc=2,class=CODE,delta=1
    71                           	psect	text56,global,reloc=2,class=CODE,delta=1
    72                           	psect	text57,global,reloc=2,class=CODE,delta=1
    73                           	psect	text58,global,reloc=2,class=CODE,delta=1
    74                           	psect	text59,global,reloc=2,class=CODE,delta=1
    75                           	psect	text60,global,reloc=2,class=CODE,delta=1
    76                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    77                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    83  0000                     
    84                           	psect	idataCOMRAM
    85  00285A                     __pidataCOMRAM:
    86                           	opt stack 0
    87                           
    88                           ;initializer for _wrap
    89  00285A  01                 	db	1
    90                           
    91                           ;initializer for _EW_Count
    92  00285B  30                 	db	48
    93  00285C  30                 	db	48
    94  00285D  00                 	db	0
    95                           
    96                           ;initializer for _Light_Sensor_Mode_Txt
    97  00285E  2D                 	db	45
    98  00285F  44                 	db	68
    99  002860  00                 	db	0
   100                           
   101                           ;initializer for _Act_Mode_Txt
   102  002861  44                 	db	68
   103  002862  00                 	db	0
   104                           
   105                           ;initializer for _FlashingR_Txt
   106  002863  30                 	db	48
   107  002864  00                 	db	0
   108                           
   109                           ;initializer for _FlashingS_Txt
   110  002865  30                 	db	48
   111  002866  00                 	db	0
   112                           
   113                           ;initializer for _SW_EWLT_Txt
   114  002867  30                 	db	48
   115  002868  00                 	db	0
   116                           
   117                           ;initializer for _SW_EWPED_Txt
   118  002869  30                 	db	48
   119  00286A  00                 	db	0
   120                           
   121                           ;initializer for _SW_NSLT_Txt
   122  00286B  30                 	db	48
   123  00286C  00                 	db	0
   124                           
   125                           ;initializer for _SW_NSPED_Txt
   126  00286D  30                 	db	48
   127  00286E  00                 	db	0
   128                           
   129                           	psect	idataBANK0
   130  002730                     __pidataBANK0:
   131                           	opt stack 0
   132                           
   133                           ;initializer for _Timing_Txt
   134  002730  53                 	db	83
   135  002731  50                 	db	80
   136  002732  32                 	db	50
   137  002733  34                 	db	52
   138  002734  2F                 	db	47
   139  002735  31                 	db	49
   140  002736  2F                 	db	47
   141  002737  30                 	db	48
   142  002738  31                 	db	49
   143  002739  20                 	db	32
   144  00273A  30                 	db	48
   145  00273B  30                 	db	48
   146  00273C  30                 	db	48
   147  00273D  30                 	db	48
   148  00273E  30                 	db	48
   149  00273F  30                 	db	48
   150  002740  20                 	db	32
   151  002741  30                 	db	48
   152  002742  30                 	db	48
   153  002743  30                 	db	48
   154  002744  30                 	db	48
   155  002745  00                 	db	0
   156                           
   157                           ;initializer for _Light_Sensor_Voltage_Txt
   158  002746  32                 	db	50
   159  002747  2E                 	db	46
   160  002748  35                 	db	53
   161  002749  56                 	db	86
   162  00274A  00                 	db	0
   163                           
   164                           ;initializer for _EWLT_Count
   165  00274B  30                 	db	48
   166  00274C  30                 	db	48
   167  00274D  00                 	db	0
   168                           
   169                           ;initializer for _NSLT_Count
   170  00274E  30                 	db	48
   171  00274F  30                 	db	48
   172  002750  00                 	db	0
   173                           
   174                           ;initializer for _NS_Count
   175  002751  30                 	db	48
   176  002752  30                 	db	48
   177  002753  00                 	db	0
   178                           
   179                           ;initializer for _PED_EW_Count
   180  002754  30                 	db	48
   181  002755  30                 	db	48
   182  002756  00                 	db	0
   183                           
   184                           ;initializer for _PED_NS_Count
   185  002757  30                 	db	48
   186  002758  30                 	db	48
   187  002759  00                 	db	0
   188                           
   189                           	psect	mediumconst
   190  00FDCE                     __pmediumconst:
   191                           	opt stack 0
   192  00FDCE  00                 	db	0
   193  00FDCF                     _font:
   194                           	opt stack 0
   195  00FDCF  00                 	db	0
   196  00FDD0  00                 	db	0
   197  00FDD1  00                 	db	0
   198  00FDD2  00                 	db	0
   199  00FDD3  00                 	db	0
   200  00FDD4  00                 	db	0
   201  00FDD5  00                 	db	0
   202  00FDD6  5F                 	db	95
   203  00FDD7  00                 	db	0
   204  00FDD8  00                 	db	0
   205  00FDD9  00                 	db	0
   206  00FDDA  07                 	db	7
   207  00FDDB  00                 	db	0
   208  00FDDC  07                 	db	7
   209  00FDDD  00                 	db	0
   210  00FDDE  14                 	db	20
   211  00FDDF  7F                 	db	127
   212  00FDE0  14                 	db	20
   213  00FDE1  7F                 	db	127
   214  00FDE2  14                 	db	20
   215  00FDE3  24                 	db	36
   216  00FDE4  2A                 	db	42
   217  00FDE5  7F                 	db	127
   218  00FDE6  2A                 	db	42
   219  00FDE7  12                 	db	18
   220  00FDE8  23                 	db	35
   221  00FDE9  13                 	db	19
   222  00FDEA  08                 	db	8
   223  00FDEB  64                 	db	100
   224  00FDEC  62                 	db	98
   225  00FDED  36                 	db	54
   226  00FDEE  49                 	db	73
   227  00FDEF  56                 	db	86
   228  00FDF0  20                 	db	32
   229  00FDF1  50                 	db	80
   230  00FDF2  00                 	db	0
   231  00FDF3  08                 	db	8
   232  00FDF4  07                 	db	7
   233  00FDF5  03                 	db	3
   234  00FDF6  00                 	db	0
   235  00FDF7  00                 	db	0
   236  00FDF8  1C                 	db	28
   237  00FDF9  22                 	db	34
   238  00FDFA  41                 	db	65
   239  00FDFB  00                 	db	0
   240  00FDFC  00                 	db	0
   241  00FDFD  41                 	db	65
   242  00FDFE  22                 	db	34
   243  00FDFF  1C                 	db	28
   244  00FE00  00                 	db	0
   245  00FE01  2A                 	db	42
   246  00FE02  1C                 	db	28
   247  00FE03  7F                 	db	127
   248  00FE04  1C                 	db	28
   249  00FE05  2A                 	db	42
   250  00FE06  08                 	db	8
   251  00FE07  08                 	db	8
   252  00FE08  3E                 	db	62
   253  00FE09  08                 	db	8
   254  00FE0A  08                 	db	8
   255  00FE0B  00                 	db	0
   256  00FE0C  80                 	db	128
   257  00FE0D  70                 	db	112
   258  00FE0E  30                 	db	48
   259  00FE0F  00                 	db	0
   260  00FE10  08                 	db	8
   261  00FE11  08                 	db	8
   262  00FE12  08                 	db	8
   263  00FE13  08                 	db	8
   264  00FE14  08                 	db	8
   265  00FE15  00                 	db	0
   266  00FE16  00                 	db	0
   267  00FE17  60                 	db	96
   268  00FE18  60                 	db	96
   269  00FE19  00                 	db	0
   270  00FE1A  20                 	db	32
   271  00FE1B  10                 	db	16
   272  00FE1C  08                 	db	8
   273  00FE1D  04                 	db	4
   274  00FE1E  02                 	db	2
   275  00FE1F  3E                 	db	62
   276  00FE20  51                 	db	81
   277  00FE21  49                 	db	73
   278  00FE22  45                 	db	69
   279  00FE23  3E                 	db	62
   280  00FE24  00                 	db	0
   281  00FE25  42                 	db	66
   282  00FE26  7F                 	db	127
   283  00FE27  40                 	db	64
   284  00FE28  00                 	db	0
   285  00FE29  72                 	db	114
   286  00FE2A  49                 	db	73
   287  00FE2B  49                 	db	73
   288  00FE2C  49                 	db	73
   289  00FE2D  46                 	db	70
   290  00FE2E  21                 	db	33
   291  00FE2F  41                 	db	65
   292  00FE30  49                 	db	73
   293  00FE31  4D                 	db	77
   294  00FE32  33                 	db	51
   295  00FE33  18                 	db	24
   296  00FE34  14                 	db	20
   297  00FE35  12                 	db	18
   298  00FE36  7F                 	db	127
   299  00FE37  10                 	db	16
   300  00FE38  27                 	db	39
   301  00FE39  45                 	db	69
   302  00FE3A  45                 	db	69
   303  00FE3B  45                 	db	69
   304  00FE3C  39                 	db	57
   305  00FE3D  3C                 	db	60
   306  00FE3E  4A                 	db	74
   307  00FE3F  49                 	db	73
   308  00FE40  49                 	db	73
   309  00FE41  31                 	db	49
   310  00FE42  41                 	db	65
   311  00FE43  21                 	db	33
   312  00FE44  11                 	db	17
   313  00FE45  09                 	db	9
   314  00FE46  07                 	db	7
   315  00FE47  36                 	db	54
   316  00FE48  49                 	db	73
   317  00FE49  49                 	db	73
   318  00FE4A  49                 	db	73
   319  00FE4B  36                 	db	54
   320  00FE4C  46                 	db	70
   321  00FE4D  49                 	db	73
   322  00FE4E  49                 	db	73
   323  00FE4F  29                 	db	41
   324  00FE50  1E                 	db	30
   325  00FE51  00                 	db	0
   326  00FE52  00                 	db	0
   327  00FE53  14                 	db	20
   328  00FE54  00                 	db	0
   329  00FE55  00                 	db	0
   330  00FE56  00                 	db	0
   331  00FE57  40                 	db	64
   332  00FE58  34                 	db	52
   333  00FE59  00                 	db	0
   334  00FE5A  00                 	db	0
   335  00FE5B  00                 	db	0
   336  00FE5C  08                 	db	8
   337  00FE5D  14                 	db	20
   338  00FE5E  22                 	db	34
   339  00FE5F  41                 	db	65
   340  00FE60  14                 	db	20
   341  00FE61  14                 	db	20
   342  00FE62  14                 	db	20
   343  00FE63  14                 	db	20
   344  00FE64  14                 	db	20
   345  00FE65  00                 	db	0
   346  00FE66  41                 	db	65
   347  00FE67  22                 	db	34
   348  00FE68  14                 	db	20
   349  00FE69  08                 	db	8
   350  00FE6A  02                 	db	2
   351  00FE6B  01                 	db	1
   352  00FE6C  59                 	db	89
   353  00FE6D  09                 	db	9
   354  00FE6E  06                 	db	6
   355  00FE6F  3E                 	db	62
   356  00FE70  41                 	db	65
   357  00FE71  5D                 	db	93
   358  00FE72  59                 	db	89
   359  00FE73  4E                 	db	78
   360  00FE74  7C                 	db	124
   361  00FE75  12                 	db	18
   362  00FE76  11                 	db	17
   363  00FE77  12                 	db	18
   364  00FE78  7C                 	db	124
   365  00FE79  7F                 	db	127
   366  00FE7A  49                 	db	73
   367  00FE7B  49                 	db	73
   368  00FE7C  49                 	db	73
   369  00FE7D  36                 	db	54
   370  00FE7E  3E                 	db	62
   371  00FE7F  41                 	db	65
   372  00FE80  41                 	db	65
   373  00FE81  41                 	db	65
   374  00FE82  22                 	db	34
   375  00FE83  7F                 	db	127
   376  00FE84  41                 	db	65
   377  00FE85  41                 	db	65
   378  00FE86  41                 	db	65
   379  00FE87  3E                 	db	62
   380  00FE88  7F                 	db	127
   381  00FE89  49                 	db	73
   382  00FE8A  49                 	db	73
   383  00FE8B  49                 	db	73
   384  00FE8C  41                 	db	65
   385  00FE8D  7F                 	db	127
   386  00FE8E  09                 	db	9
   387  00FE8F  09                 	db	9
   388  00FE90  09                 	db	9
   389  00FE91  01                 	db	1
   390  00FE92  3E                 	db	62
   391  00FE93  41                 	db	65
   392  00FE94  41                 	db	65
   393  00FE95  51                 	db	81
   394  00FE96  73                 	db	115
   395  00FE97  7F                 	db	127
   396  00FE98  08                 	db	8
   397  00FE99  08                 	db	8
   398  00FE9A  08                 	db	8
   399  00FE9B  7F                 	db	127
   400  00FE9C  00                 	db	0
   401  00FE9D  41                 	db	65
   402  00FE9E  7F                 	db	127
   403  00FE9F  41                 	db	65
   404  00FEA0  00                 	db	0
   405  00FEA1  20                 	db	32
   406  00FEA2  40                 	db	64
   407  00FEA3  41                 	db	65
   408  00FEA4  3F                 	db	63
   409  00FEA5  01                 	db	1
   410  00FEA6  7F                 	db	127
   411  00FEA7  08                 	db	8
   412  00FEA8  14                 	db	20
   413  00FEA9  22                 	db	34
   414  00FEAA  41                 	db	65
   415  00FEAB  7F                 	db	127
   416  00FEAC  40                 	db	64
   417  00FEAD  40                 	db	64
   418  00FEAE  40                 	db	64
   419  00FEAF  40                 	db	64
   420  00FEB0  7F                 	db	127
   421  00FEB1  02                 	db	2
   422  00FEB2  1C                 	db	28
   423  00FEB3  02                 	db	2
   424  00FEB4  7F                 	db	127
   425  00FEB5  7F                 	db	127
   426  00FEB6  04                 	db	4
   427  00FEB7  08                 	db	8
   428  00FEB8  10                 	db	16
   429  00FEB9  7F                 	db	127
   430  00FEBA  3E                 	db	62
   431  00FEBB  41                 	db	65
   432  00FEBC  41                 	db	65
   433  00FEBD  41                 	db	65
   434  00FEBE  3E                 	db	62
   435  00FEBF  7F                 	db	127
   436  00FEC0  09                 	db	9
   437  00FEC1  09                 	db	9
   438  00FEC2  09                 	db	9
   439  00FEC3  06                 	db	6
   440  00FEC4  3E                 	db	62
   441  00FEC5  41                 	db	65
   442  00FEC6  51                 	db	81
   443  00FEC7  21                 	db	33
   444  00FEC8  5E                 	db	94
   445  00FEC9  7F                 	db	127
   446  00FECA  09                 	db	9
   447  00FECB  19                 	db	25
   448  00FECC  29                 	db	41
   449  00FECD  46                 	db	70
   450  00FECE                     __end_of_font:
   451                           	opt stack 0
   452  00FECE                     _font2:
   453                           	opt stack 0
   454  00FECE  26                 	db	38
   455  00FECF  49                 	db	73
   456  00FED0  49                 	db	73
   457  00FED1  49                 	db	73
   458  00FED2  32                 	db	50
   459  00FED3  03                 	db	3
   460  00FED4  01                 	db	1
   461  00FED5  7F                 	db	127
   462  00FED6  01                 	db	1
   463  00FED7  03                 	db	3
   464  00FED8  3F                 	db	63
   465  00FED9  40                 	db	64
   466  00FEDA  40                 	db	64
   467  00FEDB  40                 	db	64
   468  00FEDC  3F                 	db	63
   469  00FEDD  1F                 	db	31
   470  00FEDE  20                 	db	32
   471  00FEDF  40                 	db	64
   472  00FEE0  20                 	db	32
   473  00FEE1  1F                 	db	31
   474  00FEE2  3F                 	db	63
   475  00FEE3  40                 	db	64
   476  00FEE4  38                 	db	56
   477  00FEE5  40                 	db	64
   478  00FEE6  3F                 	db	63
   479  00FEE7  63                 	db	99
   480  00FEE8  14                 	db	20
   481  00FEE9  08                 	db	8
   482  00FEEA  14                 	db	20
   483  00FEEB  63                 	db	99
   484  00FEEC  03                 	db	3
   485  00FEED  04                 	db	4
   486  00FEEE  78                 	db	120
   487  00FEEF  04                 	db	4
   488  00FEF0  03                 	db	3
   489  00FEF1  61                 	db	97
   490  00FEF2  59                 	db	89
   491  00FEF3  49                 	db	73
   492  00FEF4  4D                 	db	77
   493  00FEF5  43                 	db	67
   494  00FEF6  00                 	db	0
   495  00FEF7  7F                 	db	127
   496  00FEF8  41                 	db	65
   497  00FEF9  41                 	db	65
   498  00FEFA  41                 	db	65
   499  00FEFB  02                 	db	2
   500  00FEFC  04                 	db	4
   501  00FEFD  08                 	db	8
   502  00FEFE  10                 	db	16
   503  00FEFF  20                 	db	32
   504  00FF00  00                 	db	0
   505  00FF01  41                 	db	65
   506  00FF02  41                 	db	65
   507  00FF03  41                 	db	65
   508  00FF04  7F                 	db	127
   509  00FF05  04                 	db	4
   510  00FF06  02                 	db	2
   511  00FF07  01                 	db	1
   512  00FF08  02                 	db	2
   513  00FF09  04                 	db	4
   514  00FF0A  40                 	db	64
   515  00FF0B  40                 	db	64
   516  00FF0C  40                 	db	64
   517  00FF0D  40                 	db	64
   518  00FF0E  40                 	db	64
   519  00FF0F  00                 	db	0
   520  00FF10  03                 	db	3
   521  00FF11  07                 	db	7
   522  00FF12  08                 	db	8
   523  00FF13  00                 	db	0
   524  00FF14  20                 	db	32
   525  00FF15  54                 	db	84
   526  00FF16  54                 	db	84
   527  00FF17  78                 	db	120
   528  00FF18  40                 	db	64
   529  00FF19  7F                 	db	127
   530  00FF1A  28                 	db	40
   531  00FF1B  44                 	db	68
   532  00FF1C  44                 	db	68
   533  00FF1D  38                 	db	56
   534  00FF1E  38                 	db	56
   535  00FF1F  44                 	db	68
   536  00FF20  44                 	db	68
   537  00FF21  44                 	db	68
   538  00FF22  28                 	db	40
   539  00FF23  38                 	db	56
   540  00FF24  44                 	db	68
   541  00FF25  44                 	db	68
   542  00FF26  28                 	db	40
   543  00FF27  7F                 	db	127
   544  00FF28  38                 	db	56
   545  00FF29  54                 	db	84
   546  00FF2A  54                 	db	84
   547  00FF2B  54                 	db	84
   548  00FF2C  18                 	db	24
   549  00FF2D  00                 	db	0
   550  00FF2E  08                 	db	8
   551  00FF2F  7E                 	db	126
   552  00FF30  09                 	db	9
   553  00FF31  02                 	db	2
   554  00FF32  18                 	db	24
   555  00FF33  A4                 	db	164
   556  00FF34  A4                 	db	164
   557  00FF35  9C                 	db	156
   558  00FF36  78                 	db	120
   559  00FF37  7F                 	db	127
   560  00FF38  08                 	db	8
   561  00FF39  04                 	db	4
   562  00FF3A  04                 	db	4
   563  00FF3B  78                 	db	120
   564  00FF3C  00                 	db	0
   565  00FF3D  44                 	db	68
   566  00FF3E  7D                 	db	125
   567  00FF3F  40                 	db	64
   568  00FF40  00                 	db	0
   569  00FF41  20                 	db	32
   570  00FF42  40                 	db	64
   571  00FF43  40                 	db	64
   572  00FF44  3D                 	db	61
   573  00FF45  00                 	db	0
   574  00FF46  7F                 	db	127
   575  00FF47  10                 	db	16
   576  00FF48  28                 	db	40
   577  00FF49  44                 	db	68
   578  00FF4A  00                 	db	0
   579  00FF4B  00                 	db	0
   580  00FF4C  41                 	db	65
   581  00FF4D  7F                 	db	127
   582  00FF4E  40                 	db	64
   583  00FF4F  00                 	db	0
   584  00FF50  7C                 	db	124
   585  00FF51  04                 	db	4
   586  00FF52  78                 	db	120
   587  00FF53  04                 	db	4
   588  00FF54  78                 	db	120
   589  00FF55  7C                 	db	124
   590  00FF56  08                 	db	8
   591  00FF57  04                 	db	4
   592  00FF58  04                 	db	4
   593  00FF59  78                 	db	120
   594  00FF5A  38                 	db	56
   595  00FF5B  44                 	db	68
   596  00FF5C  44                 	db	68
   597  00FF5D  44                 	db	68
   598  00FF5E  38                 	db	56
   599  00FF5F  FC                 	db	252
   600  00FF60  18                 	db	24
   601  00FF61  24                 	db	36
   602  00FF62  24                 	db	36
   603  00FF63  18                 	db	24
   604  00FF64  18                 	db	24
   605  00FF65  24                 	db	36
   606  00FF66  24                 	db	36
   607  00FF67  18                 	db	24
   608  00FF68  FC                 	db	252
   609  00FF69  7C                 	db	124
   610  00FF6A  08                 	db	8
   611  00FF6B  04                 	db	4
   612  00FF6C  04                 	db	4
   613  00FF6D  08                 	db	8
   614  00FF6E  48                 	db	72
   615  00FF6F  54                 	db	84
   616  00FF70  54                 	db	84
   617  00FF71  54                 	db	84
   618  00FF72  24                 	db	36
   619  00FF73  04                 	db	4
   620  00FF74  04                 	db	4
   621  00FF75  3F                 	db	63
   622  00FF76  44                 	db	68
   623  00FF77  24                 	db	36
   624  00FF78  3C                 	db	60
   625  00FF79  40                 	db	64
   626  00FF7A  40                 	db	64
   627  00FF7B  20                 	db	32
   628  00FF7C  7C                 	db	124
   629  00FF7D  1C                 	db	28
   630  00FF7E  20                 	db	32
   631  00FF7F  40                 	db	64
   632  00FF80  20                 	db	32
   633  00FF81  1C                 	db	28
   634  00FF82  3C                 	db	60
   635  00FF83  40                 	db	64
   636  00FF84  30                 	db	48
   637  00FF85  40                 	db	64
   638  00FF86  3C                 	db	60
   639  00FF87  44                 	db	68
   640  00FF88  28                 	db	40
   641  00FF89  10                 	db	16
   642  00FF8A  28                 	db	40
   643  00FF8B  44                 	db	68
   644  00FF8C  4C                 	db	76
   645  00FF8D  90                 	db	144
   646  00FF8E  90                 	db	144
   647  00FF8F  90                 	db	144
   648  00FF90  7C                 	db	124
   649  00FF91  44                 	db	68
   650  00FF92  64                 	db	100
   651  00FF93  54                 	db	84
   652  00FF94  4C                 	db	76
   653  00FF95  44                 	db	68
   654  00FF96  00                 	db	0
   655  00FF97  08                 	db	8
   656  00FF98  36                 	db	54
   657  00FF99  41                 	db	65
   658  00FF9A  00                 	db	0
   659  00FF9B  00                 	db	0
   660  00FF9C  00                 	db	0
   661  00FF9D  77                 	db	119
   662  00FF9E  00                 	db	0
   663  00FF9F  00                 	db	0
   664  00FFA0  00                 	db	0
   665  00FFA1  41                 	db	65
   666  00FFA2  36                 	db	54
   667  00FFA3  08                 	db	8
   668  00FFA4  00                 	db	0
   669  00FFA5  02                 	db	2
   670  00FFA6  01                 	db	1
   671  00FFA7  02                 	db	2
   672  00FFA8  04                 	db	4
   673  00FFA9  02                 	db	2
   674  00FFAA                     __end_of_font2:
   675                           	opt stack 0
   676  0000                     _ADCON0	set	4034
   677  0000                     _ADCON0bits	set	4034
   678  0000                     _ADCON1	set	4033
   679  0000                     _ADCON2	set	4032
   680  0000                     _ADRESH	set	4036
   681  0000                     _ADRESL	set	4035
   682  0000                     _CCP2CON	set	4026
   683  0000                     _CCPR2L	set	4027
   684  0000                     _INTCON2bits	set	4081
   685  0000                     _INTCON3bits	set	4080
   686  0000                     _INTCONbits	set	4082
   687  0000                     _OSCCON	set	4051
   688  0000                     _PIE1bits	set	3997
   689  0000                     _PIR1bits	set	3998
   690  0000                     _PIR2bits	set	4001
   691  0000                     _PORTAbits	set	3968
   692  0000                     _PORTBbits	set	3969
   693  0000                     _PORTCbits	set	3970
   694  0000                     _PORTD	set	3971
   695  0000                     _PORTDbits	set	3971
   696  0000                     _PORTEbits	set	3972
   697  0000                     _PR2	set	4043
   698  0000                     _RCSTA	set	4011
   699  0000                     _RCSTAbits	set	4011
   700  0000                     _SPBRG	set	4015
   701  0000                     _SPBRGH	set	4016
   702  0000                     _SSPBUF	set	4041
   703  0000                     _SSPCON1	set	4038
   704  0000                     _SSPSTAT	set	4039
   705  0000                     _SSPSTATbits	set	4039
   706  0000                     _T0CON	set	4053
   707  0000                     _T0CONbits	set	4053
   708  0000                     _T2CON	set	4042
   709  0000                     _T3CON	set	4017
   710  0000                     _T3CONbits	set	4017
   711  0000                     _TMR0H	set	4055
   712  0000                     _TMR0L	set	4054
   713  0000                     _TMR3H	set	4019
   714  0000                     _TMR3L	set	4018
   715  0000                     _TRISA	set	3986
   716  0000                     _TRISB	set	3987
   717  0000                     _TRISC	set	3988
   718  0000                     _TRISCbits	set	3988
   719  0000                     _TRISD	set	3989
   720  0000                     _TRISE	set	3990
   721  0000                     _TXREG	set	4013
   722  0000                     _TXSTA	set	4012
   723  0000                     _TXSTAbits	set	4012
   724  0000                     _RBPU	set	32655
   725  0000                     _TRMT	set	32097
   726  00FFAA                     STR_5:
   727  00FFAA  4E                 	db	78	;'N'
   728  00FFAB  53                 	db	83	;'S'
   729  00FFAC  50                 	db	80	;'P'
   730  00FFAD  20                 	db	32
   731  00FFAE  4E                 	db	78	;'N'
   732  00FFAF  53                 	db	83	;'S'
   733  00FFB0  4C                 	db	76	;'L'
   734  00FFB1  54                 	db	84	;'T'
   735  00FFB2  20                 	db	32
   736  00FFB3  45                 	db	69	;'E'
   737  00FFB4  57                 	db	87	;'W'
   738  00FFB5  50                 	db	80	;'P'
   739  00FFB6  20                 	db	32
   740  00FFB7  45                 	db	69	;'E'
   741  00FFB8  57                 	db	87	;'W'
   742  00FFB9  4C                 	db	76	;'L'
   743  00FFBA  54                 	db	84	;'T'
   744  00FFBB  20                 	db	32
   745  00FFBC  52                 	db	82	;'R'
   746  00FFBD  20                 	db	32
   747  00FFBE  53                 	db	83	;'S'
   748  00FFBF  00                 	db	0
   749  00FFC0                     STR_6:
   750  00FFC0  4E                 	db	78	;'N'
   751  00FFC1  4F                 	db	79	;'O'
   752  00FFC2  52                 	db	82	;'R'
   753  00FFC3  54                 	db	84	;'T'
   754  00FFC4  48                 	db	72	;'H'
   755  00FFC5  2F                 	db	47
   756  00FFC6  53                 	db	83	;'S'
   757  00FFC7  4F                 	db	79	;'O'
   758  00FFC8  55                 	db	85	;'U'
   759  00FFC9  54                 	db	84	;'T'
   760  00FFCA  48                 	db	72	;'H'
   761  00FFCB  00                 	db	0
   762  00FFCC                     STR_8:
   763  00FFCC  45                 	db	69	;'E'
   764  00FFCD  41                 	db	65	;'A'
   765  00FFCE  53                 	db	83	;'S'
   766  00FFCF  54                 	db	84	;'T'
   767  00FFD0  2F                 	db	47
   768  00FFD1  57                 	db	87	;'W'
   769  00FFD2  45                 	db	69	;'E'
   770  00FFD3  53                 	db	83	;'S'
   771  00FFD4  54                 	db	84	;'T'
   772  00FFD5  00                 	db	0
   773  00FFD6                     STR_7:
   774  00FFD6  4E                 	db	78	;'N'
   775  00FFD7  2F                 	db	47
   776  00FFD8  53                 	db	83	;'S'
   777  00FFD9  20                 	db	32
   778  00FFDA  4C                 	db	76	;'L'
   779  00FFDB  54                 	db	84	;'T'
   780  00FFDC  00                 	db	0
   781  00FFDD                     STR_9:
   782  00FFDD  45                 	db	69	;'E'
   783  00FFDE  2F                 	db	47
   784  00FFDF  57                 	db	87	;'W'
   785  00FFE0  20                 	db	32
   786  00FFE1  4C                 	db	76	;'L'
   787  00FFE2  54                 	db	84	;'T'
   788  00FFE3  00                 	db	0
   789  00FFE4                     STR_1:
   790  00FFE4  4D                 	db	77	;'M'
   791  00FFE5  6F                 	db	111	;'o'
   792  00FFE6  64                 	db	100	;'d'
   793  00FFE7  65                 	db	101	;'e'
   794  00FFE8  3A                 	db	58	;':'
   795  00FFE9  00                 	db	0
   796  00FFEA                     STR_2:
   797  00FFEA  4C                 	db	76	;'L'
   798  00FFEB  53                 	db	83	;'S'
   799  00FFEC  56                 	db	86	;'V'
   800  00FFED  3A                 	db	58	;':'
   801  00FFEE  00                 	db	0
   802  00FFEF                     STR_10:
   803  00FFEF  50                 	db	80	;'P'
   804  00FFF0  4E                 	db	78	;'N'
   805  00FFF1  53                 	db	83	;'S'
   806  00FFF2  00                 	db	0
   807  00FFF3                     STR_11:
   808  00FFF3  50                 	db	80	;'P'
   809  00FFF4  45                 	db	69	;'E'
   810  00FFF5  57                 	db	87	;'W'
   811  00FFF6  00                 	db	0
   812  00FFF7                     STR_3:
   813  00FFF7  2D                 	db	45
   814  00FFF8  44                 	db	68	;'D'
   815  00FFF9  00                 	db	0
   816  00FFFA                     STR_13:
   817  00FFFA  20                 	db	32
   818  00FFFB  00                 	db	0
   819  00FFFC                     STR_4:
   820  00FFFC  2A                 	db	42
   821  00FFFD  00                 	db	0
   822  0000                     
   823                           ; #config settings
   824  00FFFE  00                 	db	0	; dummy byte at the end
   825  0000                     
   826                           	psect	cinit
   827  0021FA                     __pcinit:
   828                           	opt stack 0
   829  0021FA                     start_initialization:
   830                           	opt stack 0
   831  0021FA                     __initialization:
   832                           	opt stack 0
   833                           
   834                           ; Clear objects allocated to BANK0 (33 bytes)
   835  0021FA  EE00  F0AA         	lfsr	0,__pbssBANK0
   836  0021FE  0E21               	movlw	33
   837  002200                     clear_0:
   838  002200  6AEE               	clrf	postinc0,c
   839  002202  06E8               	decf	wreg,f,c
   840  002204  E1FD               	bnz	clear_0
   841                           
   842                           ; Clear objects allocated to COMRAM (25 bytes)
   843  002206  EE00  F044         	lfsr	0,__pbssCOMRAM
   844  00220A  0E19               	movlw	25
   845  00220C                     clear_1:
   846  00220C  6AEE               	clrf	postinc0,c
   847  00220E  06E8               	decf	wreg,f,c
   848  002210  E1FD               	bnz	clear_1
   849                           
   850                           ; Initialize objects allocated to BANK0 (42 bytes)
   851                           ; load TBLPTR registers with __pidataBANK0
   852  002212  0E30               	movlw	low __pidataBANK0
   853  002214  6EF6               	movwf	tblptrl,c
   854  002216  0E27               	movlw	high __pidataBANK0
   855  002218  6EF7               	movwf	tblptrh,c
   856  00221A  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   857  00221C  6EF8               	movwf	tblptru,c
   858  00221E  EE00  F080         	lfsr	0,__pdataBANK0
   859  002222  EE10 F02A          	lfsr	1,42
   860  002226                     copy_data0:
   861  002226  0009               	tblrd		*+
   862  002228  CFF5 FFEE          	movff	tablat,postinc0
   863  00222C  50E5               	movf	postdec1,w,c
   864  00222E  50E1               	movf	fsr1l,w,c
   865  002230  E1FA               	bnz	copy_data0
   866                           
   867                           ; Initialize objects allocated to COMRAM (21 bytes)
   868                           ; load TBLPTR registers with __pidataCOMRAM
   869  002232  0E5A               	movlw	low __pidataCOMRAM
   870  002234  6EF6               	movwf	tblptrl,c
   871  002236  0E28               	movlw	high __pidataCOMRAM
   872  002238  6EF7               	movwf	tblptrh,c
   873  00223A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   874  00223C  6EF8               	movwf	tblptru,c
   875  00223E  EE00  F05D         	lfsr	0,__pdataCOMRAM
   876  002242  EE10 F015          	lfsr	1,21
   877  002246                     copy_data1:
   878  002246  0009               	tblrd		*+
   879  002248  CFF5 FFEE          	movff	tablat,postinc0
   880  00224C  50E5               	movf	postdec1,w,c
   881  00224E  50E1               	movf	fsr1l,w,c
   882  002250  E1FA               	bnz	copy_data1
   883  002252                     end_of_initialization:
   884                           	opt stack 0
   885  002252                     __end_of__initialization:
   886                           	opt stack 0
   887  002252  0E00               	movlw	low (__Lmediumconst shr (0+16))
   888  002254  6EF8               	movwf	tblptru,c
   889  002256  0100               	movlb	0
   890  002258  EF07  F00F         	goto	_main	;jump to C main() function
   891                           tblptru	equ	0xFF8
   892                           tblptrh	equ	0xFF7
   893                           tblptrl	equ	0xFF6
   894                           tablat	equ	0xFF5
   895                           postinc0	equ	0xFEE
   896                           wreg	equ	0xFE8
   897                           postdec1	equ	0xFE5
   898                           fsr1l	equ	0xFE1
   899                           
   900                           	psect	bssCOMRAM
   901  000044                     __pbssCOMRAM:
   902                           	opt stack 0
   903  000044                     _volt:
   904                           	opt stack 0
   905  000044                     	ds	3
   906  000047                     _txt:
   907                           	opt stack 0
   908  000047                     	ds	2
   909  000049                     _Count:
   910                           	opt stack 0
   911  000049                     	ds	1
   912  00004A                     _EW_PED_SW:
   913                           	opt stack 0
   914  00004A                     	ds	1
   915  00004B                     _Flashing_Request:
   916                           	opt stack 0
   917  00004B                     	ds	1
   918  00004C                     _Flashing_Status:
   919                           	opt stack 0
   920  00004C                     	ds	1
   921  00004D                     _INT0_Flag:
   922                           	opt stack 0
   923  00004D                     	ds	1
   924  00004E                     _INT1_Flag:
   925                           	opt stack 0
   926  00004E                     	ds	1
   927  00004F                     _INT2_Flag:
   928                           	opt stack 0
   929  00004F                     	ds	1
   930  000050                     _Light_Sensor:
   931                           	opt stack 0
   932  000050                     	ds	1
   933  000051                     _MODE:
   934                           	opt stack 0
   935  000051                     	ds	1
   936  000052                     _NS_PED_SW:
   937                           	opt stack 0
   938  000052                     	ds	1
   939  000053                     _PED_Count:
   940                           	opt stack 0
   941  000053                     	ds	1
   942  000054                     _SW_EWLT:
   943                           	opt stack 0
   944  000054                     	ds	1
   945  000055                     _SW_EWPED:
   946                           	opt stack 0
   947  000055                     	ds	1
   948  000056                     _SW_NSLT:
   949                           	opt stack 0
   950  000056                     	ds	1
   951  000057                     _SW_NSPED:
   952                           	opt stack 0
   953  000057                     	ds	1
   954  000058                     __tft_type:
   955                           	opt stack 0
   956  000058                     	ds	1
   957  000059                     _colstart:
   958                           	opt stack 0
   959  000059                     	ds	1
   960  00005A                     _dir:
   961                           	opt stack 0
   962  00005A                     	ds	1
   963  00005B                     _direction:
   964                           	opt stack 0
   965  00005B                     	ds	1
   966  00005C                     _rowstart:
   967                           	opt stack 0
   968  00005C                     	ds	1
   969                           tblptru	equ	0xFF8
   970                           tblptrh	equ	0xFF7
   971                           tblptrl	equ	0xFF6
   972                           tablat	equ	0xFF5
   973                           postinc0	equ	0xFEE
   974                           wreg	equ	0xFE8
   975                           postdec1	equ	0xFE5
   976                           fsr1l	equ	0xFE1
   977                           
   978                           	psect	dataCOMRAM
   979  00005D                     __pdataCOMRAM:
   980                           	opt stack 0
   981  00005D                     _wrap:
   982                           	opt stack 0
   983  00005D                     	ds	1
   984  00005E                     _EW_Count:
   985                           	opt stack 0
   986  00005E                     	ds	3
   987  000061                     _Light_Sensor_Mode_Txt:
   988                           	opt stack 0
   989  000061                     	ds	3
   990  000064                     _Act_Mode_Txt:
   991                           	opt stack 0
   992  000064                     	ds	2
   993  000066                     _FlashingR_Txt:
   994                           	opt stack 0
   995  000066                     	ds	2
   996  000068                     _FlashingS_Txt:
   997                           	opt stack 0
   998  000068                     	ds	2
   999  00006A                     _SW_EWLT_Txt:
  1000                           	opt stack 0
  1001  00006A                     	ds	2
  1002  00006C                     _SW_EWPED_Txt:
  1003                           	opt stack 0
  1004  00006C                     	ds	2
  1005  00006E                     _SW_NSLT_Txt:
  1006                           	opt stack 0
  1007  00006E                     	ds	2
  1008  000070                     _SW_NSPED_Txt:
  1009                           	opt stack 0
  1010  000070                     	ds	2
  1011                           tblptru	equ	0xFF8
  1012                           tblptrh	equ	0xFF7
  1013                           tblptrl	equ	0xFF6
  1014                           tablat	equ	0xFF5
  1015                           postinc0	equ	0xFEE
  1016                           wreg	equ	0xFE8
  1017                           postdec1	equ	0xFE5
  1018                           fsr1l	equ	0xFE1
  1019                           
  1020                           	psect	bssBANK0
  1021  0000AA                     __pbssBANK0:
  1022                           	opt stack 0
  1023  0000AA                     _nbr:
  1024                           	opt stack 0
  1025  0000AA                     	ds	2
  1026  0000AC                     _buffer:
  1027                           	opt stack 0
  1028  0000AC                     	ds	31
  1029                           tblptru	equ	0xFF8
  1030                           tblptrh	equ	0xFF7
  1031                           tblptrl	equ	0xFF6
  1032                           tablat	equ	0xFF5
  1033                           postinc0	equ	0xFEE
  1034                           wreg	equ	0xFE8
  1035                           postdec1	equ	0xFE5
  1036                           fsr1l	equ	0xFE1
  1037                           
  1038                           	psect	dataBANK0
  1039  000080                     __pdataBANK0:
  1040                           	opt stack 0
  1041  000080                     _Timing_Txt:
  1042                           	opt stack 0
  1043  000080                     	ds	22
  1044  000096                     _Light_Sensor_Voltage_Txt:
  1045                           	opt stack 0
  1046  000096                     	ds	5
  1047  00009B                     _EWLT_Count:
  1048                           	opt stack 0
  1049  00009B                     	ds	3
  1050  00009E                     _NSLT_Count:
  1051                           	opt stack 0
  1052  00009E                     	ds	3
  1053  0000A1                     _NS_Count:
  1054                           	opt stack 0
  1055  0000A1                     	ds	3
  1056  0000A4                     _PED_EW_Count:
  1057                           	opt stack 0
  1058  0000A4                     	ds	3
  1059  0000A7                     _PED_NS_Count:
  1060                           	opt stack 0
  1061  0000A7                     	ds	3
  1062                           tblptru	equ	0xFF8
  1063                           tblptrh	equ	0xFF7
  1064                           tblptrl	equ	0xFF6
  1065                           tablat	equ	0xFF5
  1066                           postinc0	equ	0xFEE
  1067                           wreg	equ	0xFE8
  1068                           postdec1	equ	0xFE5
  1069                           fsr1l	equ	0xFE1
  1070                           
  1071                           	psect	cstackBANK0
  1072  0000CB                     __pcstackBANK0:
  1073                           	opt stack 0
  1074  0000CB                     Set_NS@color:
  1075                           	opt stack 0
  1076  0000CB                     Set_NSLT@color:
  1077                           	opt stack 0
  1078  0000CB                     Set_EW@color:
  1079                           	opt stack 0
  1080  0000CB                     Set_EWLT@color:
  1081                           	opt stack 0
  1082  0000CB                     drawtext@x:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x0
  1086  0000CB                     	ds	1
  1087  0000CC                     drawtext@textsize:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x1
  1091  0000CC                     	ds	2
  1092  0000CE                     drawtext@i:
  1093                           	opt stack 0
  1094                           
  1095                           ; 2 bytes @ 0x3
  1096  0000CE                     	ds	2
  1097  0000D0                     drawtext@cursor_y:
  1098                           	opt stack 0
  1099                           
  1100                           ; 1 bytes @ 0x5
  1101  0000D0                     	ds	1
  1102  0000D1                     drawtext@cursor_x:
  1103                           	opt stack 0
  1104                           
  1105                           ; 1 bytes @ 0x6
  1106  0000D1                     	ds	1
  1107  0000D2                     update_LCD_misc@nStep:
  1108                           	opt stack 0
  1109                           
  1110                           ; 2 bytes @ 0x7
  1111  0000D2                     	ds	2
  1112  0000D4                     update_LCD_misc@volt:
  1113                           	opt stack 0
  1114                           
  1115                           ; 3 bytes @ 0x9
  1116  0000D4                     	ds	3
  1117  0000D7                     PED_Control@direction:
  1118                           	opt stack 0
  1119  0000D7                     Wait_N_Seconds@seconds:
  1120                           	opt stack 0
  1121                           
  1122                           ; 1 bytes @ 0xC
  1123  0000D7                     	ds	1
  1124  0000D8                     Wait_N_Seconds@I:
  1125                           	opt stack 0
  1126  0000D8                     PED_Control@i:
  1127                           	opt stack 0
  1128                           
  1129                           ; 2 bytes @ 0xD
  1130  0000D8                     	ds	2
  1131                           tblptru	equ	0xFF8
  1132                           tblptrh	equ	0xFF7
  1133                           tblptrl	equ	0xFF6
  1134                           tablat	equ	0xFF5
  1135                           postinc0	equ	0xFEE
  1136                           wreg	equ	0xFE8
  1137                           postdec1	equ	0xFE5
  1138                           fsr1l	equ	0xFE1
  1139                           
  1140                           	psect	cstackCOMRAM
  1141  000001                     __pcstackCOMRAM:
  1142                           	opt stack 0
  1143  000001                     ??_chkisr:
  1144  000001                     
  1145                           ; 0 bytes @ 0x0
  1146  000001                     	ds	14
  1147  00000F                     ?_get_full_ADC:
  1148                           	opt stack 0
  1149  00000F                     ?_strlen:
  1150                           	opt stack 0
  1151  00000F                     ?___wmul:
  1152                           	opt stack 0
  1153  00000F                     ?___awdiv:
  1154                           	opt stack 0
  1155  00000F                     ?___ftpack:
  1156                           	opt stack 0
  1157  00000F                     spiwrite@x:
  1158                           	opt stack 0
  1159  00000F                     OpenUSART@spbrg:
  1160                           	opt stack 0
  1161  00000F                     ___wmul@multiplier:
  1162                           	opt stack 0
  1163  00000F                     ___awdiv@dividend:
  1164                           	opt stack 0
  1165  00000F                     strcpy@to:
  1166                           	opt stack 0
  1167  00000F                     strlen@s:
  1168                           	opt stack 0
  1169  00000F                     ___ftpack@arg:
  1170                           	opt stack 0
  1171  00000F                     ___ftge@ff1:
  1172                           	opt stack 0
  1173                           
  1174                           ; 3 bytes @ 0xE
  1175  00000F                     	ds	1
  1176  000010                     spiwrite@spidata:
  1177                           	opt stack 0
  1178                           
  1179                           ; 1 bytes @ 0xF
  1180  000010                     	ds	1
  1181  000011                     ??_get_full_ADC:
  1182  000011                     ??_strlen:
  1183  000011                     write_command@cmd_:
  1184                           	opt stack 0
  1185  000011                     write_data@data_:
  1186                           	opt stack 0
  1187  000011                     OpenUSART@config:
  1188                           	opt stack 0
  1189  000011                     ___wmul@multiplicand:
  1190                           	opt stack 0
  1191  000011                     ___awdiv@divisor:
  1192                           	opt stack 0
  1193  000011                     strcpy@from:
  1194                           	opt stack 0
  1195                           
  1196                           ; 2 bytes @ 0x10
  1197  000011                     	ds	1
  1198  000012                     setAddrWindow@y0:
  1199                           	opt stack 0
  1200  000012                     ___ftpack@exp:
  1201                           	opt stack 0
  1202  000012                     ___ftge@ff2:
  1203                           	opt stack 0
  1204                           
  1205                           ; 3 bytes @ 0x11
  1206  000012                     	ds	1
  1207  000013                     setAddrWindow@x1:
  1208                           	opt stack 0
  1209  000013                     ___awdiv@counter:
  1210                           	opt stack 0
  1211  000013                     ___ftpack@sign:
  1212                           	opt stack 0
  1213  000013                     get_full_ADC@result:
  1214                           	opt stack 0
  1215  000013                     ___wmul@product:
  1216                           	opt stack 0
  1217  000013                     strcpy@cp:
  1218                           	opt stack 0
  1219  000013                     strlen@cp:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x12
  1223  000013                     	ds	1
  1224  000014                     ??___ftpack:
  1225  000014                     setAddrWindow@y1:
  1226                           	opt stack 0
  1227  000014                     ___awdiv@sign:
  1228                           	opt stack 0
  1229                           
  1230                           ; 1 bytes @ 0x13
  1231  000014                     	ds	1
  1232  000015                     ??___ftge:
  1233  000015                     setAddrWindow@x0:
  1234                           	opt stack 0
  1235  000015                     delay_ms@ms:
  1236                           	opt stack 0
  1237  000015                     ___awdiv@quotient:
  1238                           	opt stack 0
  1239                           
  1240                           ; 2 bytes @ 0x14
  1241  000015                     	ds	1
  1242  000016                     drawPixel@y:
  1243                           	opt stack 0
  1244  000016                     drawFastVLine@y:
  1245                           	opt stack 0
  1246  000016                     fillRectangle@y:
  1247                           	opt stack 0
  1248  000016                     drawFastHLine@y:
  1249                           	opt stack 0
  1250                           
  1251                           ; 1 bytes @ 0x15
  1252  000016                     	ds	1
  1253  000017                     ??_delay_ms:
  1254  000017                     ?___ftmul:
  1255                           	opt stack 0
  1256  000017                     ?___awtoft:
  1257                           	opt stack 0
  1258  000017                     drawFastVLine@h:
  1259                           	opt stack 0
  1260  000017                     fillRectangle@w:
  1261                           	opt stack 0
  1262  000017                     drawFastHLine@w:
  1263                           	opt stack 0
  1264  000017                     drawPixel@color:
  1265                           	opt stack 0
  1266  000017                     ___awtoft@c:
  1267                           	opt stack 0
  1268  000017                     ___ftmul@f1:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x16
  1272  000017                     	ds	1
  1273  000018                     fillRectangle@h:
  1274                           	opt stack 0
  1275  000018                     drawFastVLine@color:
  1276                           	opt stack 0
  1277  000018                     drawFastHLine@color:
  1278                           	opt stack 0
  1279                           
  1280                           ; 2 bytes @ 0x17
  1281  000018                     	ds	1
  1282  000019                     drawPixel@x:
  1283                           	opt stack 0
  1284  000019                     delay_ms@count:
  1285                           	opt stack 0
  1286  000019                     fillRectangle@color:
  1287                           	opt stack 0
  1288                           
  1289                           ; 2 bytes @ 0x18
  1290  000019                     	ds	1
  1291  00001A                     ??_drawFastVLine:
  1292  00001A                     ??_drawFastHLine:
  1293  00001A                     ___awtoft@sign:
  1294                           	opt stack 0
  1295  00001A                     drawCircle@x0:
  1296                           	opt stack 0
  1297  00001A                     ___ftmul@f2:
  1298                           	opt stack 0
  1299                           
  1300                           ; 3 bytes @ 0x19
  1301  00001A                     	ds	1
  1302  00001B                     ??_fillRectangle:
  1303  00001B                     ?___ftdiv:
  1304                           	opt stack 0
  1305  00001B                     ___ftdiv@f1:
  1306                           	opt stack 0
  1307                           
  1308                           ; 3 bytes @ 0x1A
  1309  00001B                     	ds	1
  1310  00001C                     drawCircle@y0:
  1311                           	opt stack 0
  1312                           
  1313                           ; 2 bytes @ 0x1B
  1314  00001C                     	ds	1
  1315  00001D                     ??___ftmul:
  1316                           
  1317                           ; 0 bytes @ 0x1C
  1318  00001D                     	ds	1
  1319  00001E                     drawFastVLine@hi:
  1320                           	opt stack 0
  1321  00001E                     drawFastHLine@hi:
  1322                           	opt stack 0
  1323  00001E                     drawCircle@r:
  1324                           	opt stack 0
  1325  00001E                     ___ftdiv@f2:
  1326                           	opt stack 0
  1327                           
  1328                           ; 3 bytes @ 0x1D
  1329  00001E                     	ds	1
  1330  00001F                     drawFastVLine@lo:
  1331                           	opt stack 0
  1332  00001F                     fillRectangle@hi:
  1333                           	opt stack 0
  1334  00001F                     drawFastHLine@lo:
  1335                           	opt stack 0
  1336                           
  1337                           ; 1 bytes @ 0x1E
  1338  00001F                     	ds	1
  1339  000020                     drawFastVLine@x:
  1340                           	opt stack 0
  1341  000020                     fillRectangle@lo:
  1342                           	opt stack 0
  1343  000020                     drawFastHLine@x:
  1344                           	opt stack 0
  1345  000020                     ___ftmul@exp:
  1346                           	opt stack 0
  1347  000020                     drawCircle@color:
  1348                           	opt stack 0
  1349                           
  1350                           ; 2 bytes @ 0x1F
  1351  000020                     	ds	1
  1352  000021                     ??___ftdiv:
  1353  000021                     fillRect@y:
  1354                           	opt stack 0
  1355  000021                     fillRectangle@x:
  1356                           	opt stack 0
  1357  000021                     fillCircleHelper@x0:
  1358                           	opt stack 0
  1359  000021                     drawRect@x:
  1360                           	opt stack 0
  1361  000021                     ___ftmul@f3_as_product:
  1362                           	opt stack 0
  1363                           
  1364                           ; 3 bytes @ 0x20
  1365  000021                     	ds	1
  1366  000022                     ??_drawCircle:
  1367  000022                     fillRect@w:
  1368                           	opt stack 0
  1369  000022                     fillScreen@color:
  1370                           	opt stack 0
  1371                           
  1372                           ; 2 bytes @ 0x21
  1373  000022                     	ds	1
  1374  000023                     fillRect@h:
  1375                           	opt stack 0
  1376  000023                     fillCircleHelper@y0:
  1377                           	opt stack 0
  1378  000023                     drawRect@y:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x22
  1382  000023                     	ds	1
  1383  000024                     ___ftdiv@cntr:
  1384                           	opt stack 0
  1385  000024                     ___ftmul@cntr:
  1386                           	opt stack 0
  1387  000024                     fillRect@color:
  1388                           	opt stack 0
  1389  000024                     drawCircle@ddF_x:
  1390                           	opt stack 0
  1391                           
  1392                           ; 2 bytes @ 0x23
  1393  000024                     	ds	1
  1394  000025                     ___ftmul@sign:
  1395                           	opt stack 0
  1396  000025                     fillCircleHelper@r:
  1397                           	opt stack 0
  1398  000025                     drawRect@w:
  1399                           	opt stack 0
  1400  000025                     ___ftdiv@f3:
  1401                           	opt stack 0
  1402                           
  1403                           ; 3 bytes @ 0x24
  1404  000025                     	ds	1
  1405  000026                     ??_fillRect:
  1406  000026                     ?___fttol:
  1407                           	opt stack 0
  1408  000026                     drawCircle@ddF_y:
  1409                           	opt stack 0
  1410  000026                     ___fttol@f1:
  1411                           	opt stack 0
  1412                           
  1413                           ; 3 bytes @ 0x25
  1414  000026                     	ds	1
  1415  000027                     fillCircleHelper@cornername:
  1416                           	opt stack 0
  1417  000027                     drawRect@h:
  1418                           	opt stack 0
  1419                           
  1420                           ; 2 bytes @ 0x26
  1421  000027                     	ds	1
  1422  000028                     ___ftdiv@exp:
  1423                           	opt stack 0
  1424  000028                     drawCircle@f:
  1425                           	opt stack 0
  1426                           
  1427                           ; 2 bytes @ 0x27
  1428  000028                     	ds	1
  1429  000029                     fillRect@x:
  1430                           	opt stack 0
  1431  000029                     ___ftdiv@sign:
  1432                           	opt stack 0
  1433  000029                     fillCircleHelper@delta:
  1434                           	opt stack 0
  1435  000029                     drawRect@color:
  1436                           	opt stack 0
  1437                           
  1438                           ; 2 bytes @ 0x28
  1439  000029                     	ds	1
  1440  00002A                     ??___fttol:
  1441  00002A                     ?_Read_Volt:
  1442                           	opt stack 0
  1443  00002A                     fillRect@i:
  1444                           	opt stack 0
  1445  00002A                     drawCircle@x:
  1446                           	opt stack 0
  1447                           
  1448                           ; 2 bytes @ 0x29
  1449  00002A                     	ds	1
  1450  00002B                     ??_drawRect:
  1451  00002B                     fillCircleHelper@color:
  1452                           	opt stack 0
  1453                           
  1454                           ; 2 bytes @ 0x2A
  1455  00002B                     	ds	1
  1456  00002C                     drawChar@y:
  1457                           	opt stack 0
  1458  00002C                     drawCircle@y:
  1459                           	opt stack 0
  1460                           
  1461                           ; 2 bytes @ 0x2B
  1462  00002C                     	ds	1
  1463  00002D                     ??_fillCircleHelper:
  1464  00002D                     drawChar@c:
  1465                           	opt stack 0
  1466  00002D                     Read_Volt@volt:
  1467                           	opt stack 0
  1468                           
  1469                           ; 3 bytes @ 0x2C
  1470  00002D                     	ds	1
  1471  00002E                     drawChar@color:
  1472                           	opt stack 0
  1473                           
  1474                           ; 2 bytes @ 0x2D
  1475  00002E                     	ds	1
  1476  00002F                     ___fttol@sign1:
  1477                           	opt stack 0
  1478  00002F                     fillCircleHelper@ddF_x:
  1479                           	opt stack 0
  1480                           
  1481                           ; 2 bytes @ 0x2E
  1482  00002F                     	ds	1
  1483  000030                     Read_Volt@ADC_Channel:
  1484                           	opt stack 0
  1485  000030                     drawChar@bg:
  1486                           	opt stack 0
  1487  000030                     ___fttol@lval:
  1488                           	opt stack 0
  1489                           
  1490                           ; 4 bytes @ 0x2F
  1491  000030                     	ds	1
  1492  000031                     fillCircleHelper@ddF_y:
  1493                           	opt stack 0
  1494  000031                     Read_Volt@nStep:
  1495                           	opt stack 0
  1496                           
  1497                           ; 2 bytes @ 0x30
  1498  000031                     	ds	1
  1499  000032                     drawChar@size:
  1500                           	opt stack 0
  1501                           
  1502                           ; 1 bytes @ 0x31
  1503  000032                     	ds	1
  1504  000033                     drawChar@line:
  1505                           	opt stack 0
  1506  000033                     fillCircleHelper@f:
  1507                           	opt stack 0
  1508                           
  1509                           ; 2 bytes @ 0x32
  1510  000033                     	ds	1
  1511  000034                     drawChar@x:
  1512                           	opt stack 0
  1513  000034                     ___fttol@exp1:
  1514                           	opt stack 0
  1515                           
  1516                           ; 1 bytes @ 0x33
  1517  000034                     	ds	1
  1518  000035                     ?___awmod:
  1519                           	opt stack 0
  1520  000035                     drawChar@j:
  1521                           	opt stack 0
  1522  000035                     fillCircleHelper@x:
  1523                           	opt stack 0
  1524  000035                     ___awmod@dividend:
  1525                           	opt stack 0
  1526                           
  1527                           ; 2 bytes @ 0x34
  1528  000035                     	ds	1
  1529  000036                     drawChar@i:
  1530                           	opt stack 0
  1531                           
  1532                           ; 1 bytes @ 0x35
  1533  000036                     	ds	1
  1534  000037                     drawtext@y:
  1535                           	opt stack 0
  1536  000037                     fillCircleHelper@y:
  1537                           	opt stack 0
  1538  000037                     ___awmod@divisor:
  1539                           	opt stack 0
  1540                           
  1541                           ; 2 bytes @ 0x36
  1542  000037                     	ds	1
  1543  000038                     drawtext@_text:
  1544                           	opt stack 0
  1545                           
  1546                           ; 2 bytes @ 0x37
  1547  000038                     	ds	1
  1548  000039                     ___awmod@counter:
  1549                           	opt stack 0
  1550  000039                     fillCircle@x0:
  1551                           	opt stack 0
  1552                           
  1553                           ; 2 bytes @ 0x38
  1554  000039                     	ds	1
  1555  00003A                     ___awmod@sign:
  1556                           	opt stack 0
  1557  00003A                     drawtext@color:
  1558                           	opt stack 0
  1559                           
  1560                           ; 2 bytes @ 0x39
  1561  00003A                     	ds	1
  1562  00003B                     fillCircle@y0:
  1563                           	opt stack 0
  1564                           
  1565                           ; 2 bytes @ 0x3A
  1566  00003B                     	ds	1
  1567  00003C                     drawtext@bg:
  1568                           	opt stack 0
  1569                           
  1570                           ; 2 bytes @ 0x3B
  1571  00003C                     	ds	1
  1572  00003D                     fillCircle@r:
  1573                           	opt stack 0
  1574                           
  1575                           ; 2 bytes @ 0x3C
  1576  00003D                     	ds	1
  1577  00003E                     drawtext@size:
  1578                           	opt stack 0
  1579                           
  1580                           ; 1 bytes @ 0x3D
  1581  00003E                     	ds	1
  1582  00003F                     ??_drawtext:
  1583  00003F                     fillCircle@color:
  1584                           	opt stack 0
  1585                           
  1586                           ; 2 bytes @ 0x3E
  1587  00003F                     	ds	2
  1588  000041                     update_LCD_color@color:
  1589                           	opt stack 0
  1590  000041                     update_LCD_PED_Count@count:
  1591                           	opt stack 0
  1592  000041                     update_LCD_count@count:
  1593                           	opt stack 0
  1594                           
  1595                           ; 1 bytes @ 0x40
  1596  000041                     	ds	1
  1597  000042                     update_LCD_color@direction:
  1598                           	opt stack 0
  1599  000042                     update_LCD_PED_Count@direction:
  1600                           	opt stack 0
  1601  000042                     update_LCD_count@direction:
  1602                           	opt stack 0
  1603                           
  1604                           ; 1 bytes @ 0x41
  1605  000042                     	ds	1
  1606  000043                     PED_Control@Num_Sec:
  1607                           	opt stack 0
  1608  000043                     update_LCD_color@Circle_Y:
  1609                           	opt stack 0
  1610                           
  1611                           ; 1 bytes @ 0x42
  1612  000043                     	ds	1
  1613  000044                     tblptru	equ	0xFF8
  1614                           tblptrh	equ	0xFF7
  1615                           tblptrl	equ	0xFF6
  1616                           tablat	equ	0xFF5
  1617                           postinc0	equ	0xFEE
  1618                           wreg	equ	0xFE8
  1619                           postdec1	equ	0xFE5
  1620                           fsr1l	equ	0xFE1
  1621                           
  1622                           ; 0 bytes @ 0x43
  1623 ;;
  1624 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1625 ;;
  1626 ;; *************** function _main *****************
  1627 ;; Defined at:
  1628 ;;		line 54 in file "Lab8pB.c"
  1629 ;; Parameters:    Size  Location     Type
  1630 ;;		None
  1631 ;; Auto vars:     Size  Location     Type
  1632 ;;		None
  1633 ;; Return value:  Size  Location     Type
  1634 ;;		None               void
  1635 ;; Registers used:
  1636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1637 ;; Tracked objects:
  1638 ;;		On entry : 0/0
  1639 ;;		On exit  : 0/0
  1640 ;;		Unchanged: 0/0
  1641 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1642 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1643 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1644 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1645 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1646 ;;Total ram usage:        0 bytes
  1647 ;; Hardware stack levels required when called:   13
  1648 ;; This function calls:
  1649 ;;		_Day_Mode
  1650 ;;		_Do_Flashing
  1651 ;;		_Init_ADC
  1652 ;;		_Init_UART
  1653 ;;		_Initialize_LCD_Screen
  1654 ;;		_Night_Mode
  1655 ;;		_Read_Volt
  1656 ;;		___ftge
  1657 ;;		_init_INTERRUPT
  1658 ;; This function is called by:
  1659 ;;		Startup code after reset
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662                           
  1663                           	psect	text0
  1664  001E0E                     __ptext0:
  1665                           	opt stack 0
  1666  001E0E                     _main:
  1667                           	opt stack 18
  1668                           
  1669                           ;Lab8pB.c: 56: OSCCON = 0x70;
  1670                           
  1671                           ;incstack = 0
  1672  001E0E  0E70               	movlw	112
  1673  001E10  6ED3               	movwf	4051,c	;volatile
  1674                           
  1675                           ;Lab8pB.c: 57: TRISA = 0x1F;
  1676  001E12  0E1F               	movlw	31
  1677  001E14  6E92               	movwf	3986,c	;volatile
  1678                           
  1679                           ;Lab8pB.c: 58: TRISB = 0x07;
  1680  001E16  0E07               	movlw	7
  1681  001E18  6E93               	movwf	3987,c	;volatile
  1682                           
  1683                           ;Lab8pB.c: 59: TRISC = 0x00;
  1684  001E1A  0E00               	movlw	0
  1685  001E1C  6E94               	movwf	3988,c	;volatile
  1686                           
  1687                           ;Lab8pB.c: 60: TRISD = 0x00;
  1688  001E1E  0E00               	movlw	0
  1689  001E20  6E95               	movwf	3989,c	;volatile
  1690                           
  1691                           ;Lab8pB.c: 61: TRISE = 0x00;
  1692  001E22  0E00               	movlw	0
  1693  001E24  6E96               	movwf	3990,c	;volatile
  1694                           
  1695                           ;Lab8pB.c: 62: Init_ADC();
  1696  001E26  EC7E  F014         	call	_Init_ADC	;wreg free
  1697                           
  1698                           ;Lab8pB.c: 63: Init_UART();
  1699  001E2A  EC38  F014         	call	_Init_UART	;wreg free
  1700                           
  1701                           ;Lab8pB.c: 65: Initialize_LCD_Screen();
  1702  001E2E  EC0E  F000         	call	_Initialize_LCD_Screen	;wreg free
  1703                           
  1704                           ;Lab8pB.c: 66: RBPU = 0;
  1705  001E32  9EF1               	bcf	intcon2,7,c	;volatile
  1706                           
  1707                           ;Lab8pB.c: 67: init_INTERRUPT();
  1708  001E34  EC22  F014         	call	_init_INTERRUPT	;wreg free
  1709                           
  1710                           ;Lab8pB.c: 96: volt = Read_Volt(0);
  1711  001E38  0E00               	movlw	0
  1712  001E3A  EC93  F010         	call	_Read_Volt
  1713  001E3E  C02A  F044         	movff	?_Read_Volt,_volt
  1714  001E42  C02B  F045         	movff	?_Read_Volt+1,_volt+1
  1715  001E46  C02C  F046         	movff	?_Read_Volt+2,_volt+2
  1716                           
  1717                           ;Lab8pB.c: 98: Light_Sensor = volt < 2.5 ? 1:0;
  1718  001E4A  C044  F00F         	movff	_volt,___ftge@ff1
  1719  001E4E  C045  F010         	movff	_volt+1,___ftge@ff1+1
  1720  001E52  C046  F011         	movff	_volt+2,___ftge@ff1+2
  1721  001E56  0E00               	movlw	0
  1722  001E58  6E12               	movwf	___ftge@ff2,c
  1723  001E5A  0E20               	movlw	32
  1724  001E5C  6E13               	movwf	___ftge@ff2+1,c
  1725  001E5E  0E40               	movlw	64
  1726  001E60  6E14               	movwf	___ftge@ff2+2,c
  1727  001E62  ECBC  F00E         	call	___ftge	;wreg free
  1728  001E66  B0D8               	btfsc	status,0,c
  1729  001E68  D002               	goto	u4280
  1730  001E6A  0E01               	movlw	1
  1731  001E6C  D001               	goto	u4290
  1732  001E6E                     u4280:
  1733  001E6E  0E00               	movlw	0
  1734  001E70                     u4290:
  1735  001E70  6E50               	movwf	_Light_Sensor,c
  1736  001E72  D000               	goto	l5760
  1737  001E74                     l5760:
  1738                           
  1739                           ;Lab8pB.c: 101: {
  1740                           ;Lab8pB.c: 103: if (Light_Sensor == 1)
  1741  001E74  0450               	decf	_Light_Sensor,w,c
  1742  001E76  A4D8               	btfss	status,2,c
  1743  001E78  D003               	goto	l5764
  1744                           
  1745                           ;Lab8pB.c: 104: {
  1746                           ;Lab8pB.c: 105: Day_Mode();
  1747  001E7A  ECBF  F00D         	call	_Day_Mode	;wreg free
  1748                           
  1749                           ;Lab8pB.c: 106: }
  1750  001E7E  D003               	goto	l5766
  1751  001E80                     l5764:
  1752                           
  1753                           ;Lab8pB.c: 107: else
  1754                           ;Lab8pB.c: 108: {
  1755                           ;Lab8pB.c: 109: Night_Mode();
  1756  001E80  EC1E  F00E         	call	_Night_Mode	;wreg free
  1757  001E84  D000               	goto	l5766
  1758  001E86                     l5766:
  1759                           
  1760                           ;Lab8pB.c: 110: }
  1761                           ;Lab8pB.c: 111: if (Flashing_Request == 1) {
  1762  001E86  044B               	decf	_Flashing_Request,w,c
  1763  001E88  A4D8               	btfss	status,2,c
  1764  001E8A  D7F4               	goto	l5760
  1765                           
  1766                           ;Lab8pB.c: 112: Flashing_Request = 0;
  1767  001E8C  0E00               	movlw	0
  1768  001E8E  6E4B               	movwf	_Flashing_Request,c
  1769                           
  1770                           ;Lab8pB.c: 113: Flashing_Status = 1;
  1771  001E90  0E01               	movlw	1
  1772  001E92  6E4C               	movwf	_Flashing_Status,c
  1773                           
  1774                           ;Lab8pB.c: 114: Do_Flashing();
  1775  001E94  EC2E  F011         	call	_Do_Flashing	;wreg free
  1776  001E98  D7ED               	goto	l5760
  1777  001E9A  EF0C  F000         	goto	start
  1778  001E9E                     __end_of_main:
  1779                           	opt stack 0
  1780                           tblptru	equ	0xFF8
  1781                           tblptrh	equ	0xFF7
  1782                           tblptrl	equ	0xFF6
  1783                           tablat	equ	0xFF5
  1784                           intcon2	equ	0xFF1
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1l	equ	0xFE1
  1789                           status	equ	0xFD8
  1790                           
  1791 ;; *************** function _init_INTERRUPT *****************
  1792 ;; Defined at:
  1793 ;;		line 15 in file "Interrupt.c"
  1794 ;; Parameters:    Size  Location     Type
  1795 ;;		None
  1796 ;; Auto vars:     Size  Location     Type
  1797 ;;		None
  1798 ;; Return value:  Size  Location     Type
  1799 ;;		None               void
  1800 ;; Registers used:
  1801 ;;		None
  1802 ;; Tracked objects:
  1803 ;;		On entry : 0/0
  1804 ;;		On exit  : 0/0
  1805 ;;		Unchanged: 0/0
  1806 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1807 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1808 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1809 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1810 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1811 ;;Total ram usage:        0 bytes
  1812 ;; Hardware stack levels used:    1
  1813 ;; Hardware stack levels required when called:    2
  1814 ;; This function calls:
  1815 ;;		Nothing
  1816 ;; This function is called by:
  1817 ;;		_main
  1818 ;; This function uses a non-reentrant model
  1819 ;;
  1820                           
  1821                           	psect	text1
  1822  002844                     __ptext1:
  1823                           	opt stack 0
  1824  002844                     _init_INTERRUPT:
  1825                           	opt stack 28
  1826                           
  1827                           ;Interrupt.c: 18: INTCONbits.INT0IF = 0;
  1828                           
  1829                           ;incstack = 0
  1830  002844  92F2               	bcf	intcon,1,c	;volatile
  1831                           
  1832                           ;Interrupt.c: 19: INTCON3bits.INT1IF = 0;
  1833  002846  90F0               	bcf	intcon3,0,c	;volatile
  1834                           
  1835                           ;Interrupt.c: 20: INTCON3bits.INT2IF = 0;
  1836  002848  92F0               	bcf	intcon3,1,c	;volatile
  1837                           
  1838                           ;Interrupt.c: 22: INTCON2bits.INTEDG0 = 0;
  1839  00284A  9CF1               	bcf	intcon2,6,c	;volatile
  1840                           
  1841                           ;Interrupt.c: 23: INTCON2bits.INTEDG1 = 0;
  1842  00284C  9AF1               	bcf	intcon2,5,c	;volatile
  1843                           
  1844                           ;Interrupt.c: 24: INTCON2bits.INTEDG2 = 0;
  1845  00284E  98F1               	bcf	intcon2,4,c	;volatile
  1846                           
  1847                           ;Interrupt.c: 26: INTCONbits.INT0IE = 1;
  1848  002850  88F2               	bsf	intcon,4,c	;volatile
  1849                           
  1850                           ;Interrupt.c: 27: INTCON3bits.INT1IE = 1;
  1851  002852  86F0               	bsf	intcon3,3,c	;volatile
  1852                           
  1853                           ;Interrupt.c: 28: INTCON3bits.INT2IE = 1;
  1854  002854  88F0               	bsf	intcon3,4,c	;volatile
  1855                           
  1856                           ;Interrupt.c: 30: INTCONbits.GIE = 1;
  1857  002856  8EF2               	bsf	intcon,7,c	;volatile
  1858  002858  0012               	return		;funcret
  1859  00285A                     __end_of_init_INTERRUPT:
  1860                           	opt stack 0
  1861                           tblptru	equ	0xFF8
  1862                           tblptrh	equ	0xFF7
  1863                           tblptrl	equ	0xFF6
  1864                           tablat	equ	0xFF5
  1865                           intcon	equ	0xFF2
  1866                           intcon2	equ	0xFF1
  1867                           intcon3	equ	0xFF0
  1868                           postinc0	equ	0xFEE
  1869                           wreg	equ	0xFE8
  1870                           postdec1	equ	0xFE5
  1871                           fsr1l	equ	0xFE1
  1872                           status	equ	0xFD8
  1873                           
  1874 ;; *************** function _Night_Mode *****************
  1875 ;; Defined at:
  1876 ;;		line 255 in file "Lab8pB.c"
  1877 ;; Parameters:    Size  Location     Type
  1878 ;;		None
  1879 ;; Auto vars:     Size  Location     Type
  1880 ;;		None
  1881 ;; Return value:  Size  Location     Type
  1882 ;;		None               void
  1883 ;; Registers used:
  1884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1885 ;; Tracked objects:
  1886 ;;		On entry : 0/0
  1887 ;;		On exit  : 0/0
  1888 ;;		Unchanged: 0/0
  1889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1894 ;;Total ram usage:        0 bytes
  1895 ;; Hardware stack levels used:    1
  1896 ;; Hardware stack levels required when called:   12
  1897 ;; This function calls:
  1898 ;;		_Set_EW
  1899 ;;		_Set_EWLT
  1900 ;;		_Set_NS
  1901 ;;		_Set_NSLT
  1902 ;;		_Wait_N_Seconds
  1903 ;; This function is called by:
  1904 ;;		_main
  1905 ;; This function uses a non-reentrant model
  1906 ;;
  1907                           
  1908                           	psect	text2
  1909  001C3C                     __ptext2:
  1910                           	opt stack 0
  1911  001C3C                     _Night_Mode:
  1912                           	opt stack 18
  1913                           
  1914                           ;Lab8pB.c: 258: MODE = 0;
  1915                           
  1916                           ;incstack = 0
  1917  001C3C  0E00               	movlw	0
  1918  001C3E  6E51               	movwf	_MODE,c
  1919                           
  1920                           ;Lab8pB.c: 259: PORTEbits.RE2 = 0;
  1921  001C40  9484               	bcf	3972,2,c	;volatile
  1922                           
  1923                           ;Lab8pB.c: 260: EW_PED_SW = 0;
  1924  001C42  0E00               	movlw	0
  1925  001C44  6E4A               	movwf	_EW_PED_SW,c
  1926                           
  1927                           ;Lab8pB.c: 261: NS_PED_SW = 0;
  1928  001C46  0E00               	movlw	0
  1929  001C48  6E52               	movwf	_NS_PED_SW,c
  1930                           
  1931                           ;Lab8pB.c: 263: Set_EW(1);
  1932  001C4A  0E01               	movlw	1
  1933  001C4C  EC92  F012         	call	_Set_EW
  1934                           
  1935                           ;Lab8pB.c: 264: Set_EWLT(1);
  1936  001C50  0E01               	movlw	1
  1937  001C52  EC6E  F012         	call	_Set_EWLT
  1938                           
  1939                           ;Lab8pB.c: 265: Set_NSLT(1);
  1940  001C56  0E01               	movlw	1
  1941  001C58  EC26  F012         	call	_Set_NSLT
  1942                           
  1943                           ;Lab8pB.c: 266: Set_NS(2);
  1944  001C5C  0E02               	movlw	2
  1945  001C5E  EC4A  F012         	call	_Set_NS
  1946                           
  1947                           ;Lab8pB.c: 267: Wait_N_Seconds(6);
  1948  001C62  0E06               	movlw	6
  1949  001C64  EC4C  F013         	call	_Wait_N_Seconds
  1950                           
  1951                           ;Lab8pB.c: 268: Set_NS(3);
  1952  001C68  0E03               	movlw	3
  1953  001C6A  EC4A  F012         	call	_Set_NS
  1954                           
  1955                           ;Lab8pB.c: 269: Wait_N_Seconds(3);
  1956  001C6E  0E03               	movlw	3
  1957  001C70  EC4C  F013         	call	_Wait_N_Seconds
  1958                           
  1959                           ;Lab8pB.c: 270: Set_NS(1);
  1960  001C74  0E01               	movlw	1
  1961  001C76  EC4A  F012         	call	_Set_NS
  1962                           
  1963                           ;Lab8pB.c: 271: if(PORTAbits.RA4){
  1964  001C7A  A880               	btfss	3968,4,c	;volatile
  1965  001C7C  D010               	goto	l5702
  1966                           
  1967                           ;Lab8pB.c: 272: Set_EWLT(2);
  1968  001C7E  0E02               	movlw	2
  1969  001C80  EC6E  F012         	call	_Set_EWLT
  1970                           
  1971                           ;Lab8pB.c: 273: Wait_N_Seconds(7);
  1972  001C84  0E07               	movlw	7
  1973  001C86  EC4C  F013         	call	_Wait_N_Seconds
  1974                           
  1975                           ;Lab8pB.c: 274: Set_EWLT(3);
  1976  001C8A  0E03               	movlw	3
  1977  001C8C  EC6E  F012         	call	_Set_EWLT
  1978                           
  1979                           ;Lab8pB.c: 275: Wait_N_Seconds(3);
  1980  001C90  0E03               	movlw	3
  1981  001C92  EC4C  F013         	call	_Wait_N_Seconds
  1982                           
  1983                           ;Lab8pB.c: 276: Set_EWLT(1);
  1984  001C96  0E01               	movlw	1
  1985  001C98  EC6E  F012         	call	_Set_EWLT
  1986  001C9C  D000               	goto	l5702
  1987  001C9E                     l5702:
  1988                           
  1989                           ;Lab8pB.c: 277: }
  1990                           ;Lab8pB.c: 278: Set_EW(2);
  1991  001C9E  0E02               	movlw	2
  1992  001CA0  EC92  F012         	call	_Set_EW
  1993                           
  1994                           ;Lab8pB.c: 279: Wait_N_Seconds(6);
  1995  001CA4  0E06               	movlw	6
  1996  001CA6  EC4C  F013         	call	_Wait_N_Seconds
  1997                           
  1998                           ;Lab8pB.c: 280: Set_EW(3);
  1999  001CAA  0E03               	movlw	3
  2000  001CAC  EC92  F012         	call	_Set_EW
  2001                           
  2002                           ;Lab8pB.c: 281: Wait_N_Seconds(3);
  2003  001CB0  0E03               	movlw	3
  2004  001CB2  EC4C  F013         	call	_Wait_N_Seconds
  2005                           
  2006                           ;Lab8pB.c: 282: Set_EW(1);
  2007  001CB6  0E01               	movlw	1
  2008  001CB8  EC92  F012         	call	_Set_EW
  2009                           
  2010                           ;Lab8pB.c: 283: if(PORTAbits.RA1){
  2011  001CBC  A280               	btfss	3968,1,c	;volatile
  2012  001CBE  D010               	goto	l213
  2013                           
  2014                           ;Lab8pB.c: 284: Set_NSLT(2);
  2015  001CC0  0E02               	movlw	2
  2016  001CC2  EC26  F012         	call	_Set_NSLT
  2017                           
  2018                           ;Lab8pB.c: 285: Wait_N_Seconds(8);
  2019  001CC6  0E08               	movlw	8
  2020  001CC8  EC4C  F013         	call	_Wait_N_Seconds
  2021                           
  2022                           ;Lab8pB.c: 286: Set_NSLT(3);
  2023  001CCC  0E03               	movlw	3
  2024  001CCE  EC26  F012         	call	_Set_NSLT
  2025                           
  2026                           ;Lab8pB.c: 287: Wait_N_Seconds(3);
  2027  001CD2  0E03               	movlw	3
  2028  001CD4  EC4C  F013         	call	_Wait_N_Seconds
  2029                           
  2030                           ;Lab8pB.c: 288: Set_NSLT(1);
  2031  001CD8  0E01               	movlw	1
  2032  001CDA  EC26  F012         	call	_Set_NSLT
  2033  001CDE  D000               	goto	l213
  2034  001CE0                     l213:
  2035  001CE0  0012               	return		;funcret
  2036  001CE2                     __end_of_Night_Mode:
  2037                           	opt stack 0
  2038                           tblptru	equ	0xFF8
  2039                           tblptrh	equ	0xFF7
  2040                           tblptrl	equ	0xFF6
  2041                           tablat	equ	0xFF5
  2042                           intcon	equ	0xFF2
  2043                           intcon2	equ	0xFF1
  2044                           intcon3	equ	0xFF0
  2045                           postinc0	equ	0xFEE
  2046                           wreg	equ	0xFE8
  2047                           postdec1	equ	0xFE5
  2048                           fsr1l	equ	0xFE1
  2049                           status	equ	0xFD8
  2050                           
  2051 ;; *************** function _Initialize_LCD_Screen *****************
  2052 ;; Defined at:
  2053 ;;		line 54 in file "Main_Screen.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;		None
  2058 ;; Return value:  Size  Location     Type
  2059 ;;		None               void
  2060 ;; Registers used:
  2061 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2062 ;; Tracked objects:
  2063 ;;		On entry : 0/0
  2064 ;;		On exit  : 0/0
  2065 ;;		Unchanged: 0/0
  2066 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2067 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2068 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2069 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2070 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2071 ;;Total ram usage:        0 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    9
  2074 ;; This function calls:
  2075 ;;		_LCD_Reset
  2076 ;;		_TFT_GreenTab_Initialize
  2077 ;;		_drawCircle
  2078 ;;		_drawRect
  2079 ;;		_drawtext
  2080 ;;		_fillCircle
  2081 ;;		_fillScreen
  2082 ;;		_strcpy
  2083 ;; This function is called by:
  2084 ;;		_main
  2085 ;; This function uses a non-reentrant model
  2086 ;;
  2087                           
  2088                           	psect	text3
  2089  00001C                     __ptext3:
  2090                           	opt stack 0
  2091  00001C                     _Initialize_LCD_Screen:
  2092                           	opt stack 21
  2093                           
  2094                           ;Main_Screen.c: 56: LCD_Reset();
  2095                           
  2096                           ;incstack = 0
  2097  00001C  EC4C  F014         	call	_LCD_Reset	;wreg free
  2098                           
  2099                           ;Main_Screen.c: 57: TFT_GreenTab_Initialize();
  2100  000020  ECAD  F013         	call	_TFT_GreenTab_Initialize	;wreg free
  2101                           
  2102                           ;Main_Screen.c: 59: fillScreen(0x0000);
  2103  000024  0E00               	movlw	0
  2104  000026  6E23               	movwf	fillScreen@color+1,c
  2105  000028  0E00               	movlw	0
  2106  00002A  6E22               	movwf	fillScreen@color,c
  2107  00002C  ECFA  F013         	call	_fillScreen	;wreg free
  2108                           
  2109                           ;Main_Screen.c: 61: txt = buffer;
  2110  000030  0EAC               	movlw	low _buffer
  2111  000032  6E47               	movwf	_txt,c
  2112  000034  0E00               	movlw	high _buffer
  2113  000036  6E48               	movwf	_txt+1,c
  2114                           
  2115                           ;Main_Screen.c: 63: strcpy(txt, "Mode:");
  2116  000038  C047  F00F         	movff	_txt,strcpy@to
  2117  00003C  C048  F010         	movff	_txt+1,strcpy@to+1
  2118  000040  0EE4               	movlw	low STR_1
  2119  000042  6E11               	movwf	strcpy@from,c
  2120  000044  0EFF               	movlw	high STR_1
  2121  000046  6E12               	movwf	strcpy@from+1,c
  2122  000048  EC67  F013         	call	_strcpy	;wreg free
  2123                           
  2124                           ;Main_Screen.c: 64: drawtext(2, 2, txt, 0xFFFF, 0x0000, 1);
  2125  00004C  0E02               	movlw	2
  2126  00004E  6E37               	movwf	drawtext@y,c
  2127  000050  C047  F038         	movff	_txt,drawtext@_text
  2128  000054  C048  F039         	movff	_txt+1,drawtext@_text+1
  2129  000058  0EFF               	movlw	255
  2130  00005A  6E3B               	movwf	drawtext@color+1,c
  2131  00005C  683A               	setf	drawtext@color,c
  2132  00005E  0E00               	movlw	0
  2133  000060  6E3D               	movwf	drawtext@bg+1,c
  2134  000062  0E00               	movlw	0
  2135  000064  6E3C               	movwf	drawtext@bg,c
  2136  000066  0E01               	movlw	1
  2137  000068  6E3E               	movwf	drawtext@size,c
  2138  00006A  0E02               	movlw	2
  2139  00006C  EC24  F00A         	call	_drawtext
  2140                           
  2141                           ;Main_Screen.c: 65: drawtext(35,2, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  2142  000070  0E02               	movlw	2
  2143  000072  6E37               	movwf	drawtext@y,c
  2144  000074  0E64               	movlw	low _Act_Mode_Txt
  2145  000076  6E38               	movwf	drawtext@_text,c
  2146  000078  0E00               	movlw	high _Act_Mode_Txt
  2147  00007A  6E39               	movwf	drawtext@_text+1,c
  2148  00007C  0EFF               	movlw	255
  2149  00007E  6E3B               	movwf	drawtext@color+1,c
  2150  000080  683A               	setf	drawtext@color,c
  2151  000082  0E00               	movlw	0
  2152  000084  6E3D               	movwf	drawtext@bg+1,c
  2153  000086  0E00               	movlw	0
  2154  000088  6E3C               	movwf	drawtext@bg,c
  2155  00008A  0E01               	movlw	1
  2156  00008C  6E3E               	movwf	drawtext@size,c
  2157  00008E  0E23               	movlw	35
  2158  000090  EC24  F00A         	call	_drawtext
  2159                           
  2160                           ;Main_Screen.c: 66: strcpy(txt, "LSV:");
  2161  000094  C047  F00F         	movff	_txt,strcpy@to
  2162  000098  C048  F010         	movff	_txt+1,strcpy@to+1
  2163  00009C  0EEA               	movlw	low STR_2
  2164  00009E  6E11               	movwf	strcpy@from,c
  2165  0000A0  0EFF               	movlw	high STR_2
  2166  0000A2  6E12               	movwf	strcpy@from+1,c
  2167  0000A4  EC67  F013         	call	_strcpy	;wreg free
  2168                           
  2169                           ;Main_Screen.c: 67: drawtext(50, 2, txt, 0xFFFF, 0x0000, 1);
  2170  0000A8  0E02               	movlw	2
  2171  0000AA  6E37               	movwf	drawtext@y,c
  2172  0000AC  C047  F038         	movff	_txt,drawtext@_text
  2173  0000B0  C048  F039         	movff	_txt+1,drawtext@_text+1
  2174  0000B4  0EFF               	movlw	255
  2175  0000B6  6E3B               	movwf	drawtext@color+1,c
  2176  0000B8  683A               	setf	drawtext@color,c
  2177  0000BA  0E00               	movlw	0
  2178  0000BC  6E3D               	movwf	drawtext@bg+1,c
  2179  0000BE  0E00               	movlw	0
  2180  0000C0  6E3C               	movwf	drawtext@bg,c
  2181  0000C2  0E01               	movlw	1
  2182  0000C4  6E3E               	movwf	drawtext@size,c
  2183  0000C6  0E32               	movlw	50
  2184  0000C8  EC24  F00A         	call	_drawtext
  2185                           
  2186                           ;Main_Screen.c: 68: drawtext(75,2, Light_Sensor_Voltage_Txt, 0xFFFF, 0x0000, 1);
  2187  0000CC  0E02               	movlw	2
  2188  0000CE  6E37               	movwf	drawtext@y,c
  2189  0000D0  0E96               	movlw	low _Light_Sensor_Voltage_Txt
  2190  0000D2  6E38               	movwf	drawtext@_text,c
  2191  0000D4  0E00               	movlw	high _Light_Sensor_Voltage_Txt
  2192  0000D6  6E39               	movwf	drawtext@_text+1,c
  2193  0000D8  0EFF               	movlw	255
  2194  0000DA  6E3B               	movwf	drawtext@color+1,c
  2195  0000DC  683A               	setf	drawtext@color,c
  2196  0000DE  0E00               	movlw	0
  2197  0000E0  6E3D               	movwf	drawtext@bg+1,c
  2198  0000E2  0E00               	movlw	0
  2199  0000E4  6E3C               	movwf	drawtext@bg,c
  2200  0000E6  0E01               	movlw	1
  2201  0000E8  6E3E               	movwf	drawtext@size,c
  2202  0000EA  0E4B               	movlw	75
  2203  0000EC  EC24  F00A         	call	_drawtext
  2204                           
  2205                           ;Main_Screen.c: 69: strcpy(txt, "-D");
  2206  0000F0  C047  F00F         	movff	_txt,strcpy@to
  2207  0000F4  C048  F010         	movff	_txt+1,strcpy@to+1
  2208  0000F8  0EF7               	movlw	low STR_3
  2209  0000FA  6E11               	movwf	strcpy@from,c
  2210  0000FC  0EFF               	movlw	high STR_3
  2211  0000FE  6E12               	movwf	strcpy@from+1,c
  2212  000100  EC67  F013         	call	_strcpy	;wreg free
  2213                           
  2214                           ;Main_Screen.c: 70: drawtext(100,2, Light_Sensor_Mode_Txt, 0xFFFF, 0x0000, 1);
  2215  000104  0E02               	movlw	2
  2216  000106  6E37               	movwf	drawtext@y,c
  2217  000108  0E61               	movlw	low _Light_Sensor_Mode_Txt
  2218  00010A  6E38               	movwf	drawtext@_text,c
  2219  00010C  0E00               	movlw	high _Light_Sensor_Mode_Txt
  2220  00010E  6E39               	movwf	drawtext@_text+1,c
  2221  000110  0EFF               	movlw	255
  2222  000112  6E3B               	movwf	drawtext@color+1,c
  2223  000114  683A               	setf	drawtext@color,c
  2224  000116  0E00               	movlw	0
  2225  000118  6E3D               	movwf	drawtext@bg+1,c
  2226  00011A  0E00               	movlw	0
  2227  00011C  6E3C               	movwf	drawtext@bg,c
  2228  00011E  0E01               	movlw	1
  2229  000120  6E3E               	movwf	drawtext@size,c
  2230  000122  0E64               	movlw	100
  2231  000124  EC24  F00A         	call	_drawtext
  2232                           
  2233                           ;Main_Screen.c: 73: strcpy(txt, "*");
  2234  000128  C047  F00F         	movff	_txt,strcpy@to
  2235  00012C  C048  F010         	movff	_txt+1,strcpy@to+1
  2236  000130  0EFC               	movlw	low STR_4
  2237  000132  6E11               	movwf	strcpy@from,c
  2238  000134  0EFF               	movlw	high STR_4
  2239  000136  6E12               	movwf	strcpy@from+1,c
  2240  000138  EC67  F013         	call	_strcpy	;wreg free
  2241                           
  2242                           ;Main_Screen.c: 74: drawtext(120, 2, txt, 0xFFFF, 0x0000, 1);
  2243  00013C  0E02               	movlw	2
  2244  00013E  6E37               	movwf	drawtext@y,c
  2245  000140  C047  F038         	movff	_txt,drawtext@_text
  2246  000144  C048  F039         	movff	_txt+1,drawtext@_text+1
  2247  000148  0EFF               	movlw	255
  2248  00014A  6E3B               	movwf	drawtext@color+1,c
  2249  00014C  683A               	setf	drawtext@color,c
  2250  00014E  0E00               	movlw	0
  2251  000150  6E3D               	movwf	drawtext@bg+1,c
  2252  000152  0E00               	movlw	0
  2253  000154  6E3C               	movwf	drawtext@bg,c
  2254  000156  0E01               	movlw	1
  2255  000158  6E3E               	movwf	drawtext@size,c
  2256  00015A  0E78               	movlw	120
  2257  00015C  EC24  F00A         	call	_drawtext
  2258                           
  2259                           ;Main_Screen.c: 77: strcpy(txt, "NSP NSLT EWP EWLT R S");
  2260  000160  C047  F00F         	movff	_txt,strcpy@to
  2261  000164  C048  F010         	movff	_txt+1,strcpy@to+1
  2262  000168  0EAA               	movlw	low STR_5
  2263  00016A  6E11               	movwf	strcpy@from,c
  2264  00016C  0EFF               	movlw	high STR_5
  2265  00016E  6E12               	movwf	strcpy@from+1,c
  2266  000170  EC67  F013         	call	_strcpy	;wreg free
  2267                           
  2268                           ;Main_Screen.c: 78: drawtext(1, 11, txt, 0xFFFF, 0x0000, 1);
  2269  000174  0E0B               	movlw	11
  2270  000176  6E37               	movwf	drawtext@y,c
  2271  000178  C047  F038         	movff	_txt,drawtext@_text
  2272  00017C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2273  000180  0EFF               	movlw	255
  2274  000182  6E3B               	movwf	drawtext@color+1,c
  2275  000184  683A               	setf	drawtext@color,c
  2276  000186  0E00               	movlw	0
  2277  000188  6E3D               	movwf	drawtext@bg+1,c
  2278  00018A  0E00               	movlw	0
  2279  00018C  6E3C               	movwf	drawtext@bg,c
  2280  00018E  0E01               	movlw	1
  2281  000190  6E3E               	movwf	drawtext@size,c
  2282  000192  0E01               	movlw	1
  2283  000194  EC24  F00A         	call	_drawtext
  2284                           
  2285                           ;Main_Screen.c: 79: drawtext(8, 11+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  2286  000198  0E14               	movlw	20
  2287  00019A  6E37               	movwf	drawtext@y,c
  2288  00019C  0E70               	movlw	low _SW_NSPED_Txt
  2289  00019E  6E38               	movwf	drawtext@_text,c
  2290  0001A0  0E00               	movlw	high _SW_NSPED_Txt
  2291  0001A2  6E39               	movwf	drawtext@_text+1,c
  2292  0001A4  0EFF               	movlw	255
  2293  0001A6  6E3B               	movwf	drawtext@color+1,c
  2294  0001A8  683A               	setf	drawtext@color,c
  2295  0001AA  0E00               	movlw	0
  2296  0001AC  6E3D               	movwf	drawtext@bg+1,c
  2297  0001AE  0E00               	movlw	0
  2298  0001B0  6E3C               	movwf	drawtext@bg,c
  2299  0001B2  0E01               	movlw	1
  2300  0001B4  6E3E               	movwf	drawtext@size,c
  2301  0001B6  0E08               	movlw	8
  2302  0001B8  EC24  F00A         	call	_drawtext
  2303                           
  2304                           ;Main_Screen.c: 80: drawtext(35, 11+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  2305  0001BC  0E14               	movlw	20
  2306  0001BE  6E37               	movwf	drawtext@y,c
  2307  0001C0  0E6E               	movlw	low _SW_NSLT_Txt
  2308  0001C2  6E38               	movwf	drawtext@_text,c
  2309  0001C4  0E00               	movlw	high _SW_NSLT_Txt
  2310  0001C6  6E39               	movwf	drawtext@_text+1,c
  2311  0001C8  0EFF               	movlw	255
  2312  0001CA  6E3B               	movwf	drawtext@color+1,c
  2313  0001CC  683A               	setf	drawtext@color,c
  2314  0001CE  0E00               	movlw	0
  2315  0001D0  6E3D               	movwf	drawtext@bg+1,c
  2316  0001D2  0E00               	movlw	0
  2317  0001D4  6E3C               	movwf	drawtext@bg,c
  2318  0001D6  0E01               	movlw	1
  2319  0001D8  6E3E               	movwf	drawtext@size,c
  2320  0001DA  0E23               	movlw	35
  2321  0001DC  EC24  F00A         	call	_drawtext
  2322                           
  2323                           ;Main_Screen.c: 81: drawtext(60, 11+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  2324  0001E0  0E14               	movlw	20
  2325  0001E2  6E37               	movwf	drawtext@y,c
  2326  0001E4  0E6C               	movlw	low _SW_EWPED_Txt
  2327  0001E6  6E38               	movwf	drawtext@_text,c
  2328  0001E8  0E00               	movlw	high _SW_EWPED_Txt
  2329  0001EA  6E39               	movwf	drawtext@_text+1,c
  2330  0001EC  0EFF               	movlw	255
  2331  0001EE  6E3B               	movwf	drawtext@color+1,c
  2332  0001F0  683A               	setf	drawtext@color,c
  2333  0001F2  0E00               	movlw	0
  2334  0001F4  6E3D               	movwf	drawtext@bg+1,c
  2335  0001F6  0E00               	movlw	0
  2336  0001F8  6E3C               	movwf	drawtext@bg,c
  2337  0001FA  0E01               	movlw	1
  2338  0001FC  6E3E               	movwf	drawtext@size,c
  2339  0001FE  0E3C               	movlw	60
  2340  000200  EC24  F00A         	call	_drawtext
  2341                           
  2342                           ;Main_Screen.c: 82: drawtext(85, 11+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  2343  000204  0E14               	movlw	20
  2344  000206  6E37               	movwf	drawtext@y,c
  2345  000208  0E6A               	movlw	low _SW_EWLT_Txt
  2346  00020A  6E38               	movwf	drawtext@_text,c
  2347  00020C  0E00               	movlw	high _SW_EWLT_Txt
  2348  00020E  6E39               	movwf	drawtext@_text+1,c
  2349  000210  0EFF               	movlw	255
  2350  000212  6E3B               	movwf	drawtext@color+1,c
  2351  000214  683A               	setf	drawtext@color,c
  2352  000216  0E00               	movlw	0
  2353  000218  6E3D               	movwf	drawtext@bg+1,c
  2354  00021A  0E00               	movlw	0
  2355  00021C  6E3C               	movwf	drawtext@bg,c
  2356  00021E  0E01               	movlw	1
  2357  000220  6E3E               	movwf	drawtext@size,c
  2358  000222  0E55               	movlw	85
  2359  000224  EC24  F00A         	call	_drawtext
  2360                           
  2361                           ;Main_Screen.c: 83: drawtext(108, 11+9, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  2362  000228  0E14               	movlw	20
  2363  00022A  6E37               	movwf	drawtext@y,c
  2364  00022C  0E66               	movlw	low _FlashingR_Txt
  2365  00022E  6E38               	movwf	drawtext@_text,c
  2366  000230  0E00               	movlw	high _FlashingR_Txt
  2367  000232  6E39               	movwf	drawtext@_text+1,c
  2368  000234  0EFF               	movlw	255
  2369  000236  6E3B               	movwf	drawtext@color+1,c
  2370  000238  683A               	setf	drawtext@color,c
  2371  00023A  0E00               	movlw	0
  2372  00023C  6E3D               	movwf	drawtext@bg+1,c
  2373  00023E  0E00               	movlw	0
  2374  000240  6E3C               	movwf	drawtext@bg,c
  2375  000242  0E01               	movlw	1
  2376  000244  6E3E               	movwf	drawtext@size,c
  2377  000246  0E6C               	movlw	108
  2378  000248  EC24  F00A         	call	_drawtext
  2379                           
  2380                           ;Main_Screen.c: 84: drawtext(119, 11+9, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  2381  00024C  0E14               	movlw	20
  2382  00024E  6E37               	movwf	drawtext@y,c
  2383  000250  0E68               	movlw	low _FlashingS_Txt
  2384  000252  6E38               	movwf	drawtext@_text,c
  2385  000254  0E00               	movlw	high _FlashingS_Txt
  2386  000256  6E39               	movwf	drawtext@_text+1,c
  2387  000258  0EFF               	movlw	255
  2388  00025A  6E3B               	movwf	drawtext@color+1,c
  2389  00025C  683A               	setf	drawtext@color,c
  2390  00025E  0E00               	movlw	0
  2391  000260  6E3D               	movwf	drawtext@bg+1,c
  2392  000262  0E00               	movlw	0
  2393  000264  6E3C               	movwf	drawtext@bg,c
  2394  000266  0E01               	movlw	1
  2395  000268  6E3E               	movwf	drawtext@size,c
  2396  00026A  0E77               	movlw	119
  2397  00026C  EC24  F00A         	call	_drawtext
  2398                           
  2399                           ;Main_Screen.c: 88: strcpy(txt, "NORTH/SOUTH");
  2400  000270  C047  F00F         	movff	_txt,strcpy@to
  2401  000274  C048  F010         	movff	_txt+1,strcpy@to+1
  2402  000278  0EC0               	movlw	low STR_6
  2403  00027A  6E11               	movwf	strcpy@from,c
  2404  00027C  0EFF               	movlw	high STR_6
  2405  00027E  6E12               	movwf	strcpy@from+1,c
  2406  000280  EC67  F013         	call	_strcpy	;wreg free
  2407                           
  2408                           ;Main_Screen.c: 89: drawtext (30, 30 , txt, 0x001F, 0x0000, 1);
  2409  000284  0E1E               	movlw	30
  2410  000286  6E37               	movwf	drawtext@y,c
  2411  000288  C047  F038         	movff	_txt,drawtext@_text
  2412  00028C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2413  000290  0E00               	movlw	0
  2414  000292  6E3B               	movwf	drawtext@color+1,c
  2415  000294  0E1F               	movlw	31
  2416  000296  6E3A               	movwf	drawtext@color,c
  2417  000298  0E00               	movlw	0
  2418  00029A  6E3D               	movwf	drawtext@bg+1,c
  2419  00029C  0E00               	movlw	0
  2420  00029E  6E3C               	movwf	drawtext@bg,c
  2421  0002A0  0E01               	movlw	1
  2422  0002A2  6E3E               	movwf	drawtext@size,c
  2423  0002A4  0E1E               	movlw	30
  2424  0002A6  EC24  F00A         	call	_drawtext
  2425                           
  2426                           ;Main_Screen.c: 90: drawRect (30, 30 + 16-8, 60, 18, 0x001F);
  2427  0002AA  0E00               	movlw	0
  2428  0002AC  6E22               	movwf	drawRect@x+1,c
  2429  0002AE  0E1E               	movlw	30
  2430  0002B0  6E21               	movwf	drawRect@x,c
  2431  0002B2  0E00               	movlw	0
  2432  0002B4  6E24               	movwf	drawRect@y+1,c
  2433  0002B6  0E26               	movlw	38
  2434  0002B8  6E23               	movwf	drawRect@y,c
  2435  0002BA  0E00               	movlw	0
  2436  0002BC  6E26               	movwf	drawRect@w+1,c
  2437  0002BE  0E3C               	movlw	60
  2438  0002C0  6E25               	movwf	drawRect@w,c
  2439  0002C2  0E00               	movlw	0
  2440  0002C4  6E28               	movwf	drawRect@h+1,c
  2441  0002C6  0E12               	movlw	18
  2442  0002C8  6E27               	movwf	drawRect@h,c
  2443  0002CA  0E00               	movlw	0
  2444  0002CC  6E2A               	movwf	drawRect@color+1,c
  2445  0002CE  0E1F               	movlw	31
  2446  0002D0  6E29               	movwf	drawRect@color,c
  2447  0002D2  ECCA  F010         	call	_drawRect	;wreg free
  2448                           
  2449                           ;Main_Screen.c: 91: drawCircle(40, 30 + 16 , 7, 0xF800);
  2450  0002D6  0E00               	movlw	0
  2451  0002D8  6E1B               	movwf	drawCircle@x0+1,c
  2452  0002DA  0E28               	movlw	40
  2453  0002DC  6E1A               	movwf	drawCircle@x0,c
  2454  0002DE  0E00               	movlw	0
  2455  0002E0  6E1D               	movwf	drawCircle@y0+1,c
  2456  0002E2  0E2E               	movlw	46
  2457  0002E4  6E1C               	movwf	drawCircle@y0,c
  2458  0002E6  0E00               	movlw	0
  2459  0002E8  6E1F               	movwf	drawCircle@r+1,c
  2460  0002EA  0E07               	movlw	7
  2461  0002EC  6E1E               	movwf	drawCircle@r,c
  2462  0002EE  0EF8               	movlw	248
  2463  0002F0  6E21               	movwf	drawCircle@color+1,c
  2464  0002F2  0E00               	movlw	0
  2465  0002F4  6E20               	movwf	drawCircle@color,c
  2466  0002F6  ECB9  F006         	call	_drawCircle	;wreg free
  2467                           
  2468                           ;Main_Screen.c: 92: drawCircle(60, 30 + 16 , 7, 0xFFE0);
  2469  0002FA  0E00               	movlw	0
  2470  0002FC  6E1B               	movwf	drawCircle@x0+1,c
  2471  0002FE  0E3C               	movlw	60
  2472  000300  6E1A               	movwf	drawCircle@x0,c
  2473  000302  0E00               	movlw	0
  2474  000304  6E1D               	movwf	drawCircle@y0+1,c
  2475  000306  0E2E               	movlw	46
  2476  000308  6E1C               	movwf	drawCircle@y0,c
  2477  00030A  0E00               	movlw	0
  2478  00030C  6E1F               	movwf	drawCircle@r+1,c
  2479  00030E  0E07               	movlw	7
  2480  000310  6E1E               	movwf	drawCircle@r,c
  2481  000312  0EFF               	movlw	255
  2482  000314  6E21               	movwf	drawCircle@color+1,c
  2483  000316  0EE0               	movlw	224
  2484  000318  6E20               	movwf	drawCircle@color,c
  2485  00031A  ECB9  F006         	call	_drawCircle	;wreg free
  2486                           
  2487                           ;Main_Screen.c: 93: fillCircle(80, 30 + 16 , 7, 0x07E0);
  2488  00031E  0E00               	movlw	0
  2489  000320  6E3A               	movwf	fillCircle@x0+1,c
  2490  000322  0E50               	movlw	80
  2491  000324  6E39               	movwf	fillCircle@x0,c
  2492  000326  0E00               	movlw	0
  2493  000328  6E3C               	movwf	fillCircle@y0+1,c
  2494  00032A  0E2E               	movlw	46
  2495  00032C  6E3B               	movwf	fillCircle@y0,c
  2496  00032E  0E00               	movlw	0
  2497  000330  6E3E               	movwf	fillCircle@r+1,c
  2498  000332  0E07               	movlw	7
  2499  000334  6E3D               	movwf	fillCircle@r,c
  2500  000336  0E07               	movlw	7
  2501  000338  6E40               	movwf	fillCircle@color+1,c
  2502  00033A  0EE0               	movlw	224
  2503  00033C  6E3F               	movwf	fillCircle@color,c
  2504  00033E  ECB1  F011         	call	_fillCircle	;wreg free
  2505                           
  2506                           ;Main_Screen.c: 94: drawtext (100, 30 + 10, NS_Count, 0x001F, 0x0000, 2);
  2507  000342  0E28               	movlw	40
  2508  000344  6E37               	movwf	drawtext@y,c
  2509  000346  0EA1               	movlw	low _NS_Count
  2510  000348  6E38               	movwf	drawtext@_text,c
  2511  00034A  0E00               	movlw	high _NS_Count
  2512  00034C  6E39               	movwf	drawtext@_text+1,c
  2513  00034E  0E00               	movlw	0
  2514  000350  6E3B               	movwf	drawtext@color+1,c
  2515  000352  0E1F               	movlw	31
  2516  000354  6E3A               	movwf	drawtext@color,c
  2517  000356  0E00               	movlw	0
  2518  000358  6E3D               	movwf	drawtext@bg+1,c
  2519  00035A  0E00               	movlw	0
  2520  00035C  6E3C               	movwf	drawtext@bg,c
  2521  00035E  0E02               	movlw	2
  2522  000360  6E3E               	movwf	drawtext@size,c
  2523  000362  0E64               	movlw	100
  2524  000364  EC24  F00A         	call	_drawtext
  2525                           
  2526                           ;Main_Screen.c: 97: strcpy(txt, "N/S LT");
  2527  000368  C047  F00F         	movff	_txt,strcpy@to
  2528  00036C  C048  F010         	movff	_txt+1,strcpy@to+1
  2529  000370  0ED6               	movlw	low STR_7
  2530  000372  6E11               	movwf	strcpy@from,c
  2531  000374  0EFF               	movlw	high STR_7
  2532  000376  6E12               	movwf	strcpy@from+1,c
  2533  000378  EC67  F013         	call	_strcpy	;wreg free
  2534                           
  2535                           ;Main_Screen.c: 98: drawtext (30, 60, txt, 0xF81F, 0x0000, 1);
  2536  00037C  0E3C               	movlw	60
  2537  00037E  6E37               	movwf	drawtext@y,c
  2538  000380  C047  F038         	movff	_txt,drawtext@_text
  2539  000384  C048  F039         	movff	_txt+1,drawtext@_text+1
  2540  000388  0EF8               	movlw	248
  2541  00038A  6E3B               	movwf	drawtext@color+1,c
  2542  00038C  0E1F               	movlw	31
  2543  00038E  6E3A               	movwf	drawtext@color,c
  2544  000390  0E00               	movlw	0
  2545  000392  6E3D               	movwf	drawtext@bg+1,c
  2546  000394  0E00               	movlw	0
  2547  000396  6E3C               	movwf	drawtext@bg,c
  2548  000398  0E01               	movlw	1
  2549  00039A  6E3E               	movwf	drawtext@size,c
  2550  00039C  0E1E               	movlw	30
  2551  00039E  EC24  F00A         	call	_drawtext
  2552                           
  2553                           ;Main_Screen.c: 99: drawRect (30, 60 + 16-8, 60, 18, 0xF81F);
  2554  0003A2  0E00               	movlw	0
  2555  0003A4  6E22               	movwf	drawRect@x+1,c
  2556  0003A6  0E1E               	movlw	30
  2557  0003A8  6E21               	movwf	drawRect@x,c
  2558  0003AA  0E00               	movlw	0
  2559  0003AC  6E24               	movwf	drawRect@y+1,c
  2560  0003AE  0E44               	movlw	68
  2561  0003B0  6E23               	movwf	drawRect@y,c
  2562  0003B2  0E00               	movlw	0
  2563  0003B4  6E26               	movwf	drawRect@w+1,c
  2564  0003B6  0E3C               	movlw	60
  2565  0003B8  6E25               	movwf	drawRect@w,c
  2566  0003BA  0E00               	movlw	0
  2567  0003BC  6E28               	movwf	drawRect@h+1,c
  2568  0003BE  0E12               	movlw	18
  2569  0003C0  6E27               	movwf	drawRect@h,c
  2570  0003C2  0EF8               	movlw	248
  2571  0003C4  6E2A               	movwf	drawRect@color+1,c
  2572  0003C6  0E1F               	movlw	31
  2573  0003C8  6E29               	movwf	drawRect@color,c
  2574  0003CA  ECCA  F010         	call	_drawRect	;wreg free
  2575                           
  2576                           ;Main_Screen.c: 100: fillCircle(40, 60 + 16, 7, 0xF800);
  2577  0003CE  0E00               	movlw	0
  2578  0003D0  6E3A               	movwf	fillCircle@x0+1,c
  2579  0003D2  0E28               	movlw	40
  2580  0003D4  6E39               	movwf	fillCircle@x0,c
  2581  0003D6  0E00               	movlw	0
  2582  0003D8  6E3C               	movwf	fillCircle@y0+1,c
  2583  0003DA  0E4C               	movlw	76
  2584  0003DC  6E3B               	movwf	fillCircle@y0,c
  2585  0003DE  0E00               	movlw	0
  2586  0003E0  6E3E               	movwf	fillCircle@r+1,c
  2587  0003E2  0E07               	movlw	7
  2588  0003E4  6E3D               	movwf	fillCircle@r,c
  2589  0003E6  0EF8               	movlw	248
  2590  0003E8  6E40               	movwf	fillCircle@color+1,c
  2591  0003EA  0E00               	movlw	0
  2592  0003EC  6E3F               	movwf	fillCircle@color,c
  2593  0003EE  ECB1  F011         	call	_fillCircle	;wreg free
  2594                           
  2595                           ;Main_Screen.c: 101: drawCircle(60, 60 + 16, 7, 0xFFE0);
  2596  0003F2  0E00               	movlw	0
  2597  0003F4  6E1B               	movwf	drawCircle@x0+1,c
  2598  0003F6  0E3C               	movlw	60
  2599  0003F8  6E1A               	movwf	drawCircle@x0,c
  2600  0003FA  0E00               	movlw	0
  2601  0003FC  6E1D               	movwf	drawCircle@y0+1,c
  2602  0003FE  0E4C               	movlw	76
  2603  000400  6E1C               	movwf	drawCircle@y0,c
  2604  000402  0E00               	movlw	0
  2605  000404  6E1F               	movwf	drawCircle@r+1,c
  2606  000406  0E07               	movlw	7
  2607  000408  6E1E               	movwf	drawCircle@r,c
  2608  00040A  0EFF               	movlw	255
  2609  00040C  6E21               	movwf	drawCircle@color+1,c
  2610  00040E  0EE0               	movlw	224
  2611  000410  6E20               	movwf	drawCircle@color,c
  2612  000412  ECB9  F006         	call	_drawCircle	;wreg free
  2613                           
  2614                           ;Main_Screen.c: 102: drawCircle(80, 60 + 16, 7, 0x07E0);
  2615  000416  0E00               	movlw	0
  2616  000418  6E1B               	movwf	drawCircle@x0+1,c
  2617  00041A  0E50               	movlw	80
  2618  00041C  6E1A               	movwf	drawCircle@x0,c
  2619  00041E  0E00               	movlw	0
  2620  000420  6E1D               	movwf	drawCircle@y0+1,c
  2621  000422  0E4C               	movlw	76
  2622  000424  6E1C               	movwf	drawCircle@y0,c
  2623  000426  0E00               	movlw	0
  2624  000428  6E1F               	movwf	drawCircle@r+1,c
  2625  00042A  0E07               	movlw	7
  2626  00042C  6E1E               	movwf	drawCircle@r,c
  2627  00042E  0E07               	movlw	7
  2628  000430  6E21               	movwf	drawCircle@color+1,c
  2629  000432  0EE0               	movlw	224
  2630  000434  6E20               	movwf	drawCircle@color,c
  2631  000436  ECB9  F006         	call	_drawCircle	;wreg free
  2632                           
  2633                           ;Main_Screen.c: 103: drawtext (100, 60 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  2634  00043A  0E46               	movlw	70
  2635  00043C  6E37               	movwf	drawtext@y,c
  2636  00043E  0E9E               	movlw	low _NSLT_Count
  2637  000440  6E38               	movwf	drawtext@_text,c
  2638  000442  0E00               	movlw	high _NSLT_Count
  2639  000444  6E39               	movwf	drawtext@_text+1,c
  2640  000446  0EF8               	movlw	248
  2641  000448  6E3B               	movwf	drawtext@color+1,c
  2642  00044A  0E1F               	movlw	31
  2643  00044C  6E3A               	movwf	drawtext@color,c
  2644  00044E  0E00               	movlw	0
  2645  000450  6E3D               	movwf	drawtext@bg+1,c
  2646  000452  0E00               	movlw	0
  2647  000454  6E3C               	movwf	drawtext@bg,c
  2648  000456  0E02               	movlw	2
  2649  000458  6E3E               	movwf	drawtext@size,c
  2650  00045A  0E64               	movlw	100
  2651  00045C  EC24  F00A         	call	_drawtext
  2652                           
  2653                           ;Main_Screen.c: 106: strcpy(txt, "EAST/WEST");
  2654  000460  C047  F00F         	movff	_txt,strcpy@to
  2655  000464  C048  F010         	movff	_txt+1,strcpy@to+1
  2656  000468  0ECC               	movlw	low STR_8
  2657  00046A  6E11               	movwf	strcpy@from,c
  2658  00046C  0EFF               	movlw	high STR_8
  2659  00046E  6E12               	movwf	strcpy@from+1,c
  2660  000470  EC67  F013         	call	_strcpy	;wreg free
  2661                           
  2662                           ;Main_Screen.c: 107: drawtext (30, 90, txt, 0x07FF, 0x0000, 1);
  2663  000474  0E5A               	movlw	90
  2664  000476  6E37               	movwf	drawtext@y,c
  2665  000478  C047  F038         	movff	_txt,drawtext@_text
  2666  00047C  C048  F039         	movff	_txt+1,drawtext@_text+1
  2667  000480  0E07               	movlw	7
  2668  000482  6E3B               	movwf	drawtext@color+1,c
  2669  000484  683A               	setf	drawtext@color,c
  2670  000486  0E00               	movlw	0
  2671  000488  6E3D               	movwf	drawtext@bg+1,c
  2672  00048A  0E00               	movlw	0
  2673  00048C  6E3C               	movwf	drawtext@bg,c
  2674  00048E  0E01               	movlw	1
  2675  000490  6E3E               	movwf	drawtext@size,c
  2676  000492  0E1E               	movlw	30
  2677  000494  EC24  F00A         	call	_drawtext
  2678                           
  2679                           ;Main_Screen.c: 108: drawRect (30, 90 + 16-8, 60, 18, 0x07FF);
  2680  000498  0E00               	movlw	0
  2681  00049A  6E22               	movwf	drawRect@x+1,c
  2682  00049C  0E1E               	movlw	30
  2683  00049E  6E21               	movwf	drawRect@x,c
  2684  0004A0  0E00               	movlw	0
  2685  0004A2  6E24               	movwf	drawRect@y+1,c
  2686  0004A4  0E62               	movlw	98
  2687  0004A6  6E23               	movwf	drawRect@y,c
  2688  0004A8  0E00               	movlw	0
  2689  0004AA  6E26               	movwf	drawRect@w+1,c
  2690  0004AC  0E3C               	movlw	60
  2691  0004AE  6E25               	movwf	drawRect@w,c
  2692  0004B0  0E00               	movlw	0
  2693  0004B2  6E28               	movwf	drawRect@h+1,c
  2694  0004B4  0E12               	movlw	18
  2695  0004B6  6E27               	movwf	drawRect@h,c
  2696  0004B8  0E07               	movlw	7
  2697  0004BA  6E2A               	movwf	drawRect@color+1,c
  2698  0004BC  6829               	setf	drawRect@color,c
  2699  0004BE  ECCA  F010         	call	_drawRect	;wreg free
  2700                           
  2701                           ;Main_Screen.c: 109: fillCircle(40, 90 + 16, 7, 0xF800);
  2702  0004C2  0E00               	movlw	0
  2703  0004C4  6E3A               	movwf	fillCircle@x0+1,c
  2704  0004C6  0E28               	movlw	40
  2705  0004C8  6E39               	movwf	fillCircle@x0,c
  2706  0004CA  0E00               	movlw	0
  2707  0004CC  6E3C               	movwf	fillCircle@y0+1,c
  2708  0004CE  0E6A               	movlw	106
  2709  0004D0  6E3B               	movwf	fillCircle@y0,c
  2710  0004D2  0E00               	movlw	0
  2711  0004D4  6E3E               	movwf	fillCircle@r+1,c
  2712  0004D6  0E07               	movlw	7
  2713  0004D8  6E3D               	movwf	fillCircle@r,c
  2714  0004DA  0EF8               	movlw	248
  2715  0004DC  6E40               	movwf	fillCircle@color+1,c
  2716  0004DE  0E00               	movlw	0
  2717  0004E0  6E3F               	movwf	fillCircle@color,c
  2718  0004E2  ECB1  F011         	call	_fillCircle	;wreg free
  2719                           
  2720                           ;Main_Screen.c: 110: drawCircle(60, 90 + 16, 7, 0xFFE0);
  2721  0004E6  0E00               	movlw	0
  2722  0004E8  6E1B               	movwf	drawCircle@x0+1,c
  2723  0004EA  0E3C               	movlw	60
  2724  0004EC  6E1A               	movwf	drawCircle@x0,c
  2725  0004EE  0E00               	movlw	0
  2726  0004F0  6E1D               	movwf	drawCircle@y0+1,c
  2727  0004F2  0E6A               	movlw	106
  2728  0004F4  6E1C               	movwf	drawCircle@y0,c
  2729  0004F6  0E00               	movlw	0
  2730  0004F8  6E1F               	movwf	drawCircle@r+1,c
  2731  0004FA  0E07               	movlw	7
  2732  0004FC  6E1E               	movwf	drawCircle@r,c
  2733  0004FE  0EFF               	movlw	255
  2734  000500  6E21               	movwf	drawCircle@color+1,c
  2735  000502  0EE0               	movlw	224
  2736  000504  6E20               	movwf	drawCircle@color,c
  2737  000506  ECB9  F006         	call	_drawCircle	;wreg free
  2738                           
  2739                           ;Main_Screen.c: 111: drawCircle(80, 90 + 16, 7, 0x07E0);
  2740  00050A  0E00               	movlw	0
  2741  00050C  6E1B               	movwf	drawCircle@x0+1,c
  2742  00050E  0E50               	movlw	80
  2743  000510  6E1A               	movwf	drawCircle@x0,c
  2744  000512  0E00               	movlw	0
  2745  000514  6E1D               	movwf	drawCircle@y0+1,c
  2746  000516  0E6A               	movlw	106
  2747  000518  6E1C               	movwf	drawCircle@y0,c
  2748  00051A  0E00               	movlw	0
  2749  00051C  6E1F               	movwf	drawCircle@r+1,c
  2750  00051E  0E07               	movlw	7
  2751  000520  6E1E               	movwf	drawCircle@r,c
  2752  000522  0E07               	movlw	7
  2753  000524  6E21               	movwf	drawCircle@color+1,c
  2754  000526  0EE0               	movlw	224
  2755  000528  6E20               	movwf	drawCircle@color,c
  2756  00052A  ECB9  F006         	call	_drawCircle	;wreg free
  2757                           
  2758                           ;Main_Screen.c: 112: drawtext (100, 90 + 10, EW_Count, 0x07FF, 0x0000, 2);
  2759  00052E  0E64               	movlw	100
  2760  000530  6E37               	movwf	drawtext@y,c
  2761  000532  0E5E               	movlw	low _EW_Count
  2762  000534  6E38               	movwf	drawtext@_text,c
  2763  000536  0E00               	movlw	high _EW_Count
  2764  000538  6E39               	movwf	drawtext@_text+1,c
  2765  00053A  0E07               	movlw	7
  2766  00053C  6E3B               	movwf	drawtext@color+1,c
  2767  00053E  683A               	setf	drawtext@color,c
  2768  000540  0E00               	movlw	0
  2769  000542  6E3D               	movwf	drawtext@bg+1,c
  2770  000544  0E00               	movlw	0
  2771  000546  6E3C               	movwf	drawtext@bg,c
  2772  000548  0E02               	movlw	2
  2773  00054A  6E3E               	movwf	drawtext@size,c
  2774  00054C  0E64               	movlw	100
  2775  00054E  EC24  F00A         	call	_drawtext
  2776                           
  2777                           ;Main_Screen.c: 115: strcpy(txt, "E/W LT");
  2778  000552  C047  F00F         	movff	_txt,strcpy@to
  2779  000556  C048  F010         	movff	_txt+1,strcpy@to+1
  2780  00055A  0EDD               	movlw	low STR_9
  2781  00055C  6E11               	movwf	strcpy@from,c
  2782  00055E  0EFF               	movlw	high STR_9
  2783  000560  6E12               	movwf	strcpy@from+1,c
  2784  000562  EC67  F013         	call	_strcpy	;wreg free
  2785                           
  2786                           ;Main_Screen.c: 116: drawtext (30, 120, txt, 0xFFFF, 0x0000, 1);
  2787  000566  0E78               	movlw	120
  2788  000568  6E37               	movwf	drawtext@y,c
  2789  00056A  C047  F038         	movff	_txt,drawtext@_text
  2790  00056E  C048  F039         	movff	_txt+1,drawtext@_text+1
  2791  000572  0EFF               	movlw	255
  2792  000574  6E3B               	movwf	drawtext@color+1,c
  2793  000576  683A               	setf	drawtext@color,c
  2794  000578  0E00               	movlw	0
  2795  00057A  6E3D               	movwf	drawtext@bg+1,c
  2796  00057C  0E00               	movlw	0
  2797  00057E  6E3C               	movwf	drawtext@bg,c
  2798  000580  0E01               	movlw	1
  2799  000582  6E3E               	movwf	drawtext@size,c
  2800  000584  0E1E               	movlw	30
  2801  000586  EC24  F00A         	call	_drawtext
  2802                           
  2803                           ;Main_Screen.c: 117: drawRect (30, 120 + 16-8, 60, 18, 0xFFFF);
  2804  00058A  0E00               	movlw	0
  2805  00058C  6E22               	movwf	drawRect@x+1,c
  2806  00058E  0E1E               	movlw	30
  2807  000590  6E21               	movwf	drawRect@x,c
  2808  000592  0E00               	movlw	0
  2809  000594  6E24               	movwf	drawRect@y+1,c
  2810  000596  0E80               	movlw	128
  2811  000598  6E23               	movwf	drawRect@y,c
  2812  00059A  0E00               	movlw	0
  2813  00059C  6E26               	movwf	drawRect@w+1,c
  2814  00059E  0E3C               	movlw	60
  2815  0005A0  6E25               	movwf	drawRect@w,c
  2816  0005A2  0E00               	movlw	0
  2817  0005A4  6E28               	movwf	drawRect@h+1,c
  2818  0005A6  0E12               	movlw	18
  2819  0005A8  6E27               	movwf	drawRect@h,c
  2820  0005AA  0EFF               	movlw	255
  2821  0005AC  6E2A               	movwf	drawRect@color+1,c
  2822  0005AE  6829               	setf	drawRect@color,c
  2823  0005B0  ECCA  F010         	call	_drawRect	;wreg free
  2824                           
  2825                           ;Main_Screen.c: 118: fillCircle(40, 120 + 16, 7, 0xF800);
  2826  0005B4  0E00               	movlw	0
  2827  0005B6  6E3A               	movwf	fillCircle@x0+1,c
  2828  0005B8  0E28               	movlw	40
  2829  0005BA  6E39               	movwf	fillCircle@x0,c
  2830  0005BC  0E00               	movlw	0
  2831  0005BE  6E3C               	movwf	fillCircle@y0+1,c
  2832  0005C0  0E88               	movlw	136
  2833  0005C2  6E3B               	movwf	fillCircle@y0,c
  2834  0005C4  0E00               	movlw	0
  2835  0005C6  6E3E               	movwf	fillCircle@r+1,c
  2836  0005C8  0E07               	movlw	7
  2837  0005CA  6E3D               	movwf	fillCircle@r,c
  2838  0005CC  0EF8               	movlw	248
  2839  0005CE  6E40               	movwf	fillCircle@color+1,c
  2840  0005D0  0E00               	movlw	0
  2841  0005D2  6E3F               	movwf	fillCircle@color,c
  2842  0005D4  ECB1  F011         	call	_fillCircle	;wreg free
  2843                           
  2844                           ;Main_Screen.c: 119: drawCircle(60, 120 + 16, 7, 0xFFE0);
  2845  0005D8  0E00               	movlw	0
  2846  0005DA  6E1B               	movwf	drawCircle@x0+1,c
  2847  0005DC  0E3C               	movlw	60
  2848  0005DE  6E1A               	movwf	drawCircle@x0,c
  2849  0005E0  0E00               	movlw	0
  2850  0005E2  6E1D               	movwf	drawCircle@y0+1,c
  2851  0005E4  0E88               	movlw	136
  2852  0005E6  6E1C               	movwf	drawCircle@y0,c
  2853  0005E8  0E00               	movlw	0
  2854  0005EA  6E1F               	movwf	drawCircle@r+1,c
  2855  0005EC  0E07               	movlw	7
  2856  0005EE  6E1E               	movwf	drawCircle@r,c
  2857  0005F0  0EFF               	movlw	255
  2858  0005F2  6E21               	movwf	drawCircle@color+1,c
  2859  0005F4  0EE0               	movlw	224
  2860  0005F6  6E20               	movwf	drawCircle@color,c
  2861  0005F8  ECB9  F006         	call	_drawCircle	;wreg free
  2862                           
  2863                           ;Main_Screen.c: 120: drawCircle(80, 120 + 16, 7, 0x07E0);
  2864  0005FC  0E00               	movlw	0
  2865  0005FE  6E1B               	movwf	drawCircle@x0+1,c
  2866  000600  0E50               	movlw	80
  2867  000602  6E1A               	movwf	drawCircle@x0,c
  2868  000604  0E00               	movlw	0
  2869  000606  6E1D               	movwf	drawCircle@y0+1,c
  2870  000608  0E88               	movlw	136
  2871  00060A  6E1C               	movwf	drawCircle@y0,c
  2872  00060C  0E00               	movlw	0
  2873  00060E  6E1F               	movwf	drawCircle@r+1,c
  2874  000610  0E07               	movlw	7
  2875  000612  6E1E               	movwf	drawCircle@r,c
  2876  000614  0E07               	movlw	7
  2877  000616  6E21               	movwf	drawCircle@color+1,c
  2878  000618  0EE0               	movlw	224
  2879  00061A  6E20               	movwf	drawCircle@color,c
  2880  00061C  ECB9  F006         	call	_drawCircle	;wreg free
  2881                           
  2882                           ;Main_Screen.c: 121: drawtext (100, 120 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  2883  000620  0E82               	movlw	130
  2884  000622  6E37               	movwf	drawtext@y,c
  2885  000624  0E9B               	movlw	low _EWLT_Count
  2886  000626  6E38               	movwf	drawtext@_text,c
  2887  000628  0E00               	movlw	high _EWLT_Count
  2888  00062A  6E39               	movwf	drawtext@_text+1,c
  2889  00062C  0EFF               	movlw	255
  2890  00062E  6E3B               	movwf	drawtext@color+1,c
  2891  000630  683A               	setf	drawtext@color,c
  2892  000632  0E00               	movlw	0
  2893  000634  6E3D               	movwf	drawtext@bg+1,c
  2894  000636  0E00               	movlw	0
  2895  000638  6E3C               	movwf	drawtext@bg,c
  2896  00063A  0E02               	movlw	2
  2897  00063C  6E3E               	movwf	drawtext@size,c
  2898  00063E  0E64               	movlw	100
  2899  000640  EC24  F00A         	call	_drawtext
  2900                           
  2901                           ;Main_Screen.c: 124: strcpy(txt, "PNS");
  2902  000644  C047  F00F         	movff	_txt,strcpy@to
  2903  000648  C048  F010         	movff	_txt+1,strcpy@to+1
  2904  00064C  0EEF               	movlw	low STR_10
  2905  00064E  6E11               	movwf	strcpy@from,c
  2906  000650  0EFF               	movlw	high STR_10
  2907  000652  6E12               	movwf	strcpy@from+1,c
  2908  000654  EC67  F013         	call	_strcpy	;wreg free
  2909                           
  2910                           ;Main_Screen.c: 125: drawtext(3, 30, txt, 0x001F, 0x0000, 1);
  2911  000658  0E1E               	movlw	30
  2912  00065A  6E37               	movwf	drawtext@y,c
  2913  00065C  C047  F038         	movff	_txt,drawtext@_text
  2914  000660  C048  F039         	movff	_txt+1,drawtext@_text+1
  2915  000664  0E00               	movlw	0
  2916  000666  6E3B               	movwf	drawtext@color+1,c
  2917  000668  0E1F               	movlw	31
  2918  00066A  6E3A               	movwf	drawtext@color,c
  2919  00066C  0E00               	movlw	0
  2920  00066E  6E3D               	movwf	drawtext@bg+1,c
  2921  000670  0E00               	movlw	0
  2922  000672  6E3C               	movwf	drawtext@bg,c
  2923  000674  0E01               	movlw	1
  2924  000676  6E3E               	movwf	drawtext@size,c
  2925  000678  0E03               	movlw	3
  2926  00067A  EC24  F00A         	call	_drawtext
  2927                           
  2928                           ;Main_Screen.c: 126: drawtext(2, 40, PED_NS_Count, 0x001F, 0x0000, 2);
  2929  00067E  0E28               	movlw	40
  2930  000680  6E37               	movwf	drawtext@y,c
  2931  000682  0EA7               	movlw	low _PED_NS_Count
  2932  000684  6E38               	movwf	drawtext@_text,c
  2933  000686  0E00               	movlw	high _PED_NS_Count
  2934  000688  6E39               	movwf	drawtext@_text+1,c
  2935  00068A  0E00               	movlw	0
  2936  00068C  6E3B               	movwf	drawtext@color+1,c
  2937  00068E  0E1F               	movlw	31
  2938  000690  6E3A               	movwf	drawtext@color,c
  2939  000692  0E00               	movlw	0
  2940  000694  6E3D               	movwf	drawtext@bg+1,c
  2941  000696  0E00               	movlw	0
  2942  000698  6E3C               	movwf	drawtext@bg,c
  2943  00069A  0E02               	movlw	2
  2944  00069C  6E3E               	movwf	drawtext@size,c
  2945  00069E  0E02               	movlw	2
  2946  0006A0  EC24  F00A         	call	_drawtext
  2947                           
  2948                           ;Main_Screen.c: 130: strcpy(txt, "PEW");
  2949  0006A4  C047  F00F         	movff	_txt,strcpy@to
  2950  0006A8  C048  F010         	movff	_txt+1,strcpy@to+1
  2951  0006AC  0EF3               	movlw	low STR_11
  2952  0006AE  6E11               	movwf	strcpy@from,c
  2953  0006B0  0EFF               	movlw	high STR_11
  2954  0006B2  6E12               	movwf	strcpy@from+1,c
  2955  0006B4  EC67  F013         	call	_strcpy	;wreg free
  2956                           
  2957                           ;Main_Screen.c: 131: drawtext(3, 90, txt, 0x07FF, 0x0000, 1);
  2958  0006B8  0E5A               	movlw	90
  2959  0006BA  6E37               	movwf	drawtext@y,c
  2960  0006BC  C047  F038         	movff	_txt,drawtext@_text
  2961  0006C0  C048  F039         	movff	_txt+1,drawtext@_text+1
  2962  0006C4  0E07               	movlw	7
  2963  0006C6  6E3B               	movwf	drawtext@color+1,c
  2964  0006C8  683A               	setf	drawtext@color,c
  2965  0006CA  0E00               	movlw	0
  2966  0006CC  6E3D               	movwf	drawtext@bg+1,c
  2967  0006CE  0E00               	movlw	0
  2968  0006D0  6E3C               	movwf	drawtext@bg,c
  2969  0006D2  0E01               	movlw	1
  2970  0006D4  6E3E               	movwf	drawtext@size,c
  2971  0006D6  0E03               	movlw	3
  2972  0006D8  EC24  F00A         	call	_drawtext
  2973                           
  2974                           ;Main_Screen.c: 132: drawtext(2, 100, PED_EW_Count, 0x07FF, 0x0000, 2);
  2975  0006DC  0E64               	movlw	100
  2976  0006DE  6E37               	movwf	drawtext@y,c
  2977  0006E0  0EA4               	movlw	low _PED_EW_Count
  2978  0006E2  6E38               	movwf	drawtext@_text,c
  2979  0006E4  0E00               	movlw	high _PED_EW_Count
  2980  0006E6  6E39               	movwf	drawtext@_text+1,c
  2981  0006E8  0E07               	movlw	7
  2982  0006EA  6E3B               	movwf	drawtext@color+1,c
  2983  0006EC  683A               	setf	drawtext@color,c
  2984  0006EE  0E00               	movlw	0
  2985  0006F0  6E3D               	movwf	drawtext@bg+1,c
  2986  0006F2  0E00               	movlw	0
  2987  0006F4  6E3C               	movwf	drawtext@bg,c
  2988  0006F6  0E02               	movlw	2
  2989  0006F8  6E3E               	movwf	drawtext@size,c
  2990  0006FA  0E02               	movlw	2
  2991  0006FC  EC24  F00A         	call	_drawtext
  2992                           
  2993                           ;Main_Screen.c: 134: if (1 == 0)
  2994  000700  D005               	goto	l5620
  2995                           
  2996                           ;Main_Screen.c: 135: {
  2997                           ;Main_Screen.c: 136: Timing_Txt[0] = 'S';
  2998  000702  0E53               	movlw	83
  2999  000704  0100               	movlb	0	; () banked
  3000  000706  6F80               	movwf	_Timing_Txt& (0+255),b
  3001                           
  3002                           ;Main_Screen.c: 137: Timing_Txt[1] = 'P';
  3003  000708  0E50               	movlw	80
  3004  00070A  D004               	goto	L1
  3005  00070C                     l5620:
  3006                           
  3007                           ;Main_Screen.c: 139: else
  3008                           ;Main_Screen.c: 140: {
  3009                           ;Main_Screen.c: 141: Timing_Txt[0] = 'F';
  3010  00070C  0E46               	movlw	70
  3011  00070E  0100               	movlb	0	; () banked
  3012  000710  6F80               	movwf	_Timing_Txt& (0+255),b
  3013                           
  3014                           ;Main_Screen.c: 142: Timing_Txt[1] = 'S';
  3015  000712  0E53               	movlw	83
  3016  000714                     L1:
  3017  000714  0100               	movlb	0	; () banked
  3018  000716  6F81               	movwf	(_Timing_Txt+1)& (0+255),b
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;Main_Screen.c: 143: }
  3022                           ;Main_Screen.c: 144: Timing_Txt[2] = 25/10 + '0';
  3023  000718  0E32               	movlw	50
  3024  00071A  0100               	movlb	0	; () banked
  3025  00071C  6F82               	movwf	(_Timing_Txt+2)& (0+255),b
  3026                           
  3027                           ;Main_Screen.c: 145: Timing_Txt[3] = 25%10 + '0';
  3028  00071E  0E35               	movlw	53
  3029  000720  0100               	movlb	0	; () banked
  3030  000722  6F83               	movwf	(_Timing_Txt+3)& (0+255),b
  3031                           
  3032                           ;Main_Screen.c: 146: Timing_Txt[5] = 1%10 + '0';
  3033  000724  0E31               	movlw	49
  3034  000726  0100               	movlb	0	; () banked
  3035  000728  6F85               	movwf	(_Timing_Txt+5)& (0+255),b
  3036                           
  3037                           ;Main_Screen.c: 147: Timing_Txt[7] = 05/10 + '0';
  3038  00072A  0E30               	movlw	48
  3039  00072C  0100               	movlb	0	; () banked
  3040  00072E  6F87               	movwf	(_Timing_Txt+7)& (0+255),b
  3041                           
  3042                           ;Main_Screen.c: 148: Timing_Txt[8] = 05%10 + '0';
  3043  000730  0E35               	movlw	53
  3044  000732  0100               	movlb	0	; () banked
  3045  000734  6F88               	movwf	(_Timing_Txt+8)& (0+255),b
  3046                           
  3047                           ;Main_Screen.c: 149: Timing_Txt[10] = 8 + '0';
  3048  000736  0E38               	movlw	56
  3049  000738  0100               	movlb	0	; () banked
  3050  00073A  6F8A               	movwf	(_Timing_Txt+10)& (0+255),b
  3051                           
  3052                           ;Main_Screen.c: 150: Timing_Txt[11] = 7 + '0';
  3053  00073C  0E37               	movlw	55
  3054  00073E  0100               	movlb	0	; () banked
  3055  000740  6F8B               	movwf	(_Timing_Txt+11)& (0+255),b
  3056                           
  3057                           ;Main_Screen.c: 151: Timing_Txt[12] = 8 + '0';
  3058  000742  0E38               	movlw	56
  3059  000744  0100               	movlb	0	; () banked
  3060  000746  6F8C               	movwf	(_Timing_Txt+12)& (0+255),b
  3061                           
  3062                           ;Main_Screen.c: 152: Timing_Txt[13] = 7 + '0';
  3063  000748  0E37               	movlw	55
  3064  00074A  0100               	movlb	0	; () banked
  3065  00074C  6F8D               	movwf	(_Timing_Txt+13)& (0+255),b
  3066                           
  3067                           ;Main_Screen.c: 153: Timing_Txt[14] = 6 + '0';
  3068  00074E  0E36               	movlw	54
  3069  000750  0100               	movlb	0	; () banked
  3070  000752  6F8E               	movwf	(_Timing_Txt+14)& (0+255),b
  3071                           
  3072                           ;Main_Screen.c: 154: Timing_Txt[15] = 7 + '0';
  3073  000754  0E37               	movlw	55
  3074  000756  0100               	movlb	0	; () banked
  3075  000758  6F8F               	movwf	(_Timing_Txt+15)& (0+255),b
  3076                           
  3077                           ;Main_Screen.c: 155: Timing_Txt[17] = 6 + '0';
  3078  00075A  0E36               	movlw	54
  3079  00075C  0100               	movlb	0	; () banked
  3080  00075E  6F91               	movwf	(_Timing_Txt+17)& (0+255),b
  3081                           
  3082                           ;Main_Screen.c: 156: Timing_Txt[18] = 7 + '0';
  3083  000760  0E37               	movlw	55
  3084  000762  0100               	movlb	0	; () banked
  3085  000764  6F92               	movwf	(_Timing_Txt+18)& (0+255),b
  3086                           
  3087                           ;Main_Screen.c: 157: Timing_Txt[19] = 6 + '0';
  3088  000766  0E36               	movlw	54
  3089  000768  0100               	movlb	0	; () banked
  3090  00076A  6F93               	movwf	(_Timing_Txt+19)& (0+255),b
  3091                           
  3092                           ;Main_Screen.c: 158: Timing_Txt[20] = 8 + '0';
  3093  00076C  0E38               	movlw	56
  3094  00076E  0100               	movlb	0	; () banked
  3095  000770  6F94               	movwf	(_Timing_Txt+20)& (0+255),b
  3096                           
  3097                           ; BSR set to: 0
  3098                           ;Main_Screen.c: 159: drawtext(1, 150, Timing_Txt, 0xFFFF, 0x0000, 1);
  3099  000772  0E96               	movlw	150
  3100  000774  6E37               	movwf	drawtext@y,c
  3101  000776  0E80               	movlw	low _Timing_Txt
  3102  000778  6E38               	movwf	drawtext@_text,c
  3103  00077A  0E00               	movlw	high _Timing_Txt
  3104  00077C  6E39               	movwf	drawtext@_text+1,c
  3105  00077E  0EFF               	movlw	255
  3106  000780  6E3B               	movwf	drawtext@color+1,c
  3107  000782  683A               	setf	drawtext@color,c
  3108  000784  0E00               	movlw	0
  3109  000786  6E3D               	movwf	drawtext@bg+1,c
  3110  000788  0E00               	movlw	0
  3111  00078A  6E3C               	movwf	drawtext@bg,c
  3112  00078C  0E01               	movlw	1
  3113  00078E  6E3E               	movwf	drawtext@size,c
  3114  000790  0E01               	movlw	1
  3115  000792  EC24  F00A         	call	_drawtext
  3116  000796  0012               	return		;funcret
  3117  000798                     __end_of_Initialize_LCD_Screen:
  3118                           	opt stack 0
  3119                           tblptru	equ	0xFF8
  3120                           tblptrh	equ	0xFF7
  3121                           tblptrl	equ	0xFF6
  3122                           tablat	equ	0xFF5
  3123                           intcon	equ	0xFF2
  3124                           intcon2	equ	0xFF1
  3125                           intcon3	equ	0xFF0
  3126                           postinc0	equ	0xFEE
  3127                           wreg	equ	0xFE8
  3128                           postdec1	equ	0xFE5
  3129                           fsr1l	equ	0xFE1
  3130                           status	equ	0xFD8
  3131                           
  3132 ;; *************** function _fillScreen *****************
  3133 ;; Defined at:
  3134 ;;		line 570 in file "ST7735_TFT.c"
  3135 ;; Parameters:    Size  Location     Type
  3136 ;;  color           2   33[COMRAM] unsigned int 
  3137 ;; Auto vars:     Size  Location     Type
  3138 ;;		None
  3139 ;; Return value:  Size  Location     Type
  3140 ;;		None               void
  3141 ;; Registers used:
  3142 ;;		wreg, status,2, status,0, cstack
  3143 ;; Tracked objects:
  3144 ;;		On entry : 0/0
  3145 ;;		On exit  : 0/0
  3146 ;;		Unchanged: 0/0
  3147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3148 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3149 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3150 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3151 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3152 ;;Total ram usage:        2 bytes
  3153 ;; Hardware stack levels used:    1
  3154 ;; Hardware stack levels required when called:    6
  3155 ;; This function calls:
  3156 ;;		_fillRectangle
  3157 ;; This function is called by:
  3158 ;;		_Initialize_LCD_Screen
  3159 ;; This function uses a non-reentrant model
  3160 ;;
  3161                           
  3162                           	psect	text4
  3163  0027F4                     __ptext4:
  3164                           	opt stack 0
  3165  0027F4                     _fillScreen:
  3166                           	opt stack 23
  3167                           
  3168                           ;ST7735_TFT.c: 572: fillRectangle(0, 0, 128, 160, color);
  3169                           
  3170                           ;incstack = 0
  3171  0027F4  0E00               	movlw	0
  3172  0027F6  6E16               	movwf	fillRectangle@y,c
  3173  0027F8  0E80               	movlw	128
  3174  0027FA  6E17               	movwf	fillRectangle@w,c
  3175  0027FC  0EA0               	movlw	160
  3176  0027FE  6E18               	movwf	fillRectangle@h,c
  3177  002800  C022  F019         	movff	fillScreen@color,fillRectangle@color
  3178  002804  C023  F01A         	movff	fillScreen@color+1,fillRectangle@color+1
  3179  002808  0E00               	movlw	0
  3180  00280A  EC82  F00C         	call	_fillRectangle
  3181  00280E  0012               	return		;funcret
  3182  002810                     __end_of_fillScreen:
  3183                           	opt stack 0
  3184                           tblptru	equ	0xFF8
  3185                           tblptrh	equ	0xFF7
  3186                           tblptrl	equ	0xFF6
  3187                           tablat	equ	0xFF5
  3188                           intcon	equ	0xFF2
  3189                           intcon2	equ	0xFF1
  3190                           intcon3	equ	0xFF0
  3191                           postinc0	equ	0xFEE
  3192                           wreg	equ	0xFE8
  3193                           postdec1	equ	0xFE5
  3194                           fsr1l	equ	0xFE1
  3195                           status	equ	0xFD8
  3196                           
  3197 ;; *************** function _fillRectangle *****************
  3198 ;; Defined at:
  3199 ;;		line 454 in file "ST7735_TFT.c"
  3200 ;; Parameters:    Size  Location     Type
  3201 ;;  x               1    wreg     unsigned char 
  3202 ;;  y               1   21[COMRAM] unsigned char 
  3203 ;;  w               1   22[COMRAM] unsigned char 
  3204 ;;  h               1   23[COMRAM] unsigned char 
  3205 ;;  color           2   24[COMRAM] unsigned int 
  3206 ;; Auto vars:     Size  Location     Type
  3207 ;;  x               1   32[COMRAM] unsigned char 
  3208 ;;  lo              1   31[COMRAM] unsigned char 
  3209 ;;  hi              1   30[COMRAM] unsigned char 
  3210 ;; Return value:  Size  Location     Type
  3211 ;;		None               void
  3212 ;; Registers used:
  3213 ;;		wreg, status,2, status,0, cstack
  3214 ;; Tracked objects:
  3215 ;;		On entry : 0/0
  3216 ;;		On exit  : 0/0
  3217 ;;		Unchanged: 0/0
  3218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3219 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3220 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3221 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3222 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3223 ;;Total ram usage:       12 bytes
  3224 ;; Hardware stack levels used:    1
  3225 ;; Hardware stack levels required when called:    5
  3226 ;; This function calls:
  3227 ;;		_setAddrWindow
  3228 ;;		_spiwrite
  3229 ;; This function is called by:
  3230 ;;		_fillScreen
  3231 ;; This function uses a non-reentrant model
  3232 ;;
  3233                           
  3234                           	psect	text5
  3235  001904                     __ptext5:
  3236                           	opt stack 0
  3237  001904                     _fillRectangle:
  3238                           	opt stack 23
  3239                           
  3240                           ;incstack = 0
  3241                           ;fillRectangle@x stored from wreg
  3242  001904  6E21               	movwf	fillRectangle@x,c
  3243                           
  3244                           ;ST7735_TFT.c: 456: unsigned char hi, lo;
  3245                           ;ST7735_TFT.c: 457: if((x >= 128) || (y >= 160))
  3246  001906  0E80               	movlw	128
  3247  001908  6021               	cpfslt	fillRectangle@x,c
  3248  00190A  D069               	goto	l507
  3249  00190C  0E9F               	movlw	159
  3250  00190E  6416               	cpfsgt	fillRectangle@y,c
  3251  001910  D001               	goto	l5360
  3252                           
  3253                           ;ST7735_TFT.c: 458: return;
  3254  001912  D065               	goto	l507
  3255  001914                     l5360:
  3256                           
  3257                           ;ST7735_TFT.c: 459: if((x + w - 1) >= 128)
  3258  001914  0EFF               	movlw	255
  3259  001916  6E1B               	movwf	??_fillRectangle& (0+255),c
  3260  001918  0EFF               	movlw	255
  3261  00191A  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3262  00191C  5017               	movf	fillRectangle@w,w,c
  3263  00191E  C021  F01D         	movff	fillRectangle@x,??_fillRectangle+2
  3264  001922  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3265  001924  261D               	addwf	??_fillRectangle+2,f,c
  3266  001926  0E00               	movlw	0
  3267  001928  221E               	addwfc	??_fillRectangle+3,f,c
  3268  00192A  501B               	movf	??_fillRectangle,w,c
  3269  00192C  261D               	addwf	??_fillRectangle+2,f,c
  3270  00192E  501C               	movf	??_fillRectangle+1,w,c
  3271  001930  221E               	addwfc	??_fillRectangle+3,f,c
  3272  001932  BE1E               	btfsc	??_fillRectangle+3,7,c
  3273  001934  D00A               	goto	l508
  3274  001936  501E               	movf	??_fillRectangle+3,w,c
  3275  001938  E104               	bnz	u4040
  3276  00193A  0E80               	movlw	128
  3277  00193C  5C1D               	subwf	??_fillRectangle+2,w,c
  3278  00193E  A0D8               	btfss	status,0,c
  3279  001940  D004               	goto	l508
  3280  001942                     u4040:
  3281                           
  3282                           ;ST7735_TFT.c: 460: w = 128 - x;
  3283  001942  5021               	movf	fillRectangle@x,w,c
  3284  001944  0800               	sublw	0
  3285  001946  0F80               	addlw	128
  3286  001948  6E17               	movwf	fillRectangle@w,c
  3287  00194A                     l508:
  3288                           
  3289                           ;ST7735_TFT.c: 461: if((y + h - 1) >= 160)
  3290  00194A  0EFF               	movlw	255
  3291  00194C  6E1B               	movwf	??_fillRectangle& (0+255),c
  3292  00194E  0EFF               	movlw	255
  3293  001950  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3294  001952  5018               	movf	fillRectangle@h,w,c
  3295  001954  C016  F01D         	movff	fillRectangle@y,??_fillRectangle+2
  3296  001958  6A1E               	clrf	(??_fillRectangle+3)& (0+255),c
  3297  00195A  261D               	addwf	??_fillRectangle+2,f,c
  3298  00195C  0E00               	movlw	0
  3299  00195E  221E               	addwfc	??_fillRectangle+3,f,c
  3300  001960  501B               	movf	??_fillRectangle,w,c
  3301  001962  261D               	addwf	??_fillRectangle+2,f,c
  3302  001964  501C               	movf	??_fillRectangle+1,w,c
  3303  001966  221E               	addwfc	??_fillRectangle+3,f,c
  3304  001968  BE1E               	btfsc	??_fillRectangle+3,7,c
  3305  00196A  D00B               	goto	l5366
  3306  00196C  501E               	movf	??_fillRectangle+3,w,c
  3307  00196E  E104               	bnz	u4050
  3308  001970  0EA0               	movlw	160
  3309  001972  5C1D               	subwf	??_fillRectangle+2,w,c
  3310  001974  A0D8               	btfss	status,0,c
  3311  001976  D005               	goto	l5366
  3312  001978                     u4050:
  3313                           
  3314                           ;ST7735_TFT.c: 462: h = 160 - y;
  3315  001978  5016               	movf	fillRectangle@y,w,c
  3316  00197A  0800               	sublw	0
  3317  00197C  0FA0               	addlw	160
  3318  00197E  6E18               	movwf	fillRectangle@h,c
  3319  001980  D000               	goto	l5366
  3320  001982                     l5366:
  3321                           
  3322                           ;ST7735_TFT.c: 463: setAddrWindow(x, y, x+w-1, y+h-1);
  3323  001982  C016  F012         	movff	fillRectangle@y,setAddrWindow@y0
  3324  001986  5021               	movf	fillRectangle@x,w,c
  3325  001988  2417               	addwf	fillRectangle@w,w,c
  3326  00198A  6E1B               	movwf	??_fillRectangle& (0+255),c
  3327  00198C  041B               	decf	??_fillRectangle,w,c
  3328  00198E  6E13               	movwf	setAddrWindow@x1,c
  3329  001990  5016               	movf	fillRectangle@y,w,c
  3330  001992  2418               	addwf	fillRectangle@h,w,c
  3331  001994  6E1C               	movwf	(??_fillRectangle+1)& (0+255),c
  3332  001996  041C               	decf	??_fillRectangle+1,w,c
  3333  001998  6E14               	movwf	setAddrWindow@y1,c
  3334  00199A  5021               	movf	fillRectangle@x,w,c
  3335  00199C  ECDA  F011         	call	_setAddrWindow
  3336                           
  3337                           ;ST7735_TFT.c: 464: hi = color >> 8; lo = color;
  3338  0019A0  501A               	movf	fillRectangle@color+1,w,c
  3339  0019A2  6E1F               	movwf	fillRectangle@hi,c
  3340  0019A4  C019  F020         	movff	fillRectangle@color,fillRectangle@lo
  3341                           
  3342                           ;ST7735_TFT.c: 465: PORTDbits.RD0 = 1;
  3343  0019A8  8083               	bsf	3971,0,c	;volatile
  3344                           
  3345                           ;ST7735_TFT.c: 466: PORTDbits.RD2 = 0;
  3346  0019AA  9483               	bcf	3971,2,c	;volatile
  3347                           
  3348                           ;ST7735_TFT.c: 468: for(y=h; y>0; y--) {
  3349  0019AC  C018  F016         	movff	fillRectangle@h,fillRectangle@y
  3350  0019B0                     l5378:
  3351  0019B0  5016               	movf	fillRectangle@y,w,c
  3352  0019B2  B4D8               	btfsc	status,2,c
  3353  0019B4  D013               	goto	l511
  3354  0019B6  D001               	goto	l510
  3355  0019B8  D011               	goto	l511
  3356  0019BA                     l510:
  3357                           
  3358                           ;ST7735_TFT.c: 469: for(x = w; x > 0; x--) {
  3359  0019BA  C017  F021         	movff	fillRectangle@w,fillRectangle@x
  3360  0019BE                     l5382:
  3361  0019BE  5021               	movf	fillRectangle@x,w,c
  3362  0019C0  B4D8               	btfsc	status,2,c
  3363  0019C2  D00A               	goto	l5392
  3364  0019C4  D001               	goto	l5386
  3365  0019C6  D008               	goto	l5392
  3366  0019C8                     l5386:
  3367                           
  3368                           ;ST7735_TFT.c: 470: spiwrite(hi);
  3369  0019C8  501F               	movf	fillRectangle@hi,w,c
  3370  0019CA  EC42  F014         	call	_spiwrite
  3371                           
  3372                           ;ST7735_TFT.c: 471: spiwrite(lo);
  3373  0019CE  5020               	movf	fillRectangle@lo,w,c
  3374  0019D0  EC42  F014         	call	_spiwrite
  3375  0019D4  0621               	decf	fillRectangle@x,f,c
  3376  0019D6  D7F3               	goto	l5382
  3377  0019D8                     l5392:
  3378  0019D8  0616               	decf	fillRectangle@y,f,c
  3379  0019DA  D7EA               	goto	l5378
  3380  0019DC                     l511:
  3381                           
  3382                           ;ST7735_TFT.c: 472: }
  3383                           ;ST7735_TFT.c: 473: }
  3384                           ;ST7735_TFT.c: 474: PORTDbits.RD2 = 1;
  3385  0019DC  8483               	bsf	3971,2,c	;volatile
  3386  0019DE                     l507:
  3387  0019DE  0012               	return		;funcret
  3388  0019E0                     __end_of_fillRectangle:
  3389                           	opt stack 0
  3390                           tblptru	equ	0xFF8
  3391                           tblptrh	equ	0xFF7
  3392                           tblptrl	equ	0xFF6
  3393                           tablat	equ	0xFF5
  3394                           intcon	equ	0xFF2
  3395                           intcon2	equ	0xFF1
  3396                           intcon3	equ	0xFF0
  3397                           postinc0	equ	0xFEE
  3398                           wreg	equ	0xFE8
  3399                           postdec1	equ	0xFE5
  3400                           fsr1l	equ	0xFE1
  3401                           status	equ	0xFD8
  3402                           
  3403 ;; *************** function _drawRect *****************
  3404 ;; Defined at:
  3405 ;;		line 636 in file "ST7735_TFT.c"
  3406 ;; Parameters:    Size  Location     Type
  3407 ;;  x               2   32[COMRAM] unsigned int 
  3408 ;;  y               2   34[COMRAM] unsigned int 
  3409 ;;  w               2   36[COMRAM] unsigned int 
  3410 ;;  h               2   38[COMRAM] unsigned int 
  3411 ;;  color           2   40[COMRAM] unsigned int 
  3412 ;; Auto vars:     Size  Location     Type
  3413 ;;		None
  3414 ;; Return value:  Size  Location     Type
  3415 ;;		None               void
  3416 ;; Registers used:
  3417 ;;		wreg, status,2, status,0, cstack
  3418 ;; Tracked objects:
  3419 ;;		On entry : 0/0
  3420 ;;		On exit  : 0/0
  3421 ;;		Unchanged: 0/0
  3422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3423 ;;      Params:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3424 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3425 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3426 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3427 ;;Total ram usage:       11 bytes
  3428 ;; Hardware stack levels used:    1
  3429 ;; Hardware stack levels required when called:    6
  3430 ;; This function calls:
  3431 ;;		_drawFastHLine
  3432 ;;		_drawFastVLine
  3433 ;; This function is called by:
  3434 ;;		_Initialize_LCD_Screen
  3435 ;; This function uses a non-reentrant model
  3436 ;;
  3437                           
  3438                           	psect	text6
  3439  002194                     __ptext6:
  3440                           	opt stack 0
  3441  002194                     _drawRect:
  3442                           	opt stack 23
  3443                           
  3444                           ;ST7735_TFT.c: 638: drawFastHLine(x, y, w, color);
  3445                           
  3446                           ;incstack = 0
  3447  002194  C023  F016         	movff	drawRect@y,drawFastHLine@y
  3448  002198  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3449  00219C  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3450  0021A0  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3451  0021A4  5021               	movf	drawRect@x,w,c
  3452  0021A6  EC4F  F00F         	call	_drawFastHLine
  3453                           
  3454                           ;ST7735_TFT.c: 639: drawFastHLine(x, y + h - 1, w, color);
  3455  0021AA  5023               	movf	drawRect@y,w,c
  3456  0021AC  2427               	addwf	drawRect@h,w,c
  3457  0021AE  6E2B               	movwf	??_drawRect& (0+255),c
  3458  0021B0  042B               	decf	??_drawRect,w,c
  3459  0021B2  6E16               	movwf	drawFastHLine@y,c
  3460  0021B4  C025  F017         	movff	drawRect@w,drawFastHLine@w
  3461  0021B8  C029  F018         	movff	drawRect@color,drawFastHLine@color
  3462  0021BC  C02A  F019         	movff	drawRect@color+1,drawFastHLine@color+1
  3463  0021C0  5021               	movf	drawRect@x,w,c
  3464  0021C2  EC4F  F00F         	call	_drawFastHLine
  3465                           
  3466                           ;ST7735_TFT.c: 640: drawFastVLine(x, y, h, color);
  3467  0021C6  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3468  0021CA  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3469  0021CE  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3470  0021D2  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3471  0021D6  5021               	movf	drawRect@x,w,c
  3472  0021D8  EC93  F00F         	call	_drawFastVLine
  3473                           
  3474                           ;ST7735_TFT.c: 641: drawFastVLine(x + w - 1, y, h, color);
  3475  0021DC  C023  F016         	movff	drawRect@y,drawFastVLine@y
  3476  0021E0  C027  F017         	movff	drawRect@h,drawFastVLine@h
  3477  0021E4  C029  F018         	movff	drawRect@color,drawFastVLine@color
  3478  0021E8  C02A  F019         	movff	drawRect@color+1,drawFastVLine@color+1
  3479  0021EC  5021               	movf	drawRect@x,w,c
  3480  0021EE  2425               	addwf	drawRect@w,w,c
  3481  0021F0  6E2B               	movwf	??_drawRect& (0+255),c
  3482  0021F2  042B               	decf	??_drawRect,w,c
  3483  0021F4  EC93  F00F         	call	_drawFastVLine
  3484  0021F8  0012               	return		;funcret
  3485  0021FA                     __end_of_drawRect:
  3486                           	opt stack 0
  3487                           tblptru	equ	0xFF8
  3488                           tblptrh	equ	0xFF7
  3489                           tblptrl	equ	0xFF6
  3490                           tablat	equ	0xFF5
  3491                           intcon	equ	0xFF2
  3492                           intcon2	equ	0xFF1
  3493                           intcon3	equ	0xFF0
  3494                           postinc0	equ	0xFEE
  3495                           wreg	equ	0xFE8
  3496                           postdec1	equ	0xFE5
  3497                           fsr1l	equ	0xFE1
  3498                           status	equ	0xFD8
  3499                           
  3500 ;; *************** function _drawFastHLine *****************
  3501 ;; Defined at:
  3502 ;;		line 575 in file "ST7735_TFT.c"
  3503 ;; Parameters:    Size  Location     Type
  3504 ;;  x               1    wreg     unsigned char 
  3505 ;;  y               1   21[COMRAM] unsigned char 
  3506 ;;  w               1   22[COMRAM] unsigned char 
  3507 ;;  color           2   23[COMRAM] unsigned int 
  3508 ;; Auto vars:     Size  Location     Type
  3509 ;;  x               1   31[COMRAM] unsigned char 
  3510 ;;  lo              1   30[COMRAM] unsigned char 
  3511 ;;  hi              1   29[COMRAM] unsigned char 
  3512 ;; Return value:  Size  Location     Type
  3513 ;;		None               void
  3514 ;; Registers used:
  3515 ;;		wreg, status,2, status,0, cstack
  3516 ;; Tracked objects:
  3517 ;;		On entry : 0/0
  3518 ;;		On exit  : 0/0
  3519 ;;		Unchanged: 0/0
  3520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3521 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3522 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3523 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3524 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3525 ;;Total ram usage:       11 bytes
  3526 ;; Hardware stack levels used:    1
  3527 ;; Hardware stack levels required when called:    5
  3528 ;; This function calls:
  3529 ;;		_setAddrWindow
  3530 ;;		_spiwrite
  3531 ;; This function is called by:
  3532 ;;		_drawRect
  3533 ;; This function uses a non-reentrant model
  3534 ;;
  3535                           
  3536                           	psect	text7
  3537  001E9E                     __ptext7:
  3538                           	opt stack 0
  3539  001E9E                     _drawFastHLine:
  3540                           	opt stack 23
  3541                           
  3542                           ;incstack = 0
  3543                           ;drawFastHLine@x stored from wreg
  3544  001E9E  6E20               	movwf	drawFastHLine@x,c
  3545                           
  3546                           ;ST7735_TFT.c: 577: unsigned char hi, lo;
  3547                           ;ST7735_TFT.c: 578: if((x >= 128) || (y >= 160))
  3548  001EA0  0E80               	movlw	128
  3549  001EA2  6020               	cpfslt	drawFastHLine@x,c
  3550  001EA4  D03F               	goto	l552
  3551  001EA6  0E9F               	movlw	159
  3552  001EA8  6416               	cpfsgt	drawFastHLine@y,c
  3553  001EAA  D001               	goto	l5400
  3554                           
  3555                           ;ST7735_TFT.c: 579: return;
  3556  001EAC  D03B               	goto	l552
  3557  001EAE                     l5400:
  3558                           
  3559                           ;ST7735_TFT.c: 580: if((x + w - 1) >= 128)
  3560  001EAE  0EFF               	movlw	255
  3561  001EB0  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3562  001EB2  0EFF               	movlw	255
  3563  001EB4  6E1B               	movwf	(??_drawFastHLine+1)& (0+255),c
  3564  001EB6  5017               	movf	drawFastHLine@w,w,c
  3565  001EB8  C020  F01C         	movff	drawFastHLine@x,??_drawFastHLine+2
  3566  001EBC  6A1D               	clrf	(??_drawFastHLine+3)& (0+255),c
  3567  001EBE  261C               	addwf	??_drawFastHLine+2,f,c
  3568  001EC0  0E00               	movlw	0
  3569  001EC2  221D               	addwfc	??_drawFastHLine+3,f,c
  3570  001EC4  501A               	movf	??_drawFastHLine,w,c
  3571  001EC6  261C               	addwf	??_drawFastHLine+2,f,c
  3572  001EC8  501B               	movf	??_drawFastHLine+1,w,c
  3573  001ECA  221D               	addwfc	??_drawFastHLine+3,f,c
  3574  001ECC  BE1D               	btfsc	??_drawFastHLine+3,7,c
  3575  001ECE  D00B               	goto	l5404
  3576  001ED0  501D               	movf	??_drawFastHLine+3,w,c
  3577  001ED2  E104               	bnz	u4120
  3578  001ED4  0E80               	movlw	128
  3579  001ED6  5C1C               	subwf	??_drawFastHLine+2,w,c
  3580  001ED8  A0D8               	btfss	status,0,c
  3581  001EDA  D005               	goto	l5404
  3582  001EDC                     u4120:
  3583                           
  3584                           ;ST7735_TFT.c: 581: w = 128 - x;
  3585  001EDC  5020               	movf	drawFastHLine@x,w,c
  3586  001EDE  0800               	sublw	0
  3587  001EE0  0F80               	addlw	128
  3588  001EE2  6E17               	movwf	drawFastHLine@w,c
  3589  001EE4  D000               	goto	l5404
  3590  001EE6                     l5404:
  3591                           
  3592                           ;ST7735_TFT.c: 582: hi = color >> 8; lo = color;
  3593  001EE6  5019               	movf	drawFastHLine@color+1,w,c
  3594  001EE8  6E1E               	movwf	drawFastHLine@hi,c
  3595  001EEA  C018  F01F         	movff	drawFastHLine@color,drawFastHLine@lo
  3596                           
  3597                           ;ST7735_TFT.c: 583: setAddrWindow(x, y, x + w - 1, y);
  3598  001EEE  C016  F012         	movff	drawFastHLine@y,setAddrWindow@y0
  3599  001EF2  5020               	movf	drawFastHLine@x,w,c
  3600  001EF4  2417               	addwf	drawFastHLine@w,w,c
  3601  001EF6  6E1A               	movwf	??_drawFastHLine& (0+255),c
  3602  001EF8  041A               	decf	??_drawFastHLine,w,c
  3603  001EFA  6E13               	movwf	setAddrWindow@x1,c
  3604  001EFC  C016  F014         	movff	drawFastHLine@y,setAddrWindow@y1
  3605  001F00  5020               	movf	drawFastHLine@x,w,c
  3606  001F02  ECDA  F011         	call	_setAddrWindow
  3607                           
  3608                           ;ST7735_TFT.c: 584: PORTDbits.RD0 = 1;
  3609  001F06  8083               	bsf	3971,0,c	;volatile
  3610                           
  3611                           ;ST7735_TFT.c: 585: PORTDbits.RD2 = 0;
  3612  001F08  9483               	bcf	3971,2,c	;volatile
  3613                           
  3614                           ;ST7735_TFT.c: 587: while (w--) {
  3615  001F0A  D007               	goto	l5416
  3616  001F0C                     l5414:
  3617                           
  3618                           ;ST7735_TFT.c: 588: spiwrite(hi);
  3619  001F0C  501E               	movf	drawFastHLine@hi,w,c
  3620  001F0E  EC42  F014         	call	_spiwrite
  3621                           
  3622                           ;ST7735_TFT.c: 589: spiwrite(lo);
  3623  001F12  501F               	movf	drawFastHLine@lo,w,c
  3624  001F14  EC42  F014         	call	_spiwrite
  3625  001F18  D000               	goto	l5416
  3626  001F1A                     l5416:
  3627  001F1A  0617               	decf	drawFastHLine@w,f,c
  3628  001F1C  2817               	incf	drawFastHLine@w,w,c
  3629  001F1E  A4D8               	btfss	status,2,c
  3630  001F20  D7F5               	goto	l5414
  3631                           
  3632                           ;ST7735_TFT.c: 590: }
  3633                           ;ST7735_TFT.c: 591: PORTDbits.RD2 = 1;
  3634  001F22  8483               	bsf	3971,2,c	;volatile
  3635  001F24                     l552:
  3636  001F24  0012               	return		;funcret
  3637  001F26                     __end_of_drawFastHLine:
  3638                           	opt stack 0
  3639                           tblptru	equ	0xFF8
  3640                           tblptrh	equ	0xFF7
  3641                           tblptrl	equ	0xFF6
  3642                           tablat	equ	0xFF5
  3643                           intcon	equ	0xFF2
  3644                           intcon2	equ	0xFF1
  3645                           intcon3	equ	0xFF0
  3646                           postinc0	equ	0xFEE
  3647                           wreg	equ	0xFE8
  3648                           postdec1	equ	0xFE5
  3649                           fsr1l	equ	0xFE1
  3650                           status	equ	0xFD8
  3651                           
  3652 ;; *************** function _TFT_GreenTab_Initialize *****************
  3653 ;; Defined at:
  3654 ;;		line 595 in file "ST7735_TFT.c"
  3655 ;; Parameters:    Size  Location     Type
  3656 ;;		None
  3657 ;; Auto vars:     Size  Location     Type
  3658 ;;		None
  3659 ;; Return value:  Size  Location     Type
  3660 ;;		None               void
  3661 ;; Registers used:
  3662 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3663 ;; Tracked objects:
  3664 ;;		On entry : 0/0
  3665 ;;		On exit  : 0/0
  3666 ;;		Unchanged: 0/0
  3667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3668 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3669 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3670 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3671 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3672 ;;Total ram usage:        0 bytes
  3673 ;; Hardware stack levels used:    1
  3674 ;; Hardware stack levels required when called:    5
  3675 ;; This function calls:
  3676 ;;		_Rcmd1
  3677 ;;		_Rcmd2red
  3678 ;;		_Rcmd3
  3679 ;;		_write_command
  3680 ;;		_write_data
  3681 ;; This function is called by:
  3682 ;;		_Initialize_LCD_Screen
  3683 ;; This function uses a non-reentrant model
  3684 ;;
  3685                           
  3686                           	psect	text8
  3687  00275A                     __ptext8:
  3688                           	opt stack 0
  3689  00275A                     _TFT_GreenTab_Initialize:
  3690                           	opt stack 24
  3691                           
  3692                           ;ST7735_TFT.c: 597: PORTDbits.RD2 = 1;
  3693                           
  3694                           ;incstack = 0
  3695  00275A  8483               	bsf	3971,2,c	;volatile
  3696                           
  3697                           ;ST7735_TFT.c: 598: PORTDbits.RD0 = 0;
  3698  00275C  9083               	bcf	3971,0,c	;volatile
  3699                           
  3700                           ;ST7735_TFT.c: 600: SSPSTAT=0x80;
  3701  00275E  0E80               	movlw	128
  3702  002760  6EC7               	movwf	4039,c	;volatile
  3703                           
  3704                           ;ST7735_TFT.c: 601: SSPCON1=0x30;
  3705  002762  0E30               	movlw	48
  3706  002764  6EC6               	movwf	4038,c	;volatile
  3707                           
  3708                           ;ST7735_TFT.c: 604: Rcmd1();
  3709  002766  EC9C  F009         	call	_Rcmd1	;wreg free
  3710                           
  3711                           ;ST7735_TFT.c: 605: Rcmd2red();
  3712  00276A  ECB6  F012         	call	_Rcmd2red	;wreg free
  3713                           
  3714                           ;ST7735_TFT.c: 606: Rcmd3();
  3715  00276E  EC25  F00B         	call	_Rcmd3	;wreg free
  3716                           
  3717                           ;ST7735_TFT.c: 607: write_command(0x36);
  3718  002772  0E36               	movlw	54
  3719  002774  EC66  F014         	call	_write_command
  3720                           
  3721                           ;ST7735_TFT.c: 608: write_data(0xC0);
  3722  002778  0EC0               	movlw	192
  3723  00277A  EC5E  F014         	call	_write_data
  3724                           
  3725                           ;ST7735_TFT.c: 609: _tft_type = 1;
  3726  00277E  0E01               	movlw	1
  3727  002780  6E58               	movwf	__tft_type,c
  3728  002782  0012               	return		;funcret
  3729  002784                     __end_of_TFT_GreenTab_Initialize:
  3730                           	opt stack 0
  3731                           tblptru	equ	0xFF8
  3732                           tblptrh	equ	0xFF7
  3733                           tblptrl	equ	0xFF6
  3734                           tablat	equ	0xFF5
  3735                           intcon	equ	0xFF2
  3736                           intcon2	equ	0xFF1
  3737                           intcon3	equ	0xFF0
  3738                           postinc0	equ	0xFEE
  3739                           wreg	equ	0xFE8
  3740                           postdec1	equ	0xFE5
  3741                           fsr1l	equ	0xFE1
  3742                           status	equ	0xFD8
  3743                           
  3744 ;; *************** function _Rcmd3 *****************
  3745 ;; Defined at:
  3746 ;;		line 289 in file "ST7735_TFT.c"
  3747 ;; Parameters:    Size  Location     Type
  3748 ;;		None
  3749 ;; Auto vars:     Size  Location     Type
  3750 ;;		None
  3751 ;; Return value:  Size  Location     Type
  3752 ;;		None               void
  3753 ;; Registers used:
  3754 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  3755 ;; Tracked objects:
  3756 ;;		On entry : 0/0
  3757 ;;		On exit  : 0/0
  3758 ;;		Unchanged: 0/0
  3759 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3760 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3761 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3762 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3763 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3764 ;;Total ram usage:        0 bytes
  3765 ;; Hardware stack levels used:    1
  3766 ;; Hardware stack levels required when called:    4
  3767 ;; This function calls:
  3768 ;;		_delay_ms
  3769 ;;		_write_command
  3770 ;;		_write_data
  3771 ;; This function is called by:
  3772 ;;		_TFT_GreenTab_Initialize
  3773 ;;		_TFT_BlackTab_Initialize
  3774 ;; This function uses a non-reentrant model
  3775 ;;
  3776                           
  3777                           	psect	text9
  3778  00164A                     __ptext9:
  3779                           	opt stack 0
  3780  00164A                     _Rcmd3:
  3781                           	opt stack 24
  3782                           
  3783                           ;ST7735_TFT.c: 291: write_command(0xE0);
  3784                           
  3785                           ;incstack = 0
  3786  00164A  0EE0               	movlw	224
  3787  00164C  EC66  F014         	call	_write_command
  3788                           
  3789                           ;ST7735_TFT.c: 292: write_data(0x02); write_data(0x1C); write_data(0x07); write_data(0x1
      +                          2);
  3790  001650  0E02               	movlw	2
  3791  001652  EC5E  F014         	call	_write_data
  3792  001656  0E1C               	movlw	28
  3793  001658  EC5E  F014         	call	_write_data
  3794  00165C  0E07               	movlw	7
  3795  00165E  EC5E  F014         	call	_write_data
  3796  001662  0E12               	movlw	18
  3797  001664  EC5E  F014         	call	_write_data
  3798                           
  3799                           ;ST7735_TFT.c: 293: write_data(0x37); write_data(0x32); write_data(0x29); write_data(0x2
      +                          D);
  3800  001668  0E37               	movlw	55
  3801  00166A  EC5E  F014         	call	_write_data
  3802  00166E  0E32               	movlw	50
  3803  001670  EC5E  F014         	call	_write_data
  3804  001674  0E29               	movlw	41
  3805  001676  EC5E  F014         	call	_write_data
  3806  00167A  0E2D               	movlw	45
  3807  00167C  EC5E  F014         	call	_write_data
  3808                           
  3809                           ;ST7735_TFT.c: 294: write_data(0x29); write_data(0x25); write_data(0x2B); write_data(0x3
      +                          9);
  3810  001680  0E29               	movlw	41
  3811  001682  EC5E  F014         	call	_write_data
  3812  001686  0E25               	movlw	37
  3813  001688  EC5E  F014         	call	_write_data
  3814  00168C  0E2B               	movlw	43
  3815  00168E  EC5E  F014         	call	_write_data
  3816  001692  0E39               	movlw	57
  3817  001694  EC5E  F014         	call	_write_data
  3818                           
  3819                           ;ST7735_TFT.c: 295: write_data(0x00); write_data(0x01); write_data(0x03); write_data(0x1
      +                          0);
  3820  001698  0E00               	movlw	0
  3821  00169A  EC5E  F014         	call	_write_data
  3822  00169E  0E01               	movlw	1
  3823  0016A0  EC5E  F014         	call	_write_data
  3824  0016A4  0E03               	movlw	3
  3825  0016A6  EC5E  F014         	call	_write_data
  3826  0016AA  0E10               	movlw	16
  3827  0016AC  EC5E  F014         	call	_write_data
  3828                           
  3829                           ;ST7735_TFT.c: 296: write_command(0xE1);
  3830  0016B0  0EE1               	movlw	225
  3831  0016B2  EC66  F014         	call	_write_command
  3832                           
  3833                           ;ST7735_TFT.c: 297: write_data(0x03); write_data(0x1D); write_data(0x07); write_data(0x0
      +                          6);
  3834  0016B6  0E03               	movlw	3
  3835  0016B8  EC5E  F014         	call	_write_data
  3836  0016BC  0E1D               	movlw	29
  3837  0016BE  EC5E  F014         	call	_write_data
  3838  0016C2  0E07               	movlw	7
  3839  0016C4  EC5E  F014         	call	_write_data
  3840  0016C8  0E06               	movlw	6
  3841  0016CA  EC5E  F014         	call	_write_data
  3842                           
  3843                           ;ST7735_TFT.c: 298: write_data(0x2E); write_data(0x2C); write_data(0x29); write_data(0x2
      +                          D);
  3844  0016CE  0E2E               	movlw	46
  3845  0016D0  EC5E  F014         	call	_write_data
  3846  0016D4  0E2C               	movlw	44
  3847  0016D6  EC5E  F014         	call	_write_data
  3848  0016DA  0E29               	movlw	41
  3849  0016DC  EC5E  F014         	call	_write_data
  3850  0016E0  0E2D               	movlw	45
  3851  0016E2  EC5E  F014         	call	_write_data
  3852                           
  3853                           ;ST7735_TFT.c: 299: write_data(0x2E); write_data(0x2E); write_data(0x37); write_data(0x3
      +                          F);
  3854  0016E6  0E2E               	movlw	46
  3855  0016E8  EC5E  F014         	call	_write_data
  3856  0016EC  0E2E               	movlw	46
  3857  0016EE  EC5E  F014         	call	_write_data
  3858  0016F2  0E37               	movlw	55
  3859  0016F4  EC5E  F014         	call	_write_data
  3860  0016F8  0E3F               	movlw	63
  3861  0016FA  EC5E  F014         	call	_write_data
  3862                           
  3863                           ;ST7735_TFT.c: 300: write_data(0x00); write_data(0x00); write_data(0x02); write_data(0x1
      +                          0);
  3864  0016FE  0E00               	movlw	0
  3865  001700  EC5E  F014         	call	_write_data
  3866  001704  0E00               	movlw	0
  3867  001706  EC5E  F014         	call	_write_data
  3868  00170A  0E02               	movlw	2
  3869  00170C  EC5E  F014         	call	_write_data
  3870  001710  0E10               	movlw	16
  3871  001712  EC5E  F014         	call	_write_data
  3872                           
  3873                           ;ST7735_TFT.c: 301: write_command(0x13);
  3874  001716  0E13               	movlw	19
  3875  001718  EC66  F014         	call	_write_command
  3876                           
  3877                           ;ST7735_TFT.c: 302: delay_ms(10);
  3878  00171C  0E00               	movlw	0
  3879  00171E  6E16               	movwf	delay_ms@ms+1,c
  3880  001720  0E0A               	movlw	10
  3881  001722  6E15               	movwf	delay_ms@ms,c
  3882  001724  EC88  F011         	call	_delay_ms	;wreg free
  3883                           
  3884                           ;ST7735_TFT.c: 303: write_command(0x29);
  3885  001728  0E29               	movlw	41
  3886  00172A  EC66  F014         	call	_write_command
  3887                           
  3888                           ;ST7735_TFT.c: 304: delay_ms(100);
  3889  00172E  0E00               	movlw	0
  3890  001730  6E16               	movwf	delay_ms@ms+1,c
  3891  001732  0E64               	movlw	100
  3892  001734  6E15               	movwf	delay_ms@ms,c
  3893  001736  EC88  F011         	call	_delay_ms	;wreg free
  3894  00173A  0012               	return		;funcret
  3895  00173C                     __end_of_Rcmd3:
  3896                           	opt stack 0
  3897                           tblptru	equ	0xFF8
  3898                           tblptrh	equ	0xFF7
  3899                           tblptrl	equ	0xFF6
  3900                           tablat	equ	0xFF5
  3901                           intcon	equ	0xFF2
  3902                           intcon2	equ	0xFF1
  3903                           intcon3	equ	0xFF0
  3904                           postinc0	equ	0xFEE
  3905                           wreg	equ	0xFE8
  3906                           postdec1	equ	0xFE5
  3907                           fsr1l	equ	0xFE1
  3908                           status	equ	0xFD8
  3909                           
  3910 ;; *************** function _Rcmd2red *****************
  3911 ;; Defined at:
  3912 ;;		line 275 in file "ST7735_TFT.c"
  3913 ;; Parameters:    Size  Location     Type
  3914 ;;		None
  3915 ;; Auto vars:     Size  Location     Type
  3916 ;;		None
  3917 ;; Return value:  Size  Location     Type
  3918 ;;		None               void
  3919 ;; Registers used:
  3920 ;;		wreg, status,2, cstack
  3921 ;; Tracked objects:
  3922 ;;		On entry : 0/0
  3923 ;;		On exit  : 0/0
  3924 ;;		Unchanged: 0/0
  3925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3930 ;;Total ram usage:        0 bytes
  3931 ;; Hardware stack levels used:    1
  3932 ;; Hardware stack levels required when called:    4
  3933 ;; This function calls:
  3934 ;;		_write_command
  3935 ;;		_write_data
  3936 ;; This function is called by:
  3937 ;;		_TFT_GreenTab_Initialize
  3938 ;; This function uses a non-reentrant model
  3939 ;;
  3940                           
  3941                           	psect	text10
  3942  00256C                     __ptext10:
  3943                           	opt stack 0
  3944  00256C                     _Rcmd2red:
  3945                           	opt stack 24
  3946                           
  3947                           ;ST7735_TFT.c: 277: write_command(0x2A);
  3948                           
  3949                           ;incstack = 0
  3950  00256C  0E2A               	movlw	42
  3951  00256E  EC66  F014         	call	_write_command
  3952                           
  3953                           ;ST7735_TFT.c: 278: write_data(0x00);
  3954  002572  0E00               	movlw	0
  3955  002574  EC5E  F014         	call	_write_data
  3956                           
  3957                           ;ST7735_TFT.c: 279: write_data(0x00);
  3958  002578  0E00               	movlw	0
  3959  00257A  EC5E  F014         	call	_write_data
  3960                           
  3961                           ;ST7735_TFT.c: 280: write_data(0x00);
  3962  00257E  0E00               	movlw	0
  3963  002580  EC5E  F014         	call	_write_data
  3964                           
  3965                           ;ST7735_TFT.c: 281: write_data(0x7F);
  3966  002584  0E7F               	movlw	127
  3967  002586  EC5E  F014         	call	_write_data
  3968                           
  3969                           ;ST7735_TFT.c: 282: write_command(0x2B);
  3970  00258A  0E2B               	movlw	43
  3971  00258C  EC66  F014         	call	_write_command
  3972                           
  3973                           ;ST7735_TFT.c: 283: write_data(0x00);
  3974  002590  0E00               	movlw	0
  3975  002592  EC5E  F014         	call	_write_data
  3976                           
  3977                           ;ST7735_TFT.c: 284: write_data(0x00);
  3978  002596  0E00               	movlw	0
  3979  002598  EC5E  F014         	call	_write_data
  3980                           
  3981                           ;ST7735_TFT.c: 285: write_data(0x00);
  3982  00259C  0E00               	movlw	0
  3983  00259E  EC5E  F014         	call	_write_data
  3984                           
  3985                           ;ST7735_TFT.c: 286: write_data(0x9F);
  3986  0025A2  0E9F               	movlw	159
  3987  0025A4  EC5E  F014         	call	_write_data
  3988  0025A8  0012               	return		;funcret
  3989  0025AA                     __end_of_Rcmd2red:
  3990                           	opt stack 0
  3991                           tblptru	equ	0xFF8
  3992                           tblptrh	equ	0xFF7
  3993                           tblptrl	equ	0xFF6
  3994                           tablat	equ	0xFF5
  3995                           intcon	equ	0xFF2
  3996                           intcon2	equ	0xFF1
  3997                           intcon3	equ	0xFF0
  3998                           postinc0	equ	0xFEE
  3999                           wreg	equ	0xFE8
  4000                           postdec1	equ	0xFE5
  4001                           fsr1l	equ	0xFE1
  4002                           status	equ	0xFD8
  4003                           
  4004 ;; *************** function _Rcmd1 *****************
  4005 ;; Defined at:
  4006 ;;		line 228 in file "ST7735_TFT.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;		None
  4009 ;; Auto vars:     Size  Location     Type
  4010 ;;		None
  4011 ;; Return value:  Size  Location     Type
  4012 ;;		None               void
  4013 ;; Registers used:
  4014 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4015 ;; Tracked objects:
  4016 ;;		On entry : 0/0
  4017 ;;		On exit  : 0/0
  4018 ;;		Unchanged: 0/0
  4019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4020 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4022 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4023 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4024 ;;Total ram usage:        0 bytes
  4025 ;; Hardware stack levels used:    1
  4026 ;; Hardware stack levels required when called:    4
  4027 ;; This function calls:
  4028 ;;		_delay_ms
  4029 ;;		_write_command
  4030 ;;		_write_data
  4031 ;; This function is called by:
  4032 ;;		_TFT_GreenTab_Initialize
  4033 ;;		_TFT_BlackTab_Initialize
  4034 ;; This function uses a non-reentrant model
  4035 ;;
  4036                           
  4037                           	psect	text11
  4038  001338                     __ptext11:
  4039                           	opt stack 0
  4040  001338                     _Rcmd1:
  4041                           	opt stack 24
  4042                           
  4043                           ;ST7735_TFT.c: 230: write_command(0x01);
  4044                           
  4045                           ;incstack = 0
  4046  001338  0E01               	movlw	1
  4047  00133A  EC66  F014         	call	_write_command
  4048                           
  4049                           ;ST7735_TFT.c: 231: delay_ms(150);
  4050  00133E  0E00               	movlw	0
  4051  001340  6E16               	movwf	delay_ms@ms+1,c
  4052  001342  0E96               	movlw	150
  4053  001344  6E15               	movwf	delay_ms@ms,c
  4054  001346  EC88  F011         	call	_delay_ms	;wreg free
  4055                           
  4056                           ;ST7735_TFT.c: 232: write_command(0x11);
  4057  00134A  0E11               	movlw	17
  4058  00134C  EC66  F014         	call	_write_command
  4059                           
  4060                           ;ST7735_TFT.c: 233: delay_ms(500);
  4061  001350  0E01               	movlw	1
  4062  001352  6E16               	movwf	delay_ms@ms+1,c
  4063  001354  0EF4               	movlw	244
  4064  001356  6E15               	movwf	delay_ms@ms,c
  4065  001358  EC88  F011         	call	_delay_ms	;wreg free
  4066                           
  4067                           ;ST7735_TFT.c: 234: write_command(0xB1);
  4068  00135C  0EB1               	movlw	177
  4069  00135E  EC66  F014         	call	_write_command
  4070                           
  4071                           ;ST7735_TFT.c: 235: write_data(0x01);
  4072  001362  0E01               	movlw	1
  4073  001364  EC5E  F014         	call	_write_data
  4074                           
  4075                           ;ST7735_TFT.c: 236: write_data(0x2C);
  4076  001368  0E2C               	movlw	44
  4077  00136A  EC5E  F014         	call	_write_data
  4078                           
  4079                           ;ST7735_TFT.c: 237: write_data(0x2D);
  4080  00136E  0E2D               	movlw	45
  4081  001370  EC5E  F014         	call	_write_data
  4082                           
  4083                           ;ST7735_TFT.c: 238: write_command(0xB2);
  4084  001374  0EB2               	movlw	178
  4085  001376  EC66  F014         	call	_write_command
  4086                           
  4087                           ;ST7735_TFT.c: 239: write_data(0x01);
  4088  00137A  0E01               	movlw	1
  4089  00137C  EC5E  F014         	call	_write_data
  4090                           
  4091                           ;ST7735_TFT.c: 240: write_data(0x2C);
  4092  001380  0E2C               	movlw	44
  4093  001382  EC5E  F014         	call	_write_data
  4094                           
  4095                           ;ST7735_TFT.c: 241: write_data(0x2D);
  4096  001386  0E2D               	movlw	45
  4097  001388  EC5E  F014         	call	_write_data
  4098                           
  4099                           ;ST7735_TFT.c: 242: write_command(0xB3);
  4100  00138C  0EB3               	movlw	179
  4101  00138E  EC66  F014         	call	_write_command
  4102                           
  4103                           ;ST7735_TFT.c: 243: write_data(0x01);
  4104  001392  0E01               	movlw	1
  4105  001394  EC5E  F014         	call	_write_data
  4106                           
  4107                           ;ST7735_TFT.c: 244: write_data(0x2C);
  4108  001398  0E2C               	movlw	44
  4109  00139A  EC5E  F014         	call	_write_data
  4110                           
  4111                           ;ST7735_TFT.c: 245: write_data(0x2D);
  4112  00139E  0E2D               	movlw	45
  4113  0013A0  EC5E  F014         	call	_write_data
  4114                           
  4115                           ;ST7735_TFT.c: 246: write_data(0x01);
  4116  0013A4  0E01               	movlw	1
  4117  0013A6  EC5E  F014         	call	_write_data
  4118                           
  4119                           ;ST7735_TFT.c: 247: write_data(0x2C);
  4120  0013AA  0E2C               	movlw	44
  4121  0013AC  EC5E  F014         	call	_write_data
  4122                           
  4123                           ;ST7735_TFT.c: 248: write_data(0x2D);
  4124  0013B0  0E2D               	movlw	45
  4125  0013B2  EC5E  F014         	call	_write_data
  4126                           
  4127                           ;ST7735_TFT.c: 249: write_command(0xB4);
  4128  0013B6  0EB4               	movlw	180
  4129  0013B8  EC66  F014         	call	_write_command
  4130                           
  4131                           ;ST7735_TFT.c: 250: write_data(0x07);
  4132  0013BC  0E07               	movlw	7
  4133  0013BE  EC5E  F014         	call	_write_data
  4134                           
  4135                           ;ST7735_TFT.c: 251: write_command(0xC0);
  4136  0013C2  0EC0               	movlw	192
  4137  0013C4  EC66  F014         	call	_write_command
  4138                           
  4139                           ;ST7735_TFT.c: 252: write_data(0xA2);
  4140  0013C8  0EA2               	movlw	162
  4141  0013CA  EC5E  F014         	call	_write_data
  4142                           
  4143                           ;ST7735_TFT.c: 253: write_data(0x02);
  4144  0013CE  0E02               	movlw	2
  4145  0013D0  EC5E  F014         	call	_write_data
  4146                           
  4147                           ;ST7735_TFT.c: 254: write_data(0x84);
  4148  0013D4  0E84               	movlw	132
  4149  0013D6  EC5E  F014         	call	_write_data
  4150                           
  4151                           ;ST7735_TFT.c: 255: write_command(0xC1);
  4152  0013DA  0EC1               	movlw	193
  4153  0013DC  EC66  F014         	call	_write_command
  4154                           
  4155                           ;ST7735_TFT.c: 256: write_data(0xC5);
  4156  0013E0  0EC5               	movlw	197
  4157  0013E2  EC5E  F014         	call	_write_data
  4158                           
  4159                           ;ST7735_TFT.c: 257: write_command(0xC2);
  4160  0013E6  0EC2               	movlw	194
  4161  0013E8  EC66  F014         	call	_write_command
  4162                           
  4163                           ;ST7735_TFT.c: 258: write_data(0x0A);
  4164  0013EC  0E0A               	movlw	10
  4165  0013EE  EC5E  F014         	call	_write_data
  4166                           
  4167                           ;ST7735_TFT.c: 259: write_data(0x00);
  4168  0013F2  0E00               	movlw	0
  4169  0013F4  EC5E  F014         	call	_write_data
  4170                           
  4171                           ;ST7735_TFT.c: 260: write_command(0xC3);
  4172  0013F8  0EC3               	movlw	195
  4173  0013FA  EC66  F014         	call	_write_command
  4174                           
  4175                           ;ST7735_TFT.c: 261: write_data(0x8A);
  4176  0013FE  0E8A               	movlw	138
  4177  001400  EC5E  F014         	call	_write_data
  4178                           
  4179                           ;ST7735_TFT.c: 262: write_data(0x2A);
  4180  001404  0E2A               	movlw	42
  4181  001406  EC5E  F014         	call	_write_data
  4182                           
  4183                           ;ST7735_TFT.c: 263: write_command(0xC4);
  4184  00140A  0EC4               	movlw	196
  4185  00140C  EC66  F014         	call	_write_command
  4186                           
  4187                           ;ST7735_TFT.c: 264: write_data(0x8A);
  4188  001410  0E8A               	movlw	138
  4189  001412  EC5E  F014         	call	_write_data
  4190                           
  4191                           ;ST7735_TFT.c: 265: write_data(0xEE);
  4192  001416  0EEE               	movlw	238
  4193  001418  EC5E  F014         	call	_write_data
  4194                           
  4195                           ;ST7735_TFT.c: 266: write_command(0xC5);
  4196  00141C  0EC5               	movlw	197
  4197  00141E  EC66  F014         	call	_write_command
  4198                           
  4199                           ;ST7735_TFT.c: 267: write_data(0x0E);
  4200  001422  0E0E               	movlw	14
  4201  001424  EC5E  F014         	call	_write_data
  4202                           
  4203                           ;ST7735_TFT.c: 268: write_command(0x20);
  4204  001428  0E20               	movlw	32
  4205  00142A  EC66  F014         	call	_write_command
  4206                           
  4207                           ;ST7735_TFT.c: 269: write_command(0x36);
  4208  00142E  0E36               	movlw	54
  4209  001430  EC66  F014         	call	_write_command
  4210                           
  4211                           ;ST7735_TFT.c: 270: write_data(0xC8);
  4212  001434  0EC8               	movlw	200
  4213  001436  EC5E  F014         	call	_write_data
  4214                           
  4215                           ;ST7735_TFT.c: 271: write_command(0x3A);
  4216  00143A  0E3A               	movlw	58
  4217  00143C  EC66  F014         	call	_write_command
  4218                           
  4219                           ;ST7735_TFT.c: 272: write_data(0x05);
  4220  001440  0E05               	movlw	5
  4221  001442  EC5E  F014         	call	_write_data
  4222  001446  0012               	return		;funcret
  4223  001448                     __end_of_Rcmd1:
  4224                           	opt stack 0
  4225                           tblptru	equ	0xFF8
  4226                           tblptrh	equ	0xFF7
  4227                           tblptrl	equ	0xFF6
  4228                           tablat	equ	0xFF5
  4229                           intcon	equ	0xFF2
  4230                           intcon2	equ	0xFF1
  4231                           intcon3	equ	0xFF0
  4232                           postinc0	equ	0xFEE
  4233                           wreg	equ	0xFE8
  4234                           postdec1	equ	0xFE5
  4235                           fsr1l	equ	0xFE1
  4236                           status	equ	0xFD8
  4237                           
  4238 ;; *************** function _LCD_Reset *****************
  4239 ;; Defined at:
  4240 ;;		line 164 in file "ST7735_TFT.c"
  4241 ;; Parameters:    Size  Location     Type
  4242 ;;		None
  4243 ;; Auto vars:     Size  Location     Type
  4244 ;;		None
  4245 ;; Return value:  Size  Location     Type
  4246 ;;		None               void
  4247 ;; Registers used:
  4248 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4249 ;; Tracked objects:
  4250 ;;		On entry : 0/0
  4251 ;;		On exit  : 0/0
  4252 ;;		Unchanged: 0/0
  4253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4258 ;;Total ram usage:        0 bytes
  4259 ;; Hardware stack levels used:    1
  4260 ;; Hardware stack levels required when called:    4
  4261 ;; This function calls:
  4262 ;;		_delay_ms
  4263 ;; This function is called by:
  4264 ;;		_Initialize_LCD_Screen
  4265 ;; This function uses a non-reentrant model
  4266 ;;
  4267                           
  4268                           	psect	text12
  4269  002898                     __ptext12:
  4270                           	opt stack 0
  4271  002898                     _LCD_Reset:
  4272                           	opt stack 25
  4273                           
  4274                           ;ST7735_TFT.c: 166: PORTDbits.RD5 = 0;
  4275                           
  4276                           ;incstack = 0
  4277  002898  9A83               	bcf	3971,5,c	;volatile
  4278                           
  4279                           ;ST7735_TFT.c: 167: delay_ms(100);
  4280  00289A  0E00               	movlw	0
  4281  00289C  6E16               	movwf	delay_ms@ms+1,c
  4282  00289E  0E64               	movlw	100
  4283  0028A0  6E15               	movwf	delay_ms@ms,c
  4284  0028A2  EC88  F011         	call	_delay_ms	;wreg free
  4285                           
  4286                           ;ST7735_TFT.c: 168: PORTDbits.RD5 = 1;
  4287  0028A6  8A83               	bsf	3971,5,c	;volatile
  4288  0028A8  0012               	return		;funcret
  4289  0028AA                     __end_of_LCD_Reset:
  4290                           	opt stack 0
  4291                           tblptru	equ	0xFF8
  4292                           tblptrh	equ	0xFF7
  4293                           tblptrl	equ	0xFF6
  4294                           tablat	equ	0xFF5
  4295                           intcon	equ	0xFF2
  4296                           intcon2	equ	0xFF1
  4297                           intcon3	equ	0xFF0
  4298                           postinc0	equ	0xFEE
  4299                           wreg	equ	0xFE8
  4300                           postdec1	equ	0xFE5
  4301                           fsr1l	equ	0xFE1
  4302                           status	equ	0xFD8
  4303                           
  4304 ;; *************** function _delay_ms *****************
  4305 ;; Defined at:
  4306 ;;		line 11 in file "ST7735_TFT.c"
  4307 ;; Parameters:    Size  Location     Type
  4308 ;;  ms              2   20[COMRAM] int 
  4309 ;; Auto vars:     Size  Location     Type
  4310 ;;  count           2   24[COMRAM] int 
  4311 ;; Return value:  Size  Location     Type
  4312 ;;		None               void
  4313 ;; Registers used:
  4314 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  4315 ;; Tracked objects:
  4316 ;;		On entry : 0/0
  4317 ;;		On exit  : 0/0
  4318 ;;		Unchanged: 0/0
  4319 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4320 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4321 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4322 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4323 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4324 ;;Total ram usage:        6 bytes
  4325 ;; Hardware stack levels used:    1
  4326 ;; Hardware stack levels required when called:    3
  4327 ;; This function calls:
  4328 ;;		___wmul
  4329 ;; This function is called by:
  4330 ;;		_LCD_Reset
  4331 ;;		_Rcmd1
  4332 ;;		_Rcmd3
  4333 ;;		_Bcmd
  4334 ;; This function uses a non-reentrant model
  4335 ;;
  4336                           
  4337                           	psect	text13
  4338  002310                     __ptext13:
  4339                           	opt stack 0
  4340  002310                     _delay_ms:
  4341                           	opt stack 24
  4342                           
  4343                           ;ST7735_TFT.c: 17: int count;
  4344                           ;ST7735_TFT.c: 18: count = 8000000/4000/8 * ms;
  4345                           
  4346                           ;incstack = 0
  4347  002310  C015  F00F         	movff	delay_ms@ms,___wmul@multiplier
  4348  002314  C016  F010         	movff	delay_ms@ms+1,___wmul@multiplier+1
  4349  002318  0E00               	movlw	0
  4350  00231A  6E12               	movwf	___wmul@multiplicand+1,c
  4351  00231C  0EFA               	movlw	250
  4352  00231E  6E11               	movwf	___wmul@multiplicand,c
  4353  002320  ECC2  F013         	call	___wmul	;wreg free
  4354  002324  C00F  F019         	movff	?___wmul,delay_ms@count
  4355  002328  C010  F01A         	movff	?___wmul+1,delay_ms@count+1
  4356                           
  4357                           ;ST7735_TFT.c: 19: count = (0xffff - count);
  4358  00232C  C019  F017         	movff	delay_ms@count,??_delay_ms
  4359  002330  C01A  F018         	movff	delay_ms@count+1,??_delay_ms+1
  4360  002334  1E17               	comf	??_delay_ms,f,c
  4361  002336  1E18               	comf	??_delay_ms+1,f,c
  4362  002338  4A17               	infsnz	??_delay_ms,f,c
  4363  00233A  2A18               	incf	??_delay_ms+1,f,c
  4364  00233C  0EFF               	movlw	255
  4365  00233E  2417               	addwf	??_delay_ms,w,c
  4366  002340  6E19               	movwf	delay_ms@count,c
  4367  002342  0EFF               	movlw	255
  4368  002344  2018               	addwfc	??_delay_ms+1,w,c
  4369  002346  6E1A               	movwf	delay_ms@count+1,c
  4370                           
  4371                           ;ST7735_TFT.c: 21: T3CON = 0xb8;
  4372  002348  0EB8               	movlw	184
  4373  00234A  6EB1               	movwf	4017,c	;volatile
  4374                           
  4375                           ;ST7735_TFT.c: 23: TMR3L = count & 0x00ff;
  4376  00234C  C019  FFB2         	movff	delay_ms@count,4018	;volatile
  4377                           
  4378                           ;ST7735_TFT.c: 24: TMR3H = count >> 8;
  4379  002350  501A               	movf	delay_ms@count+1,w,c
  4380  002352  6EB3               	movwf	4019,c	;volatile
  4381                           
  4382                           ;ST7735_TFT.c: 26: PIR2bits.TMR3IF = 0;
  4383  002354  92A1               	bcf	4001,1,c	;volatile
  4384                           
  4385                           ;ST7735_TFT.c: 27: T3CONbits.TMR3ON = 1;
  4386  002356  80B1               	bsf	4017,0,c	;volatile
  4387                           
  4388                           ;ST7735_TFT.c: 29: while (PIR2bits.TMR3IF == 0);
  4389  002358  D000               	goto	l394
  4390  00235A                     l394:
  4391  00235A  A2A1               	btfss	4001,1,c	;volatile
  4392  00235C  D7FE               	goto	l394
  4393                           
  4394                           ;ST7735_TFT.c: 30: T3CONbits.TMR3ON = 0;
  4395  00235E  90B1               	bcf	4017,0,c	;volatile
  4396  002360  0012               	return		;funcret
  4397  002362                     __end_of_delay_ms:
  4398                           	opt stack 0
  4399                           tblptru	equ	0xFF8
  4400                           tblptrh	equ	0xFF7
  4401                           tblptrl	equ	0xFF6
  4402                           tablat	equ	0xFF5
  4403                           intcon	equ	0xFF2
  4404                           intcon2	equ	0xFF1
  4405                           intcon3	equ	0xFF0
  4406                           postinc0	equ	0xFEE
  4407                           wreg	equ	0xFE8
  4408                           postdec1	equ	0xFE5
  4409                           fsr1l	equ	0xFE1
  4410                           status	equ	0xFD8
  4411                           
  4412 ;; *************** function _Init_UART *****************
  4413 ;; Defined at:
  4414 ;;		line 25 in file "utils.c"
  4415 ;; Parameters:    Size  Location     Type
  4416 ;;		None
  4417 ;; Auto vars:     Size  Location     Type
  4418 ;;		None
  4419 ;; Return value:  Size  Location     Type
  4420 ;;		None               void
  4421 ;; Registers used:
  4422 ;;		wreg, status,2, cstack
  4423 ;; Tracked objects:
  4424 ;;		On entry : 0/0
  4425 ;;		On exit  : 0/0
  4426 ;;		Unchanged: 0/0
  4427 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4428 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4429 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4430 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4431 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4432 ;;Total ram usage:        0 bytes
  4433 ;; Hardware stack levels used:    1
  4434 ;; Hardware stack levels required when called:    3
  4435 ;; This function calls:
  4436 ;;		_OpenUSART
  4437 ;; This function is called by:
  4438 ;;		_main
  4439 ;; This function uses a non-reentrant model
  4440 ;;
  4441                           
  4442                           	psect	text14
  4443  002870                     __ptext14:
  4444                           	opt stack 0
  4445  002870                     _Init_UART:
  4446                           	opt stack 27
  4447                           
  4448                           ;utils.c: 27: OpenUSART (0b01111111 & 0b10111111 &
  4449                           ;utils.c: 28: 0b11111110 & 0b11111101 & 0b11111111 &
  4450                           ;utils.c: 29: 0b11111111, 25);
  4451                           
  4452                           ;incstack = 0
  4453  002870  0E00               	movlw	0
  4454  002872  6E10               	movwf	OpenUSART@spbrg+1,c
  4455  002874  0E19               	movlw	25
  4456  002876  6E0F               	movwf	OpenUSART@spbrg,c
  4457  002878  0E3C               	movlw	60
  4458  00287A  EC5B  F010         	call	_OpenUSART
  4459                           
  4460                           ;utils.c: 30: OSCCON = 0x70;
  4461  00287E  0E70               	movlw	112
  4462  002880  6ED3               	movwf	4051,c	;volatile
  4463  002882  0012               	return		;funcret
  4464  002884                     __end_of_Init_UART:
  4465                           	opt stack 0
  4466                           tblptru	equ	0xFF8
  4467                           tblptrh	equ	0xFF7
  4468                           tblptrl	equ	0xFF6
  4469                           tablat	equ	0xFF5
  4470                           intcon	equ	0xFF2
  4471                           intcon2	equ	0xFF1
  4472                           intcon3	equ	0xFF0
  4473                           postinc0	equ	0xFEE
  4474                           wreg	equ	0xFE8
  4475                           postdec1	equ	0xFE5
  4476                           fsr1l	equ	0xFE1
  4477                           status	equ	0xFD8
  4478                           
  4479 ;; *************** function _OpenUSART *****************
  4480 ;; Defined at:
  4481 ;;		line 73 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\pic18\plib\USART\uopen.c"
  4482 ;; Parameters:    Size  Location     Type
  4483 ;;  config          1    wreg     unsigned char 
  4484 ;;  spbrg           2   14[COMRAM] unsigned int 
  4485 ;; Auto vars:     Size  Location     Type
  4486 ;;  config          1   16[COMRAM] unsigned char 
  4487 ;; Return value:  Size  Location     Type
  4488 ;;		None               void
  4489 ;; Registers used:
  4490 ;;		wreg, status,2
  4491 ;; Tracked objects:
  4492 ;;		On entry : 0/0
  4493 ;;		On exit  : 0/0
  4494 ;;		Unchanged: 0/0
  4495 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4496 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4497 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4498 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4499 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4500 ;;Total ram usage:        3 bytes
  4501 ;; Hardware stack levels used:    1
  4502 ;; Hardware stack levels required when called:    2
  4503 ;; This function calls:
  4504 ;;		Nothing
  4505 ;; This function is called by:
  4506 ;;		_Init_UART
  4507 ;; This function uses a non-reentrant model
  4508 ;;
  4509                           
  4510                           	psect	text15
  4511  0020B6                     __ptext15:
  4512                           	opt stack 0
  4513  0020B6                     _OpenUSART:
  4514                           	opt stack 27
  4515                           
  4516                           ;incstack = 0
  4517                           ;OpenUSART@config stored from wreg
  4518  0020B6  6E11               	movwf	OpenUSART@config,c
  4519  0020B8  0E00               	movlw	0
  4520  0020BA  6EAC               	movwf	4012,c	;volatile
  4521  0020BC  0E00               	movlw	0
  4522  0020BE  6EAB               	movwf	4011,c	;volatile
  4523  0020C0  A011               	btfss	OpenUSART@config,0,c
  4524  0020C2  D002               	goto	l3946
  4525  0020C4  88AC               	bsf	4012,4,c	;volatile
  4526  0020C6  D000               	goto	l3946
  4527  0020C8                     l3946:
  4528  0020C8  A211               	btfss	OpenUSART@config,1,c
  4529  0020CA  D003               	goto	l3950
  4530  0020CC  8CAC               	bsf	4012,6,c	;volatile
  4531  0020CE  8CAB               	bsf	4011,6,c	;volatile
  4532  0020D0  D000               	goto	l3950
  4533  0020D2                     l3950:
  4534  0020D2  A411               	btfss	OpenUSART@config,2,c
  4535  0020D4  D002               	goto	l3954
  4536  0020D6  8EAC               	bsf	4012,7,c	;volatile
  4537  0020D8  D000               	goto	l3954
  4538  0020DA                     l3954:
  4539  0020DA  A611               	btfss	OpenUSART@config,3,c
  4540  0020DC  D002               	goto	l711
  4541  0020DE  88AB               	bsf	4011,4,c	;volatile
  4542  0020E0  D002               	goto	l3958
  4543  0020E2                     l711:
  4544  0020E2  8AAB               	bsf	4011,5,c	;volatile
  4545  0020E4  D000               	goto	l3958
  4546  0020E6                     l3958:
  4547  0020E6  B811               	btfsc	OpenUSART@config,4,c
  4548  0020E8  84AC               	bsf	4012,2,c	;volatile
  4549  0020EA  989E               	bcf	3998,4,c	;volatile
  4550  0020EC  AA11               	btfss	OpenUSART@config,5,c
  4551  0020EE  D002               	goto	l3966
  4552  0020F0  86AB               	bsf	4011,3,c	;volatile
  4553  0020F2  D000               	goto	l3966
  4554  0020F4                     l3966:
  4555  0020F4  AC11               	btfss	OpenUSART@config,6,c
  4556  0020F6  D002               	goto	l715
  4557  0020F8  8A9D               	bsf	3997,5,c	;volatile
  4558  0020FA  D001               	goto	l716
  4559  0020FC                     l715:
  4560  0020FC  9A9D               	bcf	3997,5,c	;volatile
  4561  0020FE                     l716:
  4562  0020FE  9A9E               	bcf	3998,5,c	;volatile
  4563  002100  AE11               	btfss	OpenUSART@config,7,c
  4564  002102  D002               	goto	l717
  4565  002104  889D               	bsf	3997,4,c	;volatile
  4566  002106  D001               	goto	l718
  4567  002108                     l717:
  4568  002108  989D               	bcf	3997,4,c	;volatile
  4569  00210A                     l718:
  4570  00210A  C00F  FFAF         	movff	OpenUSART@spbrg,4015	;volatile
  4571  00210E  5010               	movf	OpenUSART@spbrg+1,w,c
  4572  002110  6EB0               	movwf	4016,c	;volatile
  4573  002112  8AAC               	bsf	4012,5,c	;volatile
  4574  002114  8EAB               	bsf	4011,7,c	;volatile
  4575  002116  9C94               	bcf	3988,6,c	;volatile
  4576  002118  8E94               	bsf	3988,7,c	;volatile
  4577  00211A  B8AC               	btfsc	4012,4,c	;volatile
  4578  00211C  BEAC               	btfsc	4012,7,c	;volatile
  4579  00211E  D002               	goto	l720
  4580  002120  8C94               	bsf	3988,6,c	;volatile
  4581  002122  D000               	goto	l720
  4582  002124                     l720:
  4583  002124  0012               	return		;funcret
  4584  002126                     __end_of_OpenUSART:
  4585                           	opt stack 0
  4586                           tblptru	equ	0xFF8
  4587                           tblptrh	equ	0xFF7
  4588                           tblptrl	equ	0xFF6
  4589                           tablat	equ	0xFF5
  4590                           intcon	equ	0xFF2
  4591                           intcon2	equ	0xFF1
  4592                           intcon3	equ	0xFF0
  4593                           postinc0	equ	0xFEE
  4594                           wreg	equ	0xFE8
  4595                           postdec1	equ	0xFE5
  4596                           fsr1l	equ	0xFE1
  4597                           status	equ	0xFD8
  4598                           
  4599 ;; *************** function _Init_ADC *****************
  4600 ;; Defined at:
  4601 ;;		line 18 in file "utils.c"
  4602 ;; Parameters:    Size  Location     Type
  4603 ;;		None
  4604 ;; Auto vars:     Size  Location     Type
  4605 ;;		None
  4606 ;; Return value:  Size  Location     Type
  4607 ;;		None               void
  4608 ;; Registers used:
  4609 ;;		wreg, status,2
  4610 ;; Tracked objects:
  4611 ;;		On entry : 0/0
  4612 ;;		On exit  : 0/0
  4613 ;;		Unchanged: 0/0
  4614 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4617 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4618 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4619 ;;Total ram usage:        0 bytes
  4620 ;; Hardware stack levels used:    1
  4621 ;; Hardware stack levels required when called:    2
  4622 ;; This function calls:
  4623 ;;		Nothing
  4624 ;; This function is called by:
  4625 ;;		_main
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text16
  4630  0028FC                     __ptext16:
  4631                           	opt stack 0
  4632  0028FC                     _Init_ADC:
  4633                           	opt stack 28
  4634                           
  4635                           ;utils.c: 20: ADCON0 = 0x01;
  4636                           
  4637                           ;incstack = 0
  4638  0028FC  0E01               	movlw	1
  4639  0028FE  6EC2               	movwf	4034,c	;volatile
  4640                           
  4641                           ;utils.c: 21: ADCON1 = 0x0E;
  4642  002900  0E0E               	movlw	14
  4643  002902  6EC1               	movwf	4033,c	;volatile
  4644                           
  4645                           ;utils.c: 22: ADCON2 = 0xA9;
  4646  002904  0EA9               	movlw	169
  4647  002906  6EC0               	movwf	4032,c	;volatile
  4648  002908  0012               	return		;funcret
  4649  00290A                     __end_of_Init_ADC:
  4650                           	opt stack 0
  4651                           tblptru	equ	0xFF8
  4652                           tblptrh	equ	0xFF7
  4653                           tblptrl	equ	0xFF6
  4654                           tablat	equ	0xFF5
  4655                           intcon	equ	0xFF2
  4656                           intcon2	equ	0xFF1
  4657                           intcon3	equ	0xFF0
  4658                           postinc0	equ	0xFEE
  4659                           wreg	equ	0xFE8
  4660                           postdec1	equ	0xFE5
  4661                           fsr1l	equ	0xFE1
  4662                           status	equ	0xFD8
  4663                           
  4664 ;; *************** function _Do_Flashing *****************
  4665 ;; Defined at:
  4666 ;;		line 119 in file "Lab8pB.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;		None               void
  4673 ;; Registers used:
  4674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4675 ;; Tracked objects:
  4676 ;;		On entry : 0/0
  4677 ;;		On exit  : 0/0
  4678 ;;		Unchanged: 0/0
  4679 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4680 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4681 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4684 ;;Total ram usage:        0 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; Hardware stack levels required when called:   11
  4687 ;; This function calls:
  4688 ;;		_Set_EW
  4689 ;;		_Set_EWLT
  4690 ;;		_Set_NS
  4691 ;;		_Set_NSLT
  4692 ;;		_Wait_One_Second
  4693 ;; This function is called by:
  4694 ;;		_main
  4695 ;; This function uses a non-reentrant model
  4696 ;;
  4697                           
  4698                           	psect	text17
  4699  00225C                     __ptext17:
  4700                           	opt stack 0
  4701  00225C                     _Do_Flashing:
  4702                           	opt stack 19
  4703                           
  4704                           ;Lab8pB.c: 120: while(Flashing_Status == 1){
  4705                           
  4706                           ;incstack = 0
  4707  00225C  D028               	goto	l5740
  4708  00225E                     l5720:
  4709                           
  4710                           ;Lab8pB.c: 121: if(Flashing_Request == 0){
  4711  00225E  504B               	movf	_Flashing_Request,w,c
  4712  002260  A4D8               	btfss	status,2,c
  4713  002262  D01D               	goto	l5736
  4714                           
  4715                           ;Lab8pB.c: 123: Set_NS(1);
  4716  002264  0E01               	movlw	1
  4717  002266  EC4A  F012         	call	_Set_NS
  4718                           
  4719                           ;Lab8pB.c: 124: Set_NSLT(1);
  4720  00226A  0E01               	movlw	1
  4721  00226C  EC26  F012         	call	_Set_NSLT
  4722                           
  4723                           ;Lab8pB.c: 125: Set_EW(1);
  4724  002270  0E01               	movlw	1
  4725  002272  EC92  F012         	call	_Set_EW
  4726                           
  4727                           ;Lab8pB.c: 126: Set_EWLT(1);
  4728  002276  0E01               	movlw	1
  4729  002278  EC6E  F012         	call	_Set_EWLT
  4730                           
  4731                           ;Lab8pB.c: 128: Wait_One_Second();
  4732  00227C  EC08  F014         	call	_Wait_One_Second	;wreg free
  4733                           
  4734                           ;Lab8pB.c: 130: Set_NS(0);
  4735  002280  0E00               	movlw	0
  4736  002282  EC4A  F012         	call	_Set_NS
  4737                           
  4738                           ;Lab8pB.c: 131: Set_NSLT(0);
  4739  002286  0E00               	movlw	0
  4740  002288  EC26  F012         	call	_Set_NSLT
  4741                           
  4742                           ;Lab8pB.c: 132: Set_EW(0);
  4743  00228C  0E00               	movlw	0
  4744  00228E  EC92  F012         	call	_Set_EW
  4745                           
  4746                           ;Lab8pB.c: 133: Set_EWLT(0);
  4747  002292  0E00               	movlw	0
  4748  002294  EC6E  F012         	call	_Set_EWLT
  4749                           
  4750                           ;Lab8pB.c: 135: Wait_One_Second();
  4751  002298  EC08  F014         	call	_Wait_One_Second	;wreg free
  4752                           
  4753                           ;Lab8pB.c: 136: } else if(Flashing_Request == 1){
  4754  00229C  D008               	goto	l5740
  4755  00229E                     l5736:
  4756  00229E  044B               	decf	_Flashing_Request,w,c
  4757  0022A0  A4D8               	btfss	status,2,c
  4758  0022A2  D005               	goto	l5740
  4759                           
  4760                           ;Lab8pB.c: 137: Flashing_Request = 0;
  4761  0022A4  0E00               	movlw	0
  4762  0022A6  6E4B               	movwf	_Flashing_Request,c
  4763                           
  4764                           ;Lab8pB.c: 138: Flashing_Status = 0;
  4765  0022A8  0E00               	movlw	0
  4766  0022AA  6E4C               	movwf	_Flashing_Status,c
  4767  0022AC  D000               	goto	l5740
  4768  0022AE                     l5740:
  4769  0022AE  044C               	decf	_Flashing_Status,w,c
  4770  0022B0  B4D8               	btfsc	status,2,c
  4771  0022B2  D7D5               	goto	l5720
  4772  0022B4  0012               	return		;funcret
  4773  0022B6                     __end_of_Do_Flashing:
  4774                           	opt stack 0
  4775                           tblptru	equ	0xFF8
  4776                           tblptrh	equ	0xFF7
  4777                           tblptrl	equ	0xFF6
  4778                           tablat	equ	0xFF5
  4779                           intcon	equ	0xFF2
  4780                           intcon2	equ	0xFF1
  4781                           intcon3	equ	0xFF0
  4782                           postinc0	equ	0xFEE
  4783                           wreg	equ	0xFE8
  4784                           postdec1	equ	0xFE5
  4785                           fsr1l	equ	0xFE1
  4786                           status	equ	0xFD8
  4787                           
  4788 ;; *************** function _Day_Mode *****************
  4789 ;; Defined at:
  4790 ;;		line 215 in file "Lab8pB.c"
  4791 ;; Parameters:    Size  Location     Type
  4792 ;;		None
  4793 ;; Auto vars:     Size  Location     Type
  4794 ;;		None
  4795 ;; Return value:  Size  Location     Type
  4796 ;;		None               void
  4797 ;; Registers used:
  4798 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4808 ;;Total ram usage:        0 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:   12
  4811 ;; This function calls:
  4812 ;;		_PED_Control
  4813 ;;		_Set_EW
  4814 ;;		_Set_EWLT
  4815 ;;		_Set_NS
  4816 ;;		_Set_NSLT
  4817 ;;		_Wait_N_Seconds
  4818 ;; This function is called by:
  4819 ;;		_main
  4820 ;; This function uses a non-reentrant model
  4821 ;;
  4822                           
  4823                           	psect	text18
  4824  001B7E                     __ptext18:
  4825                           	opt stack 0
  4826  001B7E                     _Day_Mode:
  4827                           	opt stack 18
  4828                           
  4829                           ;Lab8pB.c: 218: MODE = 1;
  4830                           
  4831                           ;incstack = 0
  4832  001B7E  0E01               	movlw	1
  4833  001B80  6E51               	movwf	_MODE,c
  4834                           
  4835                           ;Lab8pB.c: 219: PORTEbits.RE2 = 1;
  4836  001B82  8484               	bsf	3972,2,c	;volatile
  4837                           
  4838                           ;Lab8pB.c: 220: Set_EW(1);
  4839  001B84  0E01               	movlw	1
  4840  001B86  EC92  F012         	call	_Set_EW
  4841                           
  4842                           ;Lab8pB.c: 221: Set_EWLT(1);
  4843  001B8A  0E01               	movlw	1
  4844  001B8C  EC6E  F012         	call	_Set_EWLT
  4845                           
  4846                           ;Lab8pB.c: 222: Set_NSLT(1);
  4847  001B90  0E01               	movlw	1
  4848  001B92  EC26  F012         	call	_Set_NSLT
  4849                           
  4850                           ;Lab8pB.c: 223: Set_NS(2);
  4851  001B96  0E02               	movlw	2
  4852  001B98  EC4A  F012         	call	_Set_NS
  4853                           
  4854                           ;Lab8pB.c: 224: if(NS_PED_SW){
  4855  001B9C  5052               	movf	_NS_PED_SW,w,c
  4856  001B9E  B4D8               	btfsc	status,2,c
  4857  001BA0  D005               	goto	l204
  4858                           
  4859                           ;Lab8pB.c: 225: PED_Control(0,8);
  4860  001BA2  0E08               	movlw	8
  4861  001BA4  6E43               	movwf	PED_Control@Num_Sec,c
  4862  001BA6  0E00               	movlw	0
  4863  001BA8  EC5B  F011         	call	_PED_Control
  4864  001BAC                     l204:
  4865                           
  4866                           ;Lab8pB.c: 226: }
  4867                           ;Lab8pB.c: 227: Wait_N_Seconds(7);
  4868  001BAC  0E07               	movlw	7
  4869  001BAE  EC4C  F013         	call	_Wait_N_Seconds
  4870                           
  4871                           ;Lab8pB.c: 228: Set_NS(3);
  4872  001BB2  0E03               	movlw	3
  4873  001BB4  EC4A  F012         	call	_Set_NS
  4874                           
  4875                           ;Lab8pB.c: 229: Wait_N_Seconds(3);
  4876  001BB8  0E03               	movlw	3
  4877  001BBA  EC4C  F013         	call	_Wait_N_Seconds
  4878                           
  4879                           ;Lab8pB.c: 230: Set_NS(1);
  4880  001BBE  0E01               	movlw	1
  4881  001BC0  EC4A  F012         	call	_Set_NS
  4882                           
  4883                           ;Lab8pB.c: 231: if(PORTAbits.RA4){
  4884  001BC4  A880               	btfss	3968,4,c	;volatile
  4885  001BC6  D010               	goto	l5652
  4886                           
  4887                           ;Lab8pB.c: 232: Set_EWLT(2);
  4888  001BC8  0E02               	movlw	2
  4889  001BCA  EC6E  F012         	call	_Set_EWLT
  4890                           
  4891                           ;Lab8pB.c: 233: Wait_N_Seconds(8);
  4892  001BCE  0E08               	movlw	8
  4893  001BD0  EC4C  F013         	call	_Wait_N_Seconds
  4894                           
  4895                           ;Lab8pB.c: 234: Set_EWLT(3);
  4896  001BD4  0E03               	movlw	3
  4897  001BD6  EC6E  F012         	call	_Set_EWLT
  4898                           
  4899                           ;Lab8pB.c: 235: Wait_N_Seconds(3);
  4900  001BDA  0E03               	movlw	3
  4901  001BDC  EC4C  F013         	call	_Wait_N_Seconds
  4902                           
  4903                           ;Lab8pB.c: 236: Set_EWLT(1);
  4904  001BE0  0E01               	movlw	1
  4905  001BE2  EC6E  F012         	call	_Set_EWLT
  4906  001BE6  D000               	goto	l5652
  4907  001BE8                     l5652:
  4908                           
  4909                           ;Lab8pB.c: 237: }
  4910                           ;Lab8pB.c: 238: Set_EW(2);
  4911  001BE8  0E02               	movlw	2
  4912  001BEA  EC92  F012         	call	_Set_EW
  4913                           
  4914                           ;Lab8pB.c: 239: if(EW_PED_SW){
  4915  001BEE  504A               	movf	_EW_PED_SW,w,c
  4916  001BF0  B4D8               	btfsc	status,2,c
  4917  001BF2  D005               	goto	l206
  4918                           
  4919                           ;Lab8pB.c: 240: PED_Control(2,7);
  4920  001BF4  0E07               	movlw	7
  4921  001BF6  6E43               	movwf	PED_Control@Num_Sec,c
  4922  001BF8  0E02               	movlw	2
  4923  001BFA  EC5B  F011         	call	_PED_Control
  4924  001BFE                     l206:
  4925                           
  4926                           ;Lab8pB.c: 241: }
  4927                           ;Lab8pB.c: 242: Wait_N_Seconds(6);
  4928  001BFE  0E06               	movlw	6
  4929  001C00  EC4C  F013         	call	_Wait_N_Seconds
  4930                           
  4931                           ;Lab8pB.c: 243: Set_EW(3);
  4932  001C04  0E03               	movlw	3
  4933  001C06  EC92  F012         	call	_Set_EW
  4934                           
  4935                           ;Lab8pB.c: 244: Wait_N_Seconds(3);
  4936  001C0A  0E03               	movlw	3
  4937  001C0C  EC4C  F013         	call	_Wait_N_Seconds
  4938                           
  4939                           ;Lab8pB.c: 245: Set_EW(1);
  4940  001C10  0E01               	movlw	1
  4941  001C12  EC92  F012         	call	_Set_EW
  4942                           
  4943                           ;Lab8pB.c: 246: if(PORTAbits.RA1){
  4944  001C16  A280               	btfss	3968,1,c	;volatile
  4945  001C18  D010               	goto	l208
  4946                           
  4947                           ;Lab8pB.c: 247: Set_NSLT(2);
  4948  001C1A  0E02               	movlw	2
  4949  001C1C  EC26  F012         	call	_Set_NSLT
  4950                           
  4951                           ;Lab8pB.c: 248: Wait_N_Seconds(7);
  4952  001C20  0E07               	movlw	7
  4953  001C22  EC4C  F013         	call	_Wait_N_Seconds
  4954                           
  4955                           ;Lab8pB.c: 249: Set_NSLT(3);
  4956  001C26  0E03               	movlw	3
  4957  001C28  EC26  F012         	call	_Set_NSLT
  4958                           
  4959                           ;Lab8pB.c: 250: Wait_N_Seconds(3);
  4960  001C2C  0E03               	movlw	3
  4961  001C2E  EC4C  F013         	call	_Wait_N_Seconds
  4962                           
  4963                           ;Lab8pB.c: 251: Set_NSLT(1);
  4964  001C32  0E01               	movlw	1
  4965  001C34  EC26  F012         	call	_Set_NSLT
  4966  001C38  D000               	goto	l208
  4967  001C3A                     l208:
  4968  001C3A  0012               	return		;funcret
  4969  001C3C                     __end_of_Day_Mode:
  4970                           	opt stack 0
  4971                           tblptru	equ	0xFF8
  4972                           tblptrh	equ	0xFF7
  4973                           tblptrl	equ	0xFF6
  4974                           tablat	equ	0xFF5
  4975                           intcon	equ	0xFF2
  4976                           intcon2	equ	0xFF1
  4977                           intcon3	equ	0xFF0
  4978                           postinc0	equ	0xFEE
  4979                           wreg	equ	0xFE8
  4980                           postdec1	equ	0xFE5
  4981                           fsr1l	equ	0xFE1
  4982                           status	equ	0xFD8
  4983                           
  4984 ;; *************** function _Wait_N_Seconds *****************
  4985 ;; Defined at:
  4986 ;;		line 319 in file "Lab8pB.c"
  4987 ;; Parameters:    Size  Location     Type
  4988 ;;  seconds         1    wreg     unsigned char 
  4989 ;; Auto vars:     Size  Location     Type
  4990 ;;  seconds         1   12[BANK0 ] unsigned char 
  4991 ;;  I               1   13[BANK0 ] unsigned char 
  4992 ;; Return value:  Size  Location     Type
  4993 ;;		None               void
  4994 ;; Registers used:
  4995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4996 ;; Tracked objects:
  4997 ;;		On entry : 0/0
  4998 ;;		On exit  : 0/0
  4999 ;;		Unchanged: 0/0
  5000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5002 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5004 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5005 ;;Total ram usage:        2 bytes
  5006 ;; Hardware stack levels used:    1
  5007 ;; Hardware stack levels required when called:   11
  5008 ;; This function calls:
  5009 ;;		_Wait_One_Second
  5010 ;;		_update_LCD_count
  5011 ;; This function is called by:
  5012 ;;		_Day_Mode
  5013 ;;		_Night_Mode
  5014 ;; This function uses a non-reentrant model
  5015 ;;
  5016                           
  5017                           	psect	text19
  5018  002698                     __ptext19:
  5019                           	opt stack 0
  5020  002698                     _Wait_N_Seconds:
  5021                           	opt stack 18
  5022                           
  5023                           ;incstack = 0
  5024                           ;Wait_N_Seconds@seconds stored from wreg
  5025  002698  0100               	movlb	0	; () banked
  5026  00269A  6FD7               	movwf	Wait_N_Seconds@seconds& (0+255),b
  5027                           
  5028                           ; BSR set to: 0
  5029                           ;Lab8pB.c: 321: char I;
  5030                           ;Lab8pB.c: 322: for (I = seconds; I> 0; I--)
  5031  00269C  C0D7  F0D8         	movff	Wait_N_Seconds@seconds,Wait_N_Seconds@I
  5032  0026A0                     l5470:
  5033                           
  5034                           ; BSR set to: 0
  5035  0026A0  0100               	movlb	0	; () banked
  5036  0026A2  51D8               	movf	Wait_N_Seconds@I& (0+255),w,b
  5037  0026A4  0100               	movlb	0	; () banked
  5038  0026A6  B4D8               	btfsc	status,2,c
  5039  0026A8  D00C               	goto	l5480
  5040  0026AA  D001               	goto	l5474
  5041                           
  5042                           ; BSR set to: 0
  5043  0026AC  D00A               	goto	l5480
  5044  0026AE                     l5474:
  5045                           
  5046                           ; BSR set to: 0
  5047                           ;Lab8pB.c: 323: {
  5048                           ;Lab8pB.c: 325: update_LCD_count(direction, I);
  5049  0026AE  C0D8  F041         	movff	Wait_N_Seconds@I,update_LCD_count@count
  5050  0026B2  505B               	movf	_direction,w,c
  5051  0026B4  EC90  F007         	call	_update_LCD_count
  5052                           
  5053                           ;Lab8pB.c: 326: Wait_One_Second();
  5054  0026B8  EC08  F014         	call	_Wait_One_Second	;wreg free
  5055  0026BC  0100               	movlb	0	; () banked
  5056  0026BE  07D8               	decf	Wait_N_Seconds@I& (0+255),f,b
  5057  0026C0  D7EF               	goto	l5470
  5058  0026C2                     l5480:
  5059                           
  5060                           ; BSR set to: 0
  5061                           ;Lab8pB.c: 328: }
  5062                           ;Lab8pB.c: 330: update_LCD_count(direction, 0);
  5063  0026C2  0E00               	movlw	0
  5064  0026C4  6E41               	movwf	update_LCD_count@count,c
  5065  0026C6  505B               	movf	_direction,w,c
  5066  0026C8  EC90  F007         	call	_update_LCD_count
  5067  0026CC  0012               	return		;funcret
  5068  0026CE                     __end_of_Wait_N_Seconds:
  5069                           	opt stack 0
  5070                           tblptru	equ	0xFF8
  5071                           tblptrh	equ	0xFF7
  5072                           tblptrl	equ	0xFF6
  5073                           tablat	equ	0xFF5
  5074                           intcon	equ	0xFF2
  5075                           intcon2	equ	0xFF1
  5076                           intcon3	equ	0xFF0
  5077                           postinc0	equ	0xFEE
  5078                           wreg	equ	0xFE8
  5079                           postdec1	equ	0xFE5
  5080                           fsr1l	equ	0xFE1
  5081                           status	equ	0xFD8
  5082                           
  5083 ;; *************** function _update_LCD_count *****************
  5084 ;; Defined at:
  5085 ;;		line 231 in file "Main_Screen.c"
  5086 ;; Parameters:    Size  Location     Type
  5087 ;;  direction       1    wreg     unsigned char 
  5088 ;;  count           1   64[COMRAM] unsigned char 
  5089 ;; Auto vars:     Size  Location     Type
  5090 ;;  direction       1   65[COMRAM] unsigned char 
  5091 ;; Return value:  Size  Location     Type
  5092 ;;		None               void
  5093 ;; Registers used:
  5094 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5095 ;; Tracked objects:
  5096 ;;		On entry : 0/0
  5097 ;;		On exit  : 0/0
  5098 ;;		Unchanged: 0/0
  5099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5100 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5101 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5103 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5104 ;;Total ram usage:        2 bytes
  5105 ;; Hardware stack levels used:    1
  5106 ;; Hardware stack levels required when called:    9
  5107 ;; This function calls:
  5108 ;;		___awdiv
  5109 ;;		___awmod
  5110 ;;		_drawtext
  5111 ;; This function is called by:
  5112 ;;		_Wait_N_Seconds
  5113 ;; This function uses a non-reentrant model
  5114 ;;
  5115                           
  5116                           	psect	text20
  5117  000F20                     __ptext20:
  5118                           	opt stack 0
  5119  000F20                     _update_LCD_count:
  5120                           	opt stack 19
  5121                           
  5122                           ;incstack = 0
  5123                           ;update_LCD_count@direction stored from wreg
  5124  000F20  6E42               	movwf	update_LCD_count@direction,c
  5125                           
  5126                           ;Main_Screen.c: 233: switch (direction)
  5127  000F22  D0B4               	goto	l5262
  5128  000F24                     l5244:
  5129                           
  5130                           ;Main_Screen.c: 236: NS_Count[0] = count/10 + '0';
  5131  000F24  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5132  000F28  6A10               	clrf	___awdiv@dividend+1,c
  5133  000F2A  0E00               	movlw	0
  5134  000F2C  6E12               	movwf	___awdiv@divisor+1,c
  5135  000F2E  0E0A               	movlw	10
  5136  000F30  6E11               	movwf	___awdiv@divisor,c
  5137  000F32  EC71  F00E         	call	___awdiv	;wreg free
  5138  000F36  500F               	movf	?___awdiv,w,c
  5139  000F38  0F30               	addlw	48
  5140  000F3A  0100               	movlb	0	; () banked
  5141  000F3C  6FA1               	movwf	_NS_Count& (0+255),b
  5142                           
  5143                           ;Main_Screen.c: 237: NS_Count[1] = count%10 + '0';
  5144  000F3E  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5145  000F42  6A36               	clrf	___awmod@dividend+1,c
  5146  000F44  0E00               	movlw	0
  5147  000F46  6E38               	movwf	___awmod@divisor+1,c
  5148  000F48  0E0A               	movlw	10
  5149  000F4A  6E37               	movwf	___awmod@divisor,c
  5150  000F4C  EC1A  F010         	call	___awmod	;wreg free
  5151  000F50  5035               	movf	?___awmod,w,c
  5152  000F52  0F30               	addlw	48
  5153  000F54  0100               	movlb	0	; () banked
  5154  000F56  6FA2               	movwf	(_NS_Count+1)& (0+255),b
  5155                           
  5156                           ; BSR set to: 0
  5157                           ;Main_Screen.c: 238: drawtext(100, 30 + 10, NS_Count, 0x001F, 0x0000, 2);
  5158  000F58  0E28               	movlw	40
  5159  000F5A  6E37               	movwf	drawtext@y,c
  5160  000F5C  0EA1               	movlw	low _NS_Count
  5161  000F5E  6E38               	movwf	drawtext@_text,c
  5162  000F60  0E00               	movlw	high _NS_Count
  5163  000F62  6E39               	movwf	drawtext@_text+1,c
  5164  000F64  0E00               	movlw	0
  5165  000F66  6E3B               	movwf	drawtext@color+1,c
  5166  000F68  0E1F               	movlw	31
  5167  000F6A  6E3A               	movwf	drawtext@color,c
  5168  000F6C  0E00               	movlw	0
  5169  000F6E  6E3D               	movwf	drawtext@bg+1,c
  5170  000F70  0E00               	movlw	0
  5171  000F72  6E3C               	movwf	drawtext@bg,c
  5172  000F74  0E02               	movlw	2
  5173  000F76  6E3E               	movwf	drawtext@size,c
  5174  000F78  0E64               	movlw	100
  5175  000F7A  EC24  F00A         	call	_drawtext
  5176                           
  5177                           ;Main_Screen.c: 239: break;
  5178  000F7E  D094               	goto	l334
  5179  000F80                     l5248:
  5180                           
  5181                           ;Main_Screen.c: 242: EW_Count[0] = count/10 + '0';
  5182  000F80  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5183  000F84  6A10               	clrf	___awdiv@dividend+1,c
  5184  000F86  0E00               	movlw	0
  5185  000F88  6E12               	movwf	___awdiv@divisor+1,c
  5186  000F8A  0E0A               	movlw	10
  5187  000F8C  6E11               	movwf	___awdiv@divisor,c
  5188  000F8E  EC71  F00E         	call	___awdiv	;wreg free
  5189  000F92  500F               	movf	?___awdiv,w,c
  5190  000F94  0F30               	addlw	48
  5191  000F96  6E5E               	movwf	_EW_Count,c
  5192                           
  5193                           ;Main_Screen.c: 243: EW_Count[1] = count%10 + '0';
  5194  000F98  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5195  000F9C  6A36               	clrf	___awmod@dividend+1,c
  5196  000F9E  0E00               	movlw	0
  5197  000FA0  6E38               	movwf	___awmod@divisor+1,c
  5198  000FA2  0E0A               	movlw	10
  5199  000FA4  6E37               	movwf	___awmod@divisor,c
  5200  000FA6  EC1A  F010         	call	___awmod	;wreg free
  5201  000FAA  5035               	movf	?___awmod,w,c
  5202  000FAC  0F30               	addlw	48
  5203  000FAE  6E5F               	movwf	_EW_Count+1,c
  5204                           
  5205                           ;Main_Screen.c: 244: drawtext(100, 90 + 10, EW_Count, 0x07FF, 0x0000, 2);
  5206  000FB0  0E64               	movlw	100
  5207  000FB2  6E37               	movwf	drawtext@y,c
  5208  000FB4  0E5E               	movlw	low _EW_Count
  5209  000FB6  6E38               	movwf	drawtext@_text,c
  5210  000FB8  0E00               	movlw	high _EW_Count
  5211  000FBA  6E39               	movwf	drawtext@_text+1,c
  5212  000FBC  0E07               	movlw	7
  5213  000FBE  6E3B               	movwf	drawtext@color+1,c
  5214  000FC0  683A               	setf	drawtext@color,c
  5215  000FC2  0E00               	movlw	0
  5216  000FC4  6E3D               	movwf	drawtext@bg+1,c
  5217  000FC6  0E00               	movlw	0
  5218  000FC8  6E3C               	movwf	drawtext@bg,c
  5219  000FCA  0E02               	movlw	2
  5220  000FCC  6E3E               	movwf	drawtext@size,c
  5221  000FCE  0E64               	movlw	100
  5222  000FD0  EC24  F00A         	call	_drawtext
  5223                           
  5224                           ;Main_Screen.c: 245: break;
  5225  000FD4  D069               	goto	l334
  5226  000FD6                     l5252:
  5227                           
  5228                           ;Main_Screen.c: 248: EWLT_Count[0] = count/10 + '0';
  5229  000FD6  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5230  000FDA  6A10               	clrf	___awdiv@dividend+1,c
  5231  000FDC  0E00               	movlw	0
  5232  000FDE  6E12               	movwf	___awdiv@divisor+1,c
  5233  000FE0  0E0A               	movlw	10
  5234  000FE2  6E11               	movwf	___awdiv@divisor,c
  5235  000FE4  EC71  F00E         	call	___awdiv	;wreg free
  5236  000FE8  500F               	movf	?___awdiv,w,c
  5237  000FEA  0F30               	addlw	48
  5238  000FEC  0100               	movlb	0	; () banked
  5239  000FEE  6F9B               	movwf	_EWLT_Count& (0+255),b
  5240                           
  5241                           ;Main_Screen.c: 249: EWLT_Count[1] = count%10 + '0';
  5242  000FF0  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5243  000FF4  6A36               	clrf	___awmod@dividend+1,c
  5244  000FF6  0E00               	movlw	0
  5245  000FF8  6E38               	movwf	___awmod@divisor+1,c
  5246  000FFA  0E0A               	movlw	10
  5247  000FFC  6E37               	movwf	___awmod@divisor,c
  5248  000FFE  EC1A  F010         	call	___awmod	;wreg free
  5249  001002  5035               	movf	?___awmod,w,c
  5250  001004  0F30               	addlw	48
  5251  001006  0100               	movlb	0	; () banked
  5252  001008  6F9C               	movwf	(_EWLT_Count+1)& (0+255),b
  5253                           
  5254                           ; BSR set to: 0
  5255                           ;Main_Screen.c: 250: drawtext(100, 120 + 10, EWLT_Count, 0xFFFF, 0x0000, 2);
  5256  00100A  0E82               	movlw	130
  5257  00100C  6E37               	movwf	drawtext@y,c
  5258  00100E  0E9B               	movlw	low _EWLT_Count
  5259  001010  6E38               	movwf	drawtext@_text,c
  5260  001012  0E00               	movlw	high _EWLT_Count
  5261  001014  6E39               	movwf	drawtext@_text+1,c
  5262  001016  0EFF               	movlw	255
  5263  001018  6E3B               	movwf	drawtext@color+1,c
  5264  00101A  683A               	setf	drawtext@color,c
  5265  00101C  0E00               	movlw	0
  5266  00101E  6E3D               	movwf	drawtext@bg+1,c
  5267  001020  0E00               	movlw	0
  5268  001022  6E3C               	movwf	drawtext@bg,c
  5269  001024  0E02               	movlw	2
  5270  001026  6E3E               	movwf	drawtext@size,c
  5271  001028  0E64               	movlw	100
  5272  00102A  EC24  F00A         	call	_drawtext
  5273                           
  5274                           ;Main_Screen.c: 251: break;
  5275  00102E  D03C               	goto	l334
  5276  001030                     l5256:
  5277                           
  5278                           ;Main_Screen.c: 254: NSLT_Count[0] = count/10 + '0';
  5279  001030  C041  F00F         	movff	update_LCD_count@count,___awdiv@dividend
  5280  001034  6A10               	clrf	___awdiv@dividend+1,c
  5281  001036  0E00               	movlw	0
  5282  001038  6E12               	movwf	___awdiv@divisor+1,c
  5283  00103A  0E0A               	movlw	10
  5284  00103C  6E11               	movwf	___awdiv@divisor,c
  5285  00103E  EC71  F00E         	call	___awdiv	;wreg free
  5286  001042  500F               	movf	?___awdiv,w,c
  5287  001044  0F30               	addlw	48
  5288  001046  0100               	movlb	0	; () banked
  5289  001048  6F9E               	movwf	_NSLT_Count& (0+255),b
  5290                           
  5291                           ;Main_Screen.c: 255: NSLT_Count[1] = count%10 + '0';
  5292  00104A  C041  F035         	movff	update_LCD_count@count,___awmod@dividend
  5293  00104E  6A36               	clrf	___awmod@dividend+1,c
  5294  001050  0E00               	movlw	0
  5295  001052  6E38               	movwf	___awmod@divisor+1,c
  5296  001054  0E0A               	movlw	10
  5297  001056  6E37               	movwf	___awmod@divisor,c
  5298  001058  EC1A  F010         	call	___awmod	;wreg free
  5299  00105C  5035               	movf	?___awmod,w,c
  5300  00105E  0F30               	addlw	48
  5301  001060  0100               	movlb	0	; () banked
  5302  001062  6F9F               	movwf	(_NSLT_Count+1)& (0+255),b
  5303                           
  5304                           ; BSR set to: 0
  5305                           ;Main_Screen.c: 256: drawtext(100, 60 + 10, NSLT_Count, 0xF81F, 0x0000, 2);
  5306  001064  0E46               	movlw	70
  5307  001066  6E37               	movwf	drawtext@y,c
  5308  001068  0E9E               	movlw	low _NSLT_Count
  5309  00106A  6E38               	movwf	drawtext@_text,c
  5310  00106C  0E00               	movlw	high _NSLT_Count
  5311  00106E  6E39               	movwf	drawtext@_text+1,c
  5312  001070  0EF8               	movlw	248
  5313  001072  6E3B               	movwf	drawtext@color+1,c
  5314  001074  0E1F               	movlw	31
  5315  001076  6E3A               	movwf	drawtext@color,c
  5316  001078  0E00               	movlw	0
  5317  00107A  6E3D               	movwf	drawtext@bg+1,c
  5318  00107C  0E00               	movlw	0
  5319  00107E  6E3C               	movwf	drawtext@bg,c
  5320  001080  0E02               	movlw	2
  5321  001082  6E3E               	movwf	drawtext@size,c
  5322  001084  0E64               	movlw	100
  5323  001086  EC24  F00A         	call	_drawtext
  5324                           
  5325                           ;Main_Screen.c: 258: }
  5326                           
  5327                           ;Main_Screen.c: 257: break;
  5328  00108A  D00E               	goto	l334
  5329  00108C                     l5262:
  5330  00108C  5042               	movf	update_LCD_count@direction,w,c
  5331                           
  5332                           ; Switch size 1, requested type "space"
  5333                           ; Number of cases is 4, Range of values is 0 to 3
  5334                           ; switch strategies available:
  5335                           ; Name         Instructions Cycles
  5336                           ; simple_byte           13     7 (average)
  5337                           ;	Chosen strategy is simple_byte
  5338  00108E  0A00               	xorlw	0	; case 0
  5339  001090  B4D8               	btfsc	status,2,c
  5340  001092  D748               	goto	l5244
  5341  001094  0A01               	xorlw	1	; case 1
  5342  001096  B4D8               	btfsc	status,2,c
  5343  001098  D7CB               	goto	l5256
  5344  00109A  0A03               	xorlw	3	; case 2
  5345  00109C  B4D8               	btfsc	status,2,c
  5346  00109E  D770               	goto	l5248
  5347  0010A0  0A01               	xorlw	1	; case 3
  5348  0010A2  B4D8               	btfsc	status,2,c
  5349  0010A4  D798               	goto	l5252
  5350  0010A6  D000               	goto	l334
  5351  0010A8                     l334:
  5352  0010A8  0012               	return		;funcret
  5353  0010AA                     __end_of_update_LCD_count:
  5354                           	opt stack 0
  5355                           tblptru	equ	0xFF8
  5356                           tblptrh	equ	0xFF7
  5357                           tblptrl	equ	0xFF6
  5358                           tablat	equ	0xFF5
  5359                           intcon	equ	0xFF2
  5360                           intcon2	equ	0xFF1
  5361                           intcon3	equ	0xFF0
  5362                           postinc0	equ	0xFEE
  5363                           wreg	equ	0xFE8
  5364                           postdec1	equ	0xFE5
  5365                           fsr1l	equ	0xFE1
  5366                           status	equ	0xFD8
  5367                           
  5368 ;; *************** function _Wait_One_Second *****************
  5369 ;; Defined at:
  5370 ;;		line 293 in file "Lab8pB.c"
  5371 ;; Parameters:    Size  Location     Type
  5372 ;;		None
  5373 ;; Auto vars:     Size  Location     Type
  5374 ;;		None
  5375 ;; Return value:  Size  Location     Type
  5376 ;;		None               void
  5377 ;; Registers used:
  5378 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5379 ;; Tracked objects:
  5380 ;;		On entry : 0/0
  5381 ;;		On exit  : 0/0
  5382 ;;		Unchanged: 0/0
  5383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5384 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5386 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5387 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5388 ;;Total ram usage:        0 bytes
  5389 ;; Hardware stack levels used:    1
  5390 ;; Hardware stack levels required when called:   10
  5391 ;; This function calls:
  5392 ;;		_Draw_Star
  5393 ;;		_Erase_Star
  5394 ;;		_Wait_Half_Second
  5395 ;;		_update_LCD_misc
  5396 ;; This function is called by:
  5397 ;;		_Do_Flashing
  5398 ;;		_Wait_N_Seconds
  5399 ;;		_Do_Beep
  5400 ;; This function uses a non-reentrant model
  5401 ;;
  5402                           
  5403                           	psect	text21
  5404  002810                     __ptext21:
  5405                           	opt stack 0
  5406  002810                     _Wait_One_Second:
  5407                           	opt stack 18
  5408                           
  5409                           ;Lab8pB.c: 295: PORTDbits.RD7 = 1;
  5410                           
  5411                           ;incstack = 0
  5412  002810  8E83               	bsf	3971,7,c	;volatile
  5413                           
  5414                           ;Lab8pB.c: 296: Draw_Star();
  5415  002812  EC2F  F013         	call	_Draw_Star	;wreg free
  5416                           
  5417                           ;Lab8pB.c: 297: Wait_Half_Second();
  5418  002816  EC15  F014         	call	_Wait_Half_Second	;wreg free
  5419                           
  5420                           ;Lab8pB.c: 298: PORTDbits.RD7 = 0;
  5421  00281A  9E83               	bcf	3971,7,c	;volatile
  5422                           
  5423                           ;Lab8pB.c: 299: Erase_Star();
  5424  00281C  EC12  F013         	call	_Erase_Star	;wreg free
  5425                           
  5426                           ;Lab8pB.c: 300: Wait_Half_Second();
  5427  002820  EC15  F014         	call	_Wait_Half_Second	;wreg free
  5428                           
  5429                           ;Lab8pB.c: 301: update_LCD_misc();
  5430  002824  EC7D  F005         	call	_update_LCD_misc	;wreg free
  5431  002828  0012               	return		;funcret
  5432  00282A                     __end_of_Wait_One_Second:
  5433                           	opt stack 0
  5434                           tblptru	equ	0xFF8
  5435                           tblptrh	equ	0xFF7
  5436                           tblptrl	equ	0xFF6
  5437                           tablat	equ	0xFF5
  5438                           intcon	equ	0xFF2
  5439                           intcon2	equ	0xFF1
  5440                           intcon3	equ	0xFF0
  5441                           postinc0	equ	0xFEE
  5442                           wreg	equ	0xFE8
  5443                           postdec1	equ	0xFE5
  5444                           fsr1l	equ	0xFE1
  5445                           status	equ	0xFD8
  5446                           
  5447 ;; *************** function _Set_NSLT *****************
  5448 ;; Defined at:
  5449 ;;		line 157 in file "Lab8pB.c"
  5450 ;; Parameters:    Size  Location     Type
  5451 ;;  color           1    wreg     unsigned char 
  5452 ;; Auto vars:     Size  Location     Type
  5453 ;;  color           1    0[BANK0 ] unsigned char 
  5454 ;; Return value:  Size  Location     Type
  5455 ;;		None               void
  5456 ;; Registers used:
  5457 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5458 ;; Tracked objects:
  5459 ;;		On entry : 0/0
  5460 ;;		On exit  : 0/0
  5461 ;;		Unchanged: 0/0
  5462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5464 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5466 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5467 ;;Total ram usage:        1 bytes
  5468 ;; Hardware stack levels used:    1
  5469 ;; Hardware stack levels required when called:    9
  5470 ;; This function calls:
  5471 ;;		_update_LCD_color
  5472 ;; This function is called by:
  5473 ;;		_Do_Flashing
  5474 ;;		_Day_Mode
  5475 ;;		_Night_Mode
  5476 ;; This function uses a non-reentrant model
  5477 ;;
  5478                           
  5479                           	psect	text22
  5480  00244C                     __ptext22:
  5481                           	opt stack 0
  5482  00244C                     _Set_NSLT:
  5483                           	opt stack 20
  5484                           
  5485                           ;incstack = 0
  5486                           ;Set_NSLT@color stored from wreg
  5487  00244C  0100               	movlb	0	; () banked
  5488  00244E  6FCB               	movwf	Set_NSLT@color& (0+255),b
  5489                           
  5490                           ; BSR set to: 0
  5491                           ;Lab8pB.c: 160: direction = 1;
  5492  002450  0E01               	movlw	1
  5493  002452  6E5B               	movwf	_direction,c
  5494                           
  5495                           ; BSR set to: 0
  5496                           ;Lab8pB.c: 161: update_LCD_color (direction, color);
  5497  002454  C0CB  F041         	movff	Set_NSLT@color,update_LCD_color@color
  5498  002458  505B               	movf	_direction,w,c
  5499  00245A  ECCC  F003         	call	_update_LCD_color
  5500                           
  5501                           ;Lab8pB.c: 162: switch (color)
  5502  00245E  D00A               	goto	l5432
  5503  002460                     l171:
  5504                           
  5505                           ; BSR set to: 0
  5506  002460  9084               	bcf	3972,0,c	;volatile
  5507  002462  D001               	goto	L2
  5508  002464                     l173:
  5509                           
  5510                           ; BSR set to: 0
  5511  002464  8084               	bsf	3972,0,c	;volatile
  5512  002466                     L2:
  5513  002466  9284               	bcf	3972,1,c	;volatile
  5514  002468  D014               	goto	l176
  5515  00246A                     l174:
  5516                           
  5517                           ; BSR set to: 0
  5518  00246A  9084               	bcf	3972,0,c	;volatile
  5519  00246C  D001               	goto	L3
  5520  00246E                     l175:
  5521                           
  5522                           ; BSR set to: 0
  5523  00246E  8084               	bsf	3972,0,c	;volatile
  5524  002470                     L3:
  5525  002470  8284               	bsf	3972,1,c	;volatile
  5526                           
  5527                           ; BSR set to: 0
  5528                           ;Lab8pB.c: 168: }
  5529  002472  D00F               	goto	l176
  5530  002474                     l5432:
  5531  002474  0100               	movlb	0	; () banked
  5532  002476  51CB               	movf	Set_NSLT@color& (0+255),w,b
  5533                           
  5534                           ; Switch size 1, requested type "space"
  5535                           ; Number of cases is 4, Range of values is 0 to 3
  5536                           ; switch strategies available:
  5537                           ; Name         Instructions Cycles
  5538                           ; simple_byte           13     7 (average)
  5539                           ;	Chosen strategy is simple_byte
  5540  002478  0A00               	xorlw	0	; case 0
  5541  00247A  B4D8               	btfsc	status,2,c
  5542  00247C  D7F1               	goto	l171
  5543  00247E  0A01               	xorlw	1	; case 1
  5544  002480  B4D8               	btfsc	status,2,c
  5545  002482  D7F0               	goto	l173
  5546  002484  0A03               	xorlw	3	; case 2
  5547  002486  B4D8               	btfsc	status,2,c
  5548  002488  D7F0               	goto	l174
  5549  00248A  0A01               	xorlw	1	; case 3
  5550  00248C  B4D8               	btfsc	status,2,c
  5551  00248E  D7EF               	goto	l175
  5552  002490  D000               	goto	l176
  5553  002492                     l176:
  5554                           
  5555                           ; BSR set to: 0
  5556  002492  0012               	return		;funcret
  5557  002494                     __end_of_Set_NSLT:
  5558                           	opt stack 0
  5559                           tblptru	equ	0xFF8
  5560                           tblptrh	equ	0xFF7
  5561                           tblptrl	equ	0xFF6
  5562                           tablat	equ	0xFF5
  5563                           intcon	equ	0xFF2
  5564                           intcon2	equ	0xFF1
  5565                           intcon3	equ	0xFF0
  5566                           postinc0	equ	0xFEE
  5567                           wreg	equ	0xFE8
  5568                           postdec1	equ	0xFE5
  5569                           fsr1l	equ	0xFE1
  5570                           status	equ	0xFD8
  5571                           
  5572 ;; *************** function _Set_NS *****************
  5573 ;; Defined at:
  5574 ;;		line 143 in file "Lab8pB.c"
  5575 ;; Parameters:    Size  Location     Type
  5576 ;;  color           1    wreg     unsigned char 
  5577 ;; Auto vars:     Size  Location     Type
  5578 ;;  color           1    0[BANK0 ] unsigned char 
  5579 ;; Return value:  Size  Location     Type
  5580 ;;		None               void
  5581 ;; Registers used:
  5582 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5583 ;; Tracked objects:
  5584 ;;		On entry : 0/0
  5585 ;;		On exit  : 0/0
  5586 ;;		Unchanged: 0/0
  5587 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5588 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5589 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5590 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5591 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5592 ;;Total ram usage:        1 bytes
  5593 ;; Hardware stack levels used:    1
  5594 ;; Hardware stack levels required when called:    9
  5595 ;; This function calls:
  5596 ;;		_update_LCD_color
  5597 ;; This function is called by:
  5598 ;;		_Do_Flashing
  5599 ;;		_Day_Mode
  5600 ;;		_Night_Mode
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text23
  5605  002494                     __ptext23:
  5606                           	opt stack 0
  5607  002494                     _Set_NS:
  5608                           	opt stack 20
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;incstack = 0
  5612                           ;Set_NS@color stored from wreg
  5613  002494  0100               	movlb	0	; () banked
  5614  002496  6FCB               	movwf	Set_NS@color& (0+255),b
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;Lab8pB.c: 146: direction = 0;
  5618  002498  0E00               	movlw	0
  5619  00249A  6E5B               	movwf	_direction,c
  5620                           
  5621                           ; BSR set to: 0
  5622                           ;Lab8pB.c: 147: update_LCD_color (direction, color);
  5623  00249C  C0CB  F041         	movff	Set_NS@color,update_LCD_color@color
  5624  0024A0  505B               	movf	_direction,w,c
  5625  0024A2  ECCC  F003         	call	_update_LCD_color
  5626                           
  5627                           ;Lab8pB.c: 148: switch (color)
  5628  0024A6  D00A               	goto	l5424
  5629  0024A8                     l162:
  5630                           
  5631                           ; BSR set to: 0
  5632  0024A8  9082               	bcf	3970,0,c	;volatile
  5633  0024AA  D001               	goto	L4
  5634  0024AC                     l164:
  5635                           
  5636                           ; BSR set to: 0
  5637  0024AC  8082               	bsf	3970,0,c	;volatile
  5638  0024AE                     L4:
  5639  0024AE  9482               	bcf	3970,2,c	;volatile
  5640  0024B0  D014               	goto	l167
  5641  0024B2                     l165:
  5642                           
  5643                           ; BSR set to: 0
  5644  0024B2  9082               	bcf	3970,0,c	;volatile
  5645  0024B4  D001               	goto	L5
  5646  0024B6                     l166:
  5647                           
  5648                           ; BSR set to: 0
  5649  0024B6  8082               	bsf	3970,0,c	;volatile
  5650  0024B8                     L5:
  5651  0024B8  8482               	bsf	3970,2,c	;volatile
  5652                           
  5653                           ; BSR set to: 0
  5654                           ;Lab8pB.c: 154: }
  5655  0024BA  D00F               	goto	l167
  5656  0024BC                     l5424:
  5657  0024BC  0100               	movlb	0	; () banked
  5658  0024BE  51CB               	movf	Set_NS@color& (0+255),w,b
  5659                           
  5660                           ; Switch size 1, requested type "space"
  5661                           ; Number of cases is 4, Range of values is 0 to 3
  5662                           ; switch strategies available:
  5663                           ; Name         Instructions Cycles
  5664                           ; simple_byte           13     7 (average)
  5665                           ;	Chosen strategy is simple_byte
  5666  0024C0  0A00               	xorlw	0	; case 0
  5667  0024C2  B4D8               	btfsc	status,2,c
  5668  0024C4  D7F1               	goto	l162
  5669  0024C6  0A01               	xorlw	1	; case 1
  5670  0024C8  B4D8               	btfsc	status,2,c
  5671  0024CA  D7F0               	goto	l164
  5672  0024CC  0A03               	xorlw	3	; case 2
  5673  0024CE  B4D8               	btfsc	status,2,c
  5674  0024D0  D7F0               	goto	l165
  5675  0024D2  0A01               	xorlw	1	; case 3
  5676  0024D4  B4D8               	btfsc	status,2,c
  5677  0024D6  D7EF               	goto	l166
  5678  0024D8  D000               	goto	l167
  5679  0024DA                     l167:
  5680                           
  5681                           ; BSR set to: 0
  5682  0024DA  0012               	return		;funcret
  5683  0024DC                     __end_of_Set_NS:
  5684                           	opt stack 0
  5685                           tblptru	equ	0xFF8
  5686                           tblptrh	equ	0xFF7
  5687                           tblptrl	equ	0xFF6
  5688                           tablat	equ	0xFF5
  5689                           intcon	equ	0xFF2
  5690                           intcon2	equ	0xFF1
  5691                           intcon3	equ	0xFF0
  5692                           postinc0	equ	0xFEE
  5693                           wreg	equ	0xFE8
  5694                           postdec1	equ	0xFE5
  5695                           fsr1l	equ	0xFE1
  5696                           status	equ	0xFD8
  5697                           
  5698 ;; *************** function _Set_EWLT *****************
  5699 ;; Defined at:
  5700 ;;		line 185 in file "Lab8pB.c"
  5701 ;; Parameters:    Size  Location     Type
  5702 ;;  color           1    wreg     unsigned char 
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;  color           1    0[BANK0 ] unsigned char 
  5705 ;; Return value:  Size  Location     Type
  5706 ;;		None               void
  5707 ;; Registers used:
  5708 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5709 ;; Tracked objects:
  5710 ;;		On entry : 0/0
  5711 ;;		On exit  : 0/0
  5712 ;;		Unchanged: 0/0
  5713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5715 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5717 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5718 ;;Total ram usage:        1 bytes
  5719 ;; Hardware stack levels used:    1
  5720 ;; Hardware stack levels required when called:    9
  5721 ;; This function calls:
  5722 ;;		_update_LCD_color
  5723 ;; This function is called by:
  5724 ;;		_Do_Flashing
  5725 ;;		_Day_Mode
  5726 ;;		_Night_Mode
  5727 ;; This function uses a non-reentrant model
  5728 ;;
  5729                           
  5730                           	psect	text24
  5731  0024DC                     __ptext24:
  5732                           	opt stack 0
  5733  0024DC                     _Set_EWLT:
  5734                           	opt stack 20
  5735                           
  5736                           ; BSR set to: 0
  5737                           ;incstack = 0
  5738                           ;Set_EWLT@color stored from wreg
  5739  0024DC  0100               	movlb	0	; () banked
  5740  0024DE  6FCB               	movwf	Set_EWLT@color& (0+255),b
  5741                           
  5742                           ; BSR set to: 0
  5743                           ;Lab8pB.c: 188: direction = 3;
  5744  0024E0  0E03               	movlw	3
  5745  0024E2  6E5B               	movwf	_direction,c
  5746                           
  5747                           ; BSR set to: 0
  5748                           ;Lab8pB.c: 189: update_LCD_color (direction, color);
  5749  0024E4  C0CB  F041         	movff	Set_EWLT@color,update_LCD_color@color
  5750  0024E8  505B               	movf	_direction,w,c
  5751  0024EA  ECCC  F003         	call	_update_LCD_color
  5752                           
  5753                           ;Lab8pB.c: 190: switch (color)
  5754  0024EE  D00A               	goto	l5448
  5755  0024F0                     l189:
  5756                           
  5757                           ; BSR set to: 0
  5758  0024F0  9881               	bcf	3969,4,c	;volatile
  5759  0024F2  D001               	goto	L6
  5760  0024F4                     l191:
  5761                           
  5762                           ; BSR set to: 0
  5763  0024F4  8881               	bsf	3969,4,c	;volatile
  5764  0024F6                     L6:
  5765  0024F6  9A81               	bcf	3969,5,c	;volatile
  5766  0024F8  D014               	goto	l194
  5767  0024FA                     l192:
  5768                           
  5769                           ; BSR set to: 0
  5770  0024FA  9881               	bcf	3969,4,c	;volatile
  5771  0024FC  D001               	goto	L7
  5772  0024FE                     l193:
  5773                           
  5774                           ; BSR set to: 0
  5775  0024FE  8881               	bsf	3969,4,c	;volatile
  5776  002500                     L7:
  5777  002500  8A81               	bsf	3969,5,c	;volatile
  5778                           
  5779                           ; BSR set to: 0
  5780                           ;Lab8pB.c: 196: }
  5781  002502  D00F               	goto	l194
  5782  002504                     l5448:
  5783  002504  0100               	movlb	0	; () banked
  5784  002506  51CB               	movf	Set_EWLT@color& (0+255),w,b
  5785                           
  5786                           ; Switch size 1, requested type "space"
  5787                           ; Number of cases is 4, Range of values is 0 to 3
  5788                           ; switch strategies available:
  5789                           ; Name         Instructions Cycles
  5790                           ; simple_byte           13     7 (average)
  5791                           ;	Chosen strategy is simple_byte
  5792  002508  0A00               	xorlw	0	; case 0
  5793  00250A  B4D8               	btfsc	status,2,c
  5794  00250C  D7F1               	goto	l189
  5795  00250E  0A01               	xorlw	1	; case 1
  5796  002510  B4D8               	btfsc	status,2,c
  5797  002512  D7F0               	goto	l191
  5798  002514  0A03               	xorlw	3	; case 2
  5799  002516  B4D8               	btfsc	status,2,c
  5800  002518  D7F0               	goto	l192
  5801  00251A  0A01               	xorlw	1	; case 3
  5802  00251C  B4D8               	btfsc	status,2,c
  5803  00251E  D7EF               	goto	l193
  5804  002520  D000               	goto	l194
  5805  002522                     l194:
  5806                           
  5807                           ; BSR set to: 0
  5808  002522  0012               	return		;funcret
  5809  002524                     __end_of_Set_EWLT:
  5810                           	opt stack 0
  5811                           tblptru	equ	0xFF8
  5812                           tblptrh	equ	0xFF7
  5813                           tblptrl	equ	0xFF6
  5814                           tablat	equ	0xFF5
  5815                           intcon	equ	0xFF2
  5816                           intcon2	equ	0xFF1
  5817                           intcon3	equ	0xFF0
  5818                           postinc0	equ	0xFEE
  5819                           wreg	equ	0xFE8
  5820                           postdec1	equ	0xFE5
  5821                           fsr1l	equ	0xFE1
  5822                           status	equ	0xFD8
  5823                           
  5824 ;; *************** function _Set_EW *****************
  5825 ;; Defined at:
  5826 ;;		line 171 in file "Lab8pB.c"
  5827 ;; Parameters:    Size  Location     Type
  5828 ;;  color           1    wreg     unsigned char 
  5829 ;; Auto vars:     Size  Location     Type
  5830 ;;  color           1    0[BANK0 ] unsigned char 
  5831 ;; Return value:  Size  Location     Type
  5832 ;;		None               void
  5833 ;; Registers used:
  5834 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5835 ;; Tracked objects:
  5836 ;;		On entry : 0/0
  5837 ;;		On exit  : 0/0
  5838 ;;		Unchanged: 0/0
  5839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5844 ;;Total ram usage:        1 bytes
  5845 ;; Hardware stack levels used:    1
  5846 ;; Hardware stack levels required when called:    9
  5847 ;; This function calls:
  5848 ;;		_update_LCD_color
  5849 ;; This function is called by:
  5850 ;;		_Do_Flashing
  5851 ;;		_Day_Mode
  5852 ;;		_Night_Mode
  5853 ;; This function uses a non-reentrant model
  5854 ;;
  5855                           
  5856                           	psect	text25
  5857  002524                     __ptext25:
  5858                           	opt stack 0
  5859  002524                     _Set_EW:
  5860                           	opt stack 20
  5861                           
  5862                           ; BSR set to: 0
  5863                           ;incstack = 0
  5864                           ;Set_EW@color stored from wreg
  5865  002524  0100               	movlb	0	; () banked
  5866  002526  6FCB               	movwf	Set_EW@color& (0+255),b
  5867                           
  5868                           ; BSR set to: 0
  5869                           ;Lab8pB.c: 174: direction = 2;
  5870  002528  0E02               	movlw	2
  5871  00252A  6E5B               	movwf	_direction,c
  5872                           
  5873                           ; BSR set to: 0
  5874                           ;Lab8pB.c: 175: update_LCD_color (direction, color);
  5875  00252C  C0CB  F041         	movff	Set_EW@color,update_LCD_color@color
  5876  002530  505B               	movf	_direction,w,c
  5877  002532  ECCC  F003         	call	_update_LCD_color
  5878                           
  5879                           ;Lab8pB.c: 176: switch (color)
  5880  002536  D00A               	goto	l5440
  5881  002538                     l180:
  5882                           
  5883                           ; BSR set to: 0
  5884  002538  9A80               	bcf	3968,5,c	;volatile
  5885  00253A  D001               	goto	L8
  5886  00253C                     l182:
  5887                           
  5888                           ; BSR set to: 0
  5889  00253C  8A80               	bsf	3968,5,c	;volatile
  5890  00253E                     L8:
  5891  00253E  9681               	bcf	3969,3,c	;volatile
  5892  002540  D014               	goto	l185
  5893  002542                     l183:
  5894                           
  5895                           ; BSR set to: 0
  5896  002542  9A80               	bcf	3968,5,c	;volatile
  5897  002544  D001               	goto	L9
  5898  002546                     l184:
  5899                           
  5900                           ; BSR set to: 0
  5901  002546  8A80               	bsf	3968,5,c	;volatile
  5902  002548                     L9:
  5903  002548  8681               	bsf	3969,3,c	;volatile
  5904                           
  5905                           ; BSR set to: 0
  5906                           ;Lab8pB.c: 182: }
  5907  00254A  D00F               	goto	l185
  5908  00254C                     l5440:
  5909  00254C  0100               	movlb	0	; () banked
  5910  00254E  51CB               	movf	Set_EW@color& (0+255),w,b
  5911                           
  5912                           ; Switch size 1, requested type "space"
  5913                           ; Number of cases is 4, Range of values is 0 to 3
  5914                           ; switch strategies available:
  5915                           ; Name         Instructions Cycles
  5916                           ; simple_byte           13     7 (average)
  5917                           ;	Chosen strategy is simple_byte
  5918  002550  0A00               	xorlw	0	; case 0
  5919  002552  B4D8               	btfsc	status,2,c
  5920  002554  D7F1               	goto	l180
  5921  002556  0A01               	xorlw	1	; case 1
  5922  002558  B4D8               	btfsc	status,2,c
  5923  00255A  D7F0               	goto	l182
  5924  00255C  0A03               	xorlw	3	; case 2
  5925  00255E  B4D8               	btfsc	status,2,c
  5926  002560  D7F0               	goto	l183
  5927  002562  0A01               	xorlw	1	; case 3
  5928  002564  B4D8               	btfsc	status,2,c
  5929  002566  D7EF               	goto	l184
  5930  002568  D000               	goto	l185
  5931  00256A                     l185:
  5932                           
  5933                           ; BSR set to: 0
  5934  00256A  0012               	return		;funcret
  5935  00256C                     __end_of_Set_EW:
  5936                           	opt stack 0
  5937                           tblptru	equ	0xFF8
  5938                           tblptrh	equ	0xFF7
  5939                           tblptrl	equ	0xFF6
  5940                           tablat	equ	0xFF5
  5941                           intcon	equ	0xFF2
  5942                           intcon2	equ	0xFF1
  5943                           intcon3	equ	0xFF0
  5944                           postinc0	equ	0xFEE
  5945                           wreg	equ	0xFE8
  5946                           postdec1	equ	0xFE5
  5947                           fsr1l	equ	0xFE1
  5948                           status	equ	0xFD8
  5949                           
  5950 ;; *************** function _update_LCD_color *****************
  5951 ;; Defined at:
  5952 ;;		line 162 in file "Main_Screen.c"
  5953 ;; Parameters:    Size  Location     Type
  5954 ;;  direction       1    wreg     unsigned char 
  5955 ;;  color           1   64[COMRAM] unsigned char 
  5956 ;; Auto vars:     Size  Location     Type
  5957 ;;  direction       1   65[COMRAM] unsigned char 
  5958 ;;  Circle_Y        1   66[COMRAM] unsigned char 
  5959 ;; Return value:  Size  Location     Type
  5960 ;;		None               void
  5961 ;; Registers used:
  5962 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  5963 ;; Tracked objects:
  5964 ;;		On entry : 0/0
  5965 ;;		On exit  : 0/0
  5966 ;;		Unchanged: 0/0
  5967 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5968 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5969 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5970 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5971 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5972 ;;Total ram usage:        3 bytes
  5973 ;; Hardware stack levels used:    1
  5974 ;; Hardware stack levels required when called:    8
  5975 ;; This function calls:
  5976 ;;		_drawCircle
  5977 ;;		_fillCircle
  5978 ;; This function is called by:
  5979 ;;		_Set_NS
  5980 ;;		_Set_NSLT
  5981 ;;		_Set_EW
  5982 ;;		_Set_EWLT
  5983 ;; This function uses a non-reentrant model
  5984 ;;
  5985                           
  5986                           	psect	text26
  5987  000798                     __ptext26:
  5988                           	opt stack 0
  5989  000798                     _update_LCD_color:
  5990                           	opt stack 20
  5991                           
  5992                           ; BSR set to: 0
  5993                           ;incstack = 0
  5994                           ;update_LCD_color@direction stored from wreg
  5995  000798  6E42               	movwf	update_LCD_color@direction,c
  5996                           
  5997                           ;Main_Screen.c: 164: char Circle_Y;
  5998                           ;Main_Screen.c: 165: Circle_Y = 30 + 16 + direction * 30;
  5999  00079A  5042               	movf	update_LCD_color@direction,w,c
  6000  00079C  0D1E               	mullw	30
  6001  00079E  50F3               	movf	prodl,w,c
  6002  0007A0  0F2E               	addlw	46
  6003  0007A2  6E43               	movwf	update_LCD_color@Circle_Y,c
  6004                           
  6005                           ;Main_Screen.c: 167: if (color == 0)
  6006  0007A4  5041               	movf	update_LCD_color@color,w,c
  6007  0007A6  A4D8               	btfss	status,2,c
  6008  0007A8  D067               	goto	l5198
  6009                           
  6010                           ;Main_Screen.c: 168: {
  6011                           ;Main_Screen.c: 169: fillCircle(40, Circle_Y, 7, 0x0000);
  6012  0007AA  0E00               	movlw	0
  6013  0007AC  6E3A               	movwf	fillCircle@x0+1,c
  6014  0007AE  0E28               	movlw	40
  6015  0007B0  6E39               	movwf	fillCircle@x0,c
  6016  0007B2  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6017  0007B6  6A3C               	clrf	fillCircle@y0+1,c
  6018  0007B8  0E00               	movlw	0
  6019  0007BA  6E3E               	movwf	fillCircle@r+1,c
  6020  0007BC  0E07               	movlw	7
  6021  0007BE  6E3D               	movwf	fillCircle@r,c
  6022  0007C0  0E00               	movlw	0
  6023  0007C2  6E40               	movwf	fillCircle@color+1,c
  6024  0007C4  0E00               	movlw	0
  6025  0007C6  6E3F               	movwf	fillCircle@color,c
  6026  0007C8  ECB1  F011         	call	_fillCircle	;wreg free
  6027                           
  6028                           ;Main_Screen.c: 170: fillCircle(60, Circle_Y, 7, 0x0000);
  6029  0007CC  0E00               	movlw	0
  6030  0007CE  6E3A               	movwf	fillCircle@x0+1,c
  6031  0007D0  0E3C               	movlw	60
  6032  0007D2  6E39               	movwf	fillCircle@x0,c
  6033  0007D4  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6034  0007D8  6A3C               	clrf	fillCircle@y0+1,c
  6035  0007DA  0E00               	movlw	0
  6036  0007DC  6E3E               	movwf	fillCircle@r+1,c
  6037  0007DE  0E07               	movlw	7
  6038  0007E0  6E3D               	movwf	fillCircle@r,c
  6039  0007E2  0E00               	movlw	0
  6040  0007E4  6E40               	movwf	fillCircle@color+1,c
  6041  0007E6  0E00               	movlw	0
  6042  0007E8  6E3F               	movwf	fillCircle@color,c
  6043  0007EA  ECB1  F011         	call	_fillCircle	;wreg free
  6044                           
  6045                           ;Main_Screen.c: 171: fillCircle(80, Circle_Y, 7, 0x0000);
  6046  0007EE  0E00               	movlw	0
  6047  0007F0  6E3A               	movwf	fillCircle@x0+1,c
  6048  0007F2  0E50               	movlw	80
  6049  0007F4  6E39               	movwf	fillCircle@x0,c
  6050  0007F6  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6051  0007FA  6A3C               	clrf	fillCircle@y0+1,c
  6052  0007FC  0E00               	movlw	0
  6053  0007FE  6E3E               	movwf	fillCircle@r+1,c
  6054  000800  0E07               	movlw	7
  6055  000802  6E3D               	movwf	fillCircle@r,c
  6056  000804  0E00               	movlw	0
  6057  000806  6E40               	movwf	fillCircle@color+1,c
  6058  000808  0E00               	movlw	0
  6059  00080A  6E3F               	movwf	fillCircle@color,c
  6060  00080C  ECB1  F011         	call	_fillCircle	;wreg free
  6061                           
  6062                           ;Main_Screen.c: 172: drawCircle(40, Circle_Y, 7, 0xF800);
  6063  000810  0E00               	movlw	0
  6064  000812  6E1B               	movwf	drawCircle@x0+1,c
  6065  000814  0E28               	movlw	40
  6066  000816  6E1A               	movwf	drawCircle@x0,c
  6067  000818  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6068  00081C  6A1D               	clrf	drawCircle@y0+1,c
  6069  00081E  0E00               	movlw	0
  6070  000820  6E1F               	movwf	drawCircle@r+1,c
  6071  000822  0E07               	movlw	7
  6072  000824  6E1E               	movwf	drawCircle@r,c
  6073  000826  0EF8               	movlw	248
  6074  000828  6E21               	movwf	drawCircle@color+1,c
  6075  00082A  0E00               	movlw	0
  6076  00082C  6E20               	movwf	drawCircle@color,c
  6077  00082E  ECB9  F006         	call	_drawCircle	;wreg free
  6078                           
  6079                           ;Main_Screen.c: 173: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6080  000832  0E00               	movlw	0
  6081  000834  6E1B               	movwf	drawCircle@x0+1,c
  6082  000836  0E3C               	movlw	60
  6083  000838  6E1A               	movwf	drawCircle@x0,c
  6084  00083A  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6085  00083E  6A1D               	clrf	drawCircle@y0+1,c
  6086  000840  0E00               	movlw	0
  6087  000842  6E1F               	movwf	drawCircle@r+1,c
  6088  000844  0E07               	movlw	7
  6089  000846  6E1E               	movwf	drawCircle@r,c
  6090  000848  0EFF               	movlw	255
  6091  00084A  6E21               	movwf	drawCircle@color+1,c
  6092  00084C  0EE0               	movlw	224
  6093  00084E  6E20               	movwf	drawCircle@color,c
  6094  000850  ECB9  F006         	call	_drawCircle	;wreg free
  6095                           
  6096                           ;Main_Screen.c: 174: drawCircle(80, Circle_Y, 7, 0x07E0);
  6097  000854  0E00               	movlw	0
  6098  000856  6E1B               	movwf	drawCircle@x0+1,c
  6099  000858  0E50               	movlw	80
  6100  00085A  6E1A               	movwf	drawCircle@x0,c
  6101  00085C  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6102  000860  6A1D               	clrf	drawCircle@y0+1,c
  6103  000862  0E00               	movlw	0
  6104  000864  6E1F               	movwf	drawCircle@r+1,c
  6105  000866  0E07               	movlw	7
  6106  000868  6E1E               	movwf	drawCircle@r,c
  6107  00086A  0E07               	movlw	7
  6108  00086C  6E21               	movwf	drawCircle@color+1,c
  6109  00086E  0EE0               	movlw	224
  6110  000870  6E20               	movwf	drawCircle@color,c
  6111  000872  ECB9  F006         	call	_drawCircle	;wreg free
  6112  000876  D000               	goto	l5198
  6113  000878                     l5198:
  6114                           
  6115                           ;Main_Screen.c: 175: }
  6116                           ;Main_Screen.c: 177: if (color == 1)
  6117  000878  0441               	decf	update_LCD_color@color,w,c
  6118  00087A  A4D8               	btfss	status,2,c
  6119  00087C  D067               	goto	l5202
  6120                           
  6121                           ;Main_Screen.c: 178: {
  6122                           ;Main_Screen.c: 179: fillCircle(40, Circle_Y, 7, 0xF800);
  6123  00087E  0E00               	movlw	0
  6124  000880  6E3A               	movwf	fillCircle@x0+1,c
  6125  000882  0E28               	movlw	40
  6126  000884  6E39               	movwf	fillCircle@x0,c
  6127  000886  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6128  00088A  6A3C               	clrf	fillCircle@y0+1,c
  6129  00088C  0E00               	movlw	0
  6130  00088E  6E3E               	movwf	fillCircle@r+1,c
  6131  000890  0E07               	movlw	7
  6132  000892  6E3D               	movwf	fillCircle@r,c
  6133  000894  0EF8               	movlw	248
  6134  000896  6E40               	movwf	fillCircle@color+1,c
  6135  000898  0E00               	movlw	0
  6136  00089A  6E3F               	movwf	fillCircle@color,c
  6137  00089C  ECB1  F011         	call	_fillCircle	;wreg free
  6138                           
  6139                           ;Main_Screen.c: 180: fillCircle(60, Circle_Y, 7, 0x0000);
  6140  0008A0  0E00               	movlw	0
  6141  0008A2  6E3A               	movwf	fillCircle@x0+1,c
  6142  0008A4  0E3C               	movlw	60
  6143  0008A6  6E39               	movwf	fillCircle@x0,c
  6144  0008A8  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6145  0008AC  6A3C               	clrf	fillCircle@y0+1,c
  6146  0008AE  0E00               	movlw	0
  6147  0008B0  6E3E               	movwf	fillCircle@r+1,c
  6148  0008B2  0E07               	movlw	7
  6149  0008B4  6E3D               	movwf	fillCircle@r,c
  6150  0008B6  0E00               	movlw	0
  6151  0008B8  6E40               	movwf	fillCircle@color+1,c
  6152  0008BA  0E00               	movlw	0
  6153  0008BC  6E3F               	movwf	fillCircle@color,c
  6154  0008BE  ECB1  F011         	call	_fillCircle	;wreg free
  6155                           
  6156                           ;Main_Screen.c: 181: fillCircle(80, Circle_Y, 7, 0x0000);
  6157  0008C2  0E00               	movlw	0
  6158  0008C4  6E3A               	movwf	fillCircle@x0+1,c
  6159  0008C6  0E50               	movlw	80
  6160  0008C8  6E39               	movwf	fillCircle@x0,c
  6161  0008CA  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6162  0008CE  6A3C               	clrf	fillCircle@y0+1,c
  6163  0008D0  0E00               	movlw	0
  6164  0008D2  6E3E               	movwf	fillCircle@r+1,c
  6165  0008D4  0E07               	movlw	7
  6166  0008D6  6E3D               	movwf	fillCircle@r,c
  6167  0008D8  0E00               	movlw	0
  6168  0008DA  6E40               	movwf	fillCircle@color+1,c
  6169  0008DC  0E00               	movlw	0
  6170  0008DE  6E3F               	movwf	fillCircle@color,c
  6171  0008E0  ECB1  F011         	call	_fillCircle	;wreg free
  6172                           
  6173                           ;Main_Screen.c: 182: drawCircle(40, Circle_Y, 7, 0xF800);
  6174  0008E4  0E00               	movlw	0
  6175  0008E6  6E1B               	movwf	drawCircle@x0+1,c
  6176  0008E8  0E28               	movlw	40
  6177  0008EA  6E1A               	movwf	drawCircle@x0,c
  6178  0008EC  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6179  0008F0  6A1D               	clrf	drawCircle@y0+1,c
  6180  0008F2  0E00               	movlw	0
  6181  0008F4  6E1F               	movwf	drawCircle@r+1,c
  6182  0008F6  0E07               	movlw	7
  6183  0008F8  6E1E               	movwf	drawCircle@r,c
  6184  0008FA  0EF8               	movlw	248
  6185  0008FC  6E21               	movwf	drawCircle@color+1,c
  6186  0008FE  0E00               	movlw	0
  6187  000900  6E20               	movwf	drawCircle@color,c
  6188  000902  ECB9  F006         	call	_drawCircle	;wreg free
  6189                           
  6190                           ;Main_Screen.c: 183: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6191  000906  0E00               	movlw	0
  6192  000908  6E1B               	movwf	drawCircle@x0+1,c
  6193  00090A  0E3C               	movlw	60
  6194  00090C  6E1A               	movwf	drawCircle@x0,c
  6195  00090E  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6196  000912  6A1D               	clrf	drawCircle@y0+1,c
  6197  000914  0E00               	movlw	0
  6198  000916  6E1F               	movwf	drawCircle@r+1,c
  6199  000918  0E07               	movlw	7
  6200  00091A  6E1E               	movwf	drawCircle@r,c
  6201  00091C  0EFF               	movlw	255
  6202  00091E  6E21               	movwf	drawCircle@color+1,c
  6203  000920  0EE0               	movlw	224
  6204  000922  6E20               	movwf	drawCircle@color,c
  6205  000924  ECB9  F006         	call	_drawCircle	;wreg free
  6206                           
  6207                           ;Main_Screen.c: 184: drawCircle(80, Circle_Y, 7, 0x07E0);
  6208  000928  0E00               	movlw	0
  6209  00092A  6E1B               	movwf	drawCircle@x0+1,c
  6210  00092C  0E50               	movlw	80
  6211  00092E  6E1A               	movwf	drawCircle@x0,c
  6212  000930  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6213  000934  6A1D               	clrf	drawCircle@y0+1,c
  6214  000936  0E00               	movlw	0
  6215  000938  6E1F               	movwf	drawCircle@r+1,c
  6216  00093A  0E07               	movlw	7
  6217  00093C  6E1E               	movwf	drawCircle@r,c
  6218  00093E  0E07               	movlw	7
  6219  000940  6E21               	movwf	drawCircle@color+1,c
  6220  000942  0EE0               	movlw	224
  6221  000944  6E20               	movwf	drawCircle@color,c
  6222  000946  ECB9  F006         	call	_drawCircle	;wreg free
  6223  00094A  D000               	goto	l5202
  6224  00094C                     l5202:
  6225                           
  6226                           ;Main_Screen.c: 185: }
  6227                           ;Main_Screen.c: 186: if (color == 3)
  6228  00094C  0E03               	movlw	3
  6229  00094E  1841               	xorwf	update_LCD_color@color,w,c
  6230  000950  A4D8               	btfss	status,2,c
  6231  000952  D067               	goto	l5206
  6232                           
  6233                           ;Main_Screen.c: 187: {
  6234                           ;Main_Screen.c: 188: fillCircle(40, Circle_Y, 7, 0x0000);
  6235  000954  0E00               	movlw	0
  6236  000956  6E3A               	movwf	fillCircle@x0+1,c
  6237  000958  0E28               	movlw	40
  6238  00095A  6E39               	movwf	fillCircle@x0,c
  6239  00095C  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6240  000960  6A3C               	clrf	fillCircle@y0+1,c
  6241  000962  0E00               	movlw	0
  6242  000964  6E3E               	movwf	fillCircle@r+1,c
  6243  000966  0E07               	movlw	7
  6244  000968  6E3D               	movwf	fillCircle@r,c
  6245  00096A  0E00               	movlw	0
  6246  00096C  6E40               	movwf	fillCircle@color+1,c
  6247  00096E  0E00               	movlw	0
  6248  000970  6E3F               	movwf	fillCircle@color,c
  6249  000972  ECB1  F011         	call	_fillCircle	;wreg free
  6250                           
  6251                           ;Main_Screen.c: 189: fillCircle(60, Circle_Y, 7, 0xFFE0);
  6252  000976  0E00               	movlw	0
  6253  000978  6E3A               	movwf	fillCircle@x0+1,c
  6254  00097A  0E3C               	movlw	60
  6255  00097C  6E39               	movwf	fillCircle@x0,c
  6256  00097E  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6257  000982  6A3C               	clrf	fillCircle@y0+1,c
  6258  000984  0E00               	movlw	0
  6259  000986  6E3E               	movwf	fillCircle@r+1,c
  6260  000988  0E07               	movlw	7
  6261  00098A  6E3D               	movwf	fillCircle@r,c
  6262  00098C  0EFF               	movlw	255
  6263  00098E  6E40               	movwf	fillCircle@color+1,c
  6264  000990  0EE0               	movlw	224
  6265  000992  6E3F               	movwf	fillCircle@color,c
  6266  000994  ECB1  F011         	call	_fillCircle	;wreg free
  6267                           
  6268                           ;Main_Screen.c: 190: fillCircle(80, Circle_Y, 7, 0x0000);
  6269  000998  0E00               	movlw	0
  6270  00099A  6E3A               	movwf	fillCircle@x0+1,c
  6271  00099C  0E50               	movlw	80
  6272  00099E  6E39               	movwf	fillCircle@x0,c
  6273  0009A0  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6274  0009A4  6A3C               	clrf	fillCircle@y0+1,c
  6275  0009A6  0E00               	movlw	0
  6276  0009A8  6E3E               	movwf	fillCircle@r+1,c
  6277  0009AA  0E07               	movlw	7
  6278  0009AC  6E3D               	movwf	fillCircle@r,c
  6279  0009AE  0E00               	movlw	0
  6280  0009B0  6E40               	movwf	fillCircle@color+1,c
  6281  0009B2  0E00               	movlw	0
  6282  0009B4  6E3F               	movwf	fillCircle@color,c
  6283  0009B6  ECB1  F011         	call	_fillCircle	;wreg free
  6284                           
  6285                           ;Main_Screen.c: 191: drawCircle(40, Circle_Y, 7, 0xF800);
  6286  0009BA  0E00               	movlw	0
  6287  0009BC  6E1B               	movwf	drawCircle@x0+1,c
  6288  0009BE  0E28               	movlw	40
  6289  0009C0  6E1A               	movwf	drawCircle@x0,c
  6290  0009C2  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6291  0009C6  6A1D               	clrf	drawCircle@y0+1,c
  6292  0009C8  0E00               	movlw	0
  6293  0009CA  6E1F               	movwf	drawCircle@r+1,c
  6294  0009CC  0E07               	movlw	7
  6295  0009CE  6E1E               	movwf	drawCircle@r,c
  6296  0009D0  0EF8               	movlw	248
  6297  0009D2  6E21               	movwf	drawCircle@color+1,c
  6298  0009D4  0E00               	movlw	0
  6299  0009D6  6E20               	movwf	drawCircle@color,c
  6300  0009D8  ECB9  F006         	call	_drawCircle	;wreg free
  6301                           
  6302                           ;Main_Screen.c: 192: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6303  0009DC  0E00               	movlw	0
  6304  0009DE  6E1B               	movwf	drawCircle@x0+1,c
  6305  0009E0  0E3C               	movlw	60
  6306  0009E2  6E1A               	movwf	drawCircle@x0,c
  6307  0009E4  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6308  0009E8  6A1D               	clrf	drawCircle@y0+1,c
  6309  0009EA  0E00               	movlw	0
  6310  0009EC  6E1F               	movwf	drawCircle@r+1,c
  6311  0009EE  0E07               	movlw	7
  6312  0009F0  6E1E               	movwf	drawCircle@r,c
  6313  0009F2  0EFF               	movlw	255
  6314  0009F4  6E21               	movwf	drawCircle@color+1,c
  6315  0009F6  0EE0               	movlw	224
  6316  0009F8  6E20               	movwf	drawCircle@color,c
  6317  0009FA  ECB9  F006         	call	_drawCircle	;wreg free
  6318                           
  6319                           ;Main_Screen.c: 193: drawCircle(80, Circle_Y, 7, 0x07E0);
  6320  0009FE  0E00               	movlw	0
  6321  000A00  6E1B               	movwf	drawCircle@x0+1,c
  6322  000A02  0E50               	movlw	80
  6323  000A04  6E1A               	movwf	drawCircle@x0,c
  6324  000A06  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6325  000A0A  6A1D               	clrf	drawCircle@y0+1,c
  6326  000A0C  0E00               	movlw	0
  6327  000A0E  6E1F               	movwf	drawCircle@r+1,c
  6328  000A10  0E07               	movlw	7
  6329  000A12  6E1E               	movwf	drawCircle@r,c
  6330  000A14  0E07               	movlw	7
  6331  000A16  6E21               	movwf	drawCircle@color+1,c
  6332  000A18  0EE0               	movlw	224
  6333  000A1A  6E20               	movwf	drawCircle@color,c
  6334  000A1C  ECB9  F006         	call	_drawCircle	;wreg free
  6335  000A20  D000               	goto	l5206
  6336  000A22                     l5206:
  6337                           
  6338                           ;Main_Screen.c: 194: }
  6339                           ;Main_Screen.c: 195: if (color == 2)
  6340  000A22  0E02               	movlw	2
  6341  000A24  1841               	xorwf	update_LCD_color@color,w,c
  6342  000A26  A4D8               	btfss	status,2,c
  6343  000A28  D067               	goto	l318
  6344                           
  6345                           ;Main_Screen.c: 196: {
  6346                           ;Main_Screen.c: 197: fillCircle(40, Circle_Y, 7, 0x0000);
  6347  000A2A  0E00               	movlw	0
  6348  000A2C  6E3A               	movwf	fillCircle@x0+1,c
  6349  000A2E  0E28               	movlw	40
  6350  000A30  6E39               	movwf	fillCircle@x0,c
  6351  000A32  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6352  000A36  6A3C               	clrf	fillCircle@y0+1,c
  6353  000A38  0E00               	movlw	0
  6354  000A3A  6E3E               	movwf	fillCircle@r+1,c
  6355  000A3C  0E07               	movlw	7
  6356  000A3E  6E3D               	movwf	fillCircle@r,c
  6357  000A40  0E00               	movlw	0
  6358  000A42  6E40               	movwf	fillCircle@color+1,c
  6359  000A44  0E00               	movlw	0
  6360  000A46  6E3F               	movwf	fillCircle@color,c
  6361  000A48  ECB1  F011         	call	_fillCircle	;wreg free
  6362                           
  6363                           ;Main_Screen.c: 198: fillCircle(60, Circle_Y, 7, 0x0000);
  6364  000A4C  0E00               	movlw	0
  6365  000A4E  6E3A               	movwf	fillCircle@x0+1,c
  6366  000A50  0E3C               	movlw	60
  6367  000A52  6E39               	movwf	fillCircle@x0,c
  6368  000A54  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6369  000A58  6A3C               	clrf	fillCircle@y0+1,c
  6370  000A5A  0E00               	movlw	0
  6371  000A5C  6E3E               	movwf	fillCircle@r+1,c
  6372  000A5E  0E07               	movlw	7
  6373  000A60  6E3D               	movwf	fillCircle@r,c
  6374  000A62  0E00               	movlw	0
  6375  000A64  6E40               	movwf	fillCircle@color+1,c
  6376  000A66  0E00               	movlw	0
  6377  000A68  6E3F               	movwf	fillCircle@color,c
  6378  000A6A  ECB1  F011         	call	_fillCircle	;wreg free
  6379                           
  6380                           ;Main_Screen.c: 199: fillCircle(80, Circle_Y, 7, 0x07E0);
  6381  000A6E  0E00               	movlw	0
  6382  000A70  6E3A               	movwf	fillCircle@x0+1,c
  6383  000A72  0E50               	movlw	80
  6384  000A74  6E39               	movwf	fillCircle@x0,c
  6385  000A76  C043  F03B         	movff	update_LCD_color@Circle_Y,fillCircle@y0
  6386  000A7A  6A3C               	clrf	fillCircle@y0+1,c
  6387  000A7C  0E00               	movlw	0
  6388  000A7E  6E3E               	movwf	fillCircle@r+1,c
  6389  000A80  0E07               	movlw	7
  6390  000A82  6E3D               	movwf	fillCircle@r,c
  6391  000A84  0E07               	movlw	7
  6392  000A86  6E40               	movwf	fillCircle@color+1,c
  6393  000A88  0EE0               	movlw	224
  6394  000A8A  6E3F               	movwf	fillCircle@color,c
  6395  000A8C  ECB1  F011         	call	_fillCircle	;wreg free
  6396                           
  6397                           ;Main_Screen.c: 200: drawCircle(40, Circle_Y, 7, 0xF800);
  6398  000A90  0E00               	movlw	0
  6399  000A92  6E1B               	movwf	drawCircle@x0+1,c
  6400  000A94  0E28               	movlw	40
  6401  000A96  6E1A               	movwf	drawCircle@x0,c
  6402  000A98  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6403  000A9C  6A1D               	clrf	drawCircle@y0+1,c
  6404  000A9E  0E00               	movlw	0
  6405  000AA0  6E1F               	movwf	drawCircle@r+1,c
  6406  000AA2  0E07               	movlw	7
  6407  000AA4  6E1E               	movwf	drawCircle@r,c
  6408  000AA6  0EF8               	movlw	248
  6409  000AA8  6E21               	movwf	drawCircle@color+1,c
  6410  000AAA  0E00               	movlw	0
  6411  000AAC  6E20               	movwf	drawCircle@color,c
  6412  000AAE  ECB9  F006         	call	_drawCircle	;wreg free
  6413                           
  6414                           ;Main_Screen.c: 201: drawCircle(60, Circle_Y, 7, 0xFFE0);
  6415  000AB2  0E00               	movlw	0
  6416  000AB4  6E1B               	movwf	drawCircle@x0+1,c
  6417  000AB6  0E3C               	movlw	60
  6418  000AB8  6E1A               	movwf	drawCircle@x0,c
  6419  000ABA  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6420  000ABE  6A1D               	clrf	drawCircle@y0+1,c
  6421  000AC0  0E00               	movlw	0
  6422  000AC2  6E1F               	movwf	drawCircle@r+1,c
  6423  000AC4  0E07               	movlw	7
  6424  000AC6  6E1E               	movwf	drawCircle@r,c
  6425  000AC8  0EFF               	movlw	255
  6426  000ACA  6E21               	movwf	drawCircle@color+1,c
  6427  000ACC  0EE0               	movlw	224
  6428  000ACE  6E20               	movwf	drawCircle@color,c
  6429  000AD0  ECB9  F006         	call	_drawCircle	;wreg free
  6430                           
  6431                           ;Main_Screen.c: 202: drawCircle(80, Circle_Y, 7, 0x07E0);
  6432  000AD4  0E00               	movlw	0
  6433  000AD6  6E1B               	movwf	drawCircle@x0+1,c
  6434  000AD8  0E50               	movlw	80
  6435  000ADA  6E1A               	movwf	drawCircle@x0,c
  6436  000ADC  C043  F01C         	movff	update_LCD_color@Circle_Y,drawCircle@y0
  6437  000AE0  6A1D               	clrf	drawCircle@y0+1,c
  6438  000AE2  0E00               	movlw	0
  6439  000AE4  6E1F               	movwf	drawCircle@r+1,c
  6440  000AE6  0E07               	movlw	7
  6441  000AE8  6E1E               	movwf	drawCircle@r,c
  6442  000AEA  0E07               	movlw	7
  6443  000AEC  6E21               	movwf	drawCircle@color+1,c
  6444  000AEE  0EE0               	movlw	224
  6445  000AF0  6E20               	movwf	drawCircle@color,c
  6446  000AF2  ECB9  F006         	call	_drawCircle	;wreg free
  6447  000AF6  D000               	goto	l318
  6448  000AF8                     l318:
  6449  000AF8  0012               	return		;funcret
  6450  000AFA                     __end_of_update_LCD_color:
  6451                           	opt stack 0
  6452                           tblptru	equ	0xFF8
  6453                           tblptrh	equ	0xFF7
  6454                           tblptrl	equ	0xFF6
  6455                           tablat	equ	0xFF5
  6456                           prodl	equ	0xFF3
  6457                           intcon	equ	0xFF2
  6458                           intcon2	equ	0xFF1
  6459                           intcon3	equ	0xFF0
  6460                           postinc0	equ	0xFEE
  6461                           wreg	equ	0xFE8
  6462                           postdec1	equ	0xFE5
  6463                           fsr1l	equ	0xFE1
  6464                           status	equ	0xFD8
  6465                           
  6466 ;; *************** function _fillCircle *****************
  6467 ;; Defined at:
  6468 ;;		line 565 in file "ST7735_TFT.c"
  6469 ;; Parameters:    Size  Location     Type
  6470 ;;  x0              2   56[COMRAM] int 
  6471 ;;  y0              2   58[COMRAM] int 
  6472 ;;  r               2   60[COMRAM] int 
  6473 ;;  color           2   62[COMRAM] unsigned int 
  6474 ;; Auto vars:     Size  Location     Type
  6475 ;;		None
  6476 ;; Return value:  Size  Location     Type
  6477 ;;		None               void
  6478 ;; Registers used:
  6479 ;;		wreg, status,2, status,0, cstack
  6480 ;; Tracked objects:
  6481 ;;		On entry : 0/0
  6482 ;;		On exit  : 0/0
  6483 ;;		Unchanged: 0/0
  6484 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6485 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6486 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6487 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6488 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6489 ;;Total ram usage:        8 bytes
  6490 ;; Hardware stack levels used:    1
  6491 ;; Hardware stack levels required when called:    7
  6492 ;; This function calls:
  6493 ;;		_drawFastVLine
  6494 ;;		_fillCircleHelper
  6495 ;; This function is called by:
  6496 ;;		_Initialize_LCD_Screen
  6497 ;;		_update_LCD_color
  6498 ;; This function uses a non-reentrant model
  6499 ;;
  6500                           
  6501                           	psect	text27
  6502  002362                     __ptext27:
  6503                           	opt stack 0
  6504  002362                     _fillCircle:
  6505                           	opt stack 20
  6506                           
  6507                           ;ST7735_TFT.c: 567: drawFastVLine(x0, y0 - r, 2 * r + 1, color);
  6508                           
  6509                           ;incstack = 0
  6510  002362  503D               	movf	fillCircle@r,w,c
  6511  002364  0800               	sublw	0
  6512  002366  243B               	addwf	fillCircle@y0,w,c
  6513  002368  6E16               	movwf	drawFastVLine@y,c
  6514  00236A  80D8               	bsf	status,0,c
  6515  00236C  343D               	rlcf	fillCircle@r,w,c
  6516  00236E  6E17               	movwf	drawFastVLine@h,c
  6517  002370  C03F  F018         	movff	fillCircle@color,drawFastVLine@color
  6518  002374  C040  F019         	movff	fillCircle@color+1,drawFastVLine@color+1
  6519  002378  5039               	movf	fillCircle@x0,w,c
  6520  00237A  EC93  F00F         	call	_drawFastVLine
  6521                           
  6522                           ;ST7735_TFT.c: 568: fillCircleHelper(x0, y0, r, 3, 0, color);
  6523  00237E  C039  F021         	movff	fillCircle@x0,fillCircleHelper@x0
  6524  002382  C03A  F022         	movff	fillCircle@x0+1,fillCircleHelper@x0+1
  6525  002386  C03B  F023         	movff	fillCircle@y0,fillCircleHelper@y0
  6526  00238A  C03C  F024         	movff	fillCircle@y0+1,fillCircleHelper@y0+1
  6527  00238E  C03D  F025         	movff	fillCircle@r,fillCircleHelper@r
  6528  002392  C03E  F026         	movff	fillCircle@r+1,fillCircleHelper@r+1
  6529  002396  0E00               	movlw	0
  6530  002398  6E28               	movwf	fillCircleHelper@cornername+1,c
  6531  00239A  0E03               	movlw	3
  6532  00239C  6E27               	movwf	fillCircleHelper@cornername,c
  6533  00239E  0E00               	movlw	0
  6534  0023A0  6E2A               	movwf	fillCircleHelper@delta+1,c
  6535  0023A2  0E00               	movlw	0
  6536  0023A4  6E29               	movwf	fillCircleHelper@delta,c
  6537  0023A6  C03F  F02B         	movff	fillCircle@color,fillCircleHelper@color
  6538  0023AA  C040  F02C         	movff	fillCircle@color+1,fillCircleHelper@color+1
  6539  0023AE  EC00  F009         	call	_fillCircleHelper	;wreg free
  6540  0023B2  0012               	return		;funcret
  6541  0023B4                     __end_of_fillCircle:
  6542                           	opt stack 0
  6543                           tblptru	equ	0xFF8
  6544                           tblptrh	equ	0xFF7
  6545                           tblptrl	equ	0xFF6
  6546                           tablat	equ	0xFF5
  6547                           prodl	equ	0xFF3
  6548                           intcon	equ	0xFF2
  6549                           intcon2	equ	0xFF1
  6550                           intcon3	equ	0xFF0
  6551                           postinc0	equ	0xFEE
  6552                           wreg	equ	0xFE8
  6553                           postdec1	equ	0xFE5
  6554                           fsr1l	equ	0xFE1
  6555                           status	equ	0xFD8
  6556                           
  6557 ;; *************** function _fillCircleHelper *****************
  6558 ;; Defined at:
  6559 ;;		line 540 in file "ST7735_TFT.c"
  6560 ;; Parameters:    Size  Location     Type
  6561 ;;  x0              2   32[COMRAM] int 
  6562 ;;  y0              2   34[COMRAM] int 
  6563 ;;  r               2   36[COMRAM] int 
  6564 ;;  cornername      2   38[COMRAM] unsigned int 
  6565 ;;  delta           2   40[COMRAM] int 
  6566 ;;  color           2   42[COMRAM] unsigned int 
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;  y               2   54[COMRAM] int 
  6569 ;;  x               2   52[COMRAM] int 
  6570 ;;  f               2   50[COMRAM] int 
  6571 ;;  ddF_y           2   48[COMRAM] int 
  6572 ;;  ddF_x           2   46[COMRAM] int 
  6573 ;; Return value:  Size  Location     Type
  6574 ;;		None               void
  6575 ;; Registers used:
  6576 ;;		wreg, status,2, status,0, cstack
  6577 ;; Tracked objects:
  6578 ;;		On entry : 0/0
  6579 ;;		On exit  : 0/0
  6580 ;;		Unchanged: 0/0
  6581 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6582 ;;      Params:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6583 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6584 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6585 ;;      Totals:        24       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6586 ;;Total ram usage:       24 bytes
  6587 ;; Hardware stack levels used:    1
  6588 ;; Hardware stack levels required when called:    6
  6589 ;; This function calls:
  6590 ;;		_drawFastVLine
  6591 ;; This function is called by:
  6592 ;;		_fillCircle
  6593 ;; This function uses a non-reentrant model
  6594 ;;
  6595                           
  6596                           	psect	text28
  6597  001200                     __ptext28:
  6598                           	opt stack 0
  6599  001200                     _fillCircleHelper:
  6600                           	opt stack 20
  6601                           
  6602                           ;ST7735_TFT.c: 542: signed int f, ddF_x, ddF_y, x, y;
  6603                           ;ST7735_TFT.c: 543: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6604                           
  6605                           ;incstack = 0
  6606  001200  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  6607  001204  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6608  001208  1E2D               	comf	??_fillCircleHelper,f,c
  6609  00120A  1E2E               	comf	??_fillCircleHelper+1,f,c
  6610  00120C  4A2D               	infsnz	??_fillCircleHelper,f,c
  6611  00120E  2A2E               	incf	??_fillCircleHelper+1,f,c
  6612  001210  0E01               	movlw	1
  6613  001212  242D               	addwf	??_fillCircleHelper,w,c
  6614  001214  6E33               	movwf	fillCircleHelper@f,c
  6615  001216  0E00               	movlw	0
  6616  001218  202E               	addwfc	??_fillCircleHelper+1,w,c
  6617  00121A  6E34               	movwf	fillCircleHelper@f+1,c
  6618  00121C  0E00               	movlw	0
  6619  00121E  6E30               	movwf	fillCircleHelper@ddF_x+1,c
  6620  001220  0E01               	movlw	1
  6621  001222  6E2F               	movwf	fillCircleHelper@ddF_x,c
  6622  001224  C025  F02D         	movff	fillCircleHelper@r,??_fillCircleHelper
  6623  001228  C026  F02E         	movff	fillCircleHelper@r+1,??_fillCircleHelper+1
  6624  00122C  90D8               	bcf	status,0,c
  6625  00122E  362D               	rlcf	??_fillCircleHelper,f,c
  6626  001230  362E               	rlcf	??_fillCircleHelper+1,f,c
  6627  001232  1E2D               	comf	??_fillCircleHelper,f,c
  6628  001234  1E2E               	comf	??_fillCircleHelper+1,f,c
  6629  001236  4A2D               	infsnz	??_fillCircleHelper,f,c
  6630  001238  2A2E               	incf	??_fillCircleHelper+1,f,c
  6631  00123A  C02D  F031         	movff	??_fillCircleHelper,fillCircleHelper@ddF_y
  6632  00123E  C02E  F032         	movff	??_fillCircleHelper+1,fillCircleHelper@ddF_y+1
  6633  001242  0E00               	movlw	0
  6634  001244  6E36               	movwf	fillCircleHelper@x+1,c
  6635  001246  0E00               	movlw	0
  6636  001248  6E35               	movwf	fillCircleHelper@x,c
  6637  00124A  C025  F037         	movff	fillCircleHelper@r,fillCircleHelper@y
  6638  00124E  C026  F038         	movff	fillCircleHelper@r+1,fillCircleHelper@y+1
  6639                           
  6640                           ;ST7735_TFT.c: 544: while (x<y) {
  6641  001252  D067               	goto	l4832
  6642  001254                     l4812:
  6643                           
  6644                           ;ST7735_TFT.c: 545: if (f >= 0) {
  6645  001254  BE34               	btfsc	fillCircleHelper@f+1,7,c
  6646  001256  D00B               	goto	l536
  6647                           
  6648                           ;ST7735_TFT.c: 546: y--;
  6649  001258  0637               	decf	fillCircleHelper@y,f,c
  6650  00125A  A0D8               	btfss	status,0,c
  6651  00125C  0638               	decf	fillCircleHelper@y+1,f,c
  6652                           
  6653                           ;ST7735_TFT.c: 547: ddF_y += 2;
  6654  00125E  0E02               	movlw	2
  6655  001260  2631               	addwf	fillCircleHelper@ddF_y,f,c
  6656  001262  0E00               	movlw	0
  6657  001264  2232               	addwfc	fillCircleHelper@ddF_y+1,f,c
  6658                           
  6659                           ;ST7735_TFT.c: 548: f += ddF_y;
  6660  001266  5031               	movf	fillCircleHelper@ddF_y,w,c
  6661  001268  2633               	addwf	fillCircleHelper@f,f,c
  6662  00126A  5032               	movf	fillCircleHelper@ddF_y+1,w,c
  6663  00126C  2234               	addwfc	fillCircleHelper@f+1,f,c
  6664  00126E                     l536:
  6665                           
  6666                           ;ST7735_TFT.c: 549: }
  6667                           ;ST7735_TFT.c: 550: x++;
  6668  00126E  4A35               	infsnz	fillCircleHelper@x,f,c
  6669  001270  2A36               	incf	fillCircleHelper@x+1,f,c
  6670                           
  6671                           ;ST7735_TFT.c: 551: ddF_x += 2;
  6672  001272  0E02               	movlw	2
  6673  001274  262F               	addwf	fillCircleHelper@ddF_x,f,c
  6674  001276  0E00               	movlw	0
  6675  001278  2230               	addwfc	fillCircleHelper@ddF_x+1,f,c
  6676                           
  6677                           ;ST7735_TFT.c: 552: f += ddF_x;
  6678  00127A  502F               	movf	fillCircleHelper@ddF_x,w,c
  6679  00127C  2633               	addwf	fillCircleHelper@f,f,c
  6680  00127E  5030               	movf	fillCircleHelper@ddF_x+1,w,c
  6681  001280  2234               	addwfc	fillCircleHelper@f+1,f,c
  6682                           
  6683                           ;ST7735_TFT.c: 554: if (cornername & 0x1) {
  6684  001282  A027               	btfss	fillCircleHelper@cornername,0,c
  6685  001284  D025               	goto	l4828
  6686                           
  6687                           ;ST7735_TFT.c: 555: drawFastVLine(x0+x, y0-y, 2*y+1+delta, color);
  6688  001286  5037               	movf	fillCircleHelper@y,w,c
  6689  001288  0800               	sublw	0
  6690  00128A  2423               	addwf	fillCircleHelper@y0,w,c
  6691  00128C  6E16               	movwf	drawFastVLine@y,c
  6692  00128E  5037               	movf	fillCircleHelper@y,w,c
  6693  001290  2437               	addwf	fillCircleHelper@y,w,c
  6694  001292  2429               	addwf	fillCircleHelper@delta,w,c
  6695  001294  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6696  001296  282D               	incf	??_fillCircleHelper,w,c
  6697  001298  6E17               	movwf	drawFastVLine@h,c
  6698  00129A  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6699  00129E  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6700  0012A2  5021               	movf	fillCircleHelper@x0,w,c
  6701  0012A4  2435               	addwf	fillCircleHelper@x,w,c
  6702  0012A6  EC93  F00F         	call	_drawFastVLine
  6703                           
  6704                           ;ST7735_TFT.c: 556: drawFastVLine(x0+y, y0-x, 2*x+1+delta, color);
  6705  0012AA  5035               	movf	fillCircleHelper@x,w,c
  6706  0012AC  0800               	sublw	0
  6707  0012AE  2423               	addwf	fillCircleHelper@y0,w,c
  6708  0012B0  6E16               	movwf	drawFastVLine@y,c
  6709  0012B2  5035               	movf	fillCircleHelper@x,w,c
  6710  0012B4  2435               	addwf	fillCircleHelper@x,w,c
  6711  0012B6  2429               	addwf	fillCircleHelper@delta,w,c
  6712  0012B8  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6713  0012BA  282D               	incf	??_fillCircleHelper,w,c
  6714  0012BC  6E17               	movwf	drawFastVLine@h,c
  6715  0012BE  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6716  0012C2  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6717  0012C6  5021               	movf	fillCircleHelper@x0,w,c
  6718  0012C8  2437               	addwf	fillCircleHelper@y,w,c
  6719  0012CA  EC93  F00F         	call	_drawFastVLine
  6720  0012CE  D000               	goto	l4828
  6721  0012D0                     l4828:
  6722                           
  6723                           ;ST7735_TFT.c: 557: }
  6724                           ;ST7735_TFT.c: 558: if (cornername & 0x2) {
  6725  0012D0  A227               	btfss	fillCircleHelper@cornername,1,c
  6726  0012D2  D027               	goto	l4832
  6727                           
  6728                           ;ST7735_TFT.c: 559: drawFastVLine(x0-x, y0-y, 2*y+1+delta, color);
  6729  0012D4  5037               	movf	fillCircleHelper@y,w,c
  6730  0012D6  0800               	sublw	0
  6731  0012D8  2423               	addwf	fillCircleHelper@y0,w,c
  6732  0012DA  6E16               	movwf	drawFastVLine@y,c
  6733  0012DC  5037               	movf	fillCircleHelper@y,w,c
  6734  0012DE  2437               	addwf	fillCircleHelper@y,w,c
  6735  0012E0  2429               	addwf	fillCircleHelper@delta,w,c
  6736  0012E2  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6737  0012E4  282D               	incf	??_fillCircleHelper,w,c
  6738  0012E6  6E17               	movwf	drawFastVLine@h,c
  6739  0012E8  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6740  0012EC  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6741  0012F0  5035               	movf	fillCircleHelper@x,w,c
  6742  0012F2  0800               	sublw	0
  6743  0012F4  2421               	addwf	fillCircleHelper@x0,w,c
  6744  0012F6  EC93  F00F         	call	_drawFastVLine
  6745                           
  6746                           ;ST7735_TFT.c: 560: drawFastVLine(x0-y, y0-x, 2*x+1+delta, color);
  6747  0012FA  5035               	movf	fillCircleHelper@x,w,c
  6748  0012FC  0800               	sublw	0
  6749  0012FE  2423               	addwf	fillCircleHelper@y0,w,c
  6750  001300  6E16               	movwf	drawFastVLine@y,c
  6751  001302  5035               	movf	fillCircleHelper@x,w,c
  6752  001304  2435               	addwf	fillCircleHelper@x,w,c
  6753  001306  2429               	addwf	fillCircleHelper@delta,w,c
  6754  001308  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6755  00130A  282D               	incf	??_fillCircleHelper,w,c
  6756  00130C  6E17               	movwf	drawFastVLine@h,c
  6757  00130E  C02B  F018         	movff	fillCircleHelper@color,drawFastVLine@color
  6758  001312  C02C  F019         	movff	fillCircleHelper@color+1,drawFastVLine@color+1
  6759  001316  5037               	movf	fillCircleHelper@y,w,c
  6760  001318  0800               	sublw	0
  6761  00131A  2421               	addwf	fillCircleHelper@x0,w,c
  6762  00131C  EC93  F00F         	call	_drawFastVLine
  6763  001320  D000               	goto	l4832
  6764  001322                     l4832:
  6765  001322  5037               	movf	fillCircleHelper@y,w,c
  6766  001324  5C35               	subwf	fillCircleHelper@x,w,c
  6767  001326  5036               	movf	fillCircleHelper@x+1,w,c
  6768  001328  0A80               	xorlw	128
  6769  00132A  6E2D               	movwf	??_fillCircleHelper& (0+255),c
  6770  00132C  5038               	movf	fillCircleHelper@y+1,w,c
  6771  00132E  0A80               	xorlw	128
  6772  001330  582D               	subwfb	??_fillCircleHelper& (0+255),w,c
  6773  001332  A0D8               	btfss	status,0,c
  6774  001334  D78F               	goto	l4812
  6775  001336  0012               	return		;funcret
  6776  001338                     __end_of_fillCircleHelper:
  6777                           	opt stack 0
  6778                           tblptru	equ	0xFF8
  6779                           tblptrh	equ	0xFF7
  6780                           tblptrl	equ	0xFF6
  6781                           tablat	equ	0xFF5
  6782                           prodl	equ	0xFF3
  6783                           intcon	equ	0xFF2
  6784                           intcon2	equ	0xFF1
  6785                           intcon3	equ	0xFF0
  6786                           postinc0	equ	0xFEE
  6787                           wreg	equ	0xFE8
  6788                           postdec1	equ	0xFE5
  6789                           fsr1l	equ	0xFE1
  6790                           status	equ	0xFD8
  6791                           
  6792 ;; *************** function _drawCircle *****************
  6793 ;; Defined at:
  6794 ;;		line 479 in file "ST7735_TFT.c"
  6795 ;; Parameters:    Size  Location     Type
  6796 ;;  x0              2   25[COMRAM] int 
  6797 ;;  y0              2   27[COMRAM] int 
  6798 ;;  r               2   29[COMRAM] int 
  6799 ;;  color           2   31[COMRAM] unsigned int 
  6800 ;; Auto vars:     Size  Location     Type
  6801 ;;  y               2   43[COMRAM] int 
  6802 ;;  x               2   41[COMRAM] int 
  6803 ;;  f               2   39[COMRAM] int 
  6804 ;;  ddF_y           2   37[COMRAM] int 
  6805 ;;  ddF_x           2   35[COMRAM] int 
  6806 ;; Return value:  Size  Location     Type
  6807 ;;		None               void
  6808 ;; Registers used:
  6809 ;;		wreg, status,2, status,0, cstack
  6810 ;; Tracked objects:
  6811 ;;		On entry : 0/0
  6812 ;;		On exit  : 0/0
  6813 ;;		Unchanged: 0/0
  6814 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6815 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6816 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6817 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6818 ;;      Totals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6819 ;;Total ram usage:       20 bytes
  6820 ;; Hardware stack levels used:    1
  6821 ;; Hardware stack levels required when called:    6
  6822 ;; This function calls:
  6823 ;;		_drawPixel
  6824 ;; This function is called by:
  6825 ;;		_Initialize_LCD_Screen
  6826 ;;		_update_LCD_color
  6827 ;; This function uses a non-reentrant model
  6828 ;;
  6829                           
  6830                           	psect	text29
  6831  000D72                     __ptext29:
  6832                           	opt stack 0
  6833  000D72                     _drawCircle:
  6834                           	opt stack 21
  6835                           
  6836                           ;ST7735_TFT.c: 481: signed int f, ddF_x, ddF_y, x, y;
  6837                           ;ST7735_TFT.c: 482: f = 1 - r, ddF_x = 1, ddF_y = -2 * r, x = 0, y = r;
  6838                           
  6839                           ;incstack = 0
  6840  000D72  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6841  000D76  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6842  000D7A  1E22               	comf	??_drawCircle,f,c
  6843  000D7C  1E23               	comf	??_drawCircle+1,f,c
  6844  000D7E  4A22               	infsnz	??_drawCircle,f,c
  6845  000D80  2A23               	incf	??_drawCircle+1,f,c
  6846  000D82  0E01               	movlw	1
  6847  000D84  2422               	addwf	??_drawCircle,w,c
  6848  000D86  6E28               	movwf	drawCircle@f,c
  6849  000D88  0E00               	movlw	0
  6850  000D8A  2023               	addwfc	??_drawCircle+1,w,c
  6851  000D8C  6E29               	movwf	drawCircle@f+1,c
  6852  000D8E  0E00               	movlw	0
  6853  000D90  6E25               	movwf	drawCircle@ddF_x+1,c
  6854  000D92  0E01               	movlw	1
  6855  000D94  6E24               	movwf	drawCircle@ddF_x,c
  6856  000D96  C01E  F022         	movff	drawCircle@r,??_drawCircle
  6857  000D9A  C01F  F023         	movff	drawCircle@r+1,??_drawCircle+1
  6858  000D9E  90D8               	bcf	status,0,c
  6859  000DA0  3622               	rlcf	??_drawCircle,f,c
  6860  000DA2  3623               	rlcf	??_drawCircle+1,f,c
  6861  000DA4  1E22               	comf	??_drawCircle,f,c
  6862  000DA6  1E23               	comf	??_drawCircle+1,f,c
  6863  000DA8  4A22               	infsnz	??_drawCircle,f,c
  6864  000DAA  2A23               	incf	??_drawCircle+1,f,c
  6865  000DAC  C022  F026         	movff	??_drawCircle,drawCircle@ddF_y
  6866  000DB0  C023  F027         	movff	??_drawCircle+1,drawCircle@ddF_y+1
  6867  000DB4  0E00               	movlw	0
  6868  000DB6  6E2B               	movwf	drawCircle@x+1,c
  6869  000DB8  0E00               	movlw	0
  6870  000DBA  6E2A               	movwf	drawCircle@x,c
  6871  000DBC  C01E  F02C         	movff	drawCircle@r,drawCircle@y
  6872  000DC0  C01F  F02D         	movff	drawCircle@r+1,drawCircle@y+1
  6873                           
  6874                           ;ST7735_TFT.c: 483: drawPixel(x0 , y0 + r, color);
  6875  000DC4  501C               	movf	drawCircle@y0,w,c
  6876  000DC6  241E               	addwf	drawCircle@r,w,c
  6877  000DC8  6E16               	movwf	drawPixel@y,c
  6878  000DCA  C020  F017         	movff	drawCircle@color,drawPixel@color
  6879  000DCE  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6880  000DD2  501A               	movf	drawCircle@x0,w,c
  6881  000DD4  EC80  F013         	call	_drawPixel
  6882                           
  6883                           ;ST7735_TFT.c: 484: drawPixel(x0 , y0 - r, color);
  6884  000DD8  501E               	movf	drawCircle@r,w,c
  6885  000DDA  0800               	sublw	0
  6886  000DDC  241C               	addwf	drawCircle@y0,w,c
  6887  000DDE  6E16               	movwf	drawPixel@y,c
  6888  000DE0  C020  F017         	movff	drawCircle@color,drawPixel@color
  6889  000DE4  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6890  000DE8  501A               	movf	drawCircle@x0,w,c
  6891  000DEA  EC80  F013         	call	_drawPixel
  6892                           
  6893                           ;ST7735_TFT.c: 485: drawPixel(x0+r, y0 , color);
  6894  000DEE  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6895  000DF2  C020  F017         	movff	drawCircle@color,drawPixel@color
  6896  000DF6  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6897  000DFA  501A               	movf	drawCircle@x0,w,c
  6898  000DFC  241E               	addwf	drawCircle@r,w,c
  6899  000DFE  EC80  F013         	call	_drawPixel
  6900                           
  6901                           ;ST7735_TFT.c: 486: drawPixel(x0-r, y0 , color);
  6902  000E02  C01C  F016         	movff	drawCircle@y0,drawPixel@y
  6903  000E06  C020  F017         	movff	drawCircle@color,drawPixel@color
  6904  000E0A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6905  000E0E  501E               	movf	drawCircle@r,w,c
  6906  000E10  0800               	sublw	0
  6907  000E12  241A               	addwf	drawCircle@x0,w,c
  6908  000E14  EC80  F013         	call	_drawPixel
  6909                           
  6910                           ;ST7735_TFT.c: 487: while (x < y) {
  6911  000E18  D078               	goto	l5118
  6912  000E1A                     l5090:
  6913                           
  6914                           ;ST7735_TFT.c: 488: if (f >= 0) {
  6915  000E1A  BE29               	btfsc	drawCircle@f+1,7,c
  6916  000E1C  D00B               	goto	l518
  6917                           
  6918                           ;ST7735_TFT.c: 489: y--;
  6919  000E1E  062C               	decf	drawCircle@y,f,c
  6920  000E20  A0D8               	btfss	status,0,c
  6921  000E22  062D               	decf	drawCircle@y+1,f,c
  6922                           
  6923                           ;ST7735_TFT.c: 490: ddF_y += 2;
  6924  000E24  0E02               	movlw	2
  6925  000E26  2626               	addwf	drawCircle@ddF_y,f,c
  6926  000E28  0E00               	movlw	0
  6927  000E2A  2227               	addwfc	drawCircle@ddF_y+1,f,c
  6928                           
  6929                           ;ST7735_TFT.c: 491: f += ddF_y;
  6930  000E2C  5026               	movf	drawCircle@ddF_y,w,c
  6931  000E2E  2628               	addwf	drawCircle@f,f,c
  6932  000E30  5027               	movf	drawCircle@ddF_y+1,w,c
  6933  000E32  2229               	addwfc	drawCircle@f+1,f,c
  6934  000E34                     l518:
  6935                           
  6936                           ;ST7735_TFT.c: 492: }
  6937                           ;ST7735_TFT.c: 493: x++;
  6938  000E34  4A2A               	infsnz	drawCircle@x,f,c
  6939  000E36  2A2B               	incf	drawCircle@x+1,f,c
  6940                           
  6941                           ;ST7735_TFT.c: 494: ddF_x += 2;
  6942  000E38  0E02               	movlw	2
  6943  000E3A  2624               	addwf	drawCircle@ddF_x,f,c
  6944  000E3C  0E00               	movlw	0
  6945  000E3E  2225               	addwfc	drawCircle@ddF_x+1,f,c
  6946                           
  6947                           ;ST7735_TFT.c: 495: f += ddF_x;
  6948  000E40  5024               	movf	drawCircle@ddF_x,w,c
  6949  000E42  2628               	addwf	drawCircle@f,f,c
  6950  000E44  5025               	movf	drawCircle@ddF_x+1,w,c
  6951  000E46  2229               	addwfc	drawCircle@f+1,f,c
  6952                           
  6953                           ;ST7735_TFT.c: 496: drawPixel(x0 + x, y0 + y, color);
  6954  000E48  501C               	movf	drawCircle@y0,w,c
  6955  000E4A  242C               	addwf	drawCircle@y,w,c
  6956  000E4C  6E16               	movwf	drawPixel@y,c
  6957  000E4E  C020  F017         	movff	drawCircle@color,drawPixel@color
  6958  000E52  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6959  000E56  501A               	movf	drawCircle@x0,w,c
  6960  000E58  242A               	addwf	drawCircle@x,w,c
  6961  000E5A  EC80  F013         	call	_drawPixel
  6962                           
  6963                           ;ST7735_TFT.c: 497: drawPixel(x0 - x, y0 + y, color);
  6964  000E5E  501C               	movf	drawCircle@y0,w,c
  6965  000E60  242C               	addwf	drawCircle@y,w,c
  6966  000E62  6E16               	movwf	drawPixel@y,c
  6967  000E64  C020  F017         	movff	drawCircle@color,drawPixel@color
  6968  000E68  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6969  000E6C  502A               	movf	drawCircle@x,w,c
  6970  000E6E  0800               	sublw	0
  6971  000E70  241A               	addwf	drawCircle@x0,w,c
  6972  000E72  EC80  F013         	call	_drawPixel
  6973                           
  6974                           ;ST7735_TFT.c: 498: drawPixel(x0 + x, y0 - y, color);
  6975  000E76  502C               	movf	drawCircle@y,w,c
  6976  000E78  0800               	sublw	0
  6977  000E7A  241C               	addwf	drawCircle@y0,w,c
  6978  000E7C  6E16               	movwf	drawPixel@y,c
  6979  000E7E  C020  F017         	movff	drawCircle@color,drawPixel@color
  6980  000E82  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6981  000E86  501A               	movf	drawCircle@x0,w,c
  6982  000E88  242A               	addwf	drawCircle@x,w,c
  6983  000E8A  EC80  F013         	call	_drawPixel
  6984                           
  6985                           ;ST7735_TFT.c: 499: drawPixel(x0 - x, y0 - y, color);
  6986  000E8E  502C               	movf	drawCircle@y,w,c
  6987  000E90  0800               	sublw	0
  6988  000E92  241C               	addwf	drawCircle@y0,w,c
  6989  000E94  6E16               	movwf	drawPixel@y,c
  6990  000E96  C020  F017         	movff	drawCircle@color,drawPixel@color
  6991  000E9A  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  6992  000E9E  502A               	movf	drawCircle@x,w,c
  6993  000EA0  0800               	sublw	0
  6994  000EA2  241A               	addwf	drawCircle@x0,w,c
  6995  000EA4  EC80  F013         	call	_drawPixel
  6996                           
  6997                           ;ST7735_TFT.c: 500: drawPixel(x0 + y, y0 + x, color);
  6998  000EA8  501C               	movf	drawCircle@y0,w,c
  6999  000EAA  242A               	addwf	drawCircle@x,w,c
  7000  000EAC  6E16               	movwf	drawPixel@y,c
  7001  000EAE  C020  F017         	movff	drawCircle@color,drawPixel@color
  7002  000EB2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7003  000EB6  501A               	movf	drawCircle@x0,w,c
  7004  000EB8  242C               	addwf	drawCircle@y,w,c
  7005  000EBA  EC80  F013         	call	_drawPixel
  7006                           
  7007                           ;ST7735_TFT.c: 501: drawPixel(x0 - y, y0 + x, color);
  7008  000EBE  501C               	movf	drawCircle@y0,w,c
  7009  000EC0  242A               	addwf	drawCircle@x,w,c
  7010  000EC2  6E16               	movwf	drawPixel@y,c
  7011  000EC4  C020  F017         	movff	drawCircle@color,drawPixel@color
  7012  000EC8  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7013  000ECC  502C               	movf	drawCircle@y,w,c
  7014  000ECE  0800               	sublw	0
  7015  000ED0  241A               	addwf	drawCircle@x0,w,c
  7016  000ED2  EC80  F013         	call	_drawPixel
  7017                           
  7018                           ;ST7735_TFT.c: 502: drawPixel(x0 + y, y0 - x, color);
  7019  000ED6  502A               	movf	drawCircle@x,w,c
  7020  000ED8  0800               	sublw	0
  7021  000EDA  241C               	addwf	drawCircle@y0,w,c
  7022  000EDC  6E16               	movwf	drawPixel@y,c
  7023  000EDE  C020  F017         	movff	drawCircle@color,drawPixel@color
  7024  000EE2  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7025  000EE6  501A               	movf	drawCircle@x0,w,c
  7026  000EE8  242C               	addwf	drawCircle@y,w,c
  7027  000EEA  EC80  F013         	call	_drawPixel
  7028                           
  7029                           ;ST7735_TFT.c: 503: drawPixel(x0 - y, y0 - x, color);
  7030  000EEE  502A               	movf	drawCircle@x,w,c
  7031  000EF0  0800               	sublw	0
  7032  000EF2  241C               	addwf	drawCircle@y0,w,c
  7033  000EF4  6E16               	movwf	drawPixel@y,c
  7034  000EF6  C020  F017         	movff	drawCircle@color,drawPixel@color
  7035  000EFA  C021  F018         	movff	drawCircle@color+1,drawPixel@color+1
  7036  000EFE  502C               	movf	drawCircle@y,w,c
  7037  000F00  0800               	sublw	0
  7038  000F02  241A               	addwf	drawCircle@x0,w,c
  7039  000F04  EC80  F013         	call	_drawPixel
  7040  000F08  D000               	goto	l5118
  7041  000F0A                     l5118:
  7042  000F0A  502C               	movf	drawCircle@y,w,c
  7043  000F0C  5C2A               	subwf	drawCircle@x,w,c
  7044  000F0E  502B               	movf	drawCircle@x+1,w,c
  7045  000F10  0A80               	xorlw	128
  7046  000F12  6E22               	movwf	??_drawCircle& (0+255),c
  7047  000F14  502D               	movf	drawCircle@y+1,w,c
  7048  000F16  0A80               	xorlw	128
  7049  000F18  5822               	subwfb	??_drawCircle& (0+255),w,c
  7050  000F1A  A0D8               	btfss	status,0,c
  7051  000F1C  D77E               	goto	l5090
  7052  000F1E  0012               	return		;funcret
  7053  000F20                     __end_of_drawCircle:
  7054                           	opt stack 0
  7055                           tblptru	equ	0xFF8
  7056                           tblptrh	equ	0xFF7
  7057                           tblptrl	equ	0xFF6
  7058                           tablat	equ	0xFF5
  7059                           prodl	equ	0xFF3
  7060                           intcon	equ	0xFF2
  7061                           intcon2	equ	0xFF1
  7062                           intcon3	equ	0xFF0
  7063                           postinc0	equ	0xFEE
  7064                           wreg	equ	0xFE8
  7065                           postdec1	equ	0xFE5
  7066                           fsr1l	equ	0xFE1
  7067                           status	equ	0xFD8
  7068                           
  7069 ;; *************** function _PED_Control *****************
  7070 ;; Defined at:
  7071 ;;		line 199 in file "Lab8pB.c"
  7072 ;; Parameters:    Size  Location     Type
  7073 ;;  direction       1    wreg     unsigned char 
  7074 ;;  Num_Sec         1   66[COMRAM] unsigned char 
  7075 ;; Auto vars:     Size  Location     Type
  7076 ;;  direction       1   12[BANK0 ] unsigned char 
  7077 ;;  i               2   13[BANK0 ] int 
  7078 ;; Return value:  Size  Location     Type
  7079 ;;		None               void
  7080 ;; Registers used:
  7081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7082 ;; Tracked objects:
  7083 ;;		On entry : 0/0
  7084 ;;		On exit  : 0/0
  7085 ;;		Unchanged: 0/0
  7086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7087 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7088 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7090 ;;      Totals:         1       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7091 ;;Total ram usage:        4 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; Hardware stack levels required when called:   11
  7094 ;; This function calls:
  7095 ;;		_Wait_One_Second_With_Beep
  7096 ;;		_update_LCD_PED_Count
  7097 ;; This function is called by:
  7098 ;;		_Day_Mode
  7099 ;; This function uses a non-reentrant model
  7100 ;;
  7101                           
  7102                           	psect	text30
  7103  0022B6                     __ptext30:
  7104                           	opt stack 0
  7105  0022B6                     _PED_Control:
  7106                           	opt stack 18
  7107                           
  7108                           ;incstack = 0
  7109                           ;PED_Control@direction stored from wreg
  7110  0022B6  0100               	movlb	0	; () banked
  7111  0022B8  6FD7               	movwf	PED_Control@direction& (0+255),b
  7112                           
  7113                           ; BSR set to: 0
  7114                           ;Lab8pB.c: 202: for(int i=Num_Sec;i>0;i--)
  7115  0022BA  C043  F0D8         	movff	PED_Control@Num_Sec,PED_Control@i
  7116  0022BE  0100               	movlb	0	; () banked
  7117  0022C0  6BD9               	clrf	(PED_Control@i+1)& (0+255),b
  7118  0022C2                     l5452:
  7119                           
  7120                           ; BSR set to: 0
  7121  0022C2  0100               	movlb	0	; () banked
  7122  0022C4  BFD9               	btfsc	(PED_Control@i+1)& (0+255),7,b
  7123  0022C6  D018               	goto	l5462
  7124  0022C8  0100               	movlb	0	; () banked
  7125  0022CA  51D9               	movf	(PED_Control@i+1)& (0+255),w,b
  7126  0022CC  E106               	bnz	l5456
  7127  0022CE  0100               	movlb	0	; () banked
  7128  0022D0  05D8               	decf	PED_Control@i& (0+255),w,b
  7129  0022D2  A0D8               	btfss	status,0,c
  7130  0022D4  D011               	goto	l5462
  7131  0022D6  D001               	goto	l5456
  7132                           
  7133                           ; BSR set to: 0
  7134  0022D8  D00F               	goto	l5462
  7135  0022DA                     l5456:
  7136                           
  7137                           ; BSR set to: 0
  7138                           ;Lab8pB.c: 203: {
  7139                           ;Lab8pB.c: 204: update_LCD_PED_Count(direction, i-1);
  7140  0022DA  0100               	movlb	0	; () banked
  7141  0022DC  05D8               	decf	PED_Control@i& (0+255),w,b
  7142  0022DE  6E41               	movwf	update_LCD_PED_Count@count,c
  7143  0022E0  0100               	movlb	0	; () banked
  7144  0022E2  51D7               	movf	PED_Control@direction& (0+255),w,b
  7145  0022E4  ECF0  F00C         	call	_update_LCD_PED_Count
  7146                           
  7147                           ;Lab8pB.c: 205: Wait_One_Second_With_Beep();
  7148  0022E8  ECE9  F013         	call	_Wait_One_Second_With_Beep	;wreg free
  7149  0022EC  0100               	movlb	0	; () banked
  7150  0022EE  07D8               	decf	PED_Control@i& (0+255),f,b
  7151  0022F0  A0D8               	btfss	status,0,c
  7152  0022F2  07D9               	decf	(PED_Control@i+1)& (0+255),f,b
  7153  0022F4  D7E6               	goto	l5452
  7154                           
  7155                           ; BSR set to: 0
  7156  0022F6  D7F1               	goto	l5456
  7157  0022F8                     l5462:
  7158                           
  7159                           ; BSR set to: 0
  7160                           ;Lab8pB.c: 206: }
  7161                           ;Lab8pB.c: 207: if(direction){
  7162  0022F8  0100               	movlb	0	; () banked
  7163  0022FA  51D7               	movf	PED_Control@direction& (0+255),w,b
  7164  0022FC  0100               	movlb	0	; () banked
  7165  0022FE  B4D8               	btfsc	status,2,c
  7166  002300  D003               	goto	l5466
  7167                           
  7168                           ; BSR set to: 0
  7169                           ;Lab8pB.c: 208: EW_PED_SW = 0;
  7170  002302  0E00               	movlw	0
  7171  002304  6E4A               	movwf	_EW_PED_SW,c
  7172                           
  7173                           ;Lab8pB.c: 209: } else{
  7174  002306  D003               	goto	l201
  7175  002308                     l5466:
  7176                           
  7177                           ; BSR set to: 0
  7178                           ;Lab8pB.c: 210: NS_PED_SW = 0;
  7179  002308  0E00               	movlw	0
  7180  00230A  6E52               	movwf	_NS_PED_SW,c
  7181  00230C  D000               	goto	l201
  7182  00230E                     l201:
  7183                           
  7184                           ; BSR set to: 0
  7185  00230E  0012               	return		;funcret
  7186  002310                     __end_of_PED_Control:
  7187                           	opt stack 0
  7188                           tblptru	equ	0xFF8
  7189                           tblptrh	equ	0xFF7
  7190                           tblptrl	equ	0xFF6
  7191                           tablat	equ	0xFF5
  7192                           prodl	equ	0xFF3
  7193                           intcon	equ	0xFF2
  7194                           intcon2	equ	0xFF1
  7195                           intcon3	equ	0xFF0
  7196                           postinc0	equ	0xFEE
  7197                           wreg	equ	0xFE8
  7198                           postdec1	equ	0xFE5
  7199                           fsr1l	equ	0xFE1
  7200                           status	equ	0xFD8
  7201                           
  7202 ;; *************** function _update_LCD_PED_Count *****************
  7203 ;; Defined at:
  7204 ;;		line 206 in file "Main_Screen.c"
  7205 ;; Parameters:    Size  Location     Type
  7206 ;;  direction       1    wreg     unsigned char 
  7207 ;;  count           1   64[COMRAM] unsigned char 
  7208 ;; Auto vars:     Size  Location     Type
  7209 ;;  direction       1   65[COMRAM] unsigned char 
  7210 ;; Return value:  Size  Location     Type
  7211 ;;		None               void
  7212 ;; Registers used:
  7213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7214 ;; Tracked objects:
  7215 ;;		On entry : 0/0
  7216 ;;		On exit  : 0/0
  7217 ;;		Unchanged: 0/0
  7218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7219 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7220 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7221 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7222 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7223 ;;Total ram usage:        2 bytes
  7224 ;; Hardware stack levels used:    1
  7225 ;; Hardware stack levels required when called:    9
  7226 ;; This function calls:
  7227 ;;		___awdiv
  7228 ;;		___awmod
  7229 ;;		_drawtext
  7230 ;; This function is called by:
  7231 ;;		_PED_Control
  7232 ;; This function uses a non-reentrant model
  7233 ;;
  7234                           
  7235                           	psect	text31
  7236  0019E0                     __ptext31:
  7237                           	opt stack 0
  7238  0019E0                     _update_LCD_PED_Count:
  7239                           	opt stack 19
  7240                           
  7241                           ; BSR set to: 0
  7242                           ;incstack = 0
  7243                           ;update_LCD_PED_Count@direction stored from wreg
  7244  0019E0  6E42               	movwf	update_LCD_PED_Count@direction,c
  7245                           
  7246                           ;Main_Screen.c: 208: switch (direction)
  7247  0019E2  D061               	goto	l5226
  7248  0019E4                     l5212:
  7249                           
  7250                           ;Main_Screen.c: 212: PED_NS_Count[0] = count/10 + '0';
  7251  0019E4  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7252  0019E8  6A10               	clrf	___awdiv@dividend+1,c
  7253  0019EA  0E00               	movlw	0
  7254  0019EC  6E12               	movwf	___awdiv@divisor+1,c
  7255  0019EE  0E0A               	movlw	10
  7256  0019F0  6E11               	movwf	___awdiv@divisor,c
  7257  0019F2  EC71  F00E         	call	___awdiv	;wreg free
  7258  0019F6  500F               	movf	?___awdiv,w,c
  7259  0019F8  0F30               	addlw	48
  7260  0019FA  0100               	movlb	0	; () banked
  7261  0019FC  6FA7               	movwf	_PED_NS_Count& (0+255),b
  7262                           
  7263                           ;Main_Screen.c: 213: PED_NS_Count[1] = count%10 + '0';
  7264  0019FE  C041  F035         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7265  001A02  6A36               	clrf	___awmod@dividend+1,c
  7266  001A04  0E00               	movlw	0
  7267  001A06  6E38               	movwf	___awmod@divisor+1,c
  7268  001A08  0E0A               	movlw	10
  7269  001A0A  6E37               	movwf	___awmod@divisor,c
  7270  001A0C  EC1A  F010         	call	___awmod	;wreg free
  7271  001A10  5035               	movf	?___awmod,w,c
  7272  001A12  0F30               	addlw	48
  7273  001A14  0100               	movlb	0	; () banked
  7274  001A16  6FA8               	movwf	(_PED_NS_Count+1)& (0+255),b
  7275                           
  7276                           ; BSR set to: 0
  7277                           ;Main_Screen.c: 214: PORTD = (PORTD & 0xA5) | 0;
  7278  001A18  5083               	movf	3971,w,c	;volatile
  7279  001A1A  0BA5               	andlw	165
  7280  001A1C  6E83               	movwf	3971,c	;volatile
  7281                           
  7282                           ; BSR set to: 0
  7283                           ;Main_Screen.c: 216: drawtext(2, 40, PED_NS_Count, 0x001F, 0x0000, 2);
  7284  001A1E  0E28               	movlw	40
  7285  001A20  6E37               	movwf	drawtext@y,c
  7286  001A22  0EA7               	movlw	low _PED_NS_Count
  7287  001A24  6E38               	movwf	drawtext@_text,c
  7288  001A26  0E00               	movlw	high _PED_NS_Count
  7289  001A28  6E39               	movwf	drawtext@_text+1,c
  7290  001A2A  0E00               	movlw	0
  7291  001A2C  6E3B               	movwf	drawtext@color+1,c
  7292  001A2E  0E1F               	movlw	31
  7293  001A30  6E3A               	movwf	drawtext@color,c
  7294  001A32  0E00               	movlw	0
  7295  001A34  6E3D               	movwf	drawtext@bg+1,c
  7296  001A36  0E00               	movlw	0
  7297  001A38  6E3C               	movwf	drawtext@bg,c
  7298  001A3A  0E02               	movlw	2
  7299  001A3C  6E3E               	movwf	drawtext@size,c
  7300  001A3E  0E02               	movlw	2
  7301  001A40  EC24  F00A         	call	_drawtext
  7302                           
  7303                           ;Main_Screen.c: 217: break;
  7304  001A44  D038               	goto	l325
  7305  001A46                     l5218:
  7306                           
  7307                           ;Main_Screen.c: 221: PED_EW_Count[0] = count/10 + '0';
  7308  001A46  C041  F00F         	movff	update_LCD_PED_Count@count,___awdiv@dividend
  7309  001A4A  6A10               	clrf	___awdiv@dividend+1,c
  7310  001A4C  0E00               	movlw	0
  7311  001A4E  6E12               	movwf	___awdiv@divisor+1,c
  7312  001A50  0E0A               	movlw	10
  7313  001A52  6E11               	movwf	___awdiv@divisor,c
  7314  001A54  EC71  F00E         	call	___awdiv	;wreg free
  7315  001A58  500F               	movf	?___awdiv,w,c
  7316  001A5A  0F30               	addlw	48
  7317  001A5C  0100               	movlb	0	; () banked
  7318  001A5E  6FA4               	movwf	_PED_EW_Count& (0+255),b
  7319                           
  7320                           ;Main_Screen.c: 222: PED_EW_Count[1] = count%10 + '0';
  7321  001A60  C041  F035         	movff	update_LCD_PED_Count@count,___awmod@dividend
  7322  001A64  6A36               	clrf	___awmod@dividend+1,c
  7323  001A66  0E00               	movlw	0
  7324  001A68  6E38               	movwf	___awmod@divisor+1,c
  7325  001A6A  0E0A               	movlw	10
  7326  001A6C  6E37               	movwf	___awmod@divisor,c
  7327  001A6E  EC1A  F010         	call	___awmod	;wreg free
  7328  001A72  5035               	movf	?___awmod,w,c
  7329  001A74  0F30               	addlw	48
  7330  001A76  0100               	movlb	0	; () banked
  7331  001A78  6FA5               	movwf	(_PED_EW_Count+1)& (0+255),b
  7332                           
  7333                           ; BSR set to: 0
  7334                           ;Main_Screen.c: 223: PORTD = (PORTD & 0xA5) | 0;
  7335  001A7A  5083               	movf	3971,w,c	;volatile
  7336  001A7C  0BA5               	andlw	165
  7337  001A7E  6E83               	movwf	3971,c	;volatile
  7338                           
  7339                           ; BSR set to: 0
  7340                           ;Main_Screen.c: 225: drawtext(2, 100, PED_EW_Count, 0x07FF, 0x0000, 2);
  7341  001A80  0E64               	movlw	100
  7342  001A82  6E37               	movwf	drawtext@y,c
  7343  001A84  0EA4               	movlw	low _PED_EW_Count
  7344  001A86  6E38               	movwf	drawtext@_text,c
  7345  001A88  0E00               	movlw	high _PED_EW_Count
  7346  001A8A  6E39               	movwf	drawtext@_text+1,c
  7347  001A8C  0E07               	movlw	7
  7348  001A8E  6E3B               	movwf	drawtext@color+1,c
  7349  001A90  683A               	setf	drawtext@color,c
  7350  001A92  0E00               	movlw	0
  7351  001A94  6E3D               	movwf	drawtext@bg+1,c
  7352  001A96  0E00               	movlw	0
  7353  001A98  6E3C               	movwf	drawtext@bg,c
  7354  001A9A  0E02               	movlw	2
  7355  001A9C  6E3E               	movwf	drawtext@size,c
  7356  001A9E  0E02               	movlw	2
  7357  001AA0  EC24  F00A         	call	_drawtext
  7358                           
  7359                           ;Main_Screen.c: 227: }
  7360                           
  7361                           ;Main_Screen.c: 226: break;
  7362  001AA4  D008               	goto	l325
  7363  001AA6                     l5226:
  7364  001AA6  5042               	movf	update_LCD_PED_Count@direction,w,c
  7365                           
  7366                           ; Switch size 1, requested type "space"
  7367                           ; Number of cases is 2, Range of values is 0 to 2
  7368                           ; switch strategies available:
  7369                           ; Name         Instructions Cycles
  7370                           ; simple_byte            7     4 (average)
  7371                           ;	Chosen strategy is simple_byte
  7372  001AA8  0A00               	xorlw	0	; case 0
  7373  001AAA  B4D8               	btfsc	status,2,c
  7374  001AAC  D79B               	goto	l5212
  7375  001AAE  0A02               	xorlw	2	; case 2
  7376  001AB0  B4D8               	btfsc	status,2,c
  7377  001AB2  D7C9               	goto	l5218
  7378  001AB4  D000               	goto	l325
  7379  001AB6                     l325:
  7380  001AB6  0012               	return		;funcret
  7381  001AB8                     __end_of_update_LCD_PED_Count:
  7382                           	opt stack 0
  7383                           tblptru	equ	0xFF8
  7384                           tblptrh	equ	0xFF7
  7385                           tblptrl	equ	0xFF6
  7386                           tablat	equ	0xFF5
  7387                           prodl	equ	0xFF3
  7388                           intcon	equ	0xFF2
  7389                           intcon2	equ	0xFF1
  7390                           intcon3	equ	0xFF0
  7391                           postinc0	equ	0xFEE
  7392                           wreg	equ	0xFE8
  7393                           postdec1	equ	0xFE5
  7394                           fsr1l	equ	0xFE1
  7395                           status	equ	0xFD8
  7396                           
  7397 ;; *************** function ___awdiv *****************
  7398 ;; Defined at:
  7399 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awdiv.c"
  7400 ;; Parameters:    Size  Location     Type
  7401 ;;  dividend        2   14[COMRAM] int 
  7402 ;;  divisor         2   16[COMRAM] int 
  7403 ;; Auto vars:     Size  Location     Type
  7404 ;;  quotient        2   20[COMRAM] int 
  7405 ;;  sign            1   19[COMRAM] unsigned char 
  7406 ;;  counter         1   18[COMRAM] unsigned char 
  7407 ;; Return value:  Size  Location     Type
  7408 ;;                  2   14[COMRAM] int 
  7409 ;; Registers used:
  7410 ;;		wreg, status,2, status,0
  7411 ;; Tracked objects:
  7412 ;;		On entry : 0/0
  7413 ;;		On exit  : 0/0
  7414 ;;		Unchanged: 0/0
  7415 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7416 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7417 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7418 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7419 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7420 ;;Total ram usage:        8 bytes
  7421 ;; Hardware stack levels used:    1
  7422 ;; Hardware stack levels required when called:    2
  7423 ;; This function calls:
  7424 ;;		Nothing
  7425 ;; This function is called by:
  7426 ;;		_update_LCD_PED_Count
  7427 ;;		_update_LCD_count
  7428 ;;		_dec_2_bcd
  7429 ;; This function uses a non-reentrant model
  7430 ;;
  7431                           
  7432                           	psect	text32
  7433  001CE2                     __ptext32:
  7434                           	opt stack 0
  7435  001CE2                     ___awdiv:
  7436                           	opt stack 25
  7437                           
  7438                           ;incstack = 0
  7439  001CE2  0E00               	movlw	0
  7440  001CE4  6E14               	movwf	___awdiv@sign,c
  7441  001CE6  AE12               	btfss	___awdiv@divisor+1,7,c
  7442  001CE8  D007               	goto	l5144
  7443  001CEA  6C11               	negf	___awdiv@divisor,c
  7444  001CEC  1E12               	comf	___awdiv@divisor+1,f,c
  7445  001CEE  B0D8               	btfsc	status,0,c
  7446  001CF0  2A12               	incf	___awdiv@divisor+1,f,c
  7447  001CF2  0E01               	movlw	1
  7448  001CF4  6E14               	movwf	___awdiv@sign,c
  7449  001CF6  D000               	goto	l5144
  7450  001CF8                     l5144:
  7451  001CF8  AE10               	btfss	___awdiv@dividend+1,7,c
  7452  001CFA  D007               	goto	l5150
  7453  001CFC  6C0F               	negf	___awdiv@dividend,c
  7454  001CFE  1E10               	comf	___awdiv@dividend+1,f,c
  7455  001D00  B0D8               	btfsc	status,0,c
  7456  001D02  2A10               	incf	___awdiv@dividend+1,f,c
  7457  001D04  0E01               	movlw	1
  7458  001D06  1A14               	xorwf	___awdiv@sign,f,c
  7459  001D08  D000               	goto	l5150
  7460  001D0A                     l5150:
  7461  001D0A  0E00               	movlw	0
  7462  001D0C  6E16               	movwf	___awdiv@quotient+1,c
  7463  001D0E  0E00               	movlw	0
  7464  001D10  6E15               	movwf	___awdiv@quotient,c
  7465  001D12  5011               	movf	___awdiv@divisor,w,c
  7466  001D14  1012               	iorwf	___awdiv@divisor+1,w,c
  7467  001D16  B4D8               	btfsc	status,2,c
  7468  001D18  D021               	goto	l5172
  7469  001D1A  0E01               	movlw	1
  7470  001D1C  6E13               	movwf	___awdiv@counter,c
  7471  001D1E  D005               	goto	l5158
  7472  001D20                     l5156:
  7473  001D20  90D8               	bcf	status,0,c
  7474  001D22  3611               	rlcf	___awdiv@divisor,f,c
  7475  001D24  3612               	rlcf	___awdiv@divisor+1,f,c
  7476  001D26  2A13               	incf	___awdiv@counter,f,c
  7477  001D28  D000               	goto	l5158
  7478  001D2A                     l5158:
  7479  001D2A  BE12               	btfsc	___awdiv@divisor+1,7,c
  7480  001D2C  D002               	goto	l5160
  7481  001D2E  D7F8               	goto	l5156
  7482  001D30  D000               	goto	l5160
  7483  001D32                     l5160:
  7484  001D32  90D8               	bcf	status,0,c
  7485  001D34  3615               	rlcf	___awdiv@quotient,f,c
  7486  001D36  3616               	rlcf	___awdiv@quotient+1,f,c
  7487  001D38  5011               	movf	___awdiv@divisor,w,c
  7488  001D3A  5C0F               	subwf	___awdiv@dividend,w,c
  7489  001D3C  5012               	movf	___awdiv@divisor+1,w,c
  7490  001D3E  5810               	subwfb	___awdiv@dividend+1,w,c
  7491  001D40  A0D8               	btfss	status,0,c
  7492  001D42  D006               	goto	l5168
  7493  001D44  5011               	movf	___awdiv@divisor,w,c
  7494  001D46  5E0F               	subwf	___awdiv@dividend,f,c
  7495  001D48  5012               	movf	___awdiv@divisor+1,w,c
  7496  001D4A  5A10               	subwfb	___awdiv@dividend+1,f,c
  7497  001D4C  8015               	bsf	___awdiv@quotient,0,c
  7498  001D4E  D000               	goto	l5168
  7499  001D50                     l5168:
  7500  001D50  90D8               	bcf	status,0,c
  7501  001D52  3212               	rrcf	___awdiv@divisor+1,f,c
  7502  001D54  3211               	rrcf	___awdiv@divisor,f,c
  7503  001D56  2E13               	decfsz	___awdiv@counter,f,c
  7504  001D58  D7EC               	goto	l5160
  7505  001D5A  D000               	goto	l5172
  7506  001D5C                     l5172:
  7507  001D5C  5014               	movf	___awdiv@sign,w,c
  7508  001D5E  B4D8               	btfsc	status,2,c
  7509  001D60  D005               	goto	l5176
  7510  001D62  6C15               	negf	___awdiv@quotient,c
  7511  001D64  1E16               	comf	___awdiv@quotient+1,f,c
  7512  001D66  B0D8               	btfsc	status,0,c
  7513  001D68  2A16               	incf	___awdiv@quotient+1,f,c
  7514  001D6A  D000               	goto	l5176
  7515  001D6C                     l5176:
  7516  001D6C  C015  F00F         	movff	___awdiv@quotient,?___awdiv
  7517  001D70  C016  F010         	movff	___awdiv@quotient+1,?___awdiv+1
  7518  001D74  D000               	goto	l916
  7519  001D76                     l916:
  7520  001D76  0012               	return		;funcret
  7521  001D78                     __end_of___awdiv:
  7522                           	opt stack 0
  7523                           tblptru	equ	0xFF8
  7524                           tblptrh	equ	0xFF7
  7525                           tblptrl	equ	0xFF6
  7526                           tablat	equ	0xFF5
  7527                           prodl	equ	0xFF3
  7528                           intcon	equ	0xFF2
  7529                           intcon2	equ	0xFF1
  7530                           intcon3	equ	0xFF0
  7531                           postinc0	equ	0xFEE
  7532                           wreg	equ	0xFE8
  7533                           postdec1	equ	0xFE5
  7534                           fsr1l	equ	0xFE1
  7535                           status	equ	0xFD8
  7536                           
  7537 ;; *************** function _Wait_One_Second_With_Beep *****************
  7538 ;; Defined at:
  7539 ;;		line 304 in file "Lab8pB.c"
  7540 ;; Parameters:    Size  Location     Type
  7541 ;;		None
  7542 ;; Auto vars:     Size  Location     Type
  7543 ;;		None
  7544 ;; Return value:  Size  Location     Type
  7545 ;;		None               void
  7546 ;; Registers used:
  7547 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7548 ;; Tracked objects:
  7549 ;;		On entry : 0/0
  7550 ;;		On exit  : 0/0
  7551 ;;		Unchanged: 0/0
  7552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7554 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7555 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7556 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7557 ;;Total ram usage:        0 bytes
  7558 ;; Hardware stack levels used:    1
  7559 ;; Hardware stack levels required when called:   10
  7560 ;; This function calls:
  7561 ;;		_Activate_Buzzer
  7562 ;;		_Deactivate_Buzzer
  7563 ;;		_Draw_Star
  7564 ;;		_Erase_Star
  7565 ;;		_Wait_Half_Second
  7566 ;;		_update_LCD_misc
  7567 ;; This function is called by:
  7568 ;;		_PED_Control
  7569 ;; This function uses a non-reentrant model
  7570 ;;
  7571                           
  7572                           	psect	text33
  7573  0027D2                     __ptext33:
  7574                           	opt stack 0
  7575  0027D2                     _Wait_One_Second_With_Beep:
  7576                           	opt stack 18
  7577                           
  7578                           ;Lab8pB.c: 306: PORTDbits.RD7 = 1;
  7579                           
  7580                           ;incstack = 0
  7581  0027D2  8E83               	bsf	3971,7,c	;volatile
  7582                           
  7583                           ;Lab8pB.c: 307: Draw_Star();
  7584  0027D4  EC2F  F013         	call	_Draw_Star	;wreg free
  7585                           
  7586                           ;Lab8pB.c: 308: Activate_Buzzer();
  7587  0027D8  EC55  F014         	call	_Activate_Buzzer	;wreg free
  7588                           
  7589                           ;Lab8pB.c: 309: Wait_Half_Second();
  7590  0027DC  EC15  F014         	call	_Wait_Half_Second	;wreg free
  7591                           
  7592                           ;Lab8pB.c: 311: PORTDbits.RD7 = 0;
  7593  0027E0  9E83               	bcf	3971,7,c	;volatile
  7594                           
  7595                           ;Lab8pB.c: 312: Erase_Star();
  7596  0027E2  EC12  F013         	call	_Erase_Star	;wreg free
  7597                           
  7598                           ;Lab8pB.c: 313: Deactivate_Buzzer();
  7599  0027E6  EC85  F014         	call	_Deactivate_Buzzer	;wreg free
  7600                           
  7601                           ;Lab8pB.c: 314: Wait_Half_Second();
  7602  0027EA  EC15  F014         	call	_Wait_Half_Second	;wreg free
  7603                           
  7604                           ;Lab8pB.c: 315: update_LCD_misc();
  7605  0027EE  EC7D  F005         	call	_update_LCD_misc	;wreg free
  7606  0027F2  0012               	return		;funcret
  7607  0027F4                     __end_of_Wait_One_Second_With_Beep:
  7608                           	opt stack 0
  7609                           tblptru	equ	0xFF8
  7610                           tblptrh	equ	0xFF7
  7611                           tblptrl	equ	0xFF6
  7612                           tablat	equ	0xFF5
  7613                           prodl	equ	0xFF3
  7614                           intcon	equ	0xFF2
  7615                           intcon2	equ	0xFF1
  7616                           intcon3	equ	0xFF0
  7617                           postinc0	equ	0xFEE
  7618                           wreg	equ	0xFE8
  7619                           postdec1	equ	0xFE5
  7620                           fsr1l	equ	0xFE1
  7621                           status	equ	0xFD8
  7622                           
  7623 ;; *************** function _update_LCD_misc *****************
  7624 ;; Defined at:
  7625 ;;		line 261 in file "Main_Screen.c"
  7626 ;; Parameters:    Size  Location     Type
  7627 ;;		None
  7628 ;; Auto vars:     Size  Location     Type
  7629 ;;  volt            3    9[BANK0 ] float 
  7630 ;;  nStep           2    7[BANK0 ] int 
  7631 ;; Return value:  Size  Location     Type
  7632 ;;		None               void
  7633 ;; Registers used:
  7634 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7635 ;; Tracked objects:
  7636 ;;		On entry : 0/0
  7637 ;;		On exit  : 0/0
  7638 ;;		Unchanged: 0/0
  7639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7640 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7641 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7643 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7644 ;;Total ram usage:        5 bytes
  7645 ;; Hardware stack levels used:    1
  7646 ;; Hardware stack levels required when called:    9
  7647 ;; This function calls:
  7648 ;;		_Read_Volt
  7649 ;;		___awmod
  7650 ;;		___ftge
  7651 ;;		___ftmul
  7652 ;;		___fttol
  7653 ;;		_drawtext
  7654 ;;		_get_full_ADC
  7655 ;; This function is called by:
  7656 ;;		_Wait_One_Second
  7657 ;;		_Wait_One_Second_With_Beep
  7658 ;; This function uses a non-reentrant model
  7659 ;;
  7660                           
  7661                           	psect	text34
  7662  000AFA                     __ptext34:
  7663                           	opt stack 0
  7664  000AFA                     _update_LCD_misc:
  7665                           	opt stack 18
  7666                           
  7667                           ;Main_Screen.c: 263: int nStep = get_full_ADC();
  7668                           
  7669                           ;incstack = 0
  7670  000AFA  ECD6  F013         	call	_get_full_ADC	;wreg free
  7671  000AFE  C00F  F0D2         	movff	?_get_full_ADC,update_LCD_misc@nStep
  7672  000B02  C010  F0D3         	movff	?_get_full_ADC+1,update_LCD_misc@nStep+1
  7673                           
  7674                           ;Main_Screen.c: 264: float volt = Read_Volt (0);
  7675  000B06  0E00               	movlw	0
  7676  000B08  EC93  F010         	call	_Read_Volt
  7677  000B0C  C02A  F0D4         	movff	?_Read_Volt,update_LCD_misc@volt
  7678  000B10  C02B  F0D5         	movff	?_Read_Volt+1,update_LCD_misc@volt+1
  7679  000B14  C02C  F0D6         	movff	?_Read_Volt+2,update_LCD_misc@volt+2
  7680                           
  7681                           ;Main_Screen.c: 265: Light_Sensor = volt < 2.5 ? 1:0;
  7682  000B18  C0D4  F00F         	movff	update_LCD_misc@volt,___ftge@ff1
  7683  000B1C  C0D5  F010         	movff	update_LCD_misc@volt+1,___ftge@ff1+1
  7684  000B20  C0D6  F011         	movff	update_LCD_misc@volt+2,___ftge@ff1+2
  7685  000B24  0E00               	movlw	0
  7686  000B26  6E12               	movwf	___ftge@ff2,c
  7687  000B28  0E20               	movlw	32
  7688  000B2A  6E13               	movwf	___ftge@ff2+1,c
  7689  000B2C  0E40               	movlw	64
  7690  000B2E  6E14               	movwf	___ftge@ff2+2,c
  7691  000B30  ECBC  F00E         	call	___ftge	;wreg free
  7692  000B34  B0D8               	btfsc	status,0,c
  7693  000B36  D002               	goto	u3790
  7694  000B38  0E01               	movlw	1
  7695  000B3A  D001               	goto	u3800
  7696  000B3C                     u3790:
  7697  000B3C  0E00               	movlw	0
  7698  000B3E                     u3800:
  7699  000B3E  6E50               	movwf	_Light_Sensor,c
  7700                           
  7701                           ;Main_Screen.c: 266: Light_Sensor_Voltage_Txt[0] = ((int) volt + '0');
  7702  000B40  C0D4  F026         	movff	update_LCD_misc@volt,___fttol@f1
  7703  000B44  C0D5  F027         	movff	update_LCD_misc@volt+1,___fttol@f1+1
  7704  000B48  C0D6  F028         	movff	update_LCD_misc@volt+2,___fttol@f1+2
  7705  000B4C  EC9E  F00B         	call	___fttol	;wreg free
  7706  000B50  5026               	movf	?___fttol,w,c
  7707  000B52  0F30               	addlw	48
  7708  000B54  0100               	movlb	0	; () banked
  7709  000B56  6F96               	movwf	_Light_Sensor_Voltage_Txt& (0+255),b
  7710                           
  7711                           ; BSR set to: 0
  7712                           ;Main_Screen.c: 267: Light_Sensor_Voltage_Txt[2] = ((((int) (volt*10))%10) + '0');
  7713  000B58  0E00               	movlw	0
  7714  000B5A  6E1A               	movwf	___ftmul@f2,c
  7715  000B5C  0E20               	movlw	32
  7716  000B5E  6E1B               	movwf	___ftmul@f2+1,c
  7717  000B60  0E41               	movlw	65
  7718  000B62  6E1C               	movwf	___ftmul@f2+2,c
  7719  000B64  C0D4  F017         	movff	update_LCD_misc@volt,___ftmul@f1
  7720  000B68  C0D5  F018         	movff	update_LCD_misc@volt+1,___ftmul@f1+1
  7721  000B6C  C0D6  F019         	movff	update_LCD_misc@volt+2,___ftmul@f1+2
  7722  000B70  ECA9  F00A         	call	___ftmul	;wreg free
  7723  000B74  C017  F026         	movff	?___ftmul,___fttol@f1
  7724  000B78  C018  F027         	movff	?___ftmul+1,___fttol@f1+1
  7725  000B7C  C019  F028         	movff	?___ftmul+2,___fttol@f1+2
  7726  000B80  EC9E  F00B         	call	___fttol	;wreg free
  7727  000B84  C026  F035         	movff	?___fttol,___awmod@dividend
  7728  000B88  C027  F036         	movff	?___fttol+1,___awmod@dividend+1
  7729  000B8C  0E00               	movlw	0
  7730  000B8E  6E38               	movwf	___awmod@divisor+1,c
  7731  000B90  0E0A               	movlw	10
  7732  000B92  6E37               	movwf	___awmod@divisor,c
  7733  000B94  EC1A  F010         	call	___awmod	;wreg free
  7734  000B98  5035               	movf	?___awmod,w,c
  7735  000B9A  0F30               	addlw	48
  7736  000B9C  0100               	movlb	0	; () banked
  7737  000B9E  6F98               	movwf	(_Light_Sensor_Voltage_Txt+2)& (0+255),b
  7738                           
  7739                           ; BSR set to: 0
  7740                           ;Main_Screen.c: 268: if (Light_Sensor == 0) Light_Sensor_Mode_Txt[1] = 'N'; else Light_S
      +                          ensor_Mode_Txt[1] = 'D';
  7741  000BA0  5050               	movf	_Light_Sensor,w,c
  7742  000BA2  A4D8               	btfss	status,2,c
  7743  000BA4  D002               	goto	l5010
  7744                           
  7745                           ; BSR set to: 0
  7746  000BA6  0E4E               	movlw	78
  7747  000BA8  D001               	goto	L10
  7748  000BAA                     l5010:
  7749                           
  7750                           ; BSR set to: 0
  7751  000BAA  0E44               	movlw	68
  7752  000BAC                     L10:
  7753  000BAC  6E62               	movwf	_Light_Sensor_Mode_Txt+1,c
  7754                           
  7755                           ; BSR set to: 0
  7756                           ;Main_Screen.c: 269: if (MODE == 0) Act_Mode_Txt[0] = 'N'; else Act_Mode_Txt[0] = 'D';
  7757  000BAE  5051               	movf	_MODE,w,c
  7758  000BB0  A4D8               	btfss	status,2,c
  7759  000BB2  D002               	goto	l5014
  7760                           
  7761                           ; BSR set to: 0
  7762  000BB4  0E4E               	movlw	78
  7763  000BB6  D001               	goto	L11
  7764  000BB8                     l5014:
  7765                           
  7766                           ; BSR set to: 0
  7767  000BB8  0E44               	movlw	68
  7768  000BBA                     L11:
  7769  000BBA  6E64               	movwf	_Act_Mode_Txt,c
  7770  000BBC  D000               	goto	l5016
  7771  000BBE                     l5016:
  7772                           
  7773                           ; BSR set to: 0
  7774                           ;Main_Screen.c: 271: SW_EWPED = EW_PED_SW;
  7775  000BBE  C04A  F055         	movff	_EW_PED_SW,_SW_EWPED
  7776                           
  7777                           ; BSR set to: 0
  7778                           ;Main_Screen.c: 272: SW_EWLT = PORTAbits.RA4;
  7779  000BC2  0E00               	movlw	0
  7780  000BC4  B880               	btfsc	3968,4,c	;volatile
  7781  000BC6  0E01               	movlw	1
  7782  000BC8  6E54               	movwf	_SW_EWLT,c
  7783                           
  7784                           ; BSR set to: 0
  7785                           ;Main_Screen.c: 273: SW_NSPED = NS_PED_SW;
  7786  000BCA  C052  F057         	movff	_NS_PED_SW,_SW_NSPED
  7787                           
  7788                           ; BSR set to: 0
  7789                           ;Main_Screen.c: 274: SW_NSLT = PORTAbits.RA1;
  7790  000BCE  0E00               	movlw	0
  7791  000BD0  B280               	btfsc	3968,1,c	;volatile
  7792  000BD2  0E01               	movlw	1
  7793  000BD4  6E56               	movwf	_SW_NSLT,c
  7794                           
  7795                           ;Main_Screen.c: 277: if (SW_NSPED == 0) SW_NSPED_Txt[0] = '0'; else SW_NSPED_Txt[0] = '1
      +                          ';
  7796  000BD6  5057               	movf	_SW_NSPED,w,c
  7797  000BD8  A4D8               	btfss	status,2,c
  7798  000BDA  D002               	goto	l5026
  7799                           
  7800                           ; BSR set to: 0
  7801  000BDC  0E30               	movlw	48
  7802  000BDE  D001               	goto	L12
  7803  000BE0                     l5026:
  7804                           
  7805                           ; BSR set to: 0
  7806  000BE0  0E31               	movlw	49
  7807  000BE2                     L12:
  7808  000BE2  6E70               	movwf	_SW_NSPED_Txt,c
  7809                           
  7810                           ; BSR set to: 0
  7811                           ;Main_Screen.c: 279: if (SW_EWPED == 0) SW_EWPED_Txt[0] = '0'; else SW_EWPED_Txt[0] = '1
      +                          ';
  7812  000BE4  5055               	movf	_SW_EWPED,w,c
  7813  000BE6  A4D8               	btfss	status,2,c
  7814  000BE8  D002               	goto	l5030
  7815                           
  7816                           ; BSR set to: 0
  7817  000BEA  0E30               	movlw	48
  7818  000BEC  D001               	goto	L13
  7819  000BEE                     l5030:
  7820                           
  7821                           ; BSR set to: 0
  7822  000BEE  0E31               	movlw	49
  7823  000BF0                     L13:
  7824  000BF0  6E6C               	movwf	_SW_EWPED_Txt,c
  7825                           
  7826                           ; BSR set to: 0
  7827                           ;Main_Screen.c: 280: if (SW_NSLT == 0) SW_NSLT_Txt[0] = '0'; else SW_NSLT_Txt[0] = '1';
  7828  000BF2  5056               	movf	_SW_NSLT,w,c
  7829  000BF4  A4D8               	btfss	status,2,c
  7830  000BF6  D002               	goto	l5034
  7831                           
  7832                           ; BSR set to: 0
  7833  000BF8  0E30               	movlw	48
  7834  000BFA  D001               	goto	L14
  7835  000BFC                     l5034:
  7836                           
  7837                           ; BSR set to: 0
  7838  000BFC  0E31               	movlw	49
  7839  000BFE                     L14:
  7840  000BFE  6E6E               	movwf	_SW_NSLT_Txt,c
  7841                           
  7842                           ; BSR set to: 0
  7843                           ;Main_Screen.c: 281: if (SW_EWLT == 0) SW_EWLT_Txt[0] = '0'; else SW_EWLT_Txt[0] = '1';
  7844  000C00  5054               	movf	_SW_EWLT,w,c
  7845  000C02  A4D8               	btfss	status,2,c
  7846  000C04  D002               	goto	l5038
  7847                           
  7848                           ; BSR set to: 0
  7849  000C06  0E30               	movlw	48
  7850  000C08  D001               	goto	L15
  7851  000C0A                     l5038:
  7852                           
  7853                           ; BSR set to: 0
  7854  000C0A  0E31               	movlw	49
  7855  000C0C                     L15:
  7856  000C0C  6E6A               	movwf	_SW_EWLT_Txt,c
  7857                           
  7858                           ; BSR set to: 0
  7859                           ;Main_Screen.c: 283: if (Flashing_Request == 0) FlashingR_Txt[0] = '0';
  7860  000C0E  504B               	movf	_Flashing_Request,w,c
  7861  000C10  A4D8               	btfss	status,2,c
  7862  000C12  D002               	goto	l5042
  7863                           
  7864                           ; BSR set to: 0
  7865  000C14  0E30               	movlw	48
  7866  000C16  D001               	goto	L16
  7867  000C18                     l5042:
  7868                           
  7869                           ; BSR set to: 0
  7870                           ;Main_Screen.c: 284: else FlashingR_Txt[0] = '1';
  7871  000C18  0E31               	movlw	49
  7872  000C1A                     L16:
  7873  000C1A  6E66               	movwf	_FlashingR_Txt,c
  7874                           
  7875                           ; BSR set to: 0
  7876                           ;Main_Screen.c: 285: if (Flashing_Status == 0) FlashingS_Txt[0] = '0';
  7877  000C1C  504C               	movf	_Flashing_Status,w,c
  7878  000C1E  A4D8               	btfss	status,2,c
  7879  000C20  D002               	goto	l5046
  7880                           
  7881                           ; BSR set to: 0
  7882  000C22  0E30               	movlw	48
  7883  000C24  D001               	goto	L17
  7884  000C26                     l5046:
  7885                           
  7886                           ; BSR set to: 0
  7887                           ;Main_Screen.c: 286: else FlashingS_Txt[0] = '1';
  7888  000C26  0E31               	movlw	49
  7889  000C28                     L17:
  7890  000C28  6E68               	movwf	_FlashingS_Txt,c
  7891  000C2A  D000               	goto	l5048
  7892  000C2C                     l5048:
  7893                           
  7894                           ; BSR set to: 0
  7895                           ;Main_Screen.c: 288: drawtext(35, 2, Act_Mode_Txt, 0xFFFF, 0x0000, 1);
  7896  000C2C  0E02               	movlw	2
  7897  000C2E  6E37               	movwf	drawtext@y,c
  7898  000C30  0E64               	movlw	low _Act_Mode_Txt
  7899  000C32  6E38               	movwf	drawtext@_text,c
  7900  000C34  0E00               	movlw	high _Act_Mode_Txt
  7901  000C36  6E39               	movwf	drawtext@_text+1,c
  7902  000C38  0EFF               	movlw	255
  7903  000C3A  6E3B               	movwf	drawtext@color+1,c
  7904  000C3C  683A               	setf	drawtext@color,c
  7905  000C3E  0E00               	movlw	0
  7906  000C40  6E3D               	movwf	drawtext@bg+1,c
  7907  000C42  0E00               	movlw	0
  7908  000C44  6E3C               	movwf	drawtext@bg,c
  7909  000C46  0E01               	movlw	1
  7910  000C48  6E3E               	movwf	drawtext@size,c
  7911  000C4A  0E23               	movlw	35
  7912  000C4C  EC24  F00A         	call	_drawtext
  7913                           
  7914                           ;Main_Screen.c: 289: drawtext(75, 2, Light_Sensor_Voltage_Txt, 0xFFFF, 0x0000, 1);
  7915  000C50  0E02               	movlw	2
  7916  000C52  6E37               	movwf	drawtext@y,c
  7917  000C54  0E96               	movlw	low _Light_Sensor_Voltage_Txt
  7918  000C56  6E38               	movwf	drawtext@_text,c
  7919  000C58  0E00               	movlw	high _Light_Sensor_Voltage_Txt
  7920  000C5A  6E39               	movwf	drawtext@_text+1,c
  7921  000C5C  0EFF               	movlw	255
  7922  000C5E  6E3B               	movwf	drawtext@color+1,c
  7923  000C60  683A               	setf	drawtext@color,c
  7924  000C62  0E00               	movlw	0
  7925  000C64  6E3D               	movwf	drawtext@bg+1,c
  7926  000C66  0E00               	movlw	0
  7927  000C68  6E3C               	movwf	drawtext@bg,c
  7928  000C6A  0E01               	movlw	1
  7929  000C6C  6E3E               	movwf	drawtext@size,c
  7930  000C6E  0E4B               	movlw	75
  7931  000C70  EC24  F00A         	call	_drawtext
  7932                           
  7933                           ;Main_Screen.c: 290: drawtext(100, 2, Light_Sensor_Mode_Txt, 0xFFFF, 0x0000, 1);
  7934  000C74  0E02               	movlw	2
  7935  000C76  6E37               	movwf	drawtext@y,c
  7936  000C78  0E61               	movlw	low _Light_Sensor_Mode_Txt
  7937  000C7A  6E38               	movwf	drawtext@_text,c
  7938  000C7C  0E00               	movlw	high _Light_Sensor_Mode_Txt
  7939  000C7E  6E39               	movwf	drawtext@_text+1,c
  7940  000C80  0EFF               	movlw	255
  7941  000C82  6E3B               	movwf	drawtext@color+1,c
  7942  000C84  683A               	setf	drawtext@color,c
  7943  000C86  0E00               	movlw	0
  7944  000C88  6E3D               	movwf	drawtext@bg+1,c
  7945  000C8A  0E00               	movlw	0
  7946  000C8C  6E3C               	movwf	drawtext@bg,c
  7947  000C8E  0E01               	movlw	1
  7948  000C90  6E3E               	movwf	drawtext@size,c
  7949  000C92  0E64               	movlw	100
  7950  000C94  EC24  F00A         	call	_drawtext
  7951                           
  7952                           ;Main_Screen.c: 294: drawtext(8, 11+9, SW_NSPED_Txt, 0xFFFF, 0x0000, 1);
  7953  000C98  0E14               	movlw	20
  7954  000C9A  6E37               	movwf	drawtext@y,c
  7955  000C9C  0E70               	movlw	low _SW_NSPED_Txt
  7956  000C9E  6E38               	movwf	drawtext@_text,c
  7957  000CA0  0E00               	movlw	high _SW_NSPED_Txt
  7958  000CA2  6E39               	movwf	drawtext@_text+1,c
  7959  000CA4  0EFF               	movlw	255
  7960  000CA6  6E3B               	movwf	drawtext@color+1,c
  7961  000CA8  683A               	setf	drawtext@color,c
  7962  000CAA  0E00               	movlw	0
  7963  000CAC  6E3D               	movwf	drawtext@bg+1,c
  7964  000CAE  0E00               	movlw	0
  7965  000CB0  6E3C               	movwf	drawtext@bg,c
  7966  000CB2  0E01               	movlw	1
  7967  000CB4  6E3E               	movwf	drawtext@size,c
  7968  000CB6  0E08               	movlw	8
  7969  000CB8  EC24  F00A         	call	_drawtext
  7970                           
  7971                           ;Main_Screen.c: 295: drawtext(35, 11+9, SW_NSLT_Txt, 0xFFFF, 0x0000, 1);
  7972  000CBC  0E14               	movlw	20
  7973  000CBE  6E37               	movwf	drawtext@y,c
  7974  000CC0  0E6E               	movlw	low _SW_NSLT_Txt
  7975  000CC2  6E38               	movwf	drawtext@_text,c
  7976  000CC4  0E00               	movlw	high _SW_NSLT_Txt
  7977  000CC6  6E39               	movwf	drawtext@_text+1,c
  7978  000CC8  0EFF               	movlw	255
  7979  000CCA  6E3B               	movwf	drawtext@color+1,c
  7980  000CCC  683A               	setf	drawtext@color,c
  7981  000CCE  0E00               	movlw	0
  7982  000CD0  6E3D               	movwf	drawtext@bg+1,c
  7983  000CD2  0E00               	movlw	0
  7984  000CD4  6E3C               	movwf	drawtext@bg,c
  7985  000CD6  0E01               	movlw	1
  7986  000CD8  6E3E               	movwf	drawtext@size,c
  7987  000CDA  0E23               	movlw	35
  7988  000CDC  EC24  F00A         	call	_drawtext
  7989                           
  7990                           ;Main_Screen.c: 296: drawtext(60, 11+9, SW_EWPED_Txt, 0xFFFF, 0x0000, 1);
  7991  000CE0  0E14               	movlw	20
  7992  000CE2  6E37               	movwf	drawtext@y,c
  7993  000CE4  0E6C               	movlw	low _SW_EWPED_Txt
  7994  000CE6  6E38               	movwf	drawtext@_text,c
  7995  000CE8  0E00               	movlw	high _SW_EWPED_Txt
  7996  000CEA  6E39               	movwf	drawtext@_text+1,c
  7997  000CEC  0EFF               	movlw	255
  7998  000CEE  6E3B               	movwf	drawtext@color+1,c
  7999  000CF0  683A               	setf	drawtext@color,c
  8000  000CF2  0E00               	movlw	0
  8001  000CF4  6E3D               	movwf	drawtext@bg+1,c
  8002  000CF6  0E00               	movlw	0
  8003  000CF8  6E3C               	movwf	drawtext@bg,c
  8004  000CFA  0E01               	movlw	1
  8005  000CFC  6E3E               	movwf	drawtext@size,c
  8006  000CFE  0E3C               	movlw	60
  8007  000D00  EC24  F00A         	call	_drawtext
  8008                           
  8009                           ;Main_Screen.c: 297: drawtext(85, 11+9, SW_EWLT_Txt, 0xFFFF, 0x0000, 1);
  8010  000D04  0E14               	movlw	20
  8011  000D06  6E37               	movwf	drawtext@y,c
  8012  000D08  0E6A               	movlw	low _SW_EWLT_Txt
  8013  000D0A  6E38               	movwf	drawtext@_text,c
  8014  000D0C  0E00               	movlw	high _SW_EWLT_Txt
  8015  000D0E  6E39               	movwf	drawtext@_text+1,c
  8016  000D10  0EFF               	movlw	255
  8017  000D12  6E3B               	movwf	drawtext@color+1,c
  8018  000D14  683A               	setf	drawtext@color,c
  8019  000D16  0E00               	movlw	0
  8020  000D18  6E3D               	movwf	drawtext@bg+1,c
  8021  000D1A  0E00               	movlw	0
  8022  000D1C  6E3C               	movwf	drawtext@bg,c
  8023  000D1E  0E01               	movlw	1
  8024  000D20  6E3E               	movwf	drawtext@size,c
  8025  000D22  0E55               	movlw	85
  8026  000D24  EC24  F00A         	call	_drawtext
  8027                           
  8028                           ;Main_Screen.c: 298: drawtext(108, 11+9, FlashingR_Txt, 0xFFFF, 0x0000, 1);
  8029  000D28  0E14               	movlw	20
  8030  000D2A  6E37               	movwf	drawtext@y,c
  8031  000D2C  0E66               	movlw	low _FlashingR_Txt
  8032  000D2E  6E38               	movwf	drawtext@_text,c
  8033  000D30  0E00               	movlw	high _FlashingR_Txt
  8034  000D32  6E39               	movwf	drawtext@_text+1,c
  8035  000D34  0EFF               	movlw	255
  8036  000D36  6E3B               	movwf	drawtext@color+1,c
  8037  000D38  683A               	setf	drawtext@color,c
  8038  000D3A  0E00               	movlw	0
  8039  000D3C  6E3D               	movwf	drawtext@bg+1,c
  8040  000D3E  0E00               	movlw	0
  8041  000D40  6E3C               	movwf	drawtext@bg,c
  8042  000D42  0E01               	movlw	1
  8043  000D44  6E3E               	movwf	drawtext@size,c
  8044  000D46  0E6C               	movlw	108
  8045  000D48  EC24  F00A         	call	_drawtext
  8046                           
  8047                           ;Main_Screen.c: 299: drawtext(119, 11+9, FlashingS_Txt, 0xFFFF, 0x0000, 1);
  8048  000D4C  0E14               	movlw	20
  8049  000D4E  6E37               	movwf	drawtext@y,c
  8050  000D50  0E68               	movlw	low _FlashingS_Txt
  8051  000D52  6E38               	movwf	drawtext@_text,c
  8052  000D54  0E00               	movlw	high _FlashingS_Txt
  8053  000D56  6E39               	movwf	drawtext@_text+1,c
  8054  000D58  0EFF               	movlw	255
  8055  000D5A  6E3B               	movwf	drawtext@color+1,c
  8056  000D5C  683A               	setf	drawtext@color,c
  8057  000D5E  0E00               	movlw	0
  8058  000D60  6E3D               	movwf	drawtext@bg+1,c
  8059  000D62  0E00               	movlw	0
  8060  000D64  6E3C               	movwf	drawtext@bg,c
  8061  000D66  0E01               	movlw	1
  8062  000D68  6E3E               	movwf	drawtext@size,c
  8063  000D6A  0E77               	movlw	119
  8064  000D6C  EC24  F00A         	call	_drawtext
  8065  000D70  0012               	return		;funcret
  8066  000D72                     __end_of_update_LCD_misc:
  8067                           	opt stack 0
  8068                           tblptru	equ	0xFF8
  8069                           tblptrh	equ	0xFF7
  8070                           tblptrl	equ	0xFF6
  8071                           tablat	equ	0xFF5
  8072                           prodl	equ	0xFF3
  8073                           intcon	equ	0xFF2
  8074                           intcon2	equ	0xFF1
  8075                           intcon3	equ	0xFF0
  8076                           postinc0	equ	0xFEE
  8077                           wreg	equ	0xFE8
  8078                           postdec1	equ	0xFE5
  8079                           fsr1l	equ	0xFE1
  8080                           status	equ	0xFD8
  8081                           
  8082 ;; *************** function ___fttol *****************
  8083 ;; Defined at:
  8084 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\fttol.c"
  8085 ;; Parameters:    Size  Location     Type
  8086 ;;  f1              3   37[COMRAM] float 
  8087 ;; Auto vars:     Size  Location     Type
  8088 ;;  lval            4   47[COMRAM] unsigned long 
  8089 ;;  exp1            1   51[COMRAM] unsigned char 
  8090 ;;  sign1           1   46[COMRAM] unsigned char 
  8091 ;; Return value:  Size  Location     Type
  8092 ;;                  4   37[COMRAM] long 
  8093 ;; Registers used:
  8094 ;;		wreg, status,2, status,0
  8095 ;; Tracked objects:
  8096 ;;		On entry : 0/0
  8097 ;;		On exit  : 0/0
  8098 ;;		Unchanged: 0/0
  8099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8100 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8101 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8102 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8103 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8104 ;;Total ram usage:       15 bytes
  8105 ;; Hardware stack levels used:    1
  8106 ;; Hardware stack levels required when called:    2
  8107 ;; This function calls:
  8108 ;;		Nothing
  8109 ;; This function is called by:
  8110 ;;		_update_LCD_misc
  8111 ;; This function uses a non-reentrant model
  8112 ;;
  8113                           
  8114                           	psect	text35
  8115  00173C                     __ptext35:
  8116                           	opt stack 0
  8117  00173C                     ___fttol:
  8118                           	opt stack 24
  8119                           
  8120                           ;incstack = 0
  8121  00173C  C028  F02A         	movff	___fttol@f1+2,??___fttol
  8122  001740  6A2B               	clrf	(??___fttol+1)& (0+255),c
  8123  001742  6A2C               	clrf	(??___fttol+2)& (0+255),c
  8124  001744  3427               	rlcf	___fttol@f1+1,w,c
  8125  001746  362A               	rlcf	??___fttol& (0+255),f,c
  8126  001748  E301               	bnc	u3701
  8127  00174A  802B               	bsf	(??___fttol+1)& (0+255),0,c
  8128  00174C                     u3701:
  8129  00174C  502A               	movf	??___fttol,w,c
  8130  00174E  6E34               	movwf	___fttol@exp1,c
  8131  001750  5034               	movf	___fttol@exp1,w,c
  8132  001752  A4D8               	btfss	status,2,c
  8133  001754  D002               	goto	l4942
  8134  001756  D039               	goto	l4966
  8135  001758  D063               	goto	l1139
  8136  00175A                     l4942:
  8137  00175A  0E17               	movlw	23
  8138  00175C  6E2A               	movwf	??___fttol& (0+255),c
  8139  00175E  C026  F02B         	movff	___fttol@f1,??___fttol+1
  8140  001762  C027  F02C         	movff	___fttol@f1+1,??___fttol+2
  8141  001766  C028  F02D         	movff	___fttol@f1+2,??___fttol+3
  8142  00176A  282A               	incf	??___fttol,w,c
  8143  00176C  6E2E               	movwf	(??___fttol+4)& (0+255),c
  8144  00176E  D004               	goto	u3720
  8145  001770                     u3725:
  8146  001770  90D8               	bcf	status,0,c
  8147  001772  322D               	rrcf	??___fttol+3,f,c
  8148  001774  322C               	rrcf	??___fttol+2,f,c
  8149  001776  322B               	rrcf	??___fttol+1,f,c
  8150  001778                     u3720:
  8151  001778  2E2E               	decfsz	(??___fttol+4)& (0+255),f,c
  8152  00177A  D7FA               	goto	u3725
  8153  00177C  502B               	movf	??___fttol+1,w,c
  8154  00177E  6E2F               	movwf	___fttol@sign1,c
  8155  001780  8E27               	bsf	___fttol@f1+1,7,c
  8156  001782  0EFF               	movlw	255
  8157  001784  1626               	andwf	___fttol@f1,f,c
  8158  001786  0EFF               	movlw	255
  8159  001788  1627               	andwf	___fttol@f1+1,f,c
  8160  00178A  0E00               	movlw	0
  8161  00178C  1628               	andwf	___fttol@f1+2,f,c
  8162  00178E  5026               	movf	___fttol@f1,w,c
  8163  001790  6E30               	movwf	___fttol@lval,c
  8164  001792  5027               	movf	___fttol@f1+1,w,c
  8165  001794  6E31               	movwf	___fttol@lval+1,c
  8166  001796  5028               	movf	___fttol@f1+2,w,c
  8167  001798  6E32               	movwf	___fttol@lval+2,c
  8168  00179A  6A33               	clrf	___fttol@lval+3,c
  8169  00179C  0E8E               	movlw	142
  8170  00179E  5E34               	subwf	___fttol@exp1,f,c
  8171  0017A0  AE34               	btfss	___fttol@exp1,7,c
  8172  0017A2  D010               	goto	l4964
  8173  0017A4  5034               	movf	___fttol@exp1,w,c
  8174  0017A6  0A80               	xorlw	128
  8175  0017A8  0F8F               	addlw	143
  8176  0017AA  B0D8               	btfsc	status,0,c
  8177  0017AC  D003               	goto	l4960
  8178  0017AE  D00D               	goto	l4966
  8179  0017B0  D037               	goto	l1139
  8180  0017B2  D000               	goto	l4960
  8181  0017B4                     l4960:
  8182  0017B4  90D8               	bcf	status,0,c
  8183  0017B6  3233               	rrcf	___fttol@lval+3,f,c
  8184  0017B8  3232               	rrcf	___fttol@lval+2,f,c
  8185  0017BA  3231               	rrcf	___fttol@lval+1,f,c
  8186  0017BC  3230               	rrcf	___fttol@lval,f,c
  8187  0017BE  3E34               	incfsz	___fttol@exp1,f,c
  8188  0017C0  D7F9               	goto	l4960
  8189  0017C2  D019               	goto	l4974
  8190  0017C4                     l4964:
  8191  0017C4  0E17               	movlw	23
  8192  0017C6  6434               	cpfsgt	___fttol@exp1,c
  8193  0017C8  D011               	goto	l4972
  8194  0017CA                     l4966:
  8195  0017CA  0E00               	movlw	0
  8196  0017CC  6E26               	movwf	?___fttol,c
  8197  0017CE  0E00               	movlw	0
  8198  0017D0  6E27               	movwf	?___fttol+1,c
  8199  0017D2  0E00               	movlw	0
  8200  0017D4  6E28               	movwf	?___fttol+2,c
  8201  0017D6  0E00               	movlw	0
  8202  0017D8  6E29               	movwf	?___fttol+3,c
  8203  0017DA  D022               	goto	l1139
  8204  0017DC  D007               	goto	l4972
  8205  0017DE                     l4970:
  8206  0017DE  90D8               	bcf	status,0,c
  8207  0017E0  3630               	rlcf	___fttol@lval,f,c
  8208  0017E2  3631               	rlcf	___fttol@lval+1,f,c
  8209  0017E4  3632               	rlcf	___fttol@lval+2,f,c
  8210  0017E6  3633               	rlcf	___fttol@lval+3,f,c
  8211  0017E8  0634               	decf	___fttol@exp1,f,c
  8212  0017EA  D000               	goto	l4972
  8213  0017EC                     l4972:
  8214  0017EC  5034               	movf	___fttol@exp1,w,c
  8215  0017EE  B4D8               	btfsc	status,2,c
  8216  0017F0  D002               	goto	l4974
  8217  0017F2  D7F5               	goto	l4970
  8218  0017F4  D000               	goto	l4974
  8219  0017F6                     l4974:
  8220  0017F6  502F               	movf	___fttol@sign1,w,c
  8221  0017F8  B4D8               	btfsc	status,2,c
  8222  0017FA  D009               	goto	l4978
  8223  0017FC  1E33               	comf	___fttol@lval+3,f,c
  8224  0017FE  1E32               	comf	___fttol@lval+2,f,c
  8225  001800  1E31               	comf	___fttol@lval+1,f,c
  8226  001802  6C30               	negf	___fttol@lval,c
  8227  001804  0E00               	movlw	0
  8228  001806  2231               	addwfc	___fttol@lval+1,f,c
  8229  001808  2232               	addwfc	___fttol@lval+2,f,c
  8230  00180A  2233               	addwfc	___fttol@lval+3,f,c
  8231  00180C  D000               	goto	l4978
  8232  00180E                     l4978:
  8233  00180E  C030  F026         	movff	___fttol@lval,?___fttol
  8234  001812  C031  F027         	movff	___fttol@lval+1,?___fttol+1
  8235  001816  C032  F028         	movff	___fttol@lval+2,?___fttol+2
  8236  00181A  C033  F029         	movff	___fttol@lval+3,?___fttol+3
  8237  00181E  D000               	goto	l1139
  8238  001820                     l1139:
  8239  001820  0012               	return		;funcret
  8240  001822                     __end_of___fttol:
  8241                           	opt stack 0
  8242                           tblptru	equ	0xFF8
  8243                           tblptrh	equ	0xFF7
  8244                           tblptrl	equ	0xFF6
  8245                           tablat	equ	0xFF5
  8246                           prodl	equ	0xFF3
  8247                           intcon	equ	0xFF2
  8248                           intcon2	equ	0xFF1
  8249                           intcon3	equ	0xFF0
  8250                           postinc0	equ	0xFEE
  8251                           wreg	equ	0xFE8
  8252                           postdec1	equ	0xFE5
  8253                           fsr1l	equ	0xFE1
  8254                           status	equ	0xFD8
  8255                           
  8256 ;; *************** function ___ftmul *****************
  8257 ;; Defined at:
  8258 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftmul.c"
  8259 ;; Parameters:    Size  Location     Type
  8260 ;;  f1              3   22[COMRAM] float 
  8261 ;;  f2              3   25[COMRAM] float 
  8262 ;; Auto vars:     Size  Location     Type
  8263 ;;  f3_as_produc    3   32[COMRAM] unsigned um
  8264 ;;  sign            1   36[COMRAM] unsigned char 
  8265 ;;  cntr            1   35[COMRAM] unsigned char 
  8266 ;;  exp             1   31[COMRAM] unsigned char 
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  3   22[COMRAM] float 
  8269 ;; Registers used:
  8270 ;;		wreg, status,2, status,0, cstack
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:       15 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:    3
  8283 ;; This function calls:
  8284 ;;		___ftpack
  8285 ;; This function is called by:
  8286 ;;		_update_LCD_misc
  8287 ;; This function uses a non-reentrant model
  8288 ;;
  8289                           
  8290                           	psect	text36
  8291  001552                     __ptext36:
  8292                           	opt stack 0
  8293  001552                     ___ftmul:
  8294                           	opt stack 23
  8295                           
  8296                           ;incstack = 0
  8297  001552  C019  F01D         	movff	___ftmul@f1+2,??___ftmul
  8298  001556  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  8299  001558  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  8300  00155A  3418               	rlcf	___ftmul@f1+1,w,c
  8301  00155C  361D               	rlcf	??___ftmul& (0+255),f,c
  8302  00155E  E301               	bnc	u3551
  8303  001560  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  8304  001562                     u3551:
  8305  001562  501D               	movf	??___ftmul,w,c
  8306  001564  6E20               	movwf	___ftmul@exp,c
  8307  001566  5020               	movf	___ftmul@exp,w,c
  8308  001568  A4D8               	btfss	status,2,c
  8309  00156A  D002               	goto	l4840
  8310  00156C  D00E               	goto	l4842
  8311  00156E  D06C               	goto	l1118
  8312  001570                     l4840:
  8313  001570  C01C  F01D         	movff	___ftmul@f2+2,??___ftmul
  8314  001574  6A1E               	clrf	(??___ftmul+1)& (0+255),c
  8315  001576  6A1F               	clrf	(??___ftmul+2)& (0+255),c
  8316  001578  341B               	rlcf	___ftmul@f2+1,w,c
  8317  00157A  361D               	rlcf	??___ftmul& (0+255),f,c
  8318  00157C  E301               	bnc	u3571
  8319  00157E  801E               	bsf	(??___ftmul+1)& (0+255),0,c
  8320  001580                     u3571:
  8321  001580  501D               	movf	??___ftmul,w,c
  8322  001582  6E25               	movwf	___ftmul@sign,c
  8323  001584  5025               	movf	___ftmul@sign,w,c
  8324  001586  A4D8               	btfss	status,2,c
  8325  001588  D007               	goto	l4846
  8326  00158A                     l4842:
  8327  00158A  0E00               	movlw	0
  8328  00158C  6E17               	movwf	?___ftmul,c
  8329  00158E  0E00               	movlw	0
  8330  001590  6E18               	movwf	?___ftmul+1,c
  8331  001592  0E00               	movlw	0
  8332  001594  6E19               	movwf	?___ftmul+2,c
  8333  001596  D058               	goto	l1118
  8334  001598                     l4846:
  8335  001598  5025               	movf	___ftmul@sign,w,c
  8336  00159A  0F7B               	addlw	123
  8337  00159C  2620               	addwf	___ftmul@exp,f,c
  8338  00159E  C019  F025         	movff	___ftmul@f1+2,___ftmul@sign
  8339  0015A2  501C               	movf	___ftmul@f2+2,w,c
  8340  0015A4  1A25               	xorwf	___ftmul@sign,f,c
  8341  0015A6  0E80               	movlw	128
  8342  0015A8  1625               	andwf	___ftmul@sign,f,c
  8343  0015AA  8E18               	bsf	___ftmul@f1+1,7,c
  8344  0015AC  8E1B               	bsf	___ftmul@f2+1,7,c
  8345  0015AE  0EFF               	movlw	255
  8346  0015B0  161A               	andwf	___ftmul@f2,f,c
  8347  0015B2  0EFF               	movlw	255
  8348  0015B4  161B               	andwf	___ftmul@f2+1,f,c
  8349  0015B6  0E00               	movlw	0
  8350  0015B8  161C               	andwf	___ftmul@f2+2,f,c
  8351  0015BA  0E00               	movlw	0
  8352  0015BC  6E21               	movwf	___ftmul@f3_as_product,c
  8353  0015BE  0E00               	movlw	0
  8354  0015C0  6E22               	movwf	___ftmul@f3_as_product+1,c
  8355  0015C2  0E00               	movlw	0
  8356  0015C4  6E23               	movwf	___ftmul@f3_as_product+2,c
  8357  0015C6  0E07               	movlw	7
  8358  0015C8  6E24               	movwf	___ftmul@cntr,c
  8359  0015CA  D000               	goto	l4860
  8360  0015CC                     l4860:
  8361  0015CC  A017               	btfss	___ftmul@f1,0,c
  8362  0015CE  D007               	goto	l4864
  8363  0015D0  501A               	movf	___ftmul@f2,w,c
  8364  0015D2  2621               	addwf	___ftmul@f3_as_product,f,c
  8365  0015D4  501B               	movf	___ftmul@f2+1,w,c
  8366  0015D6  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  8367  0015D8  501C               	movf	___ftmul@f2+2,w,c
  8368  0015DA  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  8369  0015DC  D000               	goto	l4864
  8370  0015DE                     l4864:
  8371  0015DE  90D8               	bcf	status,0,c
  8372  0015E0  3219               	rrcf	___ftmul@f1+2,f,c
  8373  0015E2  3218               	rrcf	___ftmul@f1+1,f,c
  8374  0015E4  3217               	rrcf	___ftmul@f1,f,c
  8375  0015E6  90D8               	bcf	status,0,c
  8376  0015E8  361A               	rlcf	___ftmul@f2,f,c
  8377  0015EA  361B               	rlcf	___ftmul@f2+1,f,c
  8378  0015EC  361C               	rlcf	___ftmul@f2+2,f,c
  8379  0015EE  2E24               	decfsz	___ftmul@cntr,f,c
  8380  0015F0  D7ED               	goto	l4860
  8381  0015F2  D000               	goto	l4868
  8382  0015F4                     l4868:
  8383  0015F4  0E09               	movlw	9
  8384  0015F6  6E24               	movwf	___ftmul@cntr,c
  8385  0015F8  D000               	goto	l4870
  8386  0015FA                     l4870:
  8387  0015FA  A017               	btfss	___ftmul@f1,0,c
  8388  0015FC  D007               	goto	l4874
  8389  0015FE  501A               	movf	___ftmul@f2,w,c
  8390  001600  2621               	addwf	___ftmul@f3_as_product,f,c
  8391  001602  501B               	movf	___ftmul@f2+1,w,c
  8392  001604  2222               	addwfc	___ftmul@f3_as_product+1,f,c
  8393  001606  501C               	movf	___ftmul@f2+2,w,c
  8394  001608  2223               	addwfc	___ftmul@f3_as_product+2,f,c
  8395  00160A  D000               	goto	l4874
  8396  00160C                     l4874:
  8397  00160C  90D8               	bcf	status,0,c
  8398  00160E  3219               	rrcf	___ftmul@f1+2,f,c
  8399  001610  3218               	rrcf	___ftmul@f1+1,f,c
  8400  001612  3217               	rrcf	___ftmul@f1,f,c
  8401  001614  90D8               	bcf	status,0,c
  8402  001616  3223               	rrcf	___ftmul@f3_as_product+2,f,c
  8403  001618  3222               	rrcf	___ftmul@f3_as_product+1,f,c
  8404  00161A  3221               	rrcf	___ftmul@f3_as_product,f,c
  8405  00161C  2E24               	decfsz	___ftmul@cntr,f,c
  8406  00161E  D7ED               	goto	l4870
  8407  001620  D000               	goto	l4878
  8408  001622                     l4878:
  8409  001622  C021  F00F         	movff	___ftmul@f3_as_product,___ftpack@arg
  8410  001626  C022  F010         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8411  00162A  C023  F011         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8412  00162E  C020  F012         	movff	___ftmul@exp,___ftpack@exp
  8413  001632  C025  F013         	movff	___ftmul@sign,___ftpack@sign
  8414  001636  EC5C  F00D         	call	___ftpack	;wreg free
  8415  00163A  C00F  F017         	movff	?___ftpack,?___ftmul
  8416  00163E  C010  F018         	movff	?___ftpack+1,?___ftmul+1
  8417  001642  C011  F019         	movff	?___ftpack+2,?___ftmul+2
  8418  001646  D000               	goto	l1118
  8419  001648                     l1118:
  8420  001648  0012               	return		;funcret
  8421  00164A                     __end_of___ftmul:
  8422                           	opt stack 0
  8423                           tblptru	equ	0xFF8
  8424                           tblptrh	equ	0xFF7
  8425                           tblptrl	equ	0xFF6
  8426                           tablat	equ	0xFF5
  8427                           prodl	equ	0xFF3
  8428                           intcon	equ	0xFF2
  8429                           intcon2	equ	0xFF1
  8430                           intcon3	equ	0xFF0
  8431                           postinc0	equ	0xFEE
  8432                           wreg	equ	0xFE8
  8433                           postdec1	equ	0xFE5
  8434                           fsr1l	equ	0xFE1
  8435                           status	equ	0xFD8
  8436                           
  8437 ;; *************** function ___ftge *****************
  8438 ;; Defined at:
  8439 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftge.c"
  8440 ;; Parameters:    Size  Location     Type
  8441 ;;  ff1             3   14[COMRAM] float 
  8442 ;;  ff2             3   17[COMRAM] float 
  8443 ;; Auto vars:     Size  Location     Type
  8444 ;;		None
  8445 ;; Return value:  Size  Location     Type
  8446 ;;		None               void
  8447 ;; Registers used:
  8448 ;;		wreg, status,2, status,0
  8449 ;; Tracked objects:
  8450 ;;		On entry : 0/0
  8451 ;;		On exit  : 0/0
  8452 ;;		Unchanged: 0/0
  8453 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8454 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8455 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8456 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8457 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;Total ram usage:        9 bytes
  8459 ;; Hardware stack levels used:    1
  8460 ;; Hardware stack levels required when called:    2
  8461 ;; This function calls:
  8462 ;;		Nothing
  8463 ;; This function is called by:
  8464 ;;		_main
  8465 ;;		_update_LCD_misc
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           	psect	text37
  8470  001D78                     __ptext37:
  8471                           	opt stack 0
  8472  001D78                     ___ftge:
  8473                           	opt stack 28
  8474                           
  8475                           ;incstack = 0
  8476  001D78  AE11               	btfss	___ftge@ff1+2,7,c
  8477  001D7A  D017               	goto	l4922
  8478  001D7C  C00F  F015         	movff	___ftge@ff1,??___ftge
  8479  001D80  C010  F016         	movff	___ftge@ff1+1,??___ftge+1
  8480  001D84  C011  F017         	movff	___ftge@ff1+2,??___ftge+2
  8481  001D88  1E15               	comf	??___ftge,f,c
  8482  001D8A  1E16               	comf	??___ftge+1,f,c
  8483  001D8C  1E17               	comf	??___ftge+2,f,c
  8484  001D8E  2A15               	incf	??___ftge,f,c
  8485  001D90  0E00               	movlw	0
  8486  001D92  2216               	addwfc	??___ftge+1,f,c
  8487  001D94  2217               	addwfc	??___ftge+2,f,c
  8488  001D96  0E00               	movlw	0
  8489  001D98  2415               	addwf	??___ftge,w,c
  8490  001D9A  6E0F               	movwf	___ftge@ff1,c
  8491  001D9C  0E00               	movlw	0
  8492  001D9E  2016               	addwfc	??___ftge+1,w,c
  8493  001DA0  6E10               	movwf	___ftge@ff1+1,c
  8494  001DA2  0E80               	movlw	128
  8495  001DA4  2017               	addwfc	??___ftge+2,w,c
  8496  001DA6  6E11               	movwf	___ftge@ff1+2,c
  8497  001DA8  D000               	goto	l4922
  8498  001DAA                     l4922:
  8499  001DAA  AE14               	btfss	___ftge@ff2+2,7,c
  8500  001DAC  D017               	goto	l4926
  8501  001DAE  C012  F015         	movff	___ftge@ff2,??___ftge
  8502  001DB2  C013  F016         	movff	___ftge@ff2+1,??___ftge+1
  8503  001DB6  C014  F017         	movff	___ftge@ff2+2,??___ftge+2
  8504  001DBA  1E15               	comf	??___ftge,f,c
  8505  001DBC  1E16               	comf	??___ftge+1,f,c
  8506  001DBE  1E17               	comf	??___ftge+2,f,c
  8507  001DC0  2A15               	incf	??___ftge,f,c
  8508  001DC2  0E00               	movlw	0
  8509  001DC4  2216               	addwfc	??___ftge+1,f,c
  8510  001DC6  2217               	addwfc	??___ftge+2,f,c
  8511  001DC8  0E00               	movlw	0
  8512  001DCA  2415               	addwf	??___ftge,w,c
  8513  001DCC  6E12               	movwf	___ftge@ff2,c
  8514  001DCE  0E00               	movlw	0
  8515  001DD0  2016               	addwfc	??___ftge+1,w,c
  8516  001DD2  6E13               	movwf	___ftge@ff2+1,c
  8517  001DD4  0E80               	movlw	128
  8518  001DD6  2017               	addwfc	??___ftge+2,w,c
  8519  001DD8  6E14               	movwf	___ftge@ff2+2,c
  8520  001DDA  D000               	goto	l4926
  8521  001DDC                     l4926:
  8522  001DDC  0E00               	movlw	0
  8523  001DDE  1A0F               	xorwf	___ftge@ff1,f,c
  8524  001DE0  0E00               	movlw	0
  8525  001DE2  1A10               	xorwf	___ftge@ff1+1,f,c
  8526  001DE4  0E80               	movlw	128
  8527  001DE6  1A11               	xorwf	___ftge@ff1+2,f,c
  8528  001DE8  0E00               	movlw	0
  8529  001DEA  1A12               	xorwf	___ftge@ff2,f,c
  8530  001DEC  0E00               	movlw	0
  8531  001DEE  1A13               	xorwf	___ftge@ff2+1,f,c
  8532  001DF0  0E80               	movlw	128
  8533  001DF2  1A14               	xorwf	___ftge@ff2+2,f,c
  8534  001DF4  5012               	movf	___ftge@ff2,w,c
  8535  001DF6  5C0F               	subwf	___ftge@ff1,w,c
  8536  001DF8  5013               	movf	___ftge@ff2+1,w,c
  8537  001DFA  5810               	subwfb	___ftge@ff1+1,w,c
  8538  001DFC  5014               	movf	___ftge@ff2+2,w,c
  8539  001DFE  5811               	subwfb	___ftge@ff1+2,w,c
  8540  001E00  B0D8               	btfsc	status,0,c
  8541  001E02  D002               	goto	l4932
  8542  001E04  90D8               	bcf	status,0,c
  8543  001E06  D002               	goto	l1112
  8544  001E08                     l4932:
  8545  001E08  80D8               	bsf	status,0,c
  8546  001E0A  D000               	goto	l1112
  8547  001E0C                     l1112:
  8548  001E0C  0012               	return		;funcret
  8549  001E0E                     __end_of___ftge:
  8550                           	opt stack 0
  8551                           tblptru	equ	0xFF8
  8552                           tblptrh	equ	0xFF7
  8553                           tblptrl	equ	0xFF6
  8554                           tablat	equ	0xFF5
  8555                           prodl	equ	0xFF3
  8556                           intcon	equ	0xFF2
  8557                           intcon2	equ	0xFF1
  8558                           intcon3	equ	0xFF0
  8559                           postinc0	equ	0xFEE
  8560                           wreg	equ	0xFE8
  8561                           postdec1	equ	0xFE5
  8562                           fsr1l	equ	0xFE1
  8563                           status	equ	0xFD8
  8564                           
  8565 ;; *************** function ___awmod *****************
  8566 ;; Defined at:
  8567 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awmod.c"
  8568 ;; Parameters:    Size  Location     Type
  8569 ;;  dividend        2   52[COMRAM] int 
  8570 ;;  divisor         2   54[COMRAM] int 
  8571 ;; Auto vars:     Size  Location     Type
  8572 ;;  sign            1   57[COMRAM] unsigned char 
  8573 ;;  counter         1   56[COMRAM] unsigned char 
  8574 ;; Return value:  Size  Location     Type
  8575 ;;                  2   52[COMRAM] int 
  8576 ;; Registers used:
  8577 ;;		wreg, status,2, status,0
  8578 ;; Tracked objects:
  8579 ;;		On entry : 0/0
  8580 ;;		On exit  : 0/0
  8581 ;;		Unchanged: 0/0
  8582 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8583 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8584 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8585 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8586 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8587 ;;Total ram usage:        6 bytes
  8588 ;; Hardware stack levels used:    1
  8589 ;; Hardware stack levels required when called:    2
  8590 ;; This function calls:
  8591 ;;		Nothing
  8592 ;; This function is called by:
  8593 ;;		_update_LCD_PED_Count
  8594 ;;		_update_LCD_count
  8595 ;;		_update_LCD_misc
  8596 ;;		_dec_2_bcd
  8597 ;; This function uses a non-reentrant model
  8598 ;;
  8599                           
  8600                           	psect	text38
  8601  002034                     __ptext38:
  8602                           	opt stack 0
  8603  002034                     ___awmod:
  8604                           	opt stack 25
  8605                           
  8606                           ;incstack = 0
  8607  002034  0E00               	movlw	0
  8608  002036  6E3A               	movwf	___awmod@sign,c
  8609  002038  AE36               	btfss	___awmod@dividend+1,7,c
  8610  00203A  D007               	goto	l4890
  8611  00203C  6C35               	negf	___awmod@dividend,c
  8612  00203E  1E36               	comf	___awmod@dividend+1,f,c
  8613  002040  B0D8               	btfsc	status,0,c
  8614  002042  2A36               	incf	___awmod@dividend+1,f,c
  8615  002044  0E01               	movlw	1
  8616  002046  6E3A               	movwf	___awmod@sign,c
  8617  002048  D000               	goto	l4890
  8618  00204A                     l4890:
  8619  00204A  AE38               	btfss	___awmod@divisor+1,7,c
  8620  00204C  D005               	goto	l4894
  8621  00204E  6C37               	negf	___awmod@divisor,c
  8622  002050  1E38               	comf	___awmod@divisor+1,f,c
  8623  002052  B0D8               	btfsc	status,0,c
  8624  002054  2A38               	incf	___awmod@divisor+1,f,c
  8625  002056  D000               	goto	l4894
  8626  002058                     l4894:
  8627  002058  5037               	movf	___awmod@divisor,w,c
  8628  00205A  1038               	iorwf	___awmod@divisor+1,w,c
  8629  00205C  B4D8               	btfsc	status,2,c
  8630  00205E  D01D               	goto	l4910
  8631  002060  0E01               	movlw	1
  8632  002062  6E39               	movwf	___awmod@counter,c
  8633  002064  D005               	goto	l4900
  8634  002066                     l4898:
  8635  002066  90D8               	bcf	status,0,c
  8636  002068  3637               	rlcf	___awmod@divisor,f,c
  8637  00206A  3638               	rlcf	___awmod@divisor+1,f,c
  8638  00206C  2A39               	incf	___awmod@counter,f,c
  8639  00206E  D000               	goto	l4900
  8640  002070                     l4900:
  8641  002070  BE38               	btfsc	___awmod@divisor+1,7,c
  8642  002072  D002               	goto	l4902
  8643  002074  D7F8               	goto	l4898
  8644  002076  D000               	goto	l4902
  8645  002078                     l4902:
  8646  002078  5037               	movf	___awmod@divisor,w,c
  8647  00207A  5C35               	subwf	___awmod@dividend,w,c
  8648  00207C  5038               	movf	___awmod@divisor+1,w,c
  8649  00207E  5836               	subwfb	___awmod@dividend+1,w,c
  8650  002080  A0D8               	btfss	status,0,c
  8651  002082  D005               	goto	l4906
  8652  002084  5037               	movf	___awmod@divisor,w,c
  8653  002086  5E35               	subwf	___awmod@dividend,f,c
  8654  002088  5038               	movf	___awmod@divisor+1,w,c
  8655  00208A  5A36               	subwfb	___awmod@dividend+1,f,c
  8656  00208C  D000               	goto	l4906
  8657  00208E                     l4906:
  8658  00208E  90D8               	bcf	status,0,c
  8659  002090  3238               	rrcf	___awmod@divisor+1,f,c
  8660  002092  3237               	rrcf	___awmod@divisor,f,c
  8661  002094  2E39               	decfsz	___awmod@counter,f,c
  8662  002096  D7F0               	goto	l4902
  8663  002098  D000               	goto	l4910
  8664  00209A                     l4910:
  8665  00209A  503A               	movf	___awmod@sign,w,c
  8666  00209C  B4D8               	btfsc	status,2,c
  8667  00209E  D005               	goto	l4914
  8668  0020A0  6C35               	negf	___awmod@dividend,c
  8669  0020A2  1E36               	comf	___awmod@dividend+1,f,c
  8670  0020A4  B0D8               	btfsc	status,0,c
  8671  0020A6  2A36               	incf	___awmod@dividend+1,f,c
  8672  0020A8  D000               	goto	l4914
  8673  0020AA                     l4914:
  8674  0020AA  C035  F035         	movff	___awmod@dividend,?___awmod
  8675  0020AE  C036  F036         	movff	___awmod@dividend+1,?___awmod+1
  8676  0020B2  D000               	goto	l929
  8677  0020B4                     l929:
  8678  0020B4  0012               	return		;funcret
  8679  0020B6                     __end_of___awmod:
  8680                           	opt stack 0
  8681                           tblptru	equ	0xFF8
  8682                           tblptrh	equ	0xFF7
  8683                           tblptrl	equ	0xFF6
  8684                           tablat	equ	0xFF5
  8685                           prodl	equ	0xFF3
  8686                           intcon	equ	0xFF2
  8687                           intcon2	equ	0xFF1
  8688                           intcon3	equ	0xFF0
  8689                           postinc0	equ	0xFEE
  8690                           wreg	equ	0xFE8
  8691                           postdec1	equ	0xFE5
  8692                           fsr1l	equ	0xFE1
  8693                           status	equ	0xFD8
  8694                           
  8695 ;; *************** function _Read_Volt *****************
  8696 ;; Defined at:
  8697 ;;		line 141 in file "utils.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;  ADC_Channel     1    wreg     unsigned char 
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;  ADC_Channel     1   47[COMRAM] unsigned char 
  8702 ;;  volt            3   44[COMRAM] float 
  8703 ;;  nStep           2   48[COMRAM] int 
  8704 ;; Return value:  Size  Location     Type
  8705 ;;                  3   41[COMRAM] float 
  8706 ;; Registers used:
  8707 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  8708 ;; Tracked objects:
  8709 ;;		On entry : 0/0
  8710 ;;		On exit  : 0/0
  8711 ;;		Unchanged: 0/0
  8712 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8713 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8716 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8717 ;;Total ram usage:        9 bytes
  8718 ;; Hardware stack levels used:    1
  8719 ;; Hardware stack levels required when called:    4
  8720 ;; This function calls:
  8721 ;;		___awtoft
  8722 ;;		___ftdiv
  8723 ;;		___wmul
  8724 ;;		_get_full_ADC
  8725 ;; This function is called by:
  8726 ;;		_main
  8727 ;;		_update_LCD_misc
  8728 ;; This function uses a non-reentrant model
  8729 ;;
  8730                           
  8731                           	psect	text39
  8732  002126                     __ptext39:
  8733                           	opt stack 0
  8734  002126                     _Read_Volt:
  8735                           	opt stack 26
  8736                           
  8737                           ;incstack = 0
  8738                           ;Read_Volt@ADC_Channel stored from wreg
  8739  002126  6E30               	movwf	Read_Volt@ADC_Channel,c
  8740                           
  8741                           ;utils.c: 143: ADCON0 = ADC_Channel * 4 + 1;
  8742  002128  5030               	movf	Read_Volt@ADC_Channel,w,c
  8743  00212A  0D04               	mullw	4
  8744  00212C  28F3               	incf	prodl,w,c
  8745  00212E  6EC2               	movwf	4034,c	;volatile
  8746                           
  8747                           ;utils.c: 144: int nStep = get_full_ADC();
  8748  002130  ECD6  F013         	call	_get_full_ADC	;wreg free
  8749  002134  C00F  F031         	movff	?_get_full_ADC,Read_Volt@nStep
  8750  002138  C010  F032         	movff	?_get_full_ADC+1,Read_Volt@nStep+1
  8751                           
  8752                           ;utils.c: 145: float volt = nStep * 5 /1024.0;
  8753  00213C  C031  F00F         	movff	Read_Volt@nStep,___wmul@multiplier
  8754  002140  C032  F010         	movff	Read_Volt@nStep+1,___wmul@multiplier+1
  8755  002144  0E00               	movlw	0
  8756  002146  6E12               	movwf	___wmul@multiplicand+1,c
  8757  002148  0E05               	movlw	5
  8758  00214A  6E11               	movwf	___wmul@multiplicand,c
  8759  00214C  ECC2  F013         	call	___wmul	;wreg free
  8760  002150  C00F  F017         	movff	?___wmul,___awtoft@c
  8761  002154  C010  F018         	movff	?___wmul+1,___awtoft@c+1
  8762  002158  ECF4  F012         	call	___awtoft	;wreg free
  8763  00215C  C017  F01B         	movff	?___awtoft,___ftdiv@f1
  8764  002160  C018  F01C         	movff	?___awtoft+1,___ftdiv@f1+1
  8765  002164  C019  F01D         	movff	?___awtoft+2,___ftdiv@f1+2
  8766  002168  0E00               	movlw	0
  8767  00216A  6E1E               	movwf	___ftdiv@f2,c
  8768  00216C  0E80               	movlw	128
  8769  00216E  6E1F               	movwf	___ftdiv@f2+1,c
  8770  002170  0E44               	movlw	68
  8771  002172  6E20               	movwf	___ftdiv@f2+2,c
  8772  002174  EC11  F00C         	call	___ftdiv	;wreg free
  8773  002178  C01B  F02D         	movff	?___ftdiv,Read_Volt@volt
  8774  00217C  C01C  F02E         	movff	?___ftdiv+1,Read_Volt@volt+1
  8775  002180  C01D  F02F         	movff	?___ftdiv+2,Read_Volt@volt+2
  8776                           
  8777                           ;utils.c: 146: return (volt);
  8778  002184  C02D  F02A         	movff	Read_Volt@volt,?_Read_Volt
  8779  002188  C02E  F02B         	movff	Read_Volt@volt+1,?_Read_Volt+1
  8780  00218C  C02F  F02C         	movff	Read_Volt@volt+2,?_Read_Volt+2
  8781  002190  D000               	goto	l672
  8782  002192                     l672:
  8783  002192  0012               	return		;funcret
  8784  002194                     __end_of_Read_Volt:
  8785                           	opt stack 0
  8786                           tblptru	equ	0xFF8
  8787                           tblptrh	equ	0xFF7
  8788                           tblptrl	equ	0xFF6
  8789                           tablat	equ	0xFF5
  8790                           prodl	equ	0xFF3
  8791                           intcon	equ	0xFF2
  8792                           intcon2	equ	0xFF1
  8793                           intcon3	equ	0xFF0
  8794                           postinc0	equ	0xFEE
  8795                           wreg	equ	0xFE8
  8796                           postdec1	equ	0xFE5
  8797                           fsr1l	equ	0xFE1
  8798                           status	equ	0xFD8
  8799                           
  8800 ;; *************** function _get_full_ADC *****************
  8801 ;; Defined at:
  8802 ;;		line 149 in file "utils.c"
  8803 ;; Parameters:    Size  Location     Type
  8804 ;;		None
  8805 ;; Auto vars:     Size  Location     Type
  8806 ;;  result          2   18[COMRAM] unsigned int 
  8807 ;; Return value:  Size  Location     Type
  8808 ;;                  2   14[COMRAM] unsigned int 
  8809 ;; Registers used:
  8810 ;;		wreg, status,2, status,0
  8811 ;; Tracked objects:
  8812 ;;		On entry : 0/0
  8813 ;;		On exit  : 0/0
  8814 ;;		Unchanged: 0/0
  8815 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8816 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8817 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8818 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8819 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8820 ;;Total ram usage:        6 bytes
  8821 ;; Hardware stack levels used:    1
  8822 ;; Hardware stack levels required when called:    2
  8823 ;; This function calls:
  8824 ;;		Nothing
  8825 ;; This function is called by:
  8826 ;;		_update_LCD_misc
  8827 ;;		_Read_Volt
  8828 ;; This function uses a non-reentrant model
  8829 ;;
  8830                           
  8831                           	psect	text40
  8832  0027AC                     __ptext40:
  8833                           	opt stack 0
  8834  0027AC                     _get_full_ADC:
  8835                           	opt stack 27
  8836                           
  8837                           ;utils.c: 151: unsigned int result;
  8838                           ;utils.c: 152: ADCON0bits.GO=1;
  8839                           
  8840                           ;incstack = 0
  8841  0027AC  82C2               	bsf	4034,1,c	;volatile
  8842                           
  8843                           ;utils.c: 153: while(ADCON0bits.DONE==1);
  8844  0027AE  D000               	goto	l675
  8845  0027B0                     l675:
  8846  0027B0  B2C2               	btfsc	4034,1,c	;volatile
  8847  0027B2  D7FE               	goto	l675
  8848                           
  8849                           ;utils.c: 154: result = (ADRESH * 0x100) + ADRESL;
  8850  0027B4  50C4               	movf	4036,w,c	;volatile
  8851  0027B6  6E12               	movwf	(??_get_full_ADC+1)& (0+255),c
  8852  0027B8  6A11               	clrf	??_get_full_ADC& (0+255),c
  8853  0027BA  50C3               	movf	4035,w,c	;volatile
  8854  0027BC  2411               	addwf	??_get_full_ADC,w,c
  8855  0027BE  6E13               	movwf	get_full_ADC@result,c
  8856  0027C0  0E00               	movlw	0
  8857  0027C2  2012               	addwfc	??_get_full_ADC+1,w,c
  8858  0027C4  6E14               	movwf	get_full_ADC@result+1,c
  8859                           
  8860                           ;utils.c: 156: return result;
  8861  0027C6  C013  F00F         	movff	get_full_ADC@result,?_get_full_ADC
  8862  0027CA  C014  F010         	movff	get_full_ADC@result+1,?_get_full_ADC+1
  8863  0027CE  D000               	goto	l678
  8864  0027D0                     l678:
  8865  0027D0  0012               	return		;funcret
  8866  0027D2                     __end_of_get_full_ADC:
  8867                           	opt stack 0
  8868                           tblptru	equ	0xFF8
  8869                           tblptrh	equ	0xFF7
  8870                           tblptrl	equ	0xFF6
  8871                           tablat	equ	0xFF5
  8872                           prodl	equ	0xFF3
  8873                           intcon	equ	0xFF2
  8874                           intcon2	equ	0xFF1
  8875                           intcon3	equ	0xFF0
  8876                           postinc0	equ	0xFEE
  8877                           wreg	equ	0xFE8
  8878                           postdec1	equ	0xFE5
  8879                           fsr1l	equ	0xFE1
  8880                           status	equ	0xFD8
  8881                           
  8882 ;; *************** function ___ftdiv *****************
  8883 ;; Defined at:
  8884 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  8885 ;; Parameters:    Size  Location     Type
  8886 ;;  f1              3   26[COMRAM] float 
  8887 ;;  f2              3   29[COMRAM] float 
  8888 ;; Auto vars:     Size  Location     Type
  8889 ;;  f3              3   36[COMRAM] float 
  8890 ;;  sign            1   40[COMRAM] unsigned char 
  8891 ;;  exp             1   39[COMRAM] unsigned char 
  8892 ;;  cntr            1   35[COMRAM] unsigned char 
  8893 ;; Return value:  Size  Location     Type
  8894 ;;                  3   26[COMRAM] float 
  8895 ;; Registers used:
  8896 ;;		wreg, status,2, status,0, cstack
  8897 ;; Tracked objects:
  8898 ;;		On entry : 0/0
  8899 ;;		On exit  : 0/0
  8900 ;;		Unchanged: 0/0
  8901 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8902 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8903 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8904 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8905 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8906 ;;Total ram usage:       15 bytes
  8907 ;; Hardware stack levels used:    1
  8908 ;; Hardware stack levels required when called:    3
  8909 ;; This function calls:
  8910 ;;		___ftpack
  8911 ;; This function is called by:
  8912 ;;		_Read_Volt
  8913 ;; This function uses a non-reentrant model
  8914 ;;
  8915                           
  8916                           	psect	text41
  8917  001822                     __ptext41:
  8918                           	opt stack 0
  8919  001822                     ___ftdiv:
  8920                           	opt stack 26
  8921                           
  8922                           ;incstack = 0
  8923  001822  C01D  F021         	movff	___ftdiv@f1+2,??___ftdiv
  8924  001826  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  8925  001828  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  8926  00182A  341C               	rlcf	___ftdiv@f1+1,w,c
  8927  00182C  3621               	rlcf	??___ftdiv& (0+255),f,c
  8928  00182E  E301               	bnc	u3381
  8929  001830  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  8930  001832                     u3381:
  8931  001832  5021               	movf	??___ftdiv,w,c
  8932  001834  6E28               	movwf	___ftdiv@exp,c
  8933  001836  5028               	movf	___ftdiv@exp,w,c
  8934  001838  A4D8               	btfss	status,2,c
  8935  00183A  D002               	goto	l4698
  8936  00183C  D00E               	goto	l4700
  8937  00183E  D061               	goto	l1103
  8938  001840                     l4698:
  8939  001840  C020  F021         	movff	___ftdiv@f2+2,??___ftdiv
  8940  001844  6A22               	clrf	(??___ftdiv+1)& (0+255),c
  8941  001846  6A23               	clrf	(??___ftdiv+2)& (0+255),c
  8942  001848  341F               	rlcf	___ftdiv@f2+1,w,c
  8943  00184A  3621               	rlcf	??___ftdiv& (0+255),f,c
  8944  00184C  E301               	bnc	u3401
  8945  00184E  8022               	bsf	(??___ftdiv+1)& (0+255),0,c
  8946  001850                     u3401:
  8947  001850  5021               	movf	??___ftdiv,w,c
  8948  001852  6E29               	movwf	___ftdiv@sign,c
  8949  001854  5029               	movf	___ftdiv@sign,w,c
  8950  001856  A4D8               	btfss	status,2,c
  8951  001858  D007               	goto	l4704
  8952  00185A                     l4700:
  8953  00185A  0E00               	movlw	0
  8954  00185C  6E1B               	movwf	?___ftdiv,c
  8955  00185E  0E00               	movlw	0
  8956  001860  6E1C               	movwf	?___ftdiv+1,c
  8957  001862  0E00               	movlw	0
  8958  001864  6E1D               	movwf	?___ftdiv+2,c
  8959  001866  D04D               	goto	l1103
  8960  001868                     l4704:
  8961  001868  0E00               	movlw	0
  8962  00186A  6E25               	movwf	___ftdiv@f3,c
  8963  00186C  0E00               	movlw	0
  8964  00186E  6E26               	movwf	___ftdiv@f3+1,c
  8965  001870  0E00               	movlw	0
  8966  001872  6E27               	movwf	___ftdiv@f3+2,c
  8967  001874  5029               	movf	___ftdiv@sign,w,c
  8968  001876  0F89               	addlw	137
  8969  001878  5E28               	subwf	___ftdiv@exp,f,c
  8970  00187A  C01D  F029         	movff	___ftdiv@f1+2,___ftdiv@sign
  8971  00187E  5020               	movf	___ftdiv@f2+2,w,c
  8972  001880  1A29               	xorwf	___ftdiv@sign,f,c
  8973  001882  0E80               	movlw	128
  8974  001884  1629               	andwf	___ftdiv@sign,f,c
  8975  001886  8E1C               	bsf	___ftdiv@f1+1,7,c
  8976  001888  0EFF               	movlw	255
  8977  00188A  161B               	andwf	___ftdiv@f1,f,c
  8978  00188C  0EFF               	movlw	255
  8979  00188E  161C               	andwf	___ftdiv@f1+1,f,c
  8980  001890  0E00               	movlw	0
  8981  001892  161D               	andwf	___ftdiv@f1+2,f,c
  8982  001894  8E1F               	bsf	___ftdiv@f2+1,7,c
  8983  001896  0EFF               	movlw	255
  8984  001898  161E               	andwf	___ftdiv@f2,f,c
  8985  00189A  0EFF               	movlw	255
  8986  00189C  161F               	andwf	___ftdiv@f2+1,f,c
  8987  00189E  0E00               	movlw	0
  8988  0018A0  1620               	andwf	___ftdiv@f2+2,f,c
  8989  0018A2  0E18               	movlw	24
  8990  0018A4  6E24               	movwf	___ftdiv@cntr,c
  8991  0018A6  D000               	goto	l4724
  8992  0018A8                     l4724:
  8993  0018A8  90D8               	bcf	status,0,c
  8994  0018AA  3625               	rlcf	___ftdiv@f3,f,c
  8995  0018AC  3626               	rlcf	___ftdiv@f3+1,f,c
  8996  0018AE  3627               	rlcf	___ftdiv@f3+2,f,c
  8997  0018B0  501E               	movf	___ftdiv@f2,w,c
  8998  0018B2  5C1B               	subwf	___ftdiv@f1,w,c
  8999  0018B4  501F               	movf	___ftdiv@f2+1,w,c
  9000  0018B6  581C               	subwfb	___ftdiv@f1+1,w,c
  9001  0018B8  5020               	movf	___ftdiv@f2+2,w,c
  9002  0018BA  581D               	subwfb	___ftdiv@f1+2,w,c
  9003  0018BC  A0D8               	btfss	status,0,c
  9004  0018BE  D007               	goto	l1106
  9005  0018C0  501E               	movf	___ftdiv@f2,w,c
  9006  0018C2  5E1B               	subwf	___ftdiv@f1,f,c
  9007  0018C4  501F               	movf	___ftdiv@f2+1,w,c
  9008  0018C6  5A1C               	subwfb	___ftdiv@f1+1,f,c
  9009  0018C8  5020               	movf	___ftdiv@f2+2,w,c
  9010  0018CA  5A1D               	subwfb	___ftdiv@f1+2,f,c
  9011  0018CC  8025               	bsf	___ftdiv@f3,0,c
  9012  0018CE                     l1106:
  9013  0018CE  90D8               	bcf	status,0,c
  9014  0018D0  361B               	rlcf	___ftdiv@f1,f,c
  9015  0018D2  361C               	rlcf	___ftdiv@f1+1,f,c
  9016  0018D4  361D               	rlcf	___ftdiv@f1+2,f,c
  9017  0018D6  2E24               	decfsz	___ftdiv@cntr,f,c
  9018  0018D8  D7E7               	goto	l4724
  9019  0018DA  D000               	goto	l4734
  9020  0018DC                     l4734:
  9021  0018DC  C025  F00F         	movff	___ftdiv@f3,___ftpack@arg
  9022  0018E0  C026  F010         	movff	___ftdiv@f3+1,___ftpack@arg+1
  9023  0018E4  C027  F011         	movff	___ftdiv@f3+2,___ftpack@arg+2
  9024  0018E8  C028  F012         	movff	___ftdiv@exp,___ftpack@exp
  9025  0018EC  C029  F013         	movff	___ftdiv@sign,___ftpack@sign
  9026  0018F0  EC5C  F00D         	call	___ftpack	;wreg free
  9027  0018F4  C00F  F01B         	movff	?___ftpack,?___ftdiv
  9028  0018F8  C010  F01C         	movff	?___ftpack+1,?___ftdiv+1
  9029  0018FC  C011  F01D         	movff	?___ftpack+2,?___ftdiv+2
  9030  001900  D000               	goto	l1103
  9031  001902                     l1103:
  9032  001902  0012               	return		;funcret
  9033  001904                     __end_of___ftdiv:
  9034                           	opt stack 0
  9035                           tblptru	equ	0xFF8
  9036                           tblptrh	equ	0xFF7
  9037                           tblptrl	equ	0xFF6
  9038                           tablat	equ	0xFF5
  9039                           prodl	equ	0xFF3
  9040                           intcon	equ	0xFF2
  9041                           intcon2	equ	0xFF1
  9042                           intcon3	equ	0xFF0
  9043                           postinc0	equ	0xFEE
  9044                           wreg	equ	0xFE8
  9045                           postdec1	equ	0xFE5
  9046                           fsr1l	equ	0xFE1
  9047                           status	equ	0xFD8
  9048                           
  9049 ;; *************** function ___awtoft *****************
  9050 ;; Defined at:
  9051 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\awtoft.c"
  9052 ;; Parameters:    Size  Location     Type
  9053 ;;  c               2   22[COMRAM] int 
  9054 ;; Auto vars:     Size  Location     Type
  9055 ;;  sign            1   25[COMRAM] unsigned char 
  9056 ;; Return value:  Size  Location     Type
  9057 ;;                  3   22[COMRAM] float 
  9058 ;; Registers used:
  9059 ;;		wreg, status,2, status,0, cstack
  9060 ;; Tracked objects:
  9061 ;;		On entry : 0/0
  9062 ;;		On exit  : 0/0
  9063 ;;		Unchanged: 0/0
  9064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9065 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9066 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9067 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9068 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9069 ;;Total ram usage:        4 bytes
  9070 ;; Hardware stack levels used:    1
  9071 ;; Hardware stack levels required when called:    3
  9072 ;; This function calls:
  9073 ;;		___ftpack
  9074 ;; This function is called by:
  9075 ;;		_Read_Volt
  9076 ;; This function uses a non-reentrant model
  9077 ;;
  9078                           
  9079                           	psect	text42
  9080  0025E8                     __ptext42:
  9081                           	opt stack 0
  9082  0025E8                     ___awtoft:
  9083                           	opt stack 26
  9084                           
  9085                           ;incstack = 0
  9086  0025E8  0E00               	movlw	0
  9087  0025EA  6E1A               	movwf	___awtoft@sign,c
  9088  0025EC  AE18               	btfss	___awtoft@c+1,7,c
  9089  0025EE  D007               	goto	l4746
  9090  0025F0  6C17               	negf	___awtoft@c,c
  9091  0025F2  1E18               	comf	___awtoft@c+1,f,c
  9092  0025F4  B0D8               	btfsc	status,0,c
  9093  0025F6  2A18               	incf	___awtoft@c+1,f,c
  9094  0025F8  0E01               	movlw	1
  9095  0025FA  6E1A               	movwf	___awtoft@sign,c
  9096  0025FC  D000               	goto	l4746
  9097  0025FE                     l4746:
  9098  0025FE  C017  F00F         	movff	___awtoft@c,___ftpack@arg
  9099  002602  C018  F010         	movff	___awtoft@c+1,___ftpack@arg+1
  9100  002606  6A11               	clrf	___ftpack@arg+2,c
  9101  002608  0E8E               	movlw	142
  9102  00260A  6E12               	movwf	___ftpack@exp,c
  9103  00260C  C01A  F013         	movff	___awtoft@sign,___ftpack@sign
  9104  002610  EC5C  F00D         	call	___ftpack	;wreg free
  9105  002614  C00F  F017         	movff	?___ftpack,?___awtoft
  9106  002618  C010  F018         	movff	?___ftpack+1,?___awtoft+1
  9107  00261C  C011  F019         	movff	?___ftpack+2,?___awtoft+2
  9108  002620  D000               	goto	l941
  9109  002622                     l941:
  9110  002622  0012               	return		;funcret
  9111  002624                     __end_of___awtoft:
  9112                           	opt stack 0
  9113                           tblptru	equ	0xFF8
  9114                           tblptrh	equ	0xFF7
  9115                           tblptrl	equ	0xFF6
  9116                           tablat	equ	0xFF5
  9117                           prodl	equ	0xFF3
  9118                           intcon	equ	0xFF2
  9119                           intcon2	equ	0xFF1
  9120                           intcon3	equ	0xFF0
  9121                           postinc0	equ	0xFEE
  9122                           wreg	equ	0xFE8
  9123                           postdec1	equ	0xFE5
  9124                           fsr1l	equ	0xFE1
  9125                           status	equ	0xFD8
  9126                           
  9127 ;; *************** function ___ftpack *****************
  9128 ;; Defined at:
  9129 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\float.c"
  9130 ;; Parameters:    Size  Location     Type
  9131 ;;  arg             3   14[COMRAM] unsigned um
  9132 ;;  exp             1   17[COMRAM] unsigned char 
  9133 ;;  sign            1   18[COMRAM] unsigned char 
  9134 ;; Auto vars:     Size  Location     Type
  9135 ;;		None
  9136 ;; Return value:  Size  Location     Type
  9137 ;;                  3   14[COMRAM] float 
  9138 ;; Registers used:
  9139 ;;		wreg, status,2, status,0
  9140 ;; Tracked objects:
  9141 ;;		On entry : 0/0
  9142 ;;		On exit  : 0/0
  9143 ;;		Unchanged: 0/0
  9144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9145 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9147 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9148 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9149 ;;Total ram usage:        8 bytes
  9150 ;; Hardware stack levels used:    1
  9151 ;; Hardware stack levels required when called:    2
  9152 ;; This function calls:
  9153 ;;		Nothing
  9154 ;; This function is called by:
  9155 ;;		___awtoft
  9156 ;;		___ftdiv
  9157 ;;		___ftmul
  9158 ;; This function uses a non-reentrant model
  9159 ;;
  9160                           
  9161                           	psect	text43
  9162  001AB8                     __ptext43:
  9163                           	opt stack 0
  9164  001AB8                     ___ftpack:
  9165                           	opt stack 26
  9166                           
  9167                           ;incstack = 0
  9168  001AB8  5012               	movf	___ftpack@exp,w,c
  9169  001ABA  B4D8               	btfsc	status,2,c
  9170  001ABC  D005               	goto	l4588
  9171  001ABE  500F               	movf	___ftpack@arg,w,c
  9172  001AC0  1010               	iorwf	___ftpack@arg+1,w,c
  9173  001AC2  1011               	iorwf	___ftpack@arg+2,w,c
  9174  001AC4  A4D8               	btfss	status,2,c
  9175  001AC6  D00E               	goto	l4594
  9176  001AC8                     l4588:
  9177  001AC8  0E00               	movlw	0
  9178  001ACA  6E0F               	movwf	?___ftpack,c
  9179  001ACC  0E00               	movlw	0
  9180  001ACE  6E10               	movwf	?___ftpack+1,c
  9181  001AD0  0E00               	movlw	0
  9182  001AD2  6E11               	movwf	?___ftpack+2,c
  9183  001AD4  D053               	goto	l1031
  9184  001AD6  D006               	goto	l4594
  9185  001AD8                     l4592:
  9186  001AD8  2A12               	incf	___ftpack@exp,f,c
  9187  001ADA  90D8               	bcf	status,0,c
  9188  001ADC  3211               	rrcf	___ftpack@arg+2,f,c
  9189  001ADE  3210               	rrcf	___ftpack@arg+1,f,c
  9190  001AE0  320F               	rrcf	___ftpack@arg,f,c
  9191  001AE2  D000               	goto	l4594
  9192  001AE4                     l4594:
  9193  001AE4  0E00               	movlw	0
  9194  001AE6  140F               	andwf	___ftpack@arg,w,c
  9195  001AE8  6E14               	movwf	??___ftpack& (0+255),c
  9196  001AEA  0E00               	movlw	0
  9197  001AEC  1410               	andwf	___ftpack@arg+1,w,c
  9198  001AEE  6E15               	movwf	(??___ftpack+1)& (0+255),c
  9199  001AF0  0EFE               	movlw	254
  9200  001AF2  1411               	andwf	___ftpack@arg+2,w,c
  9201  001AF4  6E16               	movwf	(??___ftpack+2)& (0+255),c
  9202  001AF6  5014               	movf	??___ftpack,w,c
  9203  001AF8  1015               	iorwf	??___ftpack+1,w,c
  9204  001AFA  1016               	iorwf	??___ftpack+2,w,c
  9205  001AFC  B4D8               	btfsc	status,2,c
  9206  001AFE  D00E               	goto	l4600
  9207  001B00  D7EB               	goto	l4592
  9208  001B02  D00C               	goto	l4600
  9209  001B04                     l4596:
  9210  001B04  2A12               	incf	___ftpack@exp,f,c
  9211  001B06  0E01               	movlw	1
  9212  001B08  260F               	addwf	___ftpack@arg,f,c
  9213  001B0A  0E00               	movlw	0
  9214  001B0C  2210               	addwfc	___ftpack@arg+1,f,c
  9215  001B0E  0E00               	movlw	0
  9216  001B10  2211               	addwfc	___ftpack@arg+2,f,c
  9217  001B12  90D8               	bcf	status,0,c
  9218  001B14  3211               	rrcf	___ftpack@arg+2,f,c
  9219  001B16  3210               	rrcf	___ftpack@arg+1,f,c
  9220  001B18  320F               	rrcf	___ftpack@arg,f,c
  9221  001B1A  D000               	goto	l4600
  9222  001B1C                     l4600:
  9223  001B1C  0E00               	movlw	0
  9224  001B1E  140F               	andwf	___ftpack@arg,w,c
  9225  001B20  6E14               	movwf	??___ftpack& (0+255),c
  9226  001B22  0E00               	movlw	0
  9227  001B24  1410               	andwf	___ftpack@arg+1,w,c
  9228  001B26  6E15               	movwf	(??___ftpack+1)& (0+255),c
  9229  001B28  0EFF               	movlw	255
  9230  001B2A  1411               	andwf	___ftpack@arg+2,w,c
  9231  001B2C  6E16               	movwf	(??___ftpack+2)& (0+255),c
  9232  001B2E  5014               	movf	??___ftpack,w,c
  9233  001B30  1015               	iorwf	??___ftpack+1,w,c
  9234  001B32  1016               	iorwf	??___ftpack+2,w,c
  9235  001B34  B4D8               	btfsc	status,2,c
  9236  001B36  D008               	goto	l4604
  9237  001B38  D7E5               	goto	l4596
  9238  001B3A  D006               	goto	l4604
  9239  001B3C                     l4602:
  9240  001B3C  0612               	decf	___ftpack@exp,f,c
  9241  001B3E  90D8               	bcf	status,0,c
  9242  001B40  360F               	rlcf	___ftpack@arg,f,c
  9243  001B42  3610               	rlcf	___ftpack@arg+1,f,c
  9244  001B44  3611               	rlcf	___ftpack@arg+2,f,c
  9245  001B46  D000               	goto	l4604
  9246  001B48                     l4604:
  9247  001B48  BE10               	btfsc	___ftpack@arg+1,7,c
  9248  001B4A  D004               	goto	l1042
  9249  001B4C  0E02               	movlw	2
  9250  001B4E  6012               	cpfslt	___ftpack@exp,c
  9251  001B50  D7F5               	goto	l4602
  9252  001B52  D000               	goto	l1042
  9253  001B54                     l1042:
  9254  001B54  B012               	btfsc	___ftpack@exp,0,c
  9255  001B56  D002               	goto	l4610
  9256  001B58  9E10               	bcf	___ftpack@arg+1,7,c
  9257  001B5A  D000               	goto	l4610
  9258  001B5C                     l4610:
  9259  001B5C  90D8               	bcf	status,0,c
  9260  001B5E  3212               	rrcf	___ftpack@exp,f,c
  9261  001B60  5012               	movf	___ftpack@exp,w,c
  9262  001B62  1211               	iorwf	___ftpack@arg+2,f,c
  9263  001B64  5013               	movf	___ftpack@sign,w,c
  9264  001B66  B4D8               	btfsc	status,2,c
  9265  001B68  D002               	goto	l4616
  9266  001B6A  8E11               	bsf	___ftpack@arg+2,7,c
  9267  001B6C  D000               	goto	l4616
  9268  001B6E                     l4616:
  9269  001B6E  C00F  F00F         	movff	___ftpack@arg,?___ftpack
  9270  001B72  C010  F010         	movff	___ftpack@arg+1,?___ftpack+1
  9271  001B76  C011  F011         	movff	___ftpack@arg+2,?___ftpack+2
  9272  001B7A  D000               	goto	l1031
  9273  001B7C                     l1031:
  9274  001B7C  0012               	return		;funcret
  9275  001B7E                     __end_of___ftpack:
  9276                           	opt stack 0
  9277                           tblptru	equ	0xFF8
  9278                           tblptrh	equ	0xFF7
  9279                           tblptrl	equ	0xFF6
  9280                           tablat	equ	0xFF5
  9281                           prodl	equ	0xFF3
  9282                           intcon	equ	0xFF2
  9283                           intcon2	equ	0xFF1
  9284                           intcon3	equ	0xFF0
  9285                           postinc0	equ	0xFEE
  9286                           wreg	equ	0xFE8
  9287                           postdec1	equ	0xFE5
  9288                           fsr1l	equ	0xFE1
  9289                           status	equ	0xFD8
  9290                           
  9291 ;; *************** function _Wait_Half_Second *****************
  9292 ;; Defined at:
  9293 ;;		line 114 in file "utils.c"
  9294 ;; Parameters:    Size  Location     Type
  9295 ;;		None
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;		None
  9298 ;; Return value:  Size  Location     Type
  9299 ;;		None               void
  9300 ;; Registers used:
  9301 ;;		wreg, status,2
  9302 ;; Tracked objects:
  9303 ;;		On entry : 0/0
  9304 ;;		On exit  : 0/0
  9305 ;;		Unchanged: 0/0
  9306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9307 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9308 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9310 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9311 ;;Total ram usage:        0 bytes
  9312 ;; Hardware stack levels used:    1
  9313 ;; Hardware stack levels required when called:    2
  9314 ;; This function calls:
  9315 ;;		Nothing
  9316 ;; This function is called by:
  9317 ;;		_Wait_One_Second
  9318 ;;		_Wait_One_Second_With_Beep
  9319 ;; This function uses a non-reentrant model
  9320 ;;
  9321                           
  9322                           	psect	text44
  9323  00282A                     __ptext44:
  9324                           	opt stack 0
  9325  00282A                     _Wait_Half_Second:
  9326                           	opt stack 25
  9327                           
  9328                           ;utils.c: 116: T0CON = 0x03;
  9329                           
  9330                           ;incstack = 0
  9331  00282A  0E03               	movlw	3
  9332  00282C  6ED5               	movwf	4053,c	;volatile
  9333                           
  9334                           ;utils.c: 117: TMR0L = 0xDB;
  9335  00282E  0EDB               	movlw	219
  9336  002830  6ED6               	movwf	4054,c	;volatile
  9337                           
  9338                           ;utils.c: 118: TMR0H = 0x0B;
  9339  002832  0E0B               	movlw	11
  9340  002834  6ED7               	movwf	4055,c	;volatile
  9341                           
  9342                           ;utils.c: 119: INTCONbits.TMR0IF = 0;
  9343  002836  94F2               	bcf	intcon,2,c	;volatile
  9344                           
  9345                           ;utils.c: 120: T0CONbits.TMR0ON = 1;
  9346  002838  8ED5               	bsf	4053,7,c	;volatile
  9347                           
  9348                           ;utils.c: 121: while (INTCONbits.TMR0IF == 0);
  9349  00283A  D000               	goto	l655
  9350  00283C                     l655:
  9351  00283C  A4F2               	btfss	intcon,2,c	;volatile
  9352  00283E  D7FE               	goto	l655
  9353                           
  9354                           ;utils.c: 122: T0CONbits.TMR0ON = 0;
  9355  002840  9ED5               	bcf	4053,7,c	;volatile
  9356  002842  0012               	return		;funcret
  9357  002844                     __end_of_Wait_Half_Second:
  9358                           	opt stack 0
  9359                           tblptru	equ	0xFF8
  9360                           tblptrh	equ	0xFF7
  9361                           tblptrl	equ	0xFF6
  9362                           tablat	equ	0xFF5
  9363                           prodl	equ	0xFF3
  9364                           intcon	equ	0xFF2
  9365                           intcon2	equ	0xFF1
  9366                           intcon3	equ	0xFF0
  9367                           postinc0	equ	0xFEE
  9368                           wreg	equ	0xFE8
  9369                           postdec1	equ	0xFE5
  9370                           fsr1l	equ	0xFE1
  9371                           status	equ	0xFD8
  9372                           
  9373 ;; *************** function _Erase_Star *****************
  9374 ;; Defined at:
  9375 ;;		line 310 in file "Main_Screen.c"
  9376 ;; Parameters:    Size  Location     Type
  9377 ;;		None
  9378 ;; Auto vars:     Size  Location     Type
  9379 ;;		None
  9380 ;; Return value:  Size  Location     Type
  9381 ;;		None               void
  9382 ;; Registers used:
  9383 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9393 ;;Total ram usage:        0 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:    9
  9396 ;; This function calls:
  9397 ;;		_drawtext
  9398 ;;		_strcpy
  9399 ;; This function is called by:
  9400 ;;		_Wait_One_Second
  9401 ;;		_Wait_One_Second_With_Beep
  9402 ;; This function uses a non-reentrant model
  9403 ;;
  9404                           
  9405                           	psect	text45
  9406  002624                     __ptext45:
  9407                           	opt stack 0
  9408  002624                     _Erase_Star:
  9409                           	opt stack 18
  9410                           
  9411                           ;Main_Screen.c: 312: strcpy(txt," ");
  9412                           
  9413                           ;incstack = 0
  9414  002624  C047  F00F         	movff	_txt,strcpy@to
  9415  002628  C048  F010         	movff	_txt+1,strcpy@to+1
  9416  00262C  0EFA               	movlw	low STR_13
  9417  00262E  6E11               	movwf	strcpy@from,c
  9418  002630  0EFF               	movlw	high STR_13
  9419  002632  6E12               	movwf	strcpy@from+1,c
  9420  002634  EC67  F013         	call	_strcpy	;wreg free
  9421                           
  9422                           ;Main_Screen.c: 313: drawtext(120,2,txt,0xFFFF,0x0000,1);
  9423  002638  0E02               	movlw	2
  9424  00263A  6E37               	movwf	drawtext@y,c
  9425  00263C  C047  F038         	movff	_txt,drawtext@_text
  9426  002640  C048  F039         	movff	_txt+1,drawtext@_text+1
  9427  002644  0EFF               	movlw	255
  9428  002646  6E3B               	movwf	drawtext@color+1,c
  9429  002648  683A               	setf	drawtext@color,c
  9430  00264A  0E00               	movlw	0
  9431  00264C  6E3D               	movwf	drawtext@bg+1,c
  9432  00264E  0E00               	movlw	0
  9433  002650  6E3C               	movwf	drawtext@bg,c
  9434  002652  0E01               	movlw	1
  9435  002654  6E3E               	movwf	drawtext@size,c
  9436  002656  0E78               	movlw	120
  9437  002658  EC24  F00A         	call	_drawtext
  9438  00265C  0012               	return		;funcret
  9439  00265E                     __end_of_Erase_Star:
  9440                           	opt stack 0
  9441                           tblptru	equ	0xFF8
  9442                           tblptrh	equ	0xFF7
  9443                           tblptrl	equ	0xFF6
  9444                           tablat	equ	0xFF5
  9445                           prodl	equ	0xFF3
  9446                           intcon	equ	0xFF2
  9447                           intcon2	equ	0xFF1
  9448                           intcon3	equ	0xFF0
  9449                           postinc0	equ	0xFEE
  9450                           wreg	equ	0xFE8
  9451                           postdec1	equ	0xFE5
  9452                           fsr1l	equ	0xFE1
  9453                           status	equ	0xFD8
  9454                           
  9455 ;; *************** function _Draw_Star *****************
  9456 ;; Defined at:
  9457 ;;		line 304 in file "Main_Screen.c"
  9458 ;; Parameters:    Size  Location     Type
  9459 ;;		None
  9460 ;; Auto vars:     Size  Location     Type
  9461 ;;		None
  9462 ;; Return value:  Size  Location     Type
  9463 ;;		None               void
  9464 ;; Registers used:
  9465 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9466 ;; Tracked objects:
  9467 ;;		On entry : 0/0
  9468 ;;		On exit  : 0/0
  9469 ;;		Unchanged: 0/0
  9470 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9471 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9472 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9473 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9474 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9475 ;;Total ram usage:        0 bytes
  9476 ;; Hardware stack levels used:    1
  9477 ;; Hardware stack levels required when called:    9
  9478 ;; This function calls:
  9479 ;;		_drawtext
  9480 ;;		_strcpy
  9481 ;; This function is called by:
  9482 ;;		_Wait_One_Second
  9483 ;;		_Wait_One_Second_With_Beep
  9484 ;; This function uses a non-reentrant model
  9485 ;;
  9486                           
  9487                           	psect	text46
  9488  00265E                     __ptext46:
  9489                           	opt stack 0
  9490  00265E                     _Draw_Star:
  9491                           	opt stack 18
  9492                           
  9493                           ;Main_Screen.c: 306: strcpy(txt,"*");
  9494                           
  9495                           ;incstack = 0
  9496  00265E  C047  F00F         	movff	_txt,strcpy@to
  9497  002662  C048  F010         	movff	_txt+1,strcpy@to+1
  9498  002666  0EFC               	movlw	low STR_4
  9499  002668  6E11               	movwf	strcpy@from,c
  9500  00266A  0EFF               	movlw	high STR_4
  9501  00266C  6E12               	movwf	strcpy@from+1,c
  9502  00266E  EC67  F013         	call	_strcpy	;wreg free
  9503                           
  9504                           ;Main_Screen.c: 307: drawtext(120,2,txt,0xFFFF,0x0000,1);
  9505  002672  0E02               	movlw	2
  9506  002674  6E37               	movwf	drawtext@y,c
  9507  002676  C047  F038         	movff	_txt,drawtext@_text
  9508  00267A  C048  F039         	movff	_txt+1,drawtext@_text+1
  9509  00267E  0EFF               	movlw	255
  9510  002680  6E3B               	movwf	drawtext@color+1,c
  9511  002682  683A               	setf	drawtext@color,c
  9512  002684  0E00               	movlw	0
  9513  002686  6E3D               	movwf	drawtext@bg+1,c
  9514  002688  0E00               	movlw	0
  9515  00268A  6E3C               	movwf	drawtext@bg,c
  9516  00268C  0E01               	movlw	1
  9517  00268E  6E3E               	movwf	drawtext@size,c
  9518  002690  0E78               	movlw	120
  9519  002692  EC24  F00A         	call	_drawtext
  9520  002696  0012               	return		;funcret
  9521  002698                     __end_of_Draw_Star:
  9522                           	opt stack 0
  9523                           tblptru	equ	0xFF8
  9524                           tblptrh	equ	0xFF7
  9525                           tblptrl	equ	0xFF6
  9526                           tablat	equ	0xFF5
  9527                           prodl	equ	0xFF3
  9528                           intcon	equ	0xFF2
  9529                           intcon2	equ	0xFF1
  9530                           intcon3	equ	0xFF0
  9531                           postinc0	equ	0xFEE
  9532                           wreg	equ	0xFE8
  9533                           postdec1	equ	0xFE5
  9534                           fsr1l	equ	0xFE1
  9535                           status	equ	0xFD8
  9536                           
  9537 ;; *************** function _strcpy *****************
  9538 ;; Defined at:
  9539 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strcpy.c"
  9540 ;; Parameters:    Size  Location     Type
  9541 ;;  to              2   14[COMRAM] PTR unsigned char 
  9542 ;;		 -> NULL(0), buffer(31), 
  9543 ;;  from            2   16[COMRAM] PTR const unsigned char 
  9544 ;;		 -> STR_13(2), STR_12(2), STR_11(4), STR_10(4), 
  9545 ;;		 -> STR_9(7), STR_8(10), STR_7(7), STR_6(12), 
  9546 ;;		 -> STR_5(22), STR_4(2), STR_3(3), STR_2(5), 
  9547 ;;		 -> STR_1(6), 
  9548 ;; Auto vars:     Size  Location     Type
  9549 ;;  cp              2   18[COMRAM] PTR unsigned char 
  9550 ;;		 -> NULL(0), buffer(31), 
  9551 ;; Return value:  Size  Location     Type
  9552 ;;                  2   14[COMRAM] PTR unsigned char 
  9553 ;; Registers used:
  9554 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
  9555 ;; Tracked objects:
  9556 ;;		On entry : 0/0
  9557 ;;		On exit  : 0/0
  9558 ;;		Unchanged: 0/0
  9559 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9560 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9561 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9562 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9563 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9564 ;;Total ram usage:        6 bytes
  9565 ;; Hardware stack levels used:    1
  9566 ;; Hardware stack levels required when called:    2
  9567 ;; This function calls:
  9568 ;;		Nothing
  9569 ;; This function is called by:
  9570 ;;		_Initialize_LCD_Screen
  9571 ;;		_Draw_Star
  9572 ;;		_Erase_Star
  9573 ;; This function uses a non-reentrant model
  9574 ;;
  9575                           
  9576                           	psect	text47
  9577  0026CE                     __ptext47:
  9578                           	opt stack 0
  9579  0026CE                     _strcpy:
  9580                           	opt stack 24
  9581                           
  9582                           ;incstack = 0
  9583  0026CE  C00F  F013         	movff	strcpy@to,strcpy@cp
  9584  0026D2  C010  F014         	movff	strcpy@to+1,strcpy@cp+1
  9585  0026D6  D005               	goto	l4764
  9586  0026D8                     l4762:
  9587  0026D8  4A13               	infsnz	strcpy@cp,f,c
  9588  0026DA  2A14               	incf	strcpy@cp+1,f,c
  9589  0026DC  4A11               	infsnz	strcpy@from,f,c
  9590  0026DE  2A12               	incf	strcpy@from+1,f,c
  9591  0026E0  D000               	goto	l4764
  9592  0026E2                     l4764:
  9593  0026E2  C011  FFF6         	movff	strcpy@from,tblptrl
  9594  0026E6  C012  FFF7         	movff	strcpy@from+1,tblptrh
  9595  0026EA                     	if	0	;tblptru may be non-zero
  9596  0026EA                     	endif
  9597  0026EA                     	if	0	;tblptru may be non-zero
  9598  0026EA                     	endif
  9599  0026EA  C013  FFD9         	movff	strcpy@cp,fsr2l
  9600  0026EE  C014  FFDA         	movff	strcpy@cp+1,fsr2h
  9601  0026F2  0008               	tblrd		*
  9602  0026F4  CFF5 FFDF          	movff	tablat,indf2
  9603  0026F8  50DF               	movf	indf2,w,c
  9604  0026FA  A4D8               	btfss	status,2,c
  9605  0026FC  D7ED               	goto	l4762
  9606                           
  9607                           ;	Return value of _strcpy is never used
  9608  0026FE  0012               	return		;funcret
  9609  002700                     __end_of_strcpy:
  9610                           	opt stack 0
  9611                           tblptru	equ	0xFF8
  9612                           tblptrh	equ	0xFF7
  9613                           tblptrl	equ	0xFF6
  9614                           tablat	equ	0xFF5
  9615                           prodl	equ	0xFF3
  9616                           intcon	equ	0xFF2
  9617                           intcon2	equ	0xFF1
  9618                           intcon3	equ	0xFF0
  9619                           postinc0	equ	0xFEE
  9620                           wreg	equ	0xFE8
  9621                           postdec1	equ	0xFE5
  9622                           fsr1l	equ	0xFE1
  9623                           indf2	equ	0xFDF
  9624                           fsr2h	equ	0xFDA
  9625                           fsr2l	equ	0xFD9
  9626                           status	equ	0xFD8
  9627                           
  9628 ;; *************** function _drawtext *****************
  9629 ;; Defined at:
  9630 ;;		line 425 in file "ST7735_TFT.c"
  9631 ;; Parameters:    Size  Location     Type
  9632 ;;  x               1    wreg     unsigned char 
  9633 ;;  y               1   54[COMRAM] unsigned char 
  9634 ;;  _text           2   55[COMRAM] PTR unsigned char 
  9635 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9636 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9637 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9638 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9639 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9640 ;;  color           2   57[COMRAM] unsigned int 
  9641 ;;  bg              2   59[COMRAM] unsigned int 
  9642 ;;  size            1   61[COMRAM] unsigned char 
  9643 ;; Auto vars:     Size  Location     Type
  9644 ;;  x               1    0[BANK0 ] unsigned char 
  9645 ;;  i               2    3[BANK0 ] unsigned int 
  9646 ;;  textsize        2    1[BANK0 ] unsigned int 
  9647 ;;  cursor_x        1    6[BANK0 ] unsigned char 
  9648 ;;  cursor_y        1    5[BANK0 ] unsigned char 
  9649 ;; Return value:  Size  Location     Type
  9650 ;;		None               void
  9651 ;; Registers used:
  9652 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9653 ;; Tracked objects:
  9654 ;;		On entry : 0/0
  9655 ;;		On exit  : 0/0
  9656 ;;		Unchanged: 0/0
  9657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9658 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9659 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9660 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9661 ;;      Totals:        10       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9662 ;;Total ram usage:       17 bytes
  9663 ;; Hardware stack levels used:    1
  9664 ;; Hardware stack levels required when called:    8
  9665 ;; This function calls:
  9666 ;;		_drawChar
  9667 ;;		_strlen
  9668 ;; This function is called by:
  9669 ;;		_Initialize_LCD_Screen
  9670 ;;		_update_LCD_PED_Count
  9671 ;;		_update_LCD_count
  9672 ;;		_update_LCD_misc
  9673 ;;		_Draw_Star
  9674 ;;		_Erase_Star
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           	psect	text48
  9679  001448                     __ptext48:
  9680                           	opt stack 0
  9681  001448                     _drawtext:
  9682                           	opt stack 19
  9683                           
  9684                           ;incstack = 0
  9685                           ;drawtext@x stored from wreg
  9686  001448  0100               	movlb	0	; () banked
  9687  00144A  6FCB               	movwf	drawtext@x& (0+255),b
  9688                           
  9689                           ; BSR set to: 0
  9690                           ;ST7735_TFT.c: 427: unsigned char cursor_x, cursor_y;
  9691                           ;ST7735_TFT.c: 428: unsigned int textsize, i;
  9692                           ;ST7735_TFT.c: 429: cursor_x = x, cursor_y = y;
  9693  00144C  C0CB  F0D1         	movff	drawtext@x,drawtext@cursor_x
  9694                           
  9695                           ; BSR set to: 0
  9696  001450  C037  F0D0         	movff	drawtext@y,drawtext@cursor_y
  9697                           
  9698                           ; BSR set to: 0
  9699                           ;ST7735_TFT.c: 430: textsize = strlen(_text);
  9700  001454  C038  F00F         	movff	drawtext@_text,strlen@s
  9701  001458  C039  F010         	movff	drawtext@_text+1,strlen@s+1
  9702  00145C  ECD5  F012         	call	_strlen	;wreg free
  9703  001460  C00F  F0CC         	movff	?_strlen,drawtext@textsize
  9704  001464  C010  F0CD         	movff	?_strlen+1,drawtext@textsize+1
  9705                           
  9706                           ;ST7735_TFT.c: 431: for(i = 0; i < textsize; i++){
  9707  001468  0E00               	movlw	0
  9708  00146A  0100               	movlb	0	; () banked
  9709  00146C  6FCF               	movwf	(drawtext@i+1)& (0+255),b
  9710  00146E  0E00               	movlw	0
  9711  001470  6FCE               	movwf	drawtext@i& (0+255),b
  9712  001472  D064               	goto	l4800
  9713  001474                     l4774:
  9714                           
  9715                           ; BSR set to: 0
  9716                           ;ST7735_TFT.c: 432: if(wrap && ((cursor_x + size * 5) > 128)){
  9717  001474  505D               	movf	_wrap,w,c
  9718  001476  B4D8               	btfsc	status,2,c
  9719  001478  D034               	goto	l4790
  9720                           
  9721                           ; BSR set to: 0
  9722  00147A  503E               	movf	drawtext@size,w,c
  9723  00147C  0D05               	mullw	5
  9724  00147E  0100               	movlb	0	; () banked
  9725  001480  51D1               	movf	drawtext@cursor_x& (0+255),w,b
  9726  001482  6E3F               	movwf	??_drawtext& (0+255),c
  9727  001484  6A40               	clrf	(??_drawtext+1)& (0+255),c
  9728  001486  50F3               	movf	prodl,w,c
  9729  001488  263F               	addwf	??_drawtext,f,c
  9730  00148A  50F4               	movf	prodh,w,c
  9731  00148C  2240               	addwfc	??_drawtext+1,f,c
  9732  00148E  BE40               	btfsc	??_drawtext+1,7,c
  9733  001490  D028               	goto	l4790
  9734  001492  5040               	movf	??_drawtext+1,w,c
  9735  001494  E104               	bnz	u3460
  9736  001496  0E81               	movlw	129
  9737  001498  5C3F               	subwf	??_drawtext,w,c
  9738  00149A  A0D8               	btfss	status,0,c
  9739  00149C  D022               	goto	l4790
  9740  00149E                     u3460:
  9741                           
  9742                           ; BSR set to: 0
  9743                           ;ST7735_TFT.c: 433: cursor_x = 0;
  9744  00149E  0E00               	movlw	0
  9745  0014A0  0100               	movlb	0	; () banked
  9746  0014A2  6FD1               	movwf	drawtext@cursor_x& (0+255),b
  9747                           
  9748                           ; BSR set to: 0
  9749                           ;ST7735_TFT.c: 434: cursor_y = cursor_y + size * 7 + 3 ;
  9750  0014A4  503E               	movf	drawtext@size,w,c
  9751  0014A6  0D07               	mullw	7
  9752  0014A8  50F3               	movf	prodl,w,c
  9753  0014AA  0100               	movlb	0	; () banked
  9754  0014AC  25D0               	addwf	drawtext@cursor_y& (0+255),w,b
  9755  0014AE  0F03               	addlw	3
  9756  0014B0  0100               	movlb	0	; () banked
  9757  0014B2  6FD0               	movwf	drawtext@cursor_y& (0+255),b
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;ST7735_TFT.c: 435: if(cursor_y > 160) cursor_y = 160;
  9761  0014B4  0EA0               	movlw	160
  9762  0014B6  0100               	movlb	0	; () banked
  9763  0014B8  65D0               	cpfsgt	drawtext@cursor_y& (0+255),b
  9764  0014BA  D004               	goto	l4786
  9765                           
  9766                           ; BSR set to: 0
  9767  0014BC  0EA0               	movlw	160
  9768  0014BE  0100               	movlb	0	; () banked
  9769  0014C0  6FD0               	movwf	drawtext@cursor_y& (0+255),b
  9770  0014C2  D000               	goto	l4786
  9771  0014C4                     l4786:
  9772                           
  9773                           ; BSR set to: 0
  9774                           ;ST7735_TFT.c: 436: if(_text[i] == 0x20) goto _skip; }
  9775  0014C4  0100               	movlb	0	; () banked
  9776  0014C6  51CE               	movf	drawtext@i& (0+255),w,b
  9777  0014C8  2438               	addwf	drawtext@_text,w,c
  9778  0014CA  6ED9               	movwf	fsr2l,c
  9779  0014CC  0100               	movlb	0	; () banked
  9780  0014CE  51CF               	movf	(drawtext@i+1)& (0+255),w,b
  9781  0014D0  2039               	addwfc	drawtext@_text+1,w,c
  9782  0014D2  6EDA               	movwf	fsr2h,c
  9783  0014D4  0E20               	movlw	32
  9784  0014D6  18DE               	xorwf	postinc2,w,c
  9785  0014D8  B4D8               	btfsc	status,2,c
  9786  0014DA  D02C               	goto	l4798
  9787  0014DC  D002               	goto	l4790
  9788                           
  9789                           ; BSR set to: 0
  9790  0014DE  D02A               	goto	l4798
  9791                           
  9792                           ; BSR set to: 0
  9793  0014E0  D000               	goto	l4790
  9794  0014E2                     l4790:
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;ST7735_TFT.c: 437: drawChar(cursor_x, cursor_y, _text[i], color, bg, size);
  9798  0014E2  C0D0  F02C         	movff	drawtext@cursor_y,drawChar@y
  9799  0014E6  0100               	movlb	0	; () banked
  9800  0014E8  51CE               	movf	drawtext@i& (0+255),w,b
  9801  0014EA  2438               	addwf	drawtext@_text,w,c
  9802  0014EC  6ED9               	movwf	fsr2l,c
  9803  0014EE  0100               	movlb	0	; () banked
  9804  0014F0  51CF               	movf	(drawtext@i+1)& (0+255),w,b
  9805  0014F2  2039               	addwfc	drawtext@_text+1,w,c
  9806  0014F4  6EDA               	movwf	fsr2h,c
  9807  0014F6  50DF               	movf	indf2,w,c
  9808  0014F8  6E2D               	movwf	drawChar@c,c
  9809  0014FA  C03A  F02E         	movff	drawtext@color,drawChar@color
  9810  0014FE  C03B  F02F         	movff	drawtext@color+1,drawChar@color+1
  9811  001502  C03C  F030         	movff	drawtext@bg,drawChar@bg
  9812  001506  C03D  F031         	movff	drawtext@bg+1,drawChar@bg+1
  9813  00150A  C03E  F032         	movff	drawtext@size,drawChar@size
  9814  00150E  0100               	movlb	0	; () banked
  9815  001510  51D1               	movf	drawtext@cursor_x& (0+255),w,b
  9816  001512  EC55  F008         	call	_drawChar
  9817                           
  9818                           ;ST7735_TFT.c: 438: cursor_x = cursor_x + size * 6;
  9819  001516  503E               	movf	drawtext@size,w,c
  9820  001518  0D06               	mullw	6
  9821  00151A  50F3               	movf	prodl,w,c
  9822  00151C  0100               	movlb	0	; () banked
  9823  00151E  25D1               	addwf	drawtext@cursor_x& (0+255),w,b
  9824  001520  0100               	movlb	0	; () banked
  9825  001522  6FD1               	movwf	drawtext@cursor_x& (0+255),b
  9826                           
  9827                           ; BSR set to: 0
  9828                           ;ST7735_TFT.c: 439: if(cursor_x > 128) cursor_x = 128;
  9829  001524  0E80               	movlw	128
  9830  001526  0100               	movlb	0	; () banked
  9831  001528  65D1               	cpfsgt	drawtext@cursor_x& (0+255),b
  9832  00152A  D004               	goto	l4798
  9833                           
  9834                           ; BSR set to: 0
  9835  00152C  0E80               	movlw	128
  9836  00152E  0100               	movlb	0	; () banked
  9837  001530  6FD1               	movwf	drawtext@cursor_x& (0+255),b
  9838                           
  9839                           ; BSR set to: 0
  9840  001532  D000               	goto	l4798
  9841  001534                     l4798:
  9842                           
  9843                           ; BSR set to: 0
  9844  001534  0100               	movlb	0	; () banked
  9845  001536  4BCE               	infsnz	drawtext@i& (0+255),f,b
  9846  001538  2BCF               	incf	(drawtext@i+1)& (0+255),f,b
  9847  00153A  D000               	goto	l4800
  9848  00153C                     l4800:
  9849                           
  9850                           ; BSR set to: 0
  9851  00153C  0100               	movlb	0	; () banked
  9852  00153E  51CC               	movf	drawtext@textsize& (0+255),w,b
  9853  001540  0100               	movlb	0	; () banked
  9854  001542  5DCE               	subwf	drawtext@i& (0+255),w,b
  9855  001544  0100               	movlb	0	; () banked
  9856  001546  51CD               	movf	(drawtext@textsize+1)& (0+255),w,b
  9857  001548  0100               	movlb	0	; () banked
  9858  00154A  59CF               	subwfb	(drawtext@i+1)& (0+255),w,b
  9859  00154C  A0D8               	btfss	status,0,c
  9860  00154E  D792               	goto	l4774
  9861                           
  9862                           ; BSR set to: 0
  9863                           
  9864                           ; BSR set to: 0
  9865  001550  0012               	return		;funcret
  9866  001552                     __end_of_drawtext:
  9867                           	opt stack 0
  9868                           tblptru	equ	0xFF8
  9869                           tblptrh	equ	0xFF7
  9870                           tblptrl	equ	0xFF6
  9871                           tablat	equ	0xFF5
  9872                           prodh	equ	0xFF4
  9873                           prodl	equ	0xFF3
  9874                           intcon	equ	0xFF2
  9875                           intcon2	equ	0xFF1
  9876                           intcon3	equ	0xFF0
  9877                           postinc0	equ	0xFEE
  9878                           wreg	equ	0xFE8
  9879                           postdec1	equ	0xFE5
  9880                           fsr1l	equ	0xFE1
  9881                           indf2	equ	0xFDF
  9882                           postinc2	equ	0xFDE
  9883                           fsr2h	equ	0xFDA
  9884                           fsr2l	equ	0xFD9
  9885                           status	equ	0xFD8
  9886                           
  9887 ;; *************** function _strlen *****************
  9888 ;; Defined at:
  9889 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\strlen.c"
  9890 ;; Parameters:    Size  Location     Type
  9891 ;;  s               2   14[COMRAM] PTR const unsigned char 
  9892 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9893 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9894 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9895 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9896 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9897 ;; Auto vars:     Size  Location     Type
  9898 ;;  cp              2   18[COMRAM] PTR const unsigned char 
  9899 ;;		 -> NULL(0), Timing_Txt(22), PED_EW_Count(3), PED_NS_Count(3), 
  9900 ;;		 -> EWLT_Count(3), EW_Count(3), NSLT_Count(3), NS_Count(3), 
  9901 ;;		 -> FlashingS_Txt(2), FlashingR_Txt(2), SW_EWLT_Txt(2), SW_EWPED_Txt(2), 
  9902 ;;		 -> SW_NSLT_Txt(2), SW_NSPED_Txt(2), Light_Sensor_Mode_Txt(3), Light_Sensor_Voltage_Txt(5), 
  9903 ;;		 -> Act_Mode_Txt(2), buffer(31), 
  9904 ;; Return value:  Size  Location     Type
  9905 ;;                  2   14[COMRAM] unsigned int 
  9906 ;; Registers used:
  9907 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  9908 ;; Tracked objects:
  9909 ;;		On entry : 0/0
  9910 ;;		On exit  : 0/0
  9911 ;;		Unchanged: 0/0
  9912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9913 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9914 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9915 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9916 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9917 ;;Total ram usage:        6 bytes
  9918 ;; Hardware stack levels used:    1
  9919 ;; Hardware stack levels required when called:    2
  9920 ;; This function calls:
  9921 ;;		Nothing
  9922 ;; This function is called by:
  9923 ;;		_drawtext
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           	psect	text49
  9928  0025AA                     __ptext49:
  9929                           	opt stack 0
  9930  0025AA                     _strlen:
  9931                           	opt stack 24
  9932                           
  9933                           ; BSR set to: 0
  9934                           ;incstack = 0
  9935  0025AA  C00F  F013         	movff	strlen@s,strlen@cp
  9936  0025AE  C010  F014         	movff	strlen@s+1,strlen@cp+1
  9937  0025B2  D003               	goto	l4686
  9938  0025B4                     l4684:
  9939  0025B4  4A13               	infsnz	strlen@cp,f,c
  9940  0025B6  2A14               	incf	strlen@cp+1,f,c
  9941  0025B8  D000               	goto	l4686
  9942  0025BA                     l4686:
  9943  0025BA  C013  FFD9         	movff	strlen@cp,fsr2l
  9944  0025BE  C014  FFDA         	movff	strlen@cp+1,fsr2h
  9945  0025C2  50DF               	movf	indf2,w,c
  9946  0025C4  A4D8               	btfss	status,2,c
  9947  0025C6  D7F6               	goto	l4684
  9948  0025C8  C00F  F011         	movff	strlen@s,??_strlen
  9949  0025CC  C010  F012         	movff	strlen@s+1,??_strlen+1
  9950  0025D0  1E11               	comf	??_strlen,f,c
  9951  0025D2  1E12               	comf	??_strlen+1,f,c
  9952  0025D4  4A11               	infsnz	??_strlen,f,c
  9953  0025D6  2A12               	incf	??_strlen+1,f,c
  9954  0025D8  5013               	movf	strlen@cp,w,c
  9955  0025DA  2411               	addwf	??_strlen,w,c
  9956  0025DC  6E0F               	movwf	?_strlen,c
  9957  0025DE  5014               	movf	strlen@cp+1,w,c
  9958  0025E0  2012               	addwfc	??_strlen+1,w,c
  9959  0025E2  6E10               	movwf	?_strlen+1,c
  9960  0025E4  D000               	goto	l1280
  9961  0025E6                     l1280:
  9962  0025E6  0012               	return		;funcret
  9963  0025E8                     __end_of_strlen:
  9964                           	opt stack 0
  9965                           tblptru	equ	0xFF8
  9966                           tblptrh	equ	0xFF7
  9967                           tblptrl	equ	0xFF6
  9968                           tablat	equ	0xFF5
  9969                           prodh	equ	0xFF4
  9970                           prodl	equ	0xFF3
  9971                           intcon	equ	0xFF2
  9972                           intcon2	equ	0xFF1
  9973                           intcon3	equ	0xFF0
  9974                           postinc0	equ	0xFEE
  9975                           wreg	equ	0xFE8
  9976                           postdec1	equ	0xFE5
  9977                           fsr1l	equ	0xFE1
  9978                           indf2	equ	0xFDF
  9979                           postinc2	equ	0xFDE
  9980                           fsr2h	equ	0xFDA
  9981                           fsr2l	equ	0xFD9
  9982                           status	equ	0xFD8
  9983                           
  9984 ;; *************** function _drawChar *****************
  9985 ;; Defined at:
  9986 ;;		line 398 in file "ST7735_TFT.c"
  9987 ;; Parameters:    Size  Location     Type
  9988 ;;  x               1    wreg     unsigned char 
  9989 ;;  y               1   43[COMRAM] unsigned char 
  9990 ;;  c               1   44[COMRAM] unsigned char 
  9991 ;;  color           2   45[COMRAM] unsigned int 
  9992 ;;  bg              2   47[COMRAM] unsigned int 
  9993 ;;  size            1   49[COMRAM] unsigned char 
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;  x               1   51[COMRAM] unsigned char 
  9996 ;;  line            1   50[COMRAM] unsigned char 
  9997 ;;  i               1   53[COMRAM] unsigned char 
  9998 ;;  j               1   52[COMRAM] unsigned char 
  9999 ;; Return value:  Size  Location     Type
 10000 ;;		None               void
 10001 ;; Registers used:
 10002 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10008 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10011 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10012 ;;Total ram usage:       11 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; Hardware stack levels required when called:    7
 10015 ;; This function calls:
 10016 ;;		___wmul
 10017 ;;		_drawPixel
 10018 ;;		_fillRect
 10019 ;; This function is called by:
 10020 ;;		_drawtext
 10021 ;; This function uses a non-reentrant model
 10022 ;;
 10023                           
 10024                           	psect	text50
 10025  0010AA                     __ptext50:
 10026                           	opt stack 0
 10027  0010AA                     _drawChar:
 10028                           	opt stack 19
 10029                           
 10030                           ;incstack = 0
 10031                           ;drawChar@x stored from wreg
 10032  0010AA  6E34               	movwf	drawChar@x,c
 10033                           
 10034                           ;ST7735_TFT.c: 400: char i, j;
 10035                           ;ST7735_TFT.c: 401: if((x >= 128) || (y >= 160))
 10036  0010AC  0E80               	movlw	128
 10037  0010AE  6034               	cpfslt	drawChar@x,c
 10038  0010B0  D0A6               	goto	l470
 10039  0010B2  0E9F               	movlw	159
 10040  0010B4  642C               	cpfsgt	drawChar@y,c
 10041  0010B6  D001               	goto	l4632
 10042                           
 10043                           ;ST7735_TFT.c: 402: return;
 10044  0010B8  D0A2               	goto	l470
 10045  0010BA                     l4632:
 10046                           
 10047                           ;ST7735_TFT.c: 403: if(size < 1) size = 1;
 10048  0010BA  5032               	movf	drawChar@size,w,c
 10049  0010BC  A4D8               	btfss	status,2,c
 10050  0010BE  D003               	goto	l4636
 10051  0010C0  0E01               	movlw	1
 10052  0010C2  6E32               	movwf	drawChar@size,c
 10053  0010C4  D000               	goto	l4636
 10054  0010C6                     l4636:
 10055                           
 10056                           ;ST7735_TFT.c: 404: if((c < ' ') || (c > '~'))
 10057  0010C6  0E1F               	movlw	31
 10058  0010C8  642D               	cpfsgt	drawChar@c,c
 10059  0010CA  D004               	goto	l4640
 10060  0010CC  0E7E               	movlw	126
 10061  0010CE  642D               	cpfsgt	drawChar@c,c
 10062  0010D0  D003               	goto	l472
 10063  0010D2  D000               	goto	l4640
 10064  0010D4                     l4640:
 10065                           
 10066                           ;ST7735_TFT.c: 405: c = '?';
 10067  0010D4  0E3F               	movlw	63
 10068  0010D6  6E2D               	movwf	drawChar@c,c
 10069  0010D8                     l472:
 10070                           
 10071                           ;ST7735_TFT.c: 406: for(i=0; i<5; i++ ) {
 10072  0010D8  0E00               	movlw	0
 10073  0010DA  6E36               	movwf	drawChar@i,c
 10074  0010DC                     l4642:
 10075  0010DC  0E04               	movlw	4
 10076  0010DE  6436               	cpfsgt	drawChar@i,c
 10077  0010E0  D001               	goto	l4646
 10078  0010E2  D08D               	goto	l470
 10079  0010E4                     l4646:
 10080                           
 10081                           ;ST7735_TFT.c: 407: unsigned char line;
 10082                           ;ST7735_TFT.c: 408: if(c < 'S')
 10083  0010E4  0E53               	movlw	83
 10084  0010E6  602D               	cpfslt	drawChar@c,c
 10085  0010E8  D015               	goto	l4650
 10086                           
 10087                           ;ST7735_TFT.c: 409: line = font[(c - 32)*5 + i];
 10088  0010EA  0EE0               	movlw	224
 10089  0010EC  242D               	addwf	drawChar@c,w,c
 10090  0010EE  6E0F               	movwf	___wmul@multiplier,c
 10091  0010F0  6A10               	clrf	___wmul@multiplier+1,c
 10092  0010F2  0EFF               	movlw	255
 10093  0010F4  2210               	addwfc	___wmul@multiplier+1,f,c
 10094  0010F6  0E00               	movlw	0
 10095  0010F8  6E12               	movwf	___wmul@multiplicand+1,c
 10096  0010FA  0E05               	movlw	5
 10097  0010FC  6E11               	movwf	___wmul@multiplicand,c
 10098  0010FE  ECC2  F013         	call	___wmul	;wreg free
 10099  001102  5036               	movf	drawChar@i,w,c
 10100  001104  260F               	addwf	?___wmul,f,c
 10101  001106  0E00               	movlw	0
 10102  001108  2210               	addwfc	?___wmul+1,f,c
 10103  00110A  0ECF               	movlw	low _font
 10104  00110C  240F               	addwf	?___wmul,w,c
 10105  00110E  6EF6               	movwf	tblptrl,c
 10106  001110  0EFD               	movlw	high _font
 10107  001112  D014               	goto	L18
 10108  001114                     l4650:
 10109                           
 10110                           ;ST7735_TFT.c: 410: else
 10111                           ;ST7735_TFT.c: 411: line = font2[(c - 'S')*5 + i];
 10112  001114  0EAD               	movlw	173
 10113  001116  242D               	addwf	drawChar@c,w,c
 10114  001118  6E0F               	movwf	___wmul@multiplier,c
 10115  00111A  6A10               	clrf	___wmul@multiplier+1,c
 10116  00111C  0EFF               	movlw	255
 10117  00111E  2210               	addwfc	___wmul@multiplier+1,f,c
 10118  001120  0E00               	movlw	0
 10119  001122  6E12               	movwf	___wmul@multiplicand+1,c
 10120  001124  0E05               	movlw	5
 10121  001126  6E11               	movwf	___wmul@multiplicand,c
 10122  001128  ECC2  F013         	call	___wmul	;wreg free
 10123  00112C  5036               	movf	drawChar@i,w,c
 10124  00112E  260F               	addwf	?___wmul,f,c
 10125  001130  0E00               	movlw	0
 10126  001132  2210               	addwfc	?___wmul+1,f,c
 10127  001134  0ECE               	movlw	low _font2
 10128  001136  240F               	addwf	?___wmul,w,c
 10129  001138  6EF6               	movwf	tblptrl,c
 10130  00113A  0EFE               	movlw	high _font2
 10131  00113C                     L18:
 10132  00113C  2010               	addwfc	?___wmul+1,w,c
 10133  00113E  6EF7               	movwf	tblptrh,c
 10134  001140                     	if	0	;There are less than 3 active tblptr bytes
 10135  001140                     	endif
 10136  001140  0008               	tblrd		*
 10137  001142  CFF5 F033          	movff	tablat,drawChar@line
 10138  001146  D000               	goto	l4652
 10139  001148                     l4652:
 10140                           
 10141                           ;ST7735_TFT.c: 412: for(j=0; j<7; j++, line >>= 1) {
 10142  001148  0E00               	movlw	0
 10143  00114A  6E35               	movwf	drawChar@j,c
 10144  00114C                     l4654:
 10145  00114C  0E06               	movlw	6
 10146  00114E  6435               	cpfsgt	drawChar@j,c
 10147  001150  D001               	goto	l479
 10148  001152  D053               	goto	l4678
 10149  001154                     l479:
 10150                           
 10151                           ;ST7735_TFT.c: 413: if(line & 0x01) {
 10152  001154  A033               	btfss	drawChar@line,0,c
 10153  001156  D023               	goto	l4664
 10154                           
 10155                           ;ST7735_TFT.c: 414: if(size == 1) drawPixel(x+i, y+j, color);
 10156  001158  0432               	decf	drawChar@size,w,c
 10157  00115A  A4D8               	btfss	status,2,c
 10158  00115C  D00C               	goto	l4662
 10159  00115E  502C               	movf	drawChar@y,w,c
 10160  001160  2435               	addwf	drawChar@j,w,c
 10161  001162  6E16               	movwf	drawPixel@y,c
 10162  001164  C02E  F017         	movff	drawChar@color,drawPixel@color
 10163  001168  C02F  F018         	movff	drawChar@color+1,drawPixel@color+1
 10164  00116C  5034               	movf	drawChar@x,w,c
 10165  00116E  2436               	addwf	drawChar@i,w,c
 10166  001170  EC80  F013         	call	_drawPixel
 10167  001174  D03E               	goto	l4672
 10168  001176                     l4662:
 10169                           
 10170                           ;ST7735_TFT.c: 415: else fillRect(x+(i*size), y+(j*size), size, size, color);
 10171  001176  5035               	movf	drawChar@j,w,c
 10172  001178  0232               	mulwf	drawChar@size,c
 10173  00117A  50F3               	movf	prodl,w,c
 10174  00117C  242C               	addwf	drawChar@y,w,c
 10175  00117E  6E21               	movwf	fillRect@y,c
 10176  001180  C032  F022         	movff	drawChar@size,fillRect@w
 10177  001184  C032  F023         	movff	drawChar@size,fillRect@h
 10178  001188  C02E  F024         	movff	drawChar@color,fillRect@color
 10179  00118C  C02F  F025         	movff	drawChar@color+1,fillRect@color+1
 10180  001190  5036               	movf	drawChar@i,w,c
 10181  001192  0232               	mulwf	drawChar@size,c
 10182  001194  50F3               	movf	prodl,w,c
 10183  001196  2434               	addwf	drawChar@x,w,c
 10184  001198  EC01  F012         	call	_fillRect
 10185                           
 10186                           ;ST7735_TFT.c: 416: }
 10187  00119C  D02A               	goto	l4672
 10188  00119E                     l4664:
 10189                           
 10190                           ;ST7735_TFT.c: 417: else if(bg != color) {
 10191  00119E  502E               	movf	drawChar@color,w,c
 10192  0011A0  1830               	xorwf	drawChar@bg,w,c
 10193  0011A2  E104               	bnz	u3330
 10194  0011A4  502F               	movf	drawChar@color+1,w,c
 10195  0011A6  1831               	xorwf	drawChar@bg+1,w,c
 10196  0011A8  B4D8               	btfsc	status,2,c
 10197  0011AA  D023               	goto	l4672
 10198  0011AC                     u3330:
 10199                           
 10200                           ;ST7735_TFT.c: 418: if(size == 1) drawPixel(x+i, y+j, bg);
 10201  0011AC  0432               	decf	drawChar@size,w,c
 10202  0011AE  A4D8               	btfss	status,2,c
 10203  0011B0  D00C               	goto	l4670
 10204  0011B2  502C               	movf	drawChar@y,w,c
 10205  0011B4  2435               	addwf	drawChar@j,w,c
 10206  0011B6  6E16               	movwf	drawPixel@y,c
 10207  0011B8  C030  F017         	movff	drawChar@bg,drawPixel@color
 10208  0011BC  C031  F018         	movff	drawChar@bg+1,drawPixel@color+1
 10209  0011C0  5034               	movf	drawChar@x,w,c
 10210  0011C2  2436               	addwf	drawChar@i,w,c
 10211  0011C4  EC80  F013         	call	_drawPixel
 10212  0011C8  D014               	goto	l4672
 10213  0011CA                     l4670:
 10214                           
 10215                           ;ST7735_TFT.c: 419: else fillRect(x+i*size, y+j*size, size, size, bg);
 10216  0011CA  5035               	movf	drawChar@j,w,c
 10217  0011CC  0232               	mulwf	drawChar@size,c
 10218  0011CE  50F3               	movf	prodl,w,c
 10219  0011D0  242C               	addwf	drawChar@y,w,c
 10220  0011D2  6E21               	movwf	fillRect@y,c
 10221  0011D4  C032  F022         	movff	drawChar@size,fillRect@w
 10222  0011D8  C032  F023         	movff	drawChar@size,fillRect@h
 10223  0011DC  C030  F024         	movff	drawChar@bg,fillRect@color
 10224  0011E0  C031  F025         	movff	drawChar@bg+1,fillRect@color+1
 10225  0011E4  5036               	movf	drawChar@i,w,c
 10226  0011E6  0232               	mulwf	drawChar@size,c
 10227  0011E8  50F3               	movf	prodl,w,c
 10228  0011EA  2434               	addwf	drawChar@x,w,c
 10229  0011EC  EC01  F012         	call	_fillRect
 10230  0011F0  D000               	goto	l4672
 10231  0011F2                     l4672:
 10232  0011F2  2A35               	incf	drawChar@j,f,c
 10233  0011F4  90D8               	bcf	status,0,c
 10234  0011F6  3233               	rrcf	drawChar@line,f,c
 10235  0011F8  D7A9               	goto	l4654
 10236  0011FA                     l4678:
 10237  0011FA  2A36               	incf	drawChar@i,f,c
 10238  0011FC  D76F               	goto	l4642
 10239  0011FE                     l470:
 10240  0011FE  0012               	return		;funcret
 10241  001200                     __end_of_drawChar:
 10242                           	opt stack 0
 10243                           tblptru	equ	0xFF8
 10244                           tblptrh	equ	0xFF7
 10245                           tblptrl	equ	0xFF6
 10246                           tablat	equ	0xFF5
 10247                           prodh	equ	0xFF4
 10248                           prodl	equ	0xFF3
 10249                           intcon	equ	0xFF2
 10250                           intcon2	equ	0xFF1
 10251                           intcon3	equ	0xFF0
 10252                           postinc0	equ	0xFEE
 10253                           wreg	equ	0xFE8
 10254                           postdec1	equ	0xFE5
 10255                           fsr1l	equ	0xFE1
 10256                           indf2	equ	0xFDF
 10257                           postinc2	equ	0xFDE
 10258                           fsr2h	equ	0xFDA
 10259                           fsr2l	equ	0xFD9
 10260                           status	equ	0xFD8
 10261                           
 10262 ;; *************** function _fillRect *****************
 10263 ;; Defined at:
 10264 ;;		line 388 in file "ST7735_TFT.c"
 10265 ;; Parameters:    Size  Location     Type
 10266 ;;  x               1    wreg     unsigned char 
 10267 ;;  y               1   32[COMRAM] unsigned char 
 10268 ;;  w               1   33[COMRAM] unsigned char 
 10269 ;;  h               1   34[COMRAM] unsigned char 
 10270 ;;  color           2   35[COMRAM] unsigned int 
 10271 ;; Auto vars:     Size  Location     Type
 10272 ;;  x               1   40[COMRAM] unsigned char 
 10273 ;;  i               2   41[COMRAM] int 
 10274 ;; Return value:  Size  Location     Type
 10275 ;;		None               void
 10276 ;; Registers used:
 10277 ;;		wreg, status,2, status,0, cstack
 10278 ;; Tracked objects:
 10279 ;;		On entry : 0/0
 10280 ;;		On exit  : 0/0
 10281 ;;		Unchanged: 0/0
 10282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10283 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10284 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10285 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10286 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10287 ;;Total ram usage:       11 bytes
 10288 ;; Hardware stack levels used:    1
 10289 ;; Hardware stack levels required when called:    6
 10290 ;; This function calls:
 10291 ;;		_drawFastVLine
 10292 ;; This function is called by:
 10293 ;;		_drawChar
 10294 ;; This function uses a non-reentrant model
 10295 ;;
 10296                           
 10297                           	psect	text51
 10298  002402                     __ptext51:
 10299                           	opt stack 0
 10300  002402                     _fillRect:
 10301                           	opt stack 19
 10302                           
 10303                           ;incstack = 0
 10304                           ;fillRect@x stored from wreg
 10305  002402  6E29               	movwf	fillRect@x,c
 10306                           
 10307                           ;ST7735_TFT.c: 390: signed int i;
 10308                           ;ST7735_TFT.c: 392: for (i = x; i < x + w; i++)
 10309  002404  C029  F02A         	movff	fillRect@x,fillRect@i
 10310  002408  6A2B               	clrf	fillRect@i+1,c
 10311  00240A  D00E               	goto	l4576
 10312  00240C                     l4572:
 10313                           
 10314                           ;ST7735_TFT.c: 393: {
 10315                           ;ST7735_TFT.c: 394: drawFastVLine(i, y, h, color);
 10316  00240C  C021  F016         	movff	fillRect@y,drawFastVLine@y
 10317  002410  C023  F017         	movff	fillRect@h,drawFastVLine@h
 10318  002414  C024  F018         	movff	fillRect@color,drawFastVLine@color
 10319  002418  C025  F019         	movff	fillRect@color+1,drawFastVLine@color+1
 10320  00241C  502A               	movf	fillRect@i,w,c
 10321  00241E  EC93  F00F         	call	_drawFastVLine
 10322  002422  4A2A               	infsnz	fillRect@i,f,c
 10323  002424  2A2B               	incf	fillRect@i+1,f,c
 10324  002426  D000               	goto	l4576
 10325  002428                     l4576:
 10326  002428  5022               	movf	fillRect@w,w,c
 10327  00242A  C029  F026         	movff	fillRect@x,??_fillRect
 10328  00242E  6A27               	clrf	(??_fillRect+1)& (0+255),c
 10329  002430  2626               	addwf	??_fillRect,f,c
 10330  002432  0E00               	movlw	0
 10331  002434  2227               	addwfc	??_fillRect+1,f,c
 10332  002436  5026               	movf	??_fillRect,w,c
 10333  002438  5C2A               	subwf	fillRect@i,w,c
 10334  00243A  502B               	movf	fillRect@i+1,w,c
 10335  00243C  0A80               	xorlw	128
 10336  00243E  6E28               	movwf	(??_fillRect+2)& (0+255),c
 10337  002440  5027               	movf	??_fillRect+1,w,c
 10338  002442  0A80               	xorlw	128
 10339  002444  5828               	subwfb	(??_fillRect+2)& (0+255),w,c
 10340  002446  A0D8               	btfss	status,0,c
 10341  002448  D7E1               	goto	l4572
 10342  00244A  0012               	return		;funcret
 10343  00244C                     __end_of_fillRect:
 10344                           	opt stack 0
 10345                           tblptru	equ	0xFF8
 10346                           tblptrh	equ	0xFF7
 10347                           tblptrl	equ	0xFF6
 10348                           tablat	equ	0xFF5
 10349                           prodh	equ	0xFF4
 10350                           prodl	equ	0xFF3
 10351                           intcon	equ	0xFF2
 10352                           intcon2	equ	0xFF1
 10353                           intcon3	equ	0xFF0
 10354                           postinc0	equ	0xFEE
 10355                           wreg	equ	0xFE8
 10356                           postdec1	equ	0xFE5
 10357                           fsr1l	equ	0xFE1
 10358                           indf2	equ	0xFDF
 10359                           postinc2	equ	0xFDE
 10360                           fsr2h	equ	0xFDA
 10361                           fsr2l	equ	0xFD9
 10362                           status	equ	0xFD8
 10363                           
 10364 ;; *************** function _drawFastVLine *****************
 10365 ;; Defined at:
 10366 ;;		line 367 in file "ST7735_TFT.c"
 10367 ;; Parameters:    Size  Location     Type
 10368 ;;  x               1    wreg     unsigned char 
 10369 ;;  y               1   21[COMRAM] unsigned char 
 10370 ;;  h               1   22[COMRAM] unsigned char 
 10371 ;;  color           2   23[COMRAM] unsigned int 
 10372 ;; Auto vars:     Size  Location     Type
 10373 ;;  x               1   31[COMRAM] unsigned char 
 10374 ;;  lo              1   30[COMRAM] unsigned char 
 10375 ;;  hi              1   29[COMRAM] unsigned char 
 10376 ;; Return value:  Size  Location     Type
 10377 ;;		None               void
 10378 ;; Registers used:
 10379 ;;		wreg, status,2, status,0, cstack
 10380 ;; Tracked objects:
 10381 ;;		On entry : 0/0
 10382 ;;		On exit  : 0/0
 10383 ;;		Unchanged: 0/0
 10384 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10385 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;      Totals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10389 ;;Total ram usage:       11 bytes
 10390 ;; Hardware stack levels used:    1
 10391 ;; Hardware stack levels required when called:    5
 10392 ;; This function calls:
 10393 ;;		_setAddrWindow
 10394 ;;		_spiwrite
 10395 ;; This function is called by:
 10396 ;;		_fillRect
 10397 ;;		_fillCircleHelper
 10398 ;;		_fillCircle
 10399 ;;		_drawRect
 10400 ;; This function uses a non-reentrant model
 10401 ;;
 10402                           
 10403                           	psect	text52
 10404  001F26                     __ptext52:
 10405                           	opt stack 0
 10406  001F26                     _drawFastVLine:
 10407                           	opt stack 19
 10408                           
 10409                           ;incstack = 0
 10410                           ;drawFastVLine@x stored from wreg
 10411  001F26  6E20               	movwf	drawFastVLine@x,c
 10412                           
 10413                           ;ST7735_TFT.c: 369: unsigned char hi, lo;
 10414                           ;ST7735_TFT.c: 370: if((x >= 128) || (y >= 160))
 10415  001F28  0E80               	movlw	128
 10416  001F2A  6020               	cpfslt	drawFastVLine@x,c
 10417  001F2C  D03F               	goto	l454
 10418  001F2E  0E9F               	movlw	159
 10419  001F30  6416               	cpfsgt	drawFastVLine@y,c
 10420  001F32  D001               	goto	l4542
 10421                           
 10422                           ;ST7735_TFT.c: 371: return;
 10423  001F34  D03B               	goto	l454
 10424  001F36                     l4542:
 10425                           
 10426                           ;ST7735_TFT.c: 372: if((y + h - 1) >= 160)
 10427  001F36  0EFF               	movlw	255
 10428  001F38  6E1A               	movwf	??_drawFastVLine& (0+255),c
 10429  001F3A  0EFF               	movlw	255
 10430  001F3C  6E1B               	movwf	(??_drawFastVLine+1)& (0+255),c
 10431  001F3E  5017               	movf	drawFastVLine@h,w,c
 10432  001F40  C016  F01C         	movff	drawFastVLine@y,??_drawFastVLine+2
 10433  001F44  6A1D               	clrf	(??_drawFastVLine+3)& (0+255),c
 10434  001F46  261C               	addwf	??_drawFastVLine+2,f,c
 10435  001F48  0E00               	movlw	0
 10436  001F4A  221D               	addwfc	??_drawFastVLine+3,f,c
 10437  001F4C  501A               	movf	??_drawFastVLine,w,c
 10438  001F4E  261C               	addwf	??_drawFastVLine+2,f,c
 10439  001F50  501B               	movf	??_drawFastVLine+1,w,c
 10440  001F52  221D               	addwfc	??_drawFastVLine+3,f,c
 10441  001F54  BE1D               	btfsc	??_drawFastVLine+3,7,c
 10442  001F56  D00B               	goto	l4546
 10443  001F58  501D               	movf	??_drawFastVLine+3,w,c
 10444  001F5A  E104               	bnz	u3090
 10445  001F5C  0EA0               	movlw	160
 10446  001F5E  5C1C               	subwf	??_drawFastVLine+2,w,c
 10447  001F60  A0D8               	btfss	status,0,c
 10448  001F62  D005               	goto	l4546
 10449  001F64                     u3090:
 10450                           
 10451                           ;ST7735_TFT.c: 373: h = 160 - y;
 10452  001F64  5016               	movf	drawFastVLine@y,w,c
 10453  001F66  0800               	sublw	0
 10454  001F68  0FA0               	addlw	160
 10455  001F6A  6E17               	movwf	drawFastVLine@h,c
 10456  001F6C  D000               	goto	l4546
 10457  001F6E                     l4546:
 10458                           
 10459                           ;ST7735_TFT.c: 374: hi = color >> 8; lo = color;
 10460  001F6E  5019               	movf	drawFastVLine@color+1,w,c
 10461  001F70  6E1E               	movwf	drawFastVLine@hi,c
 10462  001F72  C018  F01F         	movff	drawFastVLine@color,drawFastVLine@lo
 10463                           
 10464                           ;ST7735_TFT.c: 375: setAddrWindow(x, y, x, y + h - 1);
 10465  001F76  C016  F012         	movff	drawFastVLine@y,setAddrWindow@y0
 10466  001F7A  C020  F013         	movff	drawFastVLine@x,setAddrWindow@x1
 10467  001F7E  5016               	movf	drawFastVLine@y,w,c
 10468  001F80  2417               	addwf	drawFastVLine@h,w,c
 10469  001F82  6E1A               	movwf	??_drawFastVLine& (0+255),c
 10470  001F84  041A               	decf	??_drawFastVLine,w,c
 10471  001F86  6E14               	movwf	setAddrWindow@y1,c
 10472  001F88  5020               	movf	drawFastVLine@x,w,c
 10473  001F8A  ECDA  F011         	call	_setAddrWindow
 10474                           
 10475                           ;ST7735_TFT.c: 376: PORTDbits.RD0 = 1;
 10476  001F8E  8083               	bsf	3971,0,c	;volatile
 10477                           
 10478                           ;ST7735_TFT.c: 377: PORTDbits.RD2 = 0;
 10479  001F90  9483               	bcf	3971,2,c	;volatile
 10480                           
 10481                           ;ST7735_TFT.c: 379: while (h--) {
 10482  001F92  D007               	goto	l4558
 10483  001F94                     l4556:
 10484                           
 10485                           ;ST7735_TFT.c: 380: spiwrite(hi);
 10486  001F94  501E               	movf	drawFastVLine@hi,w,c
 10487  001F96  EC42  F014         	call	_spiwrite
 10488                           
 10489                           ;ST7735_TFT.c: 381: spiwrite(lo);
 10490  001F9A  501F               	movf	drawFastVLine@lo,w,c
 10491  001F9C  EC42  F014         	call	_spiwrite
 10492  001FA0  D000               	goto	l4558
 10493  001FA2                     l4558:
 10494  001FA2  0617               	decf	drawFastVLine@h,f,c
 10495  001FA4  2817               	incf	drawFastVLine@h,w,c
 10496  001FA6  A4D8               	btfss	status,2,c
 10497  001FA8  D7F5               	goto	l4556
 10498                           
 10499                           ;ST7735_TFT.c: 382: }
 10500                           ;ST7735_TFT.c: 383: PORTDbits.RD2 = 1;
 10501  001FAA  8483               	bsf	3971,2,c	;volatile
 10502  001FAC                     l454:
 10503  001FAC  0012               	return		;funcret
 10504  001FAE                     __end_of_drawFastVLine:
 10505                           	opt stack 0
 10506                           tblptru	equ	0xFF8
 10507                           tblptrh	equ	0xFF7
 10508                           tblptrl	equ	0xFF6
 10509                           tablat	equ	0xFF5
 10510                           prodh	equ	0xFF4
 10511                           prodl	equ	0xFF3
 10512                           intcon	equ	0xFF2
 10513                           intcon2	equ	0xFF1
 10514                           intcon3	equ	0xFF0
 10515                           postinc0	equ	0xFEE
 10516                           wreg	equ	0xFE8
 10517                           postdec1	equ	0xFE5
 10518                           fsr1l	equ	0xFE1
 10519                           indf2	equ	0xFDF
 10520                           postinc2	equ	0xFDE
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function _drawPixel *****************
 10526 ;; Defined at:
 10527 ;;		line 358 in file "ST7735_TFT.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;  x               1    wreg     unsigned char 
 10530 ;;  y               1   21[COMRAM] unsigned char 
 10531 ;;  color           2   22[COMRAM] unsigned int 
 10532 ;; Auto vars:     Size  Location     Type
 10533 ;;  x               1   24[COMRAM] unsigned char 
 10534 ;; Return value:  Size  Location     Type
 10535 ;;		None               void
 10536 ;; Registers used:
 10537 ;;		wreg, status,2, status,0, cstack
 10538 ;; Tracked objects:
 10539 ;;		On entry : 0/0
 10540 ;;		On exit  : 0/0
 10541 ;;		Unchanged: 0/0
 10542 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10543 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10546 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10547 ;;Total ram usage:        4 bytes
 10548 ;; Hardware stack levels used:    1
 10549 ;; Hardware stack levels required when called:    5
 10550 ;; This function calls:
 10551 ;;		_setAddrWindow
 10552 ;;		_write_data
 10553 ;; This function is called by:
 10554 ;;		_drawChar
 10555 ;;		_drawCircle
 10556 ;;		_drawCircleHelper
 10557 ;; This function uses a non-reentrant model
 10558 ;;
 10559                           
 10560                           	psect	text53
 10561  002700                     __ptext53:
 10562                           	opt stack 0
 10563  002700                     _drawPixel:
 10564                           	opt stack 20
 10565                           
 10566                           ;incstack = 0
 10567                           ;drawPixel@x stored from wreg
 10568  002700  6E19               	movwf	drawPixel@x,c
 10569                           
 10570                           ;ST7735_TFT.c: 360: if((x >= 128) || (y >= 160))
 10571  002702  0E80               	movlw	128
 10572  002704  6019               	cpfslt	drawPixel@x,c
 10573  002706  D013               	goto	l448
 10574  002708  0E9F               	movlw	159
 10575  00270A  6416               	cpfsgt	drawPixel@y,c
 10576  00270C  D001               	goto	l4564
 10577                           
 10578                           ;ST7735_TFT.c: 361: return;
 10579  00270E  D00F               	goto	l448
 10580  002710                     l4564:
 10581                           
 10582                           ;ST7735_TFT.c: 362: setAddrWindow(x,y,x+1,y+1);
 10583  002710  C016  F012         	movff	drawPixel@y,setAddrWindow@y0
 10584  002714  2819               	incf	drawPixel@x,w,c
 10585  002716  6E13               	movwf	setAddrWindow@x1,c
 10586  002718  2816               	incf	drawPixel@y,w,c
 10587  00271A  6E14               	movwf	setAddrWindow@y1,c
 10588  00271C  5019               	movf	drawPixel@x,w,c
 10589  00271E  ECDA  F011         	call	_setAddrWindow
 10590                           
 10591                           ;ST7735_TFT.c: 363: write_data(color >> 8);
 10592  002722  5018               	movf	drawPixel@color+1,w,c
 10593  002724  EC5E  F014         	call	_write_data
 10594                           
 10595                           ;ST7735_TFT.c: 364: write_data(color & 0xFF);
 10596  002728  5017               	movf	drawPixel@color,w,c
 10597  00272A  EC5E  F014         	call	_write_data
 10598  00272E                     l448:
 10599  00272E  0012               	return		;funcret
 10600  002730                     __end_of_drawPixel:
 10601                           	opt stack 0
 10602                           tblptru	equ	0xFF8
 10603                           tblptrh	equ	0xFF7
 10604                           tblptrl	equ	0xFF6
 10605                           tablat	equ	0xFF5
 10606                           prodh	equ	0xFF4
 10607                           prodl	equ	0xFF3
 10608                           intcon	equ	0xFF2
 10609                           intcon2	equ	0xFF1
 10610                           intcon3	equ	0xFF0
 10611                           postinc0	equ	0xFEE
 10612                           wreg	equ	0xFE8
 10613                           postdec1	equ	0xFE5
 10614                           fsr1l	equ	0xFE1
 10615                           indf2	equ	0xFDF
 10616                           postinc2	equ	0xFDE
 10617                           fsr2h	equ	0xFDA
 10618                           fsr2l	equ	0xFD9
 10619                           status	equ	0xFD8
 10620                           
 10621 ;; *************** function _setAddrWindow *****************
 10622 ;; Defined at:
 10623 ;;		line 343 in file "ST7735_TFT.c"
 10624 ;; Parameters:    Size  Location     Type
 10625 ;;  x0              1    wreg     unsigned char 
 10626 ;;  y0              1   17[COMRAM] unsigned char 
 10627 ;;  x1              1   18[COMRAM] unsigned char 
 10628 ;;  y1              1   19[COMRAM] unsigned char 
 10629 ;; Auto vars:     Size  Location     Type
 10630 ;;  x0              1   20[COMRAM] unsigned char 
 10631 ;; Return value:  Size  Location     Type
 10632 ;;		None               void
 10633 ;; Registers used:
 10634 ;;		wreg, status,2, status,0, cstack
 10635 ;; Tracked objects:
 10636 ;;		On entry : 0/0
 10637 ;;		On exit  : 0/0
 10638 ;;		Unchanged: 0/0
 10639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10640 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10641 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10642 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10643 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10644 ;;Total ram usage:        4 bytes
 10645 ;; Hardware stack levels used:    1
 10646 ;; Hardware stack levels required when called:    4
 10647 ;; This function calls:
 10648 ;;		_write_command
 10649 ;;		_write_data
 10650 ;; This function is called by:
 10651 ;;		_drawPixel
 10652 ;;		_drawFastVLine
 10653 ;;		_fillRectangle
 10654 ;;		_drawFastHLine
 10655 ;; This function uses a non-reentrant model
 10656 ;;
 10657                           
 10658                           	psect	text54
 10659  0023B4                     __ptext54:
 10660                           	opt stack 0
 10661  0023B4                     _setAddrWindow:
 10662                           	opt stack 19
 10663                           
 10664                           ;incstack = 0
 10665                           ;setAddrWindow@x0 stored from wreg
 10666  0023B4  6E15               	movwf	setAddrWindow@x0,c
 10667                           
 10668                           ;ST7735_TFT.c: 345: write_command(0x2A);
 10669  0023B6  0E2A               	movlw	42
 10670  0023B8  EC66  F014         	call	_write_command
 10671                           
 10672                           ;ST7735_TFT.c: 346: write_data(0);
 10673  0023BC  0E00               	movlw	0
 10674  0023BE  EC5E  F014         	call	_write_data
 10675                           
 10676                           ;ST7735_TFT.c: 347: write_data(x0 + colstart);
 10677  0023C2  5015               	movf	setAddrWindow@x0,w,c
 10678  0023C4  2459               	addwf	_colstart,w,c
 10679  0023C6  EC5E  F014         	call	_write_data
 10680                           
 10681                           ;ST7735_TFT.c: 348: write_data(0);
 10682  0023CA  0E00               	movlw	0
 10683  0023CC  EC5E  F014         	call	_write_data
 10684                           
 10685                           ;ST7735_TFT.c: 349: write_data(x1 + colstart);
 10686  0023D0  5013               	movf	setAddrWindow@x1,w,c
 10687  0023D2  2459               	addwf	_colstart,w,c
 10688  0023D4  EC5E  F014         	call	_write_data
 10689                           
 10690                           ;ST7735_TFT.c: 350: write_command(0x2B);
 10691  0023D8  0E2B               	movlw	43
 10692  0023DA  EC66  F014         	call	_write_command
 10693                           
 10694                           ;ST7735_TFT.c: 351: write_data(0);
 10695  0023DE  0E00               	movlw	0
 10696  0023E0  EC5E  F014         	call	_write_data
 10697                           
 10698                           ;ST7735_TFT.c: 352: write_data(y0 + rowstart);
 10699  0023E4  5012               	movf	setAddrWindow@y0,w,c
 10700  0023E6  245C               	addwf	_rowstart,w,c
 10701  0023E8  EC5E  F014         	call	_write_data
 10702                           
 10703                           ;ST7735_TFT.c: 353: write_data(0);
 10704  0023EC  0E00               	movlw	0
 10705  0023EE  EC5E  F014         	call	_write_data
 10706                           
 10707                           ;ST7735_TFT.c: 354: write_data(y1 + rowstart);
 10708  0023F2  5014               	movf	setAddrWindow@y1,w,c
 10709  0023F4  245C               	addwf	_rowstart,w,c
 10710  0023F6  EC5E  F014         	call	_write_data
 10711                           
 10712                           ;ST7735_TFT.c: 355: write_command(0x2C);
 10713  0023FA  0E2C               	movlw	44
 10714  0023FC  EC66  F014         	call	_write_command
 10715  002400  0012               	return		;funcret
 10716  002402                     __end_of_setAddrWindow:
 10717                           	opt stack 0
 10718                           tblptru	equ	0xFF8
 10719                           tblptrh	equ	0xFF7
 10720                           tblptrl	equ	0xFF6
 10721                           tablat	equ	0xFF5
 10722                           prodh	equ	0xFF4
 10723                           prodl	equ	0xFF3
 10724                           intcon	equ	0xFF2
 10725                           intcon2	equ	0xFF1
 10726                           intcon3	equ	0xFF0
 10727                           postinc0	equ	0xFEE
 10728                           wreg	equ	0xFE8
 10729                           postdec1	equ	0xFE5
 10730                           fsr1l	equ	0xFE1
 10731                           indf2	equ	0xFDF
 10732                           postinc2	equ	0xFDE
 10733                           fsr2h	equ	0xFDA
 10734                           fsr2l	equ	0xFD9
 10735                           status	equ	0xFD8
 10736                           
 10737 ;; *************** function _write_data *****************
 10738 ;; Defined at:
 10739 ;;		line 156 in file "ST7735_TFT.c"
 10740 ;; Parameters:    Size  Location     Type
 10741 ;;  data_           1    wreg     unsigned char 
 10742 ;; Auto vars:     Size  Location     Type
 10743 ;;  data_           1   16[COMRAM] unsigned char 
 10744 ;; Return value:  Size  Location     Type
 10745 ;;		None               void
 10746 ;; Registers used:
 10747 ;;		wreg, status,2, cstack
 10748 ;; Tracked objects:
 10749 ;;		On entry : 0/0
 10750 ;;		On exit  : 0/0
 10751 ;;		Unchanged: 0/0
 10752 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10753 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10754 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10755 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10756 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10757 ;;Total ram usage:        1 bytes
 10758 ;; Hardware stack levels used:    1
 10759 ;; Hardware stack levels required when called:    3
 10760 ;; This function calls:
 10761 ;;		_spiwrite
 10762 ;; This function is called by:
 10763 ;;		_Rcmd1
 10764 ;;		_Rcmd2red
 10765 ;;		_Rcmd3
 10766 ;;		_setAddrWindow
 10767 ;;		_drawPixel
 10768 ;;		_TFT_GreenTab_Initialize
 10769 ;;		_Bcmd
 10770 ;;		_setScrollDefinition
 10771 ;;		_Rcmd2green
 10772 ;;		_VerticalScroll
 10773 ;; This function uses a non-reentrant model
 10774 ;;
 10775                           
 10776                           	psect	text55
 10777  0028BC                     __ptext55:
 10778                           	opt stack 0
 10779  0028BC                     _write_data:
 10780                           	opt stack 19
 10781                           
 10782                           ;incstack = 0
 10783                           ;write_data@data_ stored from wreg
 10784  0028BC  6E11               	movwf	write_data@data_,c
 10785                           
 10786                           ;ST7735_TFT.c: 158: PORTDbits.RD2 = 0;
 10787  0028BE  9483               	bcf	3971,2,c	;volatile
 10788                           
 10789                           ;ST7735_TFT.c: 159: PORTDbits.RD0 = 1;
 10790  0028C0  8083               	bsf	3971,0,c	;volatile
 10791                           
 10792                           ;ST7735_TFT.c: 160: spiwrite(data_);
 10793  0028C2  5011               	movf	write_data@data_,w,c
 10794  0028C4  EC42  F014         	call	_spiwrite
 10795                           
 10796                           ;ST7735_TFT.c: 161: PORTDbits.RD2 = 1;
 10797  0028C8  8483               	bsf	3971,2,c	;volatile
 10798  0028CA  0012               	return		;funcret
 10799  0028CC                     __end_of_write_data:
 10800                           	opt stack 0
 10801                           tblptru	equ	0xFF8
 10802                           tblptrh	equ	0xFF7
 10803                           tblptrl	equ	0xFF6
 10804                           tablat	equ	0xFF5
 10805                           prodh	equ	0xFF4
 10806                           prodl	equ	0xFF3
 10807                           intcon	equ	0xFF2
 10808                           intcon2	equ	0xFF1
 10809                           intcon3	equ	0xFF0
 10810                           postinc0	equ	0xFEE
 10811                           wreg	equ	0xFE8
 10812                           postdec1	equ	0xFE5
 10813                           fsr1l	equ	0xFE1
 10814                           indf2	equ	0xFDF
 10815                           postinc2	equ	0xFDE
 10816                           fsr2h	equ	0xFDA
 10817                           fsr2l	equ	0xFD9
 10818                           status	equ	0xFD8
 10819                           
 10820 ;; *************** function _write_command *****************
 10821 ;; Defined at:
 10822 ;;		line 145 in file "ST7735_TFT.c"
 10823 ;; Parameters:    Size  Location     Type
 10824 ;;  cmd_            1    wreg     unsigned char 
 10825 ;; Auto vars:     Size  Location     Type
 10826 ;;  cmd_            1   16[COMRAM] unsigned char 
 10827 ;; Return value:  Size  Location     Type
 10828 ;;		None               void
 10829 ;; Registers used:
 10830 ;;		wreg, status,2, cstack
 10831 ;; Tracked objects:
 10832 ;;		On entry : 0/0
 10833 ;;		On exit  : 0/0
 10834 ;;		Unchanged: 0/0
 10835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10836 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10837 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10839 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10840 ;;Total ram usage:        1 bytes
 10841 ;; Hardware stack levels used:    1
 10842 ;; Hardware stack levels required when called:    3
 10843 ;; This function calls:
 10844 ;;		_spiwrite
 10845 ;; This function is called by:
 10846 ;;		_Rcmd1
 10847 ;;		_Rcmd2red
 10848 ;;		_Rcmd3
 10849 ;;		_setAddrWindow
 10850 ;;		_TFT_GreenTab_Initialize
 10851 ;;		_Bcmd
 10852 ;;		_setScrollDefinition
 10853 ;;		_Rcmd2green
 10854 ;;		_VerticalScroll
 10855 ;; This function uses a non-reentrant model
 10856 ;;
 10857                           
 10858                           	psect	text56
 10859  0028CC                     __ptext56:
 10860                           	opt stack 0
 10861  0028CC                     _write_command:
 10862                           	opt stack 19
 10863                           
 10864                           ;incstack = 0
 10865                           ;write_command@cmd_ stored from wreg
 10866  0028CC  6E11               	movwf	write_command@cmd_,c
 10867                           
 10868                           ;ST7735_TFT.c: 147: PORTDbits.RD2 = 0;
 10869  0028CE  9483               	bcf	3971,2,c	;volatile
 10870                           
 10871                           ;ST7735_TFT.c: 149: PORTDbits.RD0 = 0;
 10872  0028D0  9083               	bcf	3971,0,c	;volatile
 10873                           
 10874                           ;ST7735_TFT.c: 150: spiwrite(cmd_);
 10875  0028D2  5011               	movf	write_command@cmd_,w,c
 10876  0028D4  EC42  F014         	call	_spiwrite
 10877                           
 10878                           ;ST7735_TFT.c: 152: PORTDbits.RD2 = 1;
 10879  0028D8  8483               	bsf	3971,2,c	;volatile
 10880  0028DA  0012               	return		;funcret
 10881  0028DC                     __end_of_write_command:
 10882                           	opt stack 0
 10883                           tblptru	equ	0xFF8
 10884                           tblptrh	equ	0xFF7
 10885                           tblptrl	equ	0xFF6
 10886                           tablat	equ	0xFF5
 10887                           prodh	equ	0xFF4
 10888                           prodl	equ	0xFF3
 10889                           intcon	equ	0xFF2
 10890                           intcon2	equ	0xFF1
 10891                           intcon3	equ	0xFF0
 10892                           postinc0	equ	0xFEE
 10893                           wreg	equ	0xFE8
 10894                           postdec1	equ	0xFE5
 10895                           fsr1l	equ	0xFE1
 10896                           indf2	equ	0xFDF
 10897                           postinc2	equ	0xFDE
 10898                           fsr2h	equ	0xFDA
 10899                           fsr2l	equ	0xFD9
 10900                           status	equ	0xFD8
 10901                           
 10902 ;; *************** function _spiwrite *****************
 10903 ;; Defined at:
 10904 ;;		line 136 in file "ST7735_TFT.c"
 10905 ;; Parameters:    Size  Location     Type
 10906 ;;  spidata         1    wreg     unsigned char 
 10907 ;; Auto vars:     Size  Location     Type
 10908 ;;  spidata         1   15[COMRAM] unsigned char 
 10909 ;;  x               1   14[COMRAM] unsigned char 
 10910 ;; Return value:  Size  Location     Type
 10911 ;;		None               void
 10912 ;; Registers used:
 10913 ;;		wreg
 10914 ;; Tracked objects:
 10915 ;;		On entry : 0/0
 10916 ;;		On exit  : 0/0
 10917 ;;		Unchanged: 0/0
 10918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10920 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10922 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10923 ;;Total ram usage:        2 bytes
 10924 ;; Hardware stack levels used:    1
 10925 ;; Hardware stack levels required when called:    2
 10926 ;; This function calls:
 10927 ;;		Nothing
 10928 ;; This function is called by:
 10929 ;;		_write_command
 10930 ;;		_write_data
 10931 ;;		_drawFastVLine
 10932 ;;		_fillRectangle
 10933 ;;		_drawFastHLine
 10934 ;; This function uses a non-reentrant model
 10935 ;;
 10936                           
 10937                           	psect	text57
 10938  002884                     __ptext57:
 10939                           	opt stack 0
 10940  002884                     _spiwrite:
 10941                           	opt stack 21
 10942                           
 10943                           ;incstack = 0
 10944                           ;spiwrite@spidata stored from wreg
 10945  002884  6E10               	movwf	spiwrite@spidata,c
 10946                           
 10947                           ;ST7735_TFT.c: 138: char x;
 10948                           ;ST7735_TFT.c: 139: PIR1bits.SSPIF = 0;
 10949  002886  969E               	bcf	3998,3,c	;volatile
 10950                           
 10951                           ;ST7735_TFT.c: 140: x = SSPBUF;
 10952  002888  CFC9 F00F          	movff	4041,spiwrite@x	;volatile
 10953                           
 10954                           ;ST7735_TFT.c: 141: SSPBUF = spidata;
 10955  00288C  C010  FFC9         	movff	spiwrite@spidata,4041	;volatile
 10956                           
 10957                           ;ST7735_TFT.c: 142: while (!SSPSTATbits.BF);
 10958  002890  D000               	goto	l404
 10959  002892                     l404:
 10960  002892  A0C7               	btfss	4039,0,c	;volatile
 10961  002894  D7FE               	goto	l404
 10962  002896  0012               	return		;funcret
 10963  002898                     __end_of_spiwrite:
 10964                           	opt stack 0
 10965                           tblptru	equ	0xFF8
 10966                           tblptrh	equ	0xFF7
 10967                           tblptrl	equ	0xFF6
 10968                           tablat	equ	0xFF5
 10969                           prodh	equ	0xFF4
 10970                           prodl	equ	0xFF3
 10971                           intcon	equ	0xFF2
 10972                           intcon2	equ	0xFF1
 10973                           intcon3	equ	0xFF0
 10974                           postinc0	equ	0xFEE
 10975                           wreg	equ	0xFE8
 10976                           postdec1	equ	0xFE5
 10977                           fsr1l	equ	0xFE1
 10978                           indf2	equ	0xFDF
 10979                           postinc2	equ	0xFDE
 10980                           fsr2h	equ	0xFDA
 10981                           fsr2l	equ	0xFD9
 10982                           status	equ	0xFD8
 10983                           
 10984 ;; *************** function ___wmul *****************
 10985 ;; Defined at:
 10986 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.34\sources\common\Umul16.c"
 10987 ;; Parameters:    Size  Location     Type
 10988 ;;  multiplier      2   14[COMRAM] unsigned int 
 10989 ;;  multiplicand    2   16[COMRAM] unsigned int 
 10990 ;; Auto vars:     Size  Location     Type
 10991 ;;  product         2   18[COMRAM] unsigned int 
 10992 ;; Return value:  Size  Location     Type
 10993 ;;                  2   14[COMRAM] unsigned int 
 10994 ;; Registers used:
 10995 ;;		wreg, status,2, status,0, prodl, prodh
 10996 ;; Tracked objects:
 10997 ;;		On entry : 0/0
 10998 ;;		On exit  : 0/0
 10999 ;;		Unchanged: 0/0
 11000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11001 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11002 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11004 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11005 ;;Total ram usage:        6 bytes
 11006 ;; Hardware stack levels used:    1
 11007 ;; Hardware stack levels required when called:    2
 11008 ;; This function calls:
 11009 ;;		Nothing
 11010 ;; This function is called by:
 11011 ;;		_delay_ms
 11012 ;;		_drawChar
 11013 ;;		_Read_Volt
 11014 ;; This function uses a non-reentrant model
 11015 ;;
 11016                           
 11017                           	psect	text58
 11018  002784                     __ptext58:
 11019                           	opt stack 0
 11020  002784                     ___wmul:
 11021                           	opt stack 27
 11022                           
 11023                           ;incstack = 0
 11024  002784  500F               	movf	___wmul@multiplier,w,c
 11025  002786  0211               	mulwf	___wmul@multiplicand,c
 11026  002788  CFF3 F013          	movff	prodl,___wmul@product
 11027  00278C  CFF4 F014          	movff	prodh,___wmul@product+1
 11028  002790  500F               	movf	___wmul@multiplier,w,c
 11029  002792  0212               	mulwf	___wmul@multiplicand+1,c
 11030  002794  50F3               	movf	prodl,w,c
 11031  002796  2614               	addwf	___wmul@product+1,f,c
 11032  002798  5010               	movf	___wmul@multiplier+1,w,c
 11033  00279A  0211               	mulwf	___wmul@multiplicand,c
 11034  00279C  50F3               	movf	prodl,w,c
 11035  00279E  2614               	addwf	___wmul@product+1,f,c
 11036  0027A0  C013  F00F         	movff	___wmul@product,?___wmul
 11037  0027A4  C014  F010         	movff	___wmul@product+1,?___wmul+1
 11038  0027A8  D000               	goto	l723
 11039  0027AA                     l723:
 11040  0027AA  0012               	return		;funcret
 11041  0027AC                     __end_of___wmul:
 11042                           	opt stack 0
 11043                           tblptru	equ	0xFF8
 11044                           tblptrh	equ	0xFF7
 11045                           tblptrl	equ	0xFF6
 11046                           tablat	equ	0xFF5
 11047                           prodh	equ	0xFF4
 11048                           prodl	equ	0xFF3
 11049                           intcon	equ	0xFF2
 11050                           intcon2	equ	0xFF1
 11051                           intcon3	equ	0xFF0
 11052                           postinc0	equ	0xFEE
 11053                           wreg	equ	0xFE8
 11054                           postdec1	equ	0xFE5
 11055                           fsr1l	equ	0xFE1
 11056                           indf2	equ	0xFDF
 11057                           postinc2	equ	0xFDE
 11058                           fsr2h	equ	0xFDA
 11059                           fsr2l	equ	0xFD9
 11060                           status	equ	0xFD8
 11061                           
 11062 ;; *************** function _Deactivate_Buzzer *****************
 11063 ;; Defined at:
 11064 ;;		line 83 in file "utils.c"
 11065 ;; Parameters:    Size  Location     Type
 11066 ;;		None
 11067 ;; Auto vars:     Size  Location     Type
 11068 ;;		None
 11069 ;; Return value:  Size  Location     Type
 11070 ;;		None               void
 11071 ;; Registers used:
 11072 ;;		wreg, status,2
 11073 ;; Tracked objects:
 11074 ;;		On entry : 0/0
 11075 ;;		On exit  : 0/0
 11076 ;;		Unchanged: 0/0
 11077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11082 ;;Total ram usage:        0 bytes
 11083 ;; Hardware stack levels used:    1
 11084 ;; Hardware stack levels required when called:    2
 11085 ;; This function calls:
 11086 ;;		Nothing
 11087 ;; This function is called by:
 11088 ;;		_Wait_One_Second_With_Beep
 11089 ;;		_Do_Beep
 11090 ;; This function uses a non-reentrant model
 11091 ;;
 11092                           
 11093                           	psect	text59
 11094  00290A                     __ptext59:
 11095                           	opt stack 0
 11096  00290A                     _Deactivate_Buzzer:
 11097                           	opt stack 25
 11098                           
 11099                           ;utils.c: 85: CCP2CON = 0x0;
 11100                           
 11101                           ;incstack = 0
 11102  00290A  0E00               	movlw	0
 11103  00290C  6EBA               	movwf	4026,c	;volatile
 11104                           
 11105                           ;utils.c: 86: PORTCbits.RC1 = 0;
 11106  00290E  9282               	bcf	3970,1,c	;volatile
 11107  002910  0012               	return		;funcret
 11108  002912                     __end_of_Deactivate_Buzzer:
 11109                           	opt stack 0
 11110                           tblptru	equ	0xFF8
 11111                           tblptrh	equ	0xFF7
 11112                           tblptrl	equ	0xFF6
 11113                           tablat	equ	0xFF5
 11114                           prodh	equ	0xFF4
 11115                           prodl	equ	0xFF3
 11116                           intcon	equ	0xFF2
 11117                           intcon2	equ	0xFF1
 11118                           intcon3	equ	0xFF0
 11119                           postinc0	equ	0xFEE
 11120                           wreg	equ	0xFE8
 11121                           postdec1	equ	0xFE5
 11122                           fsr1l	equ	0xFE1
 11123                           indf2	equ	0xFDF
 11124                           postinc2	equ	0xFDE
 11125                           fsr2h	equ	0xFDA
 11126                           fsr2l	equ	0xFD9
 11127                           status	equ	0xFD8
 11128                           
 11129 ;; *************** function _Activate_Buzzer *****************
 11130 ;; Defined at:
 11131 ;;		line 60 in file "utils.c"
 11132 ;; Parameters:    Size  Location     Type
 11133 ;;		None
 11134 ;; Auto vars:     Size  Location     Type
 11135 ;;		None
 11136 ;; Return value:  Size  Location     Type
 11137 ;;		None               void
 11138 ;; Registers used:
 11139 ;;		wreg, status,2
 11140 ;; Tracked objects:
 11141 ;;		On entry : 0/0
 11142 ;;		On exit  : 0/0
 11143 ;;		Unchanged: 0/0
 11144 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11145 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11146 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11147 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11148 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11149 ;;Total ram usage:        0 bytes
 11150 ;; Hardware stack levels used:    1
 11151 ;; Hardware stack levels required when called:    2
 11152 ;; This function calls:
 11153 ;;		Nothing
 11154 ;; This function is called by:
 11155 ;;		_Wait_One_Second_With_Beep
 11156 ;;		_Do_Beep
 11157 ;; This function uses a non-reentrant model
 11158 ;;
 11159                           
 11160                           	psect	text60
 11161  0028AA                     __ptext60:
 11162                           	opt stack 0
 11163  0028AA                     _Activate_Buzzer:
 11164                           	opt stack 25
 11165                           
 11166                           ;utils.c: 62: PR2 = 0b11111001 ;
 11167                           
 11168                           ;incstack = 0
 11169  0028AA  0EF9               	movlw	249
 11170  0028AC  6ECB               	movwf	4043,c	;volatile
 11171                           
 11172                           ;utils.c: 63: T2CON = 0b00000101 ;
 11173  0028AE  0E05               	movlw	5
 11174  0028B0  6ECA               	movwf	4042,c	;volatile
 11175                           
 11176                           ;utils.c: 64: CCPR2L = 0b01001010 ;
 11177  0028B2  0E4A               	movlw	74
 11178  0028B4  6EBB               	movwf	4027,c	;volatile
 11179                           
 11180                           ;utils.c: 65: CCP2CON = 0b00111100 ;
 11181  0028B6  0E3C               	movlw	60
 11182  0028B8  6EBA               	movwf	4026,c	;volatile
 11183  0028BA  0012               	return		;funcret
 11184  0028BC                     __end_of_Activate_Buzzer:
 11185                           	opt stack 0
 11186                           tblptru	equ	0xFF8
 11187                           tblptrh	equ	0xFF7
 11188                           tblptrl	equ	0xFF6
 11189                           tablat	equ	0xFF5
 11190                           prodh	equ	0xFF4
 11191                           prodl	equ	0xFF3
 11192                           intcon	equ	0xFF2
 11193                           intcon2	equ	0xFF1
 11194                           intcon3	equ	0xFF0
 11195                           postinc0	equ	0xFEE
 11196                           wreg	equ	0xFE8
 11197                           postdec1	equ	0xFE5
 11198                           fsr1l	equ	0xFE1
 11199                           indf2	equ	0xFDF
 11200                           postinc2	equ	0xFDE
 11201                           fsr2h	equ	0xFDA
 11202                           fsr2l	equ	0xFD9
 11203                           status	equ	0xFD8
 11204                           
 11205 ;; *************** function _chkisr *****************
 11206 ;; Defined at:
 11207 ;;		line 34 in file "Interrupt.c"
 11208 ;; Parameters:    Size  Location     Type
 11209 ;;		None
 11210 ;; Auto vars:     Size  Location     Type
 11211 ;;		None
 11212 ;; Return value:  Size  Location     Type
 11213 ;;		None               void
 11214 ;; Registers used:
 11215 ;;		wreg, status,2, cstack
 11216 ;; Tracked objects:
 11217 ;;		On entry : 0/0
 11218 ;;		On exit  : 0/0
 11219 ;;		Unchanged: 0/0
 11220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11223 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11224 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11225 ;;Total ram usage:       14 bytes
 11226 ;; Hardware stack levels used:    1
 11227 ;; Hardware stack levels required when called:    1
 11228 ;; This function calls:
 11229 ;;		_INT0_ISR
 11230 ;;		_INT1_ISR
 11231 ;;		_INT2_ISR
 11232 ;; This function is called by:
 11233 ;;		Interrupt level 2
 11234 ;; This function uses a non-reentrant model
 11235 ;;
 11236                           
 11237                           	psect	intcode
 11238  000008                     __pintcode:
 11239                           	opt stack 0
 11240  000008                     _chkisr:
 11241                           	opt stack 18
 11242                           
 11243                           ;incstack = 0
 11244  000008  CFFA F001          	movff	pclath,??_chkisr
 11245  00000C  CFFB F002          	movff	pclatu,??_chkisr+1
 11246  000010  CFE9 F003          	movff	fsr0l,??_chkisr+2
 11247  000014  EDD7  F00F         	call	int_func,f	;refresh shadow registers
 11248                           pclatu	equ	0xFFB
 11249                           pclath	equ	0xFFA
 11250                           tblptru	equ	0xFF8
 11251                           tblptrh	equ	0xFF7
 11252                           tblptrl	equ	0xFF6
 11253                           tablat	equ	0xFF5
 11254                           prodh	equ	0xFF4
 11255                           prodl	equ	0xFF3
 11256                           intcon	equ	0xFF2
 11257                           intcon2	equ	0xFF1
 11258                           intcon3	equ	0xFF0
 11259                           postinc0	equ	0xFEE
 11260                           fsr0l	equ	0xFE9
 11261                           wreg	equ	0xFE8
 11262                           postdec1	equ	0xFE5
 11263                           fsr1l	equ	0xFE1
 11264                           indf2	equ	0xFDF
 11265                           postinc2	equ	0xFDE
 11266                           fsr2h	equ	0xFDA
 11267                           fsr2l	equ	0xFD9
 11268                           status	equ	0xFD8
 11269                           
 11270                           	psect	intcode_body
 11271  001FAE                     __pintcode_body:
 11272                           	opt stack 18
 11273  001FAE                     int_func:
 11274                           	opt stack 18
 11275  001FAE  0006               	pop		; remove dummy address from shadow register refresh
 11276  001FB0  CFEA F004          	movff	fsr0h,??_chkisr+3
 11277  001FB4  CFE1 F005          	movff	fsr1l,??_chkisr+4
 11278  001FB8  CFE2 F006          	movff	fsr1h,??_chkisr+5
 11279  001FBC  CFD9 F007          	movff	fsr2l,??_chkisr+6
 11280  001FC0  CFDA F008          	movff	fsr2h,??_chkisr+7
 11281  001FC4  CFF3 F009          	movff	prodl,??_chkisr+8
 11282  001FC8  CFF4 F00A          	movff	prodh,??_chkisr+9
 11283  001FCC  CFF6 F00B          	movff	tblptrl,??_chkisr+10
 11284  001FD0  CFF7 F00C          	movff	tblptrh,??_chkisr+11
 11285  001FD4  CFF8 F00D          	movff	tblptru,??_chkisr+12
 11286  001FD8  CFF5 F00E          	movff	tablat,??_chkisr+13
 11287                           
 11288                           ;Interrupt.c: 36: if (INTCONbits.INT0IF == 1) INT0_ISR();
 11289  001FDC  A2F2               	btfss	intcon,1,c	;volatile
 11290  001FDE  D003               	goto	i2l2648
 11291  001FE0  EC76  F014         	call	_INT0_ISR	;wreg free
 11292  001FE4  D000               	goto	i2l2648
 11293  001FE6                     i2l2648:
 11294                           
 11295                           ;Interrupt.c: 38: if (INTCON3bits.INT1IF == 1) INT1_ISR();
 11296  001FE6  A0F0               	btfss	intcon3,0,c	;volatile
 11297  001FE8  D003               	goto	i2l2652
 11298  001FEA  EC6E  F014         	call	_INT1_ISR	;wreg free
 11299  001FEE  D000               	goto	i2l2652
 11300  001FF0                     i2l2652:
 11301                           
 11302                           ;Interrupt.c: 39: if (INTCON3bits.INT2IF == 1) INT2_ISR();
 11303  001FF0  A2F0               	btfss	intcon3,1,c	;volatile
 11304  001FF2  D003               	goto	i2l29
 11305  001FF4  EC89  F014         	call	_INT2_ISR	;wreg free
 11306  001FF8  D000               	goto	i2l29
 11307  001FFA                     i2l29:
 11308  001FFA  C00E  FFF5         	movff	??_chkisr+13,tablat
 11309  001FFE  C00D  FFF8         	movff	??_chkisr+12,tblptru
 11310  002002  C00C  FFF7         	movff	??_chkisr+11,tblptrh
 11311  002006  C00B  FFF6         	movff	??_chkisr+10,tblptrl
 11312  00200A  C00A  FFF4         	movff	??_chkisr+9,prodh
 11313  00200E  C009  FFF3         	movff	??_chkisr+8,prodl
 11314  002012  C008  FFDA         	movff	??_chkisr+7,fsr2h
 11315  002016  C007  FFD9         	movff	??_chkisr+6,fsr2l
 11316  00201A  C006  FFE2         	movff	??_chkisr+5,fsr1h
 11317  00201E  C005  FFE1         	movff	??_chkisr+4,fsr1l
 11318  002022  C004  FFEA         	movff	??_chkisr+3,fsr0h
 11319  002026  C003  FFE9         	movff	??_chkisr+2,fsr0l
 11320  00202A  C002  FFFB         	movff	??_chkisr+1,pclatu
 11321  00202E  C001  FFFA         	movff	??_chkisr,pclath
 11322  002032  0011               	retfie		f
 11323  002034                     __end_of_chkisr:
 11324                           	opt stack 0
 11325                           pclatu	equ	0xFFB
 11326                           pclath	equ	0xFFA
 11327                           tblptru	equ	0xFF8
 11328                           tblptrh	equ	0xFF7
 11329                           tblptrl	equ	0xFF6
 11330                           tablat	equ	0xFF5
 11331                           prodh	equ	0xFF4
 11332                           prodl	equ	0xFF3
 11333                           intcon	equ	0xFF2
 11334                           intcon2	equ	0xFF1
 11335                           intcon3	equ	0xFF0
 11336                           postinc0	equ	0xFEE
 11337                           fsr0h	equ	0xFEA
 11338                           fsr0l	equ	0xFE9
 11339                           wreg	equ	0xFE8
 11340                           postdec1	equ	0xFE5
 11341                           fsr1h	equ	0xFE2
 11342                           fsr1l	equ	0xFE1
 11343                           indf2	equ	0xFDF
 11344                           postinc2	equ	0xFDE
 11345                           fsr2h	equ	0xFDA
 11346                           fsr2l	equ	0xFD9
 11347                           status	equ	0xFD8
 11348                           
 11349 ;; *************** function _INT2_ISR *****************
 11350 ;; Defined at:
 11351 ;;		line 61 in file "Interrupt.c"
 11352 ;; Parameters:    Size  Location     Type
 11353 ;;		None
 11354 ;; Auto vars:     Size  Location     Type
 11355 ;;		None
 11356 ;; Return value:  Size  Location     Type
 11357 ;;		None               void
 11358 ;; Registers used:
 11359 ;;		wreg, status,2
 11360 ;; Tracked objects:
 11361 ;;		On entry : 0/0
 11362 ;;		On exit  : 0/0
 11363 ;;		Unchanged: 0/0
 11364 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11365 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11366 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11367 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11368 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11369 ;;Total ram usage:        0 bytes
 11370 ;; Hardware stack levels used:    1
 11371 ;; This function calls:
 11372 ;;		Nothing
 11373 ;; This function is called by:
 11374 ;;		_chkisr
 11375 ;; This function uses a non-reentrant model
 11376 ;;
 11377                           
 11378                           	psect	text62
 11379  002912                     __ptext62:
 11380                           	opt stack 0
 11381  002912                     _INT2_ISR:
 11382                           	opt stack 18
 11383                           
 11384                           ;Interrupt.c: 64: INTCON3bits.INT2IF=0;
 11385                           
 11386                           ;incstack = 0
 11387  002912  92F0               	bcf	intcon3,1,c	;volatile
 11388                           
 11389                           ;Interrupt.c: 65: Flashing_Request = 1;
 11390  002914  0E01               	movlw	1
 11391  002916  6E4B               	movwf	_Flashing_Request,c
 11392  002918  0012               	return		;funcret
 11393  00291A                     __end_of_INT2_ISR:
 11394                           	opt stack 0
 11395                           pclatu	equ	0xFFB
 11396                           pclath	equ	0xFFA
 11397                           tblptru	equ	0xFF8
 11398                           tblptrh	equ	0xFF7
 11399                           tblptrl	equ	0xFF6
 11400                           tablat	equ	0xFF5
 11401                           prodh	equ	0xFF4
 11402                           prodl	equ	0xFF3
 11403                           intcon	equ	0xFF2
 11404                           intcon2	equ	0xFF1
 11405                           intcon3	equ	0xFF0
 11406                           postinc0	equ	0xFEE
 11407                           fsr0h	equ	0xFEA
 11408                           fsr0l	equ	0xFE9
 11409                           wreg	equ	0xFE8
 11410                           postdec1	equ	0xFE5
 11411                           fsr1h	equ	0xFE2
 11412                           fsr1l	equ	0xFE1
 11413                           indf2	equ	0xFDF
 11414                           postinc2	equ	0xFDE
 11415                           fsr2h	equ	0xFDA
 11416                           fsr2l	equ	0xFD9
 11417                           status	equ	0xFD8
 11418                           
 11419 ;; *************** function _INT1_ISR *****************
 11420 ;; Defined at:
 11421 ;;		line 51 in file "Interrupt.c"
 11422 ;; Parameters:    Size  Location     Type
 11423 ;;		None
 11424 ;; Auto vars:     Size  Location     Type
 11425 ;;		None
 11426 ;; Return value:  Size  Location     Type
 11427 ;;		None               void
 11428 ;; Registers used:
 11429 ;;		wreg, status,2
 11430 ;; Tracked objects:
 11431 ;;		On entry : 0/0
 11432 ;;		On exit  : 0/0
 11433 ;;		Unchanged: 0/0
 11434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11437 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11438 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11439 ;;Total ram usage:        0 bytes
 11440 ;; Hardware stack levels used:    1
 11441 ;; This function calls:
 11442 ;;		Nothing
 11443 ;; This function is called by:
 11444 ;;		_chkisr
 11445 ;; This function uses a non-reentrant model
 11446 ;;
 11447                           
 11448                           	psect	text63
 11449  0028DC                     __ptext63:
 11450                           	opt stack 0
 11451  0028DC                     _INT1_ISR:
 11452                           	opt stack 18
 11453                           
 11454                           ;Interrupt.c: 54: INTCON3bits.INT1IF=0;
 11455                           
 11456                           ;incstack = 0
 11457  0028DC  90F0               	bcf	intcon3,0,c	;volatile
 11458                           
 11459                           ;Interrupt.c: 55: if(MODE){
 11460  0028DE  5051               	movf	_MODE,w,c
 11461  0028E0  B4D8               	btfsc	status,2,c
 11462  0028E2  D003               	goto	i2l37
 11463                           
 11464                           ;Interrupt.c: 56: EW_PED_SW = 1;
 11465  0028E4  0E01               	movlw	1
 11466  0028E6  6E4A               	movwf	_EW_PED_SW,c
 11467  0028E8  D000               	goto	i2l37
 11468  0028EA                     i2l37:
 11469  0028EA  0012               	return		;funcret
 11470  0028EC                     __end_of_INT1_ISR:
 11471                           	opt stack 0
 11472                           pclatu	equ	0xFFB
 11473                           pclath	equ	0xFFA
 11474                           tblptru	equ	0xFF8
 11475                           tblptrh	equ	0xFF7
 11476                           tblptrl	equ	0xFF6
 11477                           tablat	equ	0xFF5
 11478                           prodh	equ	0xFF4
 11479                           prodl	equ	0xFF3
 11480                           intcon	equ	0xFF2
 11481                           intcon2	equ	0xFF1
 11482                           intcon3	equ	0xFF0
 11483                           postinc0	equ	0xFEE
 11484                           fsr0h	equ	0xFEA
 11485                           fsr0l	equ	0xFE9
 11486                           wreg	equ	0xFE8
 11487                           postdec1	equ	0xFE5
 11488                           fsr1h	equ	0xFE2
 11489                           fsr1l	equ	0xFE1
 11490                           indf2	equ	0xFDF
 11491                           postinc2	equ	0xFDE
 11492                           fsr2h	equ	0xFDA
 11493                           fsr2l	equ	0xFD9
 11494                           status	equ	0xFD8
 11495                           
 11496 ;; *************** function _INT0_ISR *****************
 11497 ;; Defined at:
 11498 ;;		line 42 in file "Interrupt.c"
 11499 ;; Parameters:    Size  Location     Type
 11500 ;;		None
 11501 ;; Auto vars:     Size  Location     Type
 11502 ;;		None
 11503 ;; Return value:  Size  Location     Type
 11504 ;;		None               void
 11505 ;; Registers used:
 11506 ;;		wreg, status,2
 11507 ;; Tracked objects:
 11508 ;;		On entry : 0/0
 11509 ;;		On exit  : 0/0
 11510 ;;		Unchanged: 0/0
 11511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11516 ;;Total ram usage:        0 bytes
 11517 ;; Hardware stack levels used:    1
 11518 ;; This function calls:
 11519 ;;		Nothing
 11520 ;; This function is called by:
 11521 ;;		_chkisr
 11522 ;; This function uses a non-reentrant model
 11523 ;;
 11524                           
 11525                           	psect	text64
 11526  0028EC                     __ptext64:
 11527                           	opt stack 0
 11528  0028EC                     _INT0_ISR:
 11529                           	opt stack 18
 11530                           
 11531                           ;Interrupt.c: 44: INTCONbits.INT0IF=0;
 11532                           
 11533                           ;incstack = 0
 11534  0028EC  92F2               	bcf	intcon,1,c	;volatile
 11535                           
 11536                           ;Interrupt.c: 45: if(MODE){
 11537  0028EE  5051               	movf	_MODE,w,c
 11538  0028F0  B4D8               	btfsc	status,2,c
 11539  0028F2  D003               	goto	i2l33
 11540                           
 11541                           ;Interrupt.c: 46: NS_PED_SW = 1;
 11542  0028F4  0E01               	movlw	1
 11543  0028F6  6E52               	movwf	_NS_PED_SW,c
 11544  0028F8  D000               	goto	i2l33
 11545  0028FA                     i2l33:
 11546  0028FA  0012               	return		;funcret
 11547  0028FC                     __end_of_INT0_ISR:
 11548                           	opt stack 0
 11549                           pclatu	equ	0xFFB
 11550                           pclath	equ	0xFFA
 11551                           tblptru	equ	0xFF8
 11552                           tblptrh	equ	0xFF7
 11553                           tblptrl	equ	0xFF6
 11554                           tablat	equ	0xFF5
 11555                           prodh	equ	0xFF4
 11556                           prodl	equ	0xFF3
 11557                           intcon	equ	0xFF2
 11558                           intcon2	equ	0xFF1
 11559                           intcon3	equ	0xFF0
 11560                           postinc0	equ	0xFEE
 11561                           fsr0h	equ	0xFEA
 11562                           fsr0l	equ	0xFE9
 11563                           wreg	equ	0xFE8
 11564                           postdec1	equ	0xFE5
 11565                           fsr1h	equ	0xFE2
 11566                           fsr1l	equ	0xFE1
 11567                           indf2	equ	0xFDF
 11568                           postinc2	equ	0xFDE
 11569                           fsr2h	equ	0xFDA
 11570                           fsr2l	equ	0xFD9
 11571                           status	equ	0xFD8
 11572                           pclatu	equ	0xFFB
 11573                           pclath	equ	0xFFA
 11574                           tblptru	equ	0xFF8
 11575                           tblptrh	equ	0xFF7
 11576                           tblptrl	equ	0xFF6
 11577                           tablat	equ	0xFF5
 11578                           prodh	equ	0xFF4
 11579                           prodl	equ	0xFF3
 11580                           intcon	equ	0xFF2
 11581                           intcon2	equ	0xFF1
 11582                           intcon3	equ	0xFF0
 11583                           postinc0	equ	0xFEE
 11584                           fsr0h	equ	0xFEA
 11585                           fsr0l	equ	0xFE9
 11586                           wreg	equ	0xFE8
 11587                           postdec1	equ	0xFE5
 11588                           fsr1h	equ	0xFE2
 11589                           fsr1l	equ	0xFE1
 11590                           indf2	equ	0xFDF
 11591                           postinc2	equ	0xFDE
 11592                           fsr2h	equ	0xFDA
 11593                           fsr2l	equ	0xFD9
 11594                           status	equ	0xFD8
 11595                           
 11596                           	psect	rparam
 11597  0000                     pclatu	equ	0xFFB
 11598                           pclath	equ	0xFFA
 11599                           tblptru	equ	0xFF8
 11600                           tblptrh	equ	0xFF7
 11601                           tblptrl	equ	0xFF6
 11602                           tablat	equ	0xFF5
 11603                           prodh	equ	0xFF4
 11604                           prodl	equ	0xFF3
 11605                           intcon	equ	0xFF2
 11606                           intcon2	equ	0xFF1
 11607                           intcon3	equ	0xFF0
 11608                           postinc0	equ	0xFEE
 11609                           fsr0h	equ	0xFEA
 11610                           fsr0l	equ	0xFE9
 11611                           wreg	equ	0xFE8
 11612                           postdec1	equ	0xFE5
 11613                           fsr1h	equ	0xFE2
 11614                           fsr1l	equ	0xFE1
 11615                           indf2	equ	0xFDF
 11616                           postinc2	equ	0xFDE
 11617                           fsr2h	equ	0xFDA
 11618                           fsr2l	equ	0xFD9
 11619                           status	equ	0xFD8


Data Sizes:
    Strings     84
    Constant    475
    Data        63
    BSS         58
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     67     113
    BANK0           128     15      90
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    nbr	PTR unsigned char  size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    strlen@s	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(BANK0[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strlen@cp	PTR const unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(BANK0[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    strcpy@from	PTR const unsigned char  size(2) Largest target is 22
		 -> STR_13(CODE[2]), STR_12(CODE[2]), STR_11(CODE[4]), STR_10(CODE[4]), 
		 -> STR_9(CODE[7]), STR_8(CODE[10]), STR_7(CODE[7]), STR_6(CODE[12]), 
		 -> STR_5(CODE[22]), STR_4(CODE[2]), STR_3(CODE[3]), STR_2(CODE[5]), 
		 -> STR_1(CODE[6]), 

    strcpy@to	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    strcpy@cp	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    drawtext@_text	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), Timing_Txt(BANK0[22]), PED_EW_Count(BANK0[3]), PED_NS_Count(BANK0[3]), 
		 -> EWLT_Count(BANK0[3]), EW_Count(COMRAM[3]), NSLT_Count(BANK0[3]), NS_Count(BANK0[3]), 
		 -> FlashingS_Txt(COMRAM[2]), FlashingR_Txt(COMRAM[2]), SW_EWLT_Txt(COMRAM[2]), SW_EWPED_Txt(COMRAM[2]), 
		 -> SW_NSLT_Txt(COMRAM[2]), SW_NSPED_Txt(COMRAM[2]), Light_Sensor_Mode_Txt(COMRAM[3]), Light_Sensor_Voltage_Txt(BANK0[5]), 
		 -> Act_Mode_Txt(COMRAM[2]), buffer(BANK0[31]), 

    sp__strcpy	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 

    txt	PTR unsigned char  size(2) Largest target is 31
		 -> NULL(NULL[0]), buffer(BANK0[31]), 


Critical Paths under _main in COMRAM

    _Initialize_LCD_Screen->_drawtext
    _Initialize_LCD_Screen->_fillCircle
    _fillScreen->_fillRectangle
    _fillRectangle->_setAddrWindow
    _drawRect->_drawFastHLine
    _drawRect->_drawFastVLine
    _drawFastHLine->_setAddrWindow
    _Rcmd3->_delay_ms
    _Rcmd2red->_write_command
    _Rcmd2red->_write_data
    _Rcmd1->_delay_ms
    _LCD_Reset->_delay_ms
    _delay_ms->___wmul
    _Init_UART->_OpenUSART
    _Day_Mode->_PED_Control
    _Wait_N_Seconds->_update_LCD_count
    _update_LCD_count->_drawtext
    _Set_NSLT->_update_LCD_color
    _Set_NS->_update_LCD_color
    _Set_EWLT->_update_LCD_color
    _Set_EW->_update_LCD_color
    _update_LCD_color->_fillCircle
    _fillCircle->_fillCircleHelper
    _fillCircleHelper->_drawFastVLine
    _drawCircle->_drawPixel
    _PED_Control->_update_LCD_PED_Count
    _update_LCD_PED_Count->_drawtext
    _update_LCD_misc->_drawtext
    ___fttol->___ftmul
    ___ftmul->___ftpack
    ___awmod->___fttol
    _Read_Volt->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _Erase_Star->_drawtext
    _Draw_Star->_drawtext
    _drawtext->_drawChar
    _drawChar->_fillRect
    _fillRect->_drawFastVLine
    _drawFastVLine->_setAddrWindow
    _drawPixel->_setAddrWindow
    _setAddrWindow->_write_command
    _setAddrWindow->_write_data
    _write_data->_spiwrite
    _write_command->_spiwrite

Critical Paths under _chkisr in COMRAM

    None.

Critical Paths under _main in BANK0

    _Night_Mode->_Wait_N_Seconds
    _Initialize_LCD_Screen->_drawtext
    _Day_Mode->_PED_Control
    _update_LCD_count->_drawtext
    _Wait_One_Second->_update_LCD_misc
    _update_LCD_PED_Count->_drawtext
    _Wait_One_Second_With_Beep->_update_LCD_misc
    _update_LCD_misc->_drawtext
    _Erase_Star->_drawtext
    _Draw_Star->_drawtext

Critical Paths under _chkisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _chkisr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _chkisr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _chkisr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _chkisr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _chkisr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _chkisr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _chkisr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _chkisr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _chkisr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _chkisr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _chkisr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _chkisr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _chkisr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _chkisr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _chkisr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  822613
                           _Day_Mode
                        _Do_Flashing
                           _Init_ADC
                          _Init_UART
              _Initialize_LCD_Screen
                         _Night_Mode
                          _Read_Volt
                             ___ftge
                     _init_INTERRUPT
 ---------------------------------------------------------------------------------
 (1) _init_INTERRUPT                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Night_Mode                                           0     0      0  219657
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (1) _Initialize_LCD_Screen                                0     0      0   65973
                          _LCD_Reset
            _TFT_GreenTab_Initialize
                         _drawCircle
                           _drawRect
                           _drawtext
                         _fillCircle
                         _fillScreen
                             _strcpy
 ---------------------------------------------------------------------------------
 (2) _fillScreen                                           2     0      2    2192
                                             33 COMRAM     2     0      2
                      _fillRectangle
 ---------------------------------------------------------------------------------
 (3) _fillRectangle                                       12     7      5    2096
                                             21 COMRAM    12     7      5
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _drawRect                                            11     1     10    6892
                                             32 COMRAM    11     1     10
                      _drawFastHLine
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (3) _drawFastHLine                                       11     7      4    1932
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (2) _TFT_GreenTab_Initialize                              0     0      0    4104
                              _Rcmd1
                           _Rcmd2red
                              _Rcmd3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd3                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd2red                                             0     0      0     130
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (3) _Rcmd1                                                0     0      0    1922
                           _delay_ms
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (2) _LCD_Reset                                            0     0      0    1792
                           _delay_ms
 ---------------------------------------------------------------------------------
 (4) _delay_ms                                             6     4      2    1792
                                             20 COMRAM     6     4      2
                             ___wmul
 ---------------------------------------------------------------------------------
 (1) _Init_UART                                            0     0      0     273
                          _OpenUSART
 ---------------------------------------------------------------------------------
 (2) _OpenUSART                                            3     1      2     273
                                             14 COMRAM     3     1      2
 ---------------------------------------------------------------------------------
 (1) _Init_ADC                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Do_Flashing                                          0     0      0  190764
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                    _Wait_One_Second
 ---------------------------------------------------------------------------------
 (1) _Day_Mode                                             0     0      0  339749
                        _PED_Control
                             _Set_EW
                           _Set_EWLT
                             _Set_NS
                           _Set_NSLT
                     _Wait_N_Seconds
 ---------------------------------------------------------------------------------
 (2) _Wait_N_Seconds                                       2     2      0  120089
                                             12 BANK0      2     2      0
                    _Wait_One_Second
                   _update_LCD_count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_count                                     2     1      1   28763
                                             64 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second                                      0     0      0   91196
                          _Draw_Star
                         _Erase_Star
                   _Wait_Half_Second
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (2) _Set_NSLT                                             1     1      0   24892
                                              0 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_NS                                               1     1      0   24892
                                              0 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EWLT                                             1     1      0   24892
                                              0 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (2) _Set_EW                                               1     1      0   24892
                                              0 BANK0      1     1      0
                   _update_LCD_color
 ---------------------------------------------------------------------------------
 (3) _update_LCD_color                                     3     2      1   24830
                                             64 COMRAM     3     2      1
                         _drawCircle
                         _fillCircle
 ---------------------------------------------------------------------------------
 (4) _fillCircle                                           8     0      8   12244
                                             56 COMRAM     8     0      8
                      _drawFastVLine
                   _fillCircleHelper
 ---------------------------------------------------------------------------------
 (5) _fillCircleHelper                                    24    12     12    4703
                                             32 COMRAM    24    12     12
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (4) _drawCircle                                          20    12      8   11424
                                             25 COMRAM    20    12      8
                          _drawPixel
 ---------------------------------------------------------------------------------
 (2) _PED_Control                                          4     3      1  120092
                                             66 COMRAM     1     0      1
                                             12 BANK0      3     3      0
          _Wait_One_Second_With_Beep
               _update_LCD_PED_Count
 ---------------------------------------------------------------------------------
 (3) _update_LCD_PED_Count                                 2     1      1   28574
                                             64 COMRAM     2     1      1
                            ___awdiv
                            ___awmod
                           _drawtext
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1355
                                             14 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _Wait_One_Second_With_Beep                            0     0      0   91196
                    _Activate_Buzzer
                  _Deactivate_Buzzer
                          _Draw_Star
                         _Erase_Star
                   _Wait_Half_Second
                    _update_LCD_misc
 ---------------------------------------------------------------------------------
 (4) _update_LCD_misc                                      5     5      0   36546
                                              7 BANK0      5     5      0
                          _Read_Volt
                            ___awmod
                             ___ftge
                            ___ftmul
                            ___fttol
                           _drawtext
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (5) ___fttol                                             15    11      4     501
                                             37 COMRAM    15    11      4
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftmul                                             15     9      6    2716
                                             22 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (1) ___ftge                                               9     3      6     458
                                             14 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1473
                                             52 COMRAM     6     2      4
                            ___ftmul (ARG)
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (1) _Read_Volt                                            9     6      3    5739
                                             41 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___wmul
                       _get_full_ADC
 ---------------------------------------------------------------------------------
 (2) _get_full_ADC                                         6     4      2      34
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (2) ___ftdiv                                             15     9      6    2648
                                             26 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (2) ___awtoft                                             4     1      3    2206
                                             22 COMRAM     4     1      3
                           ___ftpack
                             ___wmul (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftpack                                             8     3      5    2008
                                             14 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (4) _Wait_Half_Second                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Erase_Star                                           0     0      0   27325
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (4) _Draw_Star                                            0     0      0   27325
                           _drawtext
                             _strcpy
 ---------------------------------------------------------------------------------
 (5) _strcpy                                               6     2      4    1799
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _drawtext                                            17     9      8   25526
                                             54 COMRAM    10     2      8
                                              0 BANK0      7     7      0
                           _drawChar
                             _strlen
 ---------------------------------------------------------------------------------
 (5) _strlen                                               6     4      2     195
                                             14 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (5) _drawChar                                            11     4      7   10644
                                             43 COMRAM    11     4      7
                             ___wmul
                          _drawPixel
                           _fillRect
 ---------------------------------------------------------------------------------
 (6) _fillRect                                            11     6      5    3876
                                             32 COMRAM    11     6      5
                      _drawFastVLine
 ---------------------------------------------------------------------------------
 (7) _drawFastVLine                                       11     7      4    3102
                                             21 COMRAM    11     7      4
                      _setAddrWindow
                           _spiwrite
 ---------------------------------------------------------------------------------
 (6) _drawPixel                                            4     1      3    4207
                                             21 COMRAM     4     1      3
                      _setAddrWindow
                         _write_data
 ---------------------------------------------------------------------------------
 (8) _setAddrWindow                                        4     1      3    1034
                                             17 COMRAM     4     1      3
                      _write_command
                         _write_data
 ---------------------------------------------------------------------------------
 (9) _write_data                                           1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (9) _write_command                                        1     1      0      65
                                             16 COMRAM     1     1      0
                           _spiwrite
 ---------------------------------------------------------------------------------
 (8) _spiwrite                                             2     2      0      34
                                             14 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     752
                                             14 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) _Deactivate_Buzzer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Activate_Buzzer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _chkisr                                             14    14      0       0
                                              0 COMRAM    14    14      0
                           _INT0_ISR
                           _INT1_ISR
                           _INT2_ISR
 ---------------------------------------------------------------------------------
 (13) _INT2_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT1_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (13) _INT0_ISR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Day_Mode
     _PED_Control
       _Wait_One_Second_With_Beep
         _Activate_Buzzer
         _Deactivate_Buzzer
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_PED_Count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Do_Flashing
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_One_Second
       _Draw_Star
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       _Erase_Star
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _strcpy
       _Wait_Half_Second
       _update_LCD_misc
         _Read_Volt
           ___awtoft
             ___ftpack
             ___wmul (ARG)
           ___ftdiv
             ___awtoft (ARG)
               ___ftpack
               ___wmul (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
           ___wmul
           _get_full_ADC
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         ___ftge
         ___ftmul
           ___ftpack
         ___fttol
           ___ftmul (ARG)
             ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
         _get_full_ADC
   _Init_ADC
   _Init_UART
     _OpenUSART
   _Initialize_LCD_Screen
     _LCD_Reset
       _delay_ms
         ___wmul
     _TFT_GreenTab_Initialize
       _Rcmd1
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd2red
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _Rcmd3
         _delay_ms
           ___wmul
         _write_command
           _spiwrite
         _write_data
           _spiwrite
       _write_command
         _spiwrite
       _write_data
         _spiwrite
     _drawCircle
       _drawPixel
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _write_data
           _spiwrite
     _drawRect
       _drawFastHLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _drawtext
       _drawChar
         ___wmul
         _drawPixel
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _write_data
             _spiwrite
         _fillRect
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
       _strlen
     _fillCircle
       _drawFastVLine
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
       _fillCircleHelper
         _drawFastVLine
           _setAddrWindow
             _write_command
               _spiwrite
             _write_data
               _spiwrite
           _spiwrite
     _fillScreen
       _fillRectangle
         _setAddrWindow
           _write_command
             _spiwrite
           _write_data
             _spiwrite
         _spiwrite
     _strcpy
   _Night_Mode
     _Set_EW
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_EWLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NS
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Set_NSLT
       _update_LCD_color
         _drawCircle
           _drawPixel
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _write_data
               _spiwrite
         _fillCircle
           _drawFastVLine
             _setAddrWindow
               _write_command
                 _spiwrite
               _write_data
                 _spiwrite
             _spiwrite
           _fillCircleHelper
             _drawFastVLine
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _spiwrite
     _Wait_N_Seconds
       _Wait_One_Second
         _Draw_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Erase_Star
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _strcpy
         _Wait_Half_Second
         _update_LCD_misc
           _Read_Volt
             ___awtoft
               ___ftpack
               ___wmul (ARG)
             ___ftdiv
               ___awtoft (ARG)
                 ___ftpack
                 ___wmul (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
             ___wmul
             _get_full_ADC
           ___awmod
             ___ftmul (ARG)
               ___ftpack
             ___fttol (ARG)
               ___ftmul (ARG)
                 ___ftpack
           ___ftge
           ___ftmul
             ___ftpack
           ___fttol
             ___ftmul (ARG)
               ___ftpack
           _drawtext
             _drawChar
               ___wmul
               _drawPixel
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _write_data
                   _spiwrite
               _fillRect
                 _drawFastVLine
                   _setAddrWindow
                     _write_command
                       _spiwrite
                     _write_data
                       _spiwrite
                   _spiwrite
             _strlen
           _get_full_ADC
       _update_LCD_count
         ___awdiv
         ___awmod
           ___ftmul (ARG)
             ___ftpack
           ___fttol (ARG)
             ___ftmul (ARG)
               ___ftpack
         _drawtext
           _drawChar
             ___wmul
             _drawPixel
               _setAddrWindow
                 _write_command
                   _spiwrite
                 _write_data
                   _spiwrite
               _write_data
                 _spiwrite
             _fillRect
               _drawFastVLine
                 _setAddrWindow
                   _write_command
                     _spiwrite
                   _write_data
                     _spiwrite
                 _spiwrite
           _strlen
   _Read_Volt
     ___awtoft
       ___ftpack
       ___wmul (ARG)
     ___ftdiv
       ___awtoft (ARG)
         ___ftpack
         ___wmul (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
     ___wmul
     _get_full_ADC
   ___ftge
   _init_INTERRUPT

 _chkisr (ROOT)
   _INT0_ISR
   _INT1_ISR
   _INT2_ISR

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      F      5A       5       70.3%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     43      71       1       89.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      CB      34        0.0%
DATA                 0      0      CB       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Oct 21 18:27:20 2025

                       drawCircle@f 0028                         drawCircle@r 001E  
                       drawCircle@x 002A                         drawCircle@y 002C  
         _Wait_One_Second_With_Beep 27D2                         _SSPSTATbits 000FC7  
                      drawCircle@x0 001A                        drawCircle@y0 001C  
                      ___awdiv@sign 0014                 ___wmul@multiplicand 0011  
          update_LCD_color@Circle_Y 0043                                 l201 230E  
                               l204 1BAC                                 l213 1CE0  
                               l206 1BFE                                 l208 1C3A  
                               l162 24A8                                 l171 2460  
                               l404 2892                                 l180 2538  
                               l164 24AC                                 l325 1AB6  
                               l165 24B2                                 l173 2464  
                               l318 0AF8                                 l182 253C  
                               l166 24B6                                 l174 246A  
                               l334 10A8                                 l510 19BA  
                               l183 2542                                 l191 24F4  
                               l167 24DA                                 l175 246E  
                               l511 19DC                                 l184 2546  
                               l192 24FA                                 l176 2492  
                               l185 256A                                 l193 24FE  
                               l194 2522                                 l507 19DE  
                               l508 194A                                 l189 24F0  
                               l454 1FAC                                 l470 11FE  
                               l518 0E34                                 l711 20E2  
                               l448 272E                                 l472 10D8  
                               l536 126E                                 l720 2124  
                               l552 1F24                                 l394 235A  
                               l723 27AA                                 l715 20FC  
                               l716 20FE                                 l717 2108  
                               l718 210A                                 l479 1154  
                               l655 283C                                 l672 2192  
                               l675 27B0                                 l916 1D76  
                               l941 2622                                 l678 27D0  
                               l929 20B4                   ?_Wait_Half_Second 0001  
     update_LCD_PED_Count@direction 0042                                 _PR2 000FCB  
                 _Deactivate_Buzzer 290A                                 _dir 005A  
                               _nbr 00AA                                 _txt 0047  
                    drawFastHLine@w 0017                      drawFastHLine@x 0020  
                    drawFastHLine@y 0016                        ___awmod@sign 003A  
           __end_of_update_LCD_misc 0D72                                 wreg 000FE8  
                ??_Wait_Half_Second 000F                  ?_Deactivate_Buzzer 0001  
                   ??_fillRectangle 001B                        __CFG_LVP$OFF 000000  
           _TFT_GreenTab_Initialize 275A                        ___ftdiv@cntr 0024  
                   _Flashing_Status 004C                        ___ftdiv@sign 0029  
                      __CFG_WDT$OFF 000000                                l1031 1B7C  
                              l1103 1902                                l1112 1E0C  
                              l1042 1B54                                l1106 18CE  
                    drawFastVLine@h 0017                                l1118 1648  
                              l1139 1820                                l1280 25E6  
                    drawFastVLine@x 0020                      drawFastVLine@y 0016  
                              l5010 0BAA                                l5030 0BEE  
                              l5014 0BB8                                l5016 0BBE  
                              l5042 0C18                                l5034 0BFC  
                              l5026 0BE0                                l5202 094C  
                              l5212 19E4                                l5046 0C26  
                              l5038 0C0A                                l5150 1D0A  
                              l5118 0F0A                                l5206 0A22  
                              l4600 1B1C                                l5048 0C2C  
                              l5160 1D32                                l5144 1CF8  
                              l5400 1EAE                                l4610 1B5C  
                              l4602 1B3C                                l5218 1A46  
                              l5226 1AA6                                l5090 0E1A  
                              l4604 1B48                                l4700 185A  
                              l5156 1D20                                l5172 1D5C  
                              l5252 0FD6                                l5244 0F24  
                              l5404 1EE6                                l4542 1F36  
                              l5158 1D2A                                l5262 108C  
                              l5414 1F0C                                l4640 10D4  
                              l4632 10BA                                l4800 153C  
                              l4616 1B6E                                l4704 1868  
                              l5176 1D6C                                l5168 1D50  
                              l5440 254C                                l5424 24BC  
                              l5432 2474                                l5256 1030  
                              l5248 0F80                                l5416 1F1A  
                              l5360 1914                                l4546 1F6E  
                              l4650 1114                                l4642 10DC  
                              l4564 2710                                l4556 1F94  
                              l4572 240C                                l4652 1148  
                              l4636 10C6                                l4724 18A8  
                              l4900 2070                                l5452 22C2  
                              l4812 1254                                l5620 070C  
                              l4558 1FA2                                l4670 11CA  
                              l4662 1176                                l4654 114C  
                              l4646 10E4                                l4734 18DC  
                              l4902 2078                                l4910 209A  
                              l5462 22F8                                l5198 0878  
                              l5470 26A0                                l3950 20D2  
                              l5382 19BE                                l5366 1982  
                              l5702 1C9E                                l4576 2428  
                              l4672 11F2                                l4664 119E  
                              l4592 1AD8                                l4840 1570  
                              l5456 22DA                                l4832 1322  
                              l5448 2504                                l5480 26C2  
                              l5720 225E                                l5392 19D8  
                              l4762 26D8                                l4594 1AE4  
                              l4746 25FE                                l4914 20AA  
                              l4906 208E                                l4922 1DAA  
                              l4842 158A                                l5466 2308  
                              l5474 26AE                                l3954 20DA  
                              l3946 20C8                                l5386 19C8  
                              l5378 19B0                                l4684 25B4  
                              l4764 26E2                                l4596 1B04  
                              l4588 1AC8                                l4932 1E08  
                              l4860 15CC                                l4828 12D0  
                              l5652 1BE8                                l5740 22AE  
                              l4678 11FA                                l4686 25BA  
                              l4790 14E2                                l4774 1474  
                              l4926 1DDC                                l4870 15FA  
                              l4846 1598                                l4942 175A  
                              l3966 20F4                                l3958 20E6  
                              l4864 15DE                                l4960 17B4  
                              l5736 229E                                l5760 1E74  
                              l4786 14C4                                l4698 1840  
                              l4890 204A                                l4874 160C  
                              l4970 17DE                                l4868 15F4  
                              l4972 17EC                                l4964 17C4  
                              l5764 1E80                                l4798 1534  
                              l4894 2058                                l4878 1622  
                              l4966 17CA                                l4974 17F6  
                              l5766 1E86                                l4898 2066  
                              l4978 180E                                STR_1 FFE4  
                              STR_2 FFEA                                STR_3 FFF7  
                              STR_4 FFFC                                STR_5 FFAA  
                              STR_6 FFC0                                STR_7 FFD6  
                              STR_8 FFCC                                STR_9 FFDD  
                              u4120 1EDC                                u4040 1942  
                              u3401 1850                                u3090 1F64  
                              u3330 11AC                                u4050 1978  
                              u3460 149E                                u3381 1832  
                              u3701 174C                                u3551 1562  
                              u3720 1778                                u3800 0B3E  
                              u4280 1E6E                                u4290 1E70  
                              u3571 1580                                u3725 1770  
                              _MODE 0051                                u3790 0B3C  
                              i2l33 28FA                                i2l37 28EA  
                              i2l29 1FFA                                _RBPU 007F8F  
                              _TRMT 007D61                 ??_Deactivate_Buzzer 000F  
                              _main 1E0E                                _font FDCF  
                      ___ftpack@arg 000F                        ___ftpack@exp 0012  
                              fsr0h 000FEA                                fsr1h 000FE2  
                    ??_get_full_ADC 0011                                fsr0l 000FE9  
                              fsr2h 000FDA                                fsr1l 000FE1  
                              indf2 000FDF                                fsr2l 000FD9  
                              _wrap 005D                                _volt 0044  
                   drawFastHLine@hi 001E                     drawFastHLine@lo 001F  
          __end_of_update_LCD_color 0AFA                                pclat 000FFA  
          __end_of_update_LCD_count 10AA                  __size_of_LCD_Reset 0012  
                              prodh 000FF4                                prodl 000FF3  
                              start 0018                     ??_drawFastHLine 001A  
                   ??_drawFastVLine 001A                        ___ftmul@cntr 0024  
                      ___param_bank 000010                        ___ftmul@sign 0025  
                      ___fttol@exp1 0034                    _Flashing_Request 004B  
                      ___fttol@lval 0030                        _Act_Mode_Txt 0064  
                  __end_of_INT0_ISR 28FC                    __end_of_INT1_ISR 28EC  
                  __end_of_INT2_ISR 291A                         _Do_Flashing 225C  
         __end_of_Deactivate_Buzzer 2912                     drawFastVLine@hi 001E  
                   drawFastVLine@lo 001F                      Read_Volt@nStep 0031  
                       _SW_EWLT_Txt 006A                               ?_main 0001  
                   __end_of___awdiv 1D78                     drawCircle@ddF_x 0024  
                             STR_10 FFEF                     drawCircle@ddF_y 0026  
                             STR_11 FFF3                               STR_12 FFFC  
                             STR_13 FFFA                     __end_of___awmod 20B6  
                   __end_of___ftdiv 1904                     __end_of___ftmul 164A  
                             _T0CON 000FD5                     ___awdiv@divisor 0011  
                   __end_of___fttol 1822                               _T2CON 000FCA  
                             _T3CON 000FB1                     ___awdiv@counter 0013  
                   drawCircle@color 0020                               _RCSTA 000FAB  
                             _TMR0H 000FD7                               _TMR0L 000FD6  
                             _TMR3H 000FB3                               _TMR3L 000FB2  
                             _SPBRG 000FAF                               _PORTD 000F83  
                             _TRISA 000F92                               _TRISB 000F93  
                             _TRISC 000F94                               _TRISD 000F95  
                             _TRISE 000F96                               _TXREG 000FAD  
                             _TXSTA 000FAC                               _Count 0049  
                      ?_PED_Control 0043                               _Rcmd1 1338  
                             _Rcmd3 164A                         _SW_NSLT_Txt 006E  
                     drawRect@color 0029                       ___awtoft@sign 001A  
                        _Erase_Star 2624                               _font2 FECE  
             fillCircleHelper@ddF_x 002F               fillCircleHelper@ddF_y 0031  
                 ??_Wait_One_Second 0041                       ___ftpack@sign 0013  
             fillCircleHelper@delta 0029               fillCircleHelper@color 002B  
                    __CFG_BOREN$OFF 000000                               tablat 000FF5  
                             status 000FD8              ??_update_LCD_PED_Count 0042  
                  __end_of_Day_Mode 1C3C                      _Wait_N_Seconds 2698  
                   write_data@data_ 0011                     __initialization 21FA  
                      __end_of_main 1E9E                        __end_of_font FECE  
                  __end_of_Init_ADC 290A                    __end_of_Rcmd2red 25AA  
                        _Night_Mode 1C3C                    __end_of_Set_EWLT 2524  
                  __end_of_Set_NSLT 2494                              ??_main 0044  
                     ___fttol@sign1 002F                       __activetblptr 000002  
             Wait_N_Seconds@seconds 00D7                   __end_of_LCD_Reset 28AA  
                      _SW_EWPED_Txt 006C           ??_TFT_GreenTab_Initialize 001B  
                  ?_update_LCD_misc 0001                              ?_Rcmd1 0001  
                            ?_Rcmd3 0001             __size_of_init_INTERRUPT 0016  
                __size_of_Draw_Star 003A                              _ADCON0 000FC2  
                            _ADCON1 000FC1                              _ADCON2 000FC0  
                            _ADRESH 000FC4                              _ADRESL 000FC3  
                            _CCPR2L 000FBB                PED_Control@direction 00D7  
                  ___awdiv@dividend 000F                    __end_of___awtoft 2624  
                  __end_of___ftpack 1B7E                              i2l2652 1FF0  
                            i2l2648 1FE6                              _OSCCON 000FD3  
                __size_of_Init_UART 0014                              _SPBRGH 000FB0  
                            _SSPBUF 000FC9              __end_of_Wait_N_Seconds 26CE  
                      _SW_NSPED_Txt 0070                  __size_of_Read_Volt 006E  
                  __end_of_delay_ms 2362                              _Set_EW 2524  
                            _Set_NS 2494                    __end_of_fillRect 244C  
                  __end_of_drawChar 1200                    __end_of_drawRect 21FA  
                __size_of_OpenUSART 0070                              ___ftge 1D78  
          __size_of_Activate_Buzzer 0012                              ___wmul 2784  
                         ??___awdiv 0013           __size_of_fillCircleHelper 0138  
                  __end_of_drawtext 1552                           ??___awmod 0039  
                         ??___ftdiv 0021                           ??___ftmul 001D  
                         ??___fttol 002A                              _chkisr 0008  
                            _buffer 00AC                              clear_0 2200  
                            clear_1 220C                    ___awdiv@quotient 0015  
                   ___awmod@divisor 0037                          _Timing_Txt 0080  
        __size_of_Deactivate_Buzzer 0008                     ___awmod@counter 0039  
                      drawtext@size 003E                              _strcpy 26CE  
                            _strlen 25AA               ___ftmul@f3_as_product 0021  
           ??_Initialize_LCD_Screen 0041                __end_of_get_full_ADC 27D2  
                      __pdataCOMRAM 005D  __size_of_Wait_One_Second_With_Beep 0022  
                       Set_EW@color 00CB                        __mediumconst FDCE  
                            tblptrh 000FF7                              tblptrl 000FF6  
                            tblptru 000FF8                         ?_Erase_Star 0001  
                  __end_of_spiwrite 2898                         Set_NS@color 00CB  
                        __accesstop 0080             __end_of__initialization 2252  
                         ?_INT0_ISR 0001                           ?_INT1_ISR 0001  
                         ?_INT2_ISR 0001                          ___ftge@ff1 000F  
                        ___ftge@ff2 0012                     ?_Wait_N_Seconds 0001  
                     ___rparam_used 000001                          ___ftdiv@f1 001B  
                        ___ftdiv@f2 001E                          ___ftdiv@f3 0025  
                        ___awtoft@c 0017                          ___ftmul@f1 0017  
                        ___ftmul@f2 001A                          ___fttol@f1 0026  
                     __end_of_Rcmd1 1448                       __end_of_Rcmd3 173C  
                    __pcstackCOMRAM 0001                   __end_of_Draw_Star 2698  
                      __pidataBANK0 2730                       __end_of_font2 FFAA  
                       ?_Night_Mode 0001                   __end_of_Init_UART 2884  
                    drawPixel@color 0017              __size_of_write_command 0010  
                 __end_of_Read_Volt 2194                           ?_Day_Mode 0001  
        fillCircleHelper@cornername 0027                             ??_Rcmd1 001B  
                           ??_Rcmd3 001B                  __size_of_drawPixel 0030  
                 __end_of_OpenUSART 2126                __size_of_PED_Control 005A  
              Read_Volt@ADC_Channel 0030                          __pbssBANK0 00AA  
                         ?_Init_ADC 0001                           ?_Rcmd2red 0001  
                        ??_INT0_ISR 0001                          ??_INT1_ISR 0001  
         __size_of_Wait_Half_Second 001A                          ??_INT2_ISR 0001  
                   spiwrite@spidata 0010                           ?_Set_EWLT 0001  
                         ?_Set_NSLT 0001                   ?_update_LCD_color 0041  
                 ?_update_LCD_count 0041                             ?_Set_EW 0001  
                           ?_Set_NS 0001                  ??_update_LCD_color 0042  
                ??_update_LCD_count 0042                             ?___ftge 000F  
                           ?___wmul 000F                             ?_chkisr 0001  
               __size_of_Erase_Star 003A              __size_of_setAddrWindow 004E  
                           _CCP2CON 000FBA                        ?_Do_Flashing 0001  
         update_LCD_PED_Count@count 0041                           ?___awtoft 0017  
                         ?___ftpack 000F                     _Wait_One_Second 2810  
                        _fillCircle 2362                             ?_strcpy 000F  
                           ?_strlen 000F                   ??_Activate_Buzzer 000F  
                        _fillScreen 27F4                          _drawCircle 0D72  
                        ??_Day_Mode 0044                      _init_INTERRUPT 2844  
                         ?_delay_ms 0015                           ?_fillRect 0021  
         update_LCD_count@direction 0042                           ?_drawChar 002C  
                           _SSPCON1 000FC6                           ?_drawRect 0021  
                           _SSPSTAT 000FC7               __end_of_fillRectangle 19E0  
                         ?_drawtext 0037                             _SW_EWLT 0054  
                        ??_Init_ADC 000F                             _SW_NSLT 0056  
                        ??_Rcmd2red 0012                 __size_of_Night_Mode 00A6  
                     _write_command 28CC                          ??_Set_EWLT 0044  
                        ??_Set_NSLT 0044                             __Hparam 0000  
                           __Lparam 0000                     __size_of_Set_EW 0048  
                   __size_of_Set_NS 0048               __end_of_drawFastHLine 1F26  
                 __end_of_drawPixel 2730               __end_of_drawFastVLine 1FAE  
                  _fillCircleHelper 1200                     __size_of___ftge 0096  
                           ___awdiv 1CE2                             ___awmod 2034  
                           ___ftdiv 1822                     __size_of___wmul 0028  
                           ___ftmul 1552                             ___fttol 173C  
             __size_of_get_full_ADC 0026                     __size_of_chkisr 202C  
                         ?_spiwrite 0001                             __pcinit 21FA  
                        ??___awtoft 001A                          ??___ftpack 0014  
                           __ramtop 1000                             __ptext0 1E0E  
                           __ptext1 2844                             __ptext2 1C3C  
                           __ptext3 001C                             __ptext4 27F4  
                           __ptext5 1904                             __ptext6 2194  
                           __ptext7 1E9E                             __ptext8 275A  
                           __ptext9 164A            _Light_Sensor_Voltage_Txt 0096  
            __end_of_init_INTERRUPT 285A                           _T0CONbits 000FD5  
                   __size_of_strcpy 0032                     __size_of_strlen 003E  
                         _T3CONbits 000FB1                    ___awmod@dividend 0035  
                        ??_delay_ms 0017                       drawtext@_text 0038  
                     drawtext@color 003A                          ??_fillRect 0026  
                        ??_drawChar 0033                           _LCD_Reset 2898  
                         _INT0_Flag 004D                           _INT1_Flag 004E  
                        ??_drawRect 002B                           _INT2_Flag 004F  
                     _setAddrWindow 23B4                      __pintcode_body 1FAE  
                drawFastHLine@color 0018                          delay_ms@ms 0015  
              end_of_initialization 2252                          ??_drawtext 003F  
                    ?_write_command 0001                       __Lmediumconst FDCE  
                           int_func 1FAE                           _PED_Count 0053  
                      _get_full_ADC 27AC                        PED_Control@i 00D8  
                         _EW_PED_SW 004A       __size_of_update_LCD_PED_Count 00D8  
               update_LCD_misc@volt 00D4             __end_of_Wait_One_Second 282A  
                         _RCSTAbits 000FAB                             postdec1 000FE5  
                           postinc0 000FEE                             postinc2 000FDE  
                        ??_spiwrite 000F                             strlen@s 000F  
                   fillCircle@color 003F                         ?_fillCircle 0039  
                         _PORTAbits 000F80                    drawtext@cursor_x 00D1  
                  drawtext@cursor_y 00D0                           _PORTBbits 000F81  
                         _PORTCbits 000F82                           _PORTDbits 000F83  
                         _PORTEbits 000F84                     ?_init_INTERRUPT 0001  
                       ?_fillScreen 0022                           _NS_PED_SW 0052  
                       ?_drawCircle 001A      __size_of_Initialize_LCD_Screen 077C  
                        drawChar@bg 0030       __end_of_Initialize_LCD_Screen 0798  
                         _TRISCbits 000F94                        ??_Erase_Star 0041  
                    ?_setAddrWindow 0012                          ?_LCD_Reset 0001  
                  ??_Wait_N_Seconds 0043                    drawtext@textsize 00CC  
          __size_of_update_LCD_misc 0278                          drawPixel@x 0019  
                        drawPixel@y 0016                    _Wait_Half_Second 282A  
                       ___ftdiv@exp 0028                           _TXSTAbits 000FAC  
                PED_Control@Num_Sec 0043                  get_full_ADC@result 0013  
                 __size_of_INT0_ISR 0010                   __size_of_INT1_ISR 0010  
                 __size_of_INT2_ISR 0008                         ___ftmul@exp 0020  
                    __end_of_Set_EW 256C                      __end_of_Set_NS 24DC  
                      _Light_Sensor 0050                      __end_of___ftge 1E0E  
                     Read_Volt@volt 002D                      __end_of___wmul 27AC  
                __end_of_Erase_Star 265E                       delay_ms@count 0019  
                        _write_data 28BC                       __pidataCOMRAM 285A  
                    __end_of_chkisr 2034                           _Draw_Star 265E  
                      ??_Night_Mode 0044            ?_TFT_GreenTab_Initialize 0001  
                        drawtext@bg 003C                __size_of_Do_Flashing 005A  
                    __end_of_strcpy 2700                      __end_of_strlen 25E8  
               start_initialization 21FA                           _Init_UART 2870  
                 __size_of_Day_Mode 00BE                           _Read_Volt 2126  
                   ??_write_command 0011                           _OpenUSART 20B6  
               __size_of_fillCircle 0052                    __CFG_OSC$INTIO67 000000  
                 __size_of_Init_ADC 000E                  __end_of_Night_Mode 1CE2  
                 __size_of_Rcmd2red 003E                 __size_of_fillScreen 001C  
                   Wait_N_Seconds@I 00D8                 __size_of_drawCircle 01AE  
                          ??_Set_EW 0044                            ??_Set_NS 0044  
                 __size_of_Set_EWLT 0048                     _Activate_Buzzer 28AA  
                 __size_of_Set_NSLT 0048                    ?_Wait_One_Second 0001  
                          ??___ftge 0015                            ??___wmul 0013  
                          ??_chkisr 0001                         __pdataBANK0 0080  
                        ?_Draw_Star 0001                     setAddrWindow@x0 0015  
                   setAddrWindow@x1 0013                     setAddrWindow@y0 0012  
                   setAddrWindow@y1 0014                            ??_strcpy 0013  
                          ??_strlen 0011                        _PED_EW_Count 00A4  
         __size_of_update_LCD_color 0362           __size_of_update_LCD_count 018A  
                 __size_of___awtoft 003C                   __size_of___ftpack 00C6  
                       __pbssCOMRAM 0044                       ??_PED_Control 0044  
                        ?_Init_UART 0001                     ??_setAddrWindow 0015  
                     __pcstackBANK0 00CB                        _PED_NS_Count 00A7  
                        ?_Read_Volt 002A                         ??_LCD_Reset 001B  
          __end_of_fillCircleHelper 1338                   __size_of_delay_ms 0052  
        ?_Wait_One_Second_With_Beep 0001                   __size_of_fillRect 004A  
                 __size_of_drawChar 0156                          ?_OpenUSART 000F  
                 __size_of_drawRect 0066                   __size_of_drawtext 010A  
                 ??_update_LCD_misc 0041                           __pintcode 0008  
   __end_of_TFT_GreenTab_Initialize 2784                       __pmediumconst FDCE  
                          ?___awdiv 000F                            ?___awmod 0035  
                          ?___ftdiv 001B                            ?___ftmul 0017  
                          ?___fttol 0026                           __tft_type 0058  
                         _direction 005B                  drawFastVLine@color 0018  
                       ?_write_data 0001                           _drawPixel 2700  
                 __size_of_spiwrite 0014                      __size_of_Rcmd1 0110  
                    __size_of_Rcmd3 00F2   __end_of_Wait_One_Second_With_Beep 27F4  
               __end_of_PED_Control 2310             __end_of_Activate_Buzzer 28BC  
                          _INT0_ISR 28EC                            _INT1_ISR 28DC  
                          _INT2_ISR 2912                      ___wmul@product 0013  
                          _PIE1bits 000F9D                            _PIR1bits 000F9E  
                          _PIR2bits 000FA1                            _EW_Count 005E  
                  ??_init_INTERRUPT 000F                           fillRect@h 0023  
                         fillRect@i 002A                           fillRect@w 0022  
                         fillRect@x 0029                           fillRect@y 0021  
                       ??_Draw_Star 0041                           drawChar@c 002D  
                         drawChar@i 0036                           drawChar@j 0035  
                      ??_fillCircle 0041                           drawChar@x 0034  
                         drawChar@y 002C                          ?_drawPixel 0016  
            __size_of_fillRectangle 00DC                            _NS_Count 00A1  
                        _ADCON0bits 000FC2            __end_of_Wait_Half_Second 2844  
                 ___wmul@multiplier 000F                        ??_fillScreen 0024  
                         drawRect@h 0027                           drawRect@w 0025  
                         drawRect@x 0021                           drawRect@y 0023  
                     _FlashingR_Txt 0066                       _FlashingS_Txt 0068  
                      ??_drawCircle 0022        __end_of_update_LCD_PED_Count 1AB8  
                          _SW_EWPED 0055               update_LCD_color@color 0041  
                          _Day_Mode 1B7E                            _SW_NSPED 0057  
         update_LCD_color@direction 0042                         ??_Init_UART 0012  
                       ??_Read_Volt 002D              __size_of_drawFastHLine 0088  
                       _INTCON2bits 000FF1               _Light_Sensor_Mode_Txt 0061  
                       _INTCON3bits 000FF0                           copy_data0 2226  
                         copy_data1 2246                           drawtext@i 00CE  
            __size_of_drawFastVLine 0088                           drawtext@x 00CB  
                         drawtext@y 0037                            _Init_ADC 28FC  
                 write_command@cmd_ 0011                         ??_OpenUSART 0011  
                          _Rcmd2red 256C                 __size_of_write_data 0010  
                   OpenUSART@config 0011                            _Set_EWLT 24DC  
                __end_of_fillCircle 23B4                            _Set_NSLT 244C  
                          __Hrparam 0000                  __end_of_fillScreen 2810  
             update_LCD_count@count 0041                            __Lrparam 0000  
                __end_of_drawCircle 0F20                    __size_of___awdiv 0096  
                  __size_of___awmod 0082                    __size_of___ftdiv 00E2  
                  __size_of___ftmul 00F8                    __size_of___fttol 00E6  
                          ___awtoft 25E8                            ___ftpack 1AB8  
                  _update_LCD_color 0798                    _update_LCD_count 0F20  
                       _PED_Control 22B6                            _delay_ms 2310  
                          __ptext10 256C                            __ptext11 1338  
                          __ptext20 0F20                            __ptext12 2898  
                          __ptext21 2810                            __ptext13 2310  
                          __ptext30 22B6                            __ptext22 244C  
                          __ptext14 2870                            __ptext31 19E0  
                          __ptext23 2494                            __ptext15 20B6  
                          __ptext40 27AC                            __ptext32 1CE2  
                          __ptext24 24DC                            __ptext16 28FC  
                          __ptext41 1822                            __ptext33 27D2  
                          __ptext25 2524                            __ptext17 225C  
                          __ptext50 10AA                            __ptext42 25E8  
                          __ptext34 0AFA                            __ptext26 0798  
                          __ptext18 1B7E                            __ptext51 2402  
                          __ptext43 1AB8                            __ptext35 173C  
                          __ptext27 2362                            __ptext19 2698  
                          __ptext60 28AA                            __ptext52 1F26  
                          __ptext44 282A                            __ptext36 1552  
                          __ptext28 1200                            __ptext53 2700  
                          __ptext45 2624                            __ptext37 1D78  
                          __ptext29 0D72                            __ptext62 2912  
                          __ptext54 23B4                            __ptext46 265E  
                          __ptext38 2034                            __ptext63 28DC  
                          __ptext55 28BC                            __ptext47 26CE  
                          __ptext39 2126                            __ptext64 28EC  
                          __ptext56 28CC                            __ptext48 1448  
                          __ptext57 2884                            __ptext49 25AA  
                          __ptext58 2784                            __ptext59 290A  
                          _fillRect 2402                            _drawChar 10AA  
             _Initialize_LCD_Screen 001C                            _drawRect 2194  
  __size_of_TFT_GreenTab_Initialize 002A                            _colstart 0059  
                          _drawtext 1448                          strcpy@from 0011  
                     _fillRectangle 1904                    ?_Activate_Buzzer 0001  
                     __size_of_main 0090                     fillRectangle@hi 001F  
                   fillRectangle@lo 0020                       _drawFastHLine 1E9E  
                     _drawFastVLine 1F26                       ??_Do_Flashing 0044  
                          _spiwrite 2884                         ??_drawPixel 0019  
                          _rowstart 005C                  fillCircleHelper@x0 0021  
                fillCircleHelper@y0 0023                          _INTCONbits 000FF2  
                    OpenUSART@spbrg 000F                       Set_EWLT@color 00CB  
                        _EWLT_Count 009B                   ?_fillCircleHelper 0021  
                         spiwrite@x 000F         ??_Wait_One_Second_With_Beep 0041  
                          intlevel2 0000                     _update_LCD_misc 0AFA  
                    ?_fillRectangle 0016                  ??_fillCircleHelper 002D  
             __end_of_write_command 28DC                     fillScreen@color 0022  
              update_LCD_misc@nStep 00D2                _update_LCD_PED_Count 19E0  
           __size_of_Wait_N_Seconds 0036                        fillCircle@x0 0039  
                      fillCircle@y0 003B                      ?_drawFastHLine 0016  
                    fillRectangle@h 0018                      fillRectangle@w 0017  
                    fillRectangle@x 0021                      fillRectangle@y 0016  
                    ?_drawFastVLine 0016                   fillCircleHelper@f 0033  
                 fillCircleHelper@r 0025                   fillCircleHelper@x 0035  
                 fillCircleHelper@y 0037                        ??_write_data 0011  
                     fillRect@color 0024            __size_of_Wait_One_Second 001A  
                          strcpy@cp 0013                            strlen@cp 0013  
                          strcpy@to 000F                 __end_of_Do_Flashing 22B6  
                     Set_NSLT@color 00CB                          _NSLT_Count 009E  
            ?_Initialize_LCD_Screen 0001                         fillCircle@r 003D  
             __end_of_setAddrWindow 2402                  fillRectangle@color 0019  
                     drawChar@color 002E                  __end_of_write_data 28CC  
                      drawChar@line 0033                       ?_get_full_ADC 000F  
                      drawChar@size 0032               ?_update_LCD_PED_Count 0041  
